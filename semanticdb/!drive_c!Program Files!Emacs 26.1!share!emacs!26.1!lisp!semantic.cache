;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2861 2959])
            ("defvar-local" code nil nil [2961 3073])
            ("global-hl-line-overlays" variable nil nil [3075 3277])
            ("hl-line" customgroup (:user-visible-flag t) nil [3279 3373])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3375 3524])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3526 3955])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3957 4393])
            ("global-hl-line-sticky-flag" variable nil nil [4395 4764])
            ("hl-line-range-function" variable nil nil [4766 5153])
            ("hl-line-overlay-buffer" variable nil nil [5155 5257])
            ("define-minor-mode" code nil nil [5274 6700])
            ("hl-line-make-overlay" function nil nil [6702 6884])
            ("hl-line-highlight" function nil nil [6886 7324])
            ("hl-line-unhighlight" function nil nil [7326 7474])
            ("hl-line-maybe-unhighlight" function nil nil [7476 8181])
            ("define-minor-mode" code nil nil [8198 9352])
            ("global-hl-line-highlight" function nil nil [9354 9954])
            ("global-hl-line-highlight-all" function nil nil [9956 10204])
            ("global-hl-line-unhighlight" function nil nil [10206 10382])
            ("global-hl-line-maybe-unhighlight" function nil nil [10384 11051])
            ("global-hl-line-unhighlight-all" function nil nil [11053 11347])
            ("hl-line-move" function (:arguments ("overlay")) nil [11349 11891])
            ("hl-line-unload-function" function nil nil [11893 12155])
            ("hl-line" package nil nil [12157 12175]))          
      :file "hl-line.el"
      :pointmax 12202
      :fsize 12201
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1098 2954])
            ("put" code nil nil [2970 3019])
            ("make-variable-buffer-local" code nil nil [3020 3068])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3070 3270])
            ("font-lock-major-mode" variable nil nil [3337 3366])
            ("define-minor-mode" code nil nil [3368 6246])
            ("font-lock-change-mode" function nil nil [6341 6395])
            ("font-lock-defontify" function nil nil [6397 6831])
            ("font-lock-set-defaults" variable nil nil [6833 6864])
            ("font-lock-default-function" function (:arguments ("mode")) nil [6865 7945])
            ("turn-on-font-lock" function nil nil [7947 8088])
            ("font-lock-global-modes" variable (:default-value t) nil [11013 11858])
            ("turn-on-font-lock-if-desired" function nil nil [11860 12174])
            ("define-globalized-minor-mode" code nil nil [12176 12487])
            ("font-core" package nil nil [12524 12544]))          
      :file "font-core.el"
      :pointmax 12573
      :fsize 12572
      :lastmodtime '(23525 29508 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("shell-command-dont-erase-buffer" variable nil nil [1268 1938])
            ("shell-command-saved-pos" variable nil nil [1940 2294])
            ("idle-update-delay" variable (:default-value 0.5) nil [2296 2593])
            ("killing" customgroup (:user-visible-flag t) nil [2595 2669])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2671 2773])
            ("next-error" customgroup (:user-visible-flag t) nil [2810 2911])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [2913 3044])
            ("next-error-highlight" variable (:default-value 0.5) nil [3046 3801])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3803 4496])
            ("next-error-recenter" variable nil nil [4498 4860])
            ("next-error-hook" variable nil nil [4862 5003])
            ("next-error-highlight-timer" variable nil nil [5005 5044])
            ("next-error-overlay-arrow-position" variable nil nil [5046 5092])
            ("put" code nil nil [5093 5171])
            ("add-to-list" code nil nil [5172 5249])
            ("next-error-last-buffer" variable nil nil [5251 5478])
            ("next-error-function" variable nil nil [5480 5938])
            ("make-variable-buffer-local" code nil nil [5939 5988])
            ("next-error-move-function" variable nil nil [5990 6303])
            ("make-variable-buffer-local" code nil nil [6304 6358])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6360 7442])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7444 9726])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [9728 11497])
            ("next-error-internal" function nil nil [11499 11920])
            ("defalias" code nil nil [11922 11961])
            ("defalias" code nil nil [11962 11996])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11998 12315])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12317 12585])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12587 13039])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13041 13419])
            ("next-error-follow-last-line" variable nil nil [13490 13530])
            ("define-minor-mode" code nil nil [13532 14240])
            ("next-error-follow-mode-post-command-hook" function nil nil [14356 14689])
            ("fundamental-mode" function (:user-visible-flag t) nil [14698 14907])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [14985 15469])
            ("put" code nil nil [15471 15511])
            ("define-derived-mode" code nil nil [15512 15657])
            ("self-insert-uses-region-functions" variable nil nil [15690 16550])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [16552 16685])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [16687 19491])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [19493 19841])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19843 20620])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20622 21423])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21425 22138])
            ("defalias" code nil nil [22140 22182])
            ("delete-blank-lines" function (:user-visible-flag t) nil [22201 23628])
            ("delete-trailing-lines" variable (:default-value t) nil [23630 23916])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [23918 24140])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [24142 26084])
            ("newline-and-indent" function (:user-visible-flag t) nil [26086 26519])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [26521 27747])
            ("read-quoted-char-radix" variable (:default-value 8) nil [27749 27970])
            ("read-quoted-char" function (:arguments ("prompt")) nil [27972 30821])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30823 32852])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32854 33047])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33049 33248])
            ("back-to-indentation" function (:user-visible-flag t) nil [33250 33540])
            ("fixup-whitespace" function (:user-visible-flag t) nil [33542 33885])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [33887 34325])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [34327 34587])
            ("cycle-spacing--context" variable nil nil [34589 34844])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [34846 37295])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [37298 38221])
            ("end-of-buffer" function (:arguments ("arg")) nil [38223 39470])
            ("delete-active-region" variable (:default-value t) nil [39472 40009])
            ("region-extract-function" variable (:default-value (lambda (method) (when (region-beginning) (cond ((eq method (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq method (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method)))))) nil [40011 40833])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [40835 41181])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [41183 42820])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [42822 43965])
            ("mark-whole-buffer" function nil nil [43967 44526])
            ("goto-line" function (:arguments ("line" "buffer")) nil [44570 46847])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [46849 47531])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [47533 48326])
            ("count-words--buffer-message" function nil nil [48328 48481])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [48483 48808])
            ("define-obsolete-function-alias" code nil nil [48810 48889])
            ("what-line" function (:user-visible-flag t) nil [48891 49242])
            ("count-lines" function (:arguments ("start" "end")) nil [49244 50081])
            ("line-number-at-pos" function (:arguments ("pos" "absolute")) nil [50083 50750])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [50752 55255])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [55320 55635])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [55637 56160])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [56162 56619])
            ("minibuffer-completing-symbol" variable nil nil [56621 56724])
            ("make-obsolete-variable" code nil nil [56725 56795])
            ("minibuffer-default" variable nil nil [56797 56990])
            ("eval-expression-print-level" variable (:default-value 4) nil [56992 57222])
            ("eval-expression-print-length" variable (:default-value 12) nil [57224 57457])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [57459 57668])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [57670 57919])
            ("eval-expression-print-format" function (:arguments ("value")) nil [57921 58608])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [58610 58724])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [58726 59410])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [59412 60029])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [60159 62681])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [62683 63610])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63612 65280])
            ("extended-command-history" variable nil nil [65283 65320])
            ("execute-extended-command--last-typed" variable nil nil [65321 65370])
            ("read-extended-command" function nil nil [65372 67556])
            ("suggest-key-bindings" variable (:default-value t) nil [67558 67924])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [67926 68091])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [68093 68555])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [68557 69467])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [69469 73272])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [73274 75883])
            ("minibuffer-history" variable nil nil [75886 76139])
            ("minibuffer-history-sexp-flag" variable nil nil [76140 76455])
            ("setq" code nil nil [76456 76510])
            ("setq" code nil nil [76511 76549])
            ("minibuffer-history-search-history" variable nil nil [76575 76621])
            ("minibuffer-text-before-history" variable nil nil [76623 76823])
            ("add-hook" code nil nil [76825 76889])
            ("minibuffer-history-initialize" function nil nil [76891 76975])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [76977 77192])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [77194 77584])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77586 80430])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80432 81486])
            ("minibuffer-temporary-goal-position" variable nil nil [81488 81535])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [81537 82177])
            ("minibuffer-default-add-done" variable nil nil [82179 82502])
            ("make-variable-buffer-local" code nil nil [82504 82561])
            ("minibuffer-default-add-completions" function nil nil [82563 83017])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [83019 85307])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85309 85560])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85562 85820])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85822 87413])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87415 89454])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [89456 90112])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90114 90399])
            ("minibuffer-prompt-width" function nil nil [90458 90747])
            ("add-hook" code nil nil [90780 90847])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [90849 90900])
            ("make-variable-buffer-local" code nil nil [90901 90973])
            ("minibuffer-history-isearch-setup" function nil nil [90975 91615])
            ("minibuffer-history-isearch-end" function nil nil [91617 91847])
            ("minibuffer-history-isearch-search" function nil nil [91849 93754])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [93756 95153])
            ("minibuffer-history-isearch-wrap" function nil nil [95155 95772])
            ("minibuffer-history-isearch-push-state" function nil nil [95774 96105])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [96107 96319])
            ("define-obsolete-function-alias" code nil nil [96397 96459])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [96461 96704])
            ("undo-in-region" variable nil nil [96706 96810])
            ("undo-no-redo" variable nil nil [96812 96887])
            ("pending-undo-list" variable nil nil [96889 97040])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97042 101663])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [101665 101946])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [101948 102210])
            ("undo-in-progress" variable nil nil [102212 102343])
            ("undo-more" function (:arguments ("n")) nil [102345 103040])
            ("primitive-undo" function (:arguments ("n" "list")) nil [103042 109676])
            ("undo-copy-list" function (:arguments ("list")) nil [109701 109799])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [109801 109910])
            ("undo-start" function (:arguments ("beg" "end")) nil [109912 110500])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [113498 115784])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [115786 116825])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [116827 117369])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [117371 118136])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [119027 119332])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [119334 119806])
            ("undo-delta" function (:arguments ("undo-elt")) nil [119977 120310])
            ("defvar-local" code nil nil [120506 121227])
            ("undo-auto-current-boundary-timer" variable nil nil [121229 121404])
            ("undo-auto--this-command-amalgamating" variable nil nil [121406 121602])
            ("undo-auto--needs-boundary-p" function nil nil [121604 121744])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [121746 122050])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [122052 122680])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [122682 123351])
            ("undo-auto--boundary-timer" function nil nil [123353 123530])
            ("undo-auto--boundary-ensure-timer" function nil nil [123532 123785])
            ("undo-auto--undoably-changed-buffers" variable nil nil [123787 124024])
            ("undo-auto--add-boundary" function nil nil [124026 124305])
            ("undo-auto-amalgamate" function nil nil [124307 125636])
            ("undo-auto--undoable-change" function nil nil [125638 125829])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [125860 127449])
            ("undo-ask-before-discard" variable nil nil [127452 128218])
            ("undo-extra-outer-limit" variable nil nil [128220 128496])
            ("make-variable-buffer-local" code nil nil [128497 128549])
            ("setq" code nil nil [128834 128893])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [128894 130685])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [130688 132077])
            ("shell-command-history" variable nil nil [132079 132269])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [132271 132385])
            ("shell-command-default-error-buffer" variable nil nil [132387 132702])
            ("declare-function" code nil nil [132704 132770])
            ("declare-function" code nil nil [132771 132857])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [132859 133563])
            ("declare-function" code nil nil [133565 133616])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [133618 133863])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [133865 134494])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [134496 135749])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [135751 136077])
            ("shell-command--save-pos-or-erase" function nil nil [136079 136810])
            ("shell-command--set-point-after-cmd" function (:arguments ("buffer")) nil [136812 138057])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [138059 139360])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [139362 148190])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [148192 150588])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [150773 151060])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [151062 160637])
            ("shell-command-to-string" function (:arguments ("command")) nil [160639 160899])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [160901 162351])
            ("process-file-side-effects" variable (:default-value t) nil [162353 162775])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [162777 163662])
            ("tabulated-list-format" variable nil nil [163684 163714])
            ("tabulated-list-entries" variable nil nil [163715 163746])
            ("tabulated-list-sort-key" variable nil nil [163747 163779])
            ("declare-function" code nil nil [163780 163846])
            ("declare-function" code nil nil [163847 163953])
            ("process-menu-query-only" variable nil nil [163955 163991])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [163993 164123])
            ("define-derived-mode" code nil nil [164125 164617])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [164619 164924])
            ("list-processes--refresh" function nil nil [164926 166673])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [166675 166772])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [166774 167737])
            ("setq" code nil nil [167762 167801])
            ("setq" code nil nil [167802 167838])
            ("internal-echo-keystrokes-prefix" function nil nil [167840 168445])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [168447 168653])
            ("prefix-command-update" function nil nil [168655 168822])
            ("prefix-command-preserve-state-hook" variable nil nil [168824 168936])
            ("prefix-command-preserve-state" function nil nil [168938 169431])
            ("reset-this-command-lengths" function nil nil [169433 169536])
            ("add-hook" code nil nil [169632 169728])
            ("universal-argument--description" function nil nil [169729 170188])
            ("add-hook" code nil nil [170190 170277])
            ("universal-argument--preserve" function nil nil [170278 170356])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [170358 171974])
            ("universal-argument--mode" function nil nil [171976 172086])
            ("universal-argument" function (:user-visible-flag t) nil [172088 172831])
            ("universal-argument-more" function (:arguments ("arg")) nil [172833 173305])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [173307 173681])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [173683 174451])
            ("filter-buffer-substring-functions" variable nil nil [174455 174632])
            ("make-obsolete-variable" code nil nil [174633 174757])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [174759 175165])
            ("buffer-substring-filters" variable nil nil [175167 175648])
            ("make-obsolete-variable" code nil nil [175649 175764])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [175766 176622])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [176624 177543])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [177587 178138])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [178140 179579])
            ("kill-ring" variable nil nil [179620 180075])
            ("kill-ring-max" variable (:default-value 60) nil [180077 180212])
            ("kill-ring-yank-pointer" variable nil nil [180214 180315])
            ("save-interprogram-paste-before-kill" variable nil nil [180317 180714])
            ("kill-do-not-save-duplicates" variable nil nil [180716 180945])
            ("kill-new" function (:arguments ("string" "replace")) nil [180947 182972])
            ("kill-append-merge-undo" variable nil nil [183153 183423])
            ("kill-append" function (:arguments ("string" "before-p")) nil [183425 184289])
            ("yank-pop-change-selection" variable nil nil [184291 184639])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [184641 186299])
            ("kill-read-only-ok" variable nil nil [186350 186486])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [186488 189364])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [189558 190691])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190693 191982])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [191984 193566])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [193568 194388])
            ("bidi-directional-controls-chars" variable (:default-value "\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [194390 194535])
            ("bidi-directional-non-controls-chars" variable (:default-value "^\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [194537 194687])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [194689 195795])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [195797 196898])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [196900 198826])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [198828 200131])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [200147 200972])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [201045 201508])
            ("yank-window-start" variable nil nil [201510 201540])
            ("yank-undo-function" variable nil nil [201541 201872])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201874 203590])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203592 206332])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206334 206524])
            ("kill-forward-chars" function (:arguments ("arg")) nil [206589 206734])
            ("kill-backward-chars" function (:arguments ("arg")) nil [206783 206929])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [206931 207406])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [207408 208760])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [208762 209379])
            ("kill-whole-line" variable nil nil [209416 209561])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209563 211777])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211779 213408])
            ("forward-visible-line" function (:arguments ("arg")) nil [213410 215900])
            ("end-of-visible-line" function nil nil [215902 216668])
            ("kill-current-buffer" function (:user-visible-flag t) nil [216670 217175])
            ("insert-buffer" function (:arguments ("buffer")) nil [217179 217732])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [217734 218634])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [218636 219178])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219180 219749])
            ("define-error" code nil nil [219752 219821])
            ("activate-mark-hook" variable nil nil [219823 220012])
            ("deactivate-mark-hook" variable nil nil [220014 220092])
            ("mark" function (:arguments ("force")) nil [220094 220718])
            ("deactivate-mark" function (:arguments ("force")) nil [220753 222843])
            ("activate-mark" function (:arguments ("no-tmm")) nil [222845 223236])
            ("set-mark" function (:arguments ("pos")) nil [223238 224462])
            ("save-mark-and-excursion--save" function nil nil [224464 224613])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [224615 225565])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [225567 226022])
            ("use-empty-active-region" variable nil nil [226024 226523])
            ("use-region-p" function nil nil [226525 227131])
            ("region-active-p" function nil nil [227133 227822])
            ("region-bounds" function nil nil [227824 228013])
            ("region-noncontiguous-p" function nil nil [228015 228238])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [228240 228346])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [228348 229219])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [229221 230057])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [230059 230375])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [230377 230842])
            ("add-function" code nil nil [230844 230940])
            ("defvar-local" code nil nil [230943 231042])
            ("put" code nil nil [231043 231078])
            ("mark-ring-max" variable (:default-value 16) nil [231080 231225])
            ("global-mark-ring" variable nil nil [231227 231311])
            ("global-mark-ring-max" variable (:default-value 16) nil [231313 231474])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [231476 231789])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [231791 232202])
            ("set-mark-command-repeat-pop" variable nil nil [232204 232663])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [232665 234984])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [234986 236540])
            ("pop-mark" function nil nil [236542 236961])
            ("define-obsolete-function-alias" code nil nil [236963 237052])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237053 237948])
            ("shift-select-mode" variable (:default-value t) nil [237950 238522])
            ("handle-shift-selection" function nil nil [238524 239849])
            ("define-minor-mode" code nil nil [239851 241211])
            ("widen-automatically" variable (:default-value t) nil [241213 241547])
            ("non-essential" variable nil nil [241549 241947])
            ("pop-global-mark" function (:user-visible-flag t) nil [241949 242764])
            ("next-line-add-newlines" variable nil nil [242767 242941])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [242943 245140])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [245142 246848])
            ("track-eol" variable nil nil [246850 247188])
            ("goal-column" variable nil nil [247190 247457])
            ("make-variable-buffer-local" code nil nil [247458 247499])
            ("temporary-goal-column" variable nil nil [247501 248018])
            ("last--line-number-width" variable nil nil [248020 248151])
            ("line-move-ignore-invisible" variable (:default-value t) nil [248153 248804])
            ("line-move-visual" variable (:default-value t) nil [248806 249382])
            ("declare-function" code nil nil [249419 249479])
            ("default-font-height" function nil nil [249481 250115])
            ("default-font-width" function nil nil [250117 250838])
            ("default-line-height" function nil nil [250840 251302])
            ("window-screen-lines" function nil nil [251304 251874])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [251921 255695])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [256019 257976])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [258124 261606])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [261760 266433])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [266435 269936])
            ("line-move-to-column" function (:arguments ("col")) nil [269938 271520])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271522 272877])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272879 274502])
            ("put" code nil nil [274632 274666])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274668 275701])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [275769 276333])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276335 277024])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277026 278448])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278450 278819])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278821 279200])
            ("visual-line" customgroup (:user-visible-flag t) nil [279202 279303])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [279305 279793])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [279795 280982])
            ("visual-line--saved-state" variable nil nil [280984 281021])
            ("define-minor-mode" code nil nil [281023 282849])
            ("turn-on-visual-line-mode" function nil nil [282851 282909])
            ("define-globalized-minor-mode" code nil nil [282911 283009])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283013 283527])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283529 283973])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283975 285729])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [285731 286338])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [286489 287746])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [287748 288752])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288755 289411])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [289413 290165])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290167 290379])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290381 290572])
            ("current-word" function (:arguments ("strict" "really-word")) nil [290574 292182])
            ("fill-prefix" variable nil nil [292185 292351])
            ("make-variable-buffer-local" code nil nil [292352 292393])
            ("put" code nil nil [292394 292451])
            ("auto-fill-inhibit-regexp" variable nil nil [292453 292619])
            ("do-auto-fill" function nil nil [292621 295977])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [295979 296305])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [296307 297414])
            ("internal-auto-fill" function nil nil [297416 297670])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [297672 297828])
            ("put" code nil nil [297830 297892])
            ("put" code nil nil [298066 298118])
            ("define-minor-mode" code nil nil [298120 299026])
            ("auto-fill-function" function nil nil [299093 299200])
            ("turn-on-auto-fill" function nil nil [299202 299295])
            ("turn-off-auto-fill" function nil nil [299297 299393])
            ("custom-add-option" code nil nil [299395 299449])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299451 300289])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300292 301082])
            ("defvaralias" code nil nil [301084 301142])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301144 301924])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301926 302470])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [302472 302589])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [302590 302717])
            ("define-minor-mode" code nil nil [302719 303452])
            ("define-minor-mode" code nil nil [303454 304382])
            ("define-minor-mode" code nil nil [304384 304860])
            ("define-minor-mode" code nil nil [304862 305166])
            ("define-minor-mode" code nil nil [305168 305476])
            ("define-minor-mode" code nil nil [305478 306474])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [306477 306608])
            ("blink-matching-paren" variable (:default-value t) nil [306610 307208])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [307210 307626])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [307628 307953])
            ("blink-matching-delay" variable (:default-value 1) nil [307955 308091])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [308093 308361])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [308363 309348])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [309350 309716])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [309718 309928])
            ("blink-matching-open" function (:user-visible-flag t) nil [309930 314494])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [314496 314685])
            ("blink-paren-post-self-insert-function" function nil nil [314687 315334])
            ("put" code nil nil [315336 315394])
            ("add-hook" code nil nil [315396 315775])
            ("keyboard-quit" function (:user-visible-flag t) nil [315962 316680])
            ("buffer-quit-function" variable nil nil [316682 316932])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [316934 317760])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [317762 318157])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [318161 318678])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [318680 320224])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [320226 320551])
            ("rfc822-goto-eoh" function nil nil [320553 320957])
            ("mail-encode-mml" variable nil nil [320999 321138])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [321140 323834])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [323836 324227])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324229 324617])
            ("set-variable-value-history" variable nil nil [324621 324806])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [324808 327904])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-current-buffer)) map)) nil [327959 328595])
            ("put" code nil nil [328663 328711])
            ("completion-reference-buffer" variable nil nil [328713 328942])
            ("completion-no-auto-exit" variable nil nil [328944 329125])
            ("completion-base-position" variable nil nil [329127 329497])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [329499 329798])
            ("completion-base-size" variable nil nil [329800 330255])
            ("make-obsolete-variable" code nil nil [330256 330335])
            ("delete-completion-window" function (:user-visible-flag t) nil [330337 330711])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [330713 330844])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [330846 332096])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [332098 334057])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [334141 334979])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [334981 335173])
            ("choose-completion-string-functions" variable nil nil [335175 335814])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [335816 339226])
            ("define-derived-mode" code nil nil [339228 339600])
            ("completion-list-mode-finish" function nil nil [339602 339798])
            ("add-hook" code nil nil [339800 339862])
            ("completion-show-help" variable (:default-value t) nil [339926 340077])
            ("completion-setup-function" function nil nil [340208 342190])
            ("add-hook" code nil nil [342192 342252])
            ("define-key" code nil nil [342254 342329])
            ("define-key" code nil nil [342330 342405])
            ("switch-to-completions" function (:user-visible-flag t) nil [342407 342948])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [343110 343353])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [343354 343607])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [343608 343861])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [343862 344115])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [344116 344373])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [344374 344622])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [344624 345688])
            ("define-key" code nil nil [345690 345761])
            ("define-key" code nil nil [345762 345833])
            ("define-key" code nil nil [345834 345904])
            ("define-key" code nil nil [345905 345974])
            ("define-key" code nil nil [345975 346046])
            ("define-key" code nil nil [346047 346120])
            ("mapc" code nil nil [346410 347005])
            ("clone-buffer-hook" variable nil nil [347057 347158])
            ("clone-indirect-buffer-hook" variable nil nil [347160 347279])
            ("clone-process" function (:arguments ("process" "newname")) nil [347281 348790])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [348893 351856])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [351859 353499])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [353502 353985])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [354033 355574])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [355576 356651])
            ("define-minor-mode" code nil nil [356653 360148])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [360151 360274])
            ("define-minor-mode" code nil nil [360276 361429])
            ("define-minor-mode" code nil nil [361431 362201])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [362204 362387])
            ("define-derived-mode" code nil nil [362389 362505])
            ("messages-buffer" function nil nil [362507 362794])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [363743 365169])
            ("bad-package-check" function (:arguments ("package")) nil [365171 365676])
            ("dolist" code nil nil [365678 365800])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [366453 369077])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369143 369512])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369514 369901])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369903 370304])
            ("simple" package nil nil [370309 370326]))          
      :file "simple.el"
      :pointmax 370352
      :fsize 370637
      :lastmodtime '(23525 29518 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1149 1180])
            ("linum-overlays" variable nil nil [1182 1241])
            ("linum-available" variable nil nil [1242 1302])
            ("linum-before-numbering-hook" variable nil nil [1303 1406])
            ("mapc" code nil nil [1408 1477])
            ("linum" customgroup (:user-visible-flag t) nil [1479 1563])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1565 2040])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2042 2168])
            ("linum-eager" variable (:default-value t) nil [2170 2431])
            ("linum-delay" variable nil nil [2433 2553])
            ("define-minor-mode" code nil nil [2570 4412])
            ("define-globalized-minor-mode" code nil nil [4429 4497])
            ("linum-on" function nil nil [4499 5161])
            ("linum-delete-overlays" function nil nil [5163 5901])
            ("linum-update-current" function nil nil [5903 6016])
            ("linum-update" function (:arguments ("buffer")) nil [6018 6433])
            ("declare-function" code nil nil [6469 6529])
            ("linum--face-width" function (:arguments ("face")) nil [6531 6723])
            ("linum-update-window" function (:arguments ("win")) nil [6725 9281])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [9283 9551])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [9553 9629])
            ("linum-schedule" function nil nil [9694 9848])
            ("linum-unload-function" function nil nil [9963 10089])
            ("linum" package nil nil [10091 10107]))          
      :file "linum.el"
      :pointmax 10132
      :fsize 10131
      :lastmodtime '(23525 29512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [929 1264])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1267 1472])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1474 1733])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1735 1925])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1927 2372])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2374 2982])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2984 3334])
            ("mode-line-eol-desc-cache" variable nil nil [3336 3373])
            ("mode-line-eol-desc" function nil nil [3375 4254])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4282 4822])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4824 5109])
            ("put" code nil nil [5110 5162])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5164 5616])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5618 6540])
            ("put" code nil nil [6556 6606])
            ("make-variable-buffer-local" code nil nil [6607 6656])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6658 6869])
            ("put" code nil nil [6885 6932])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6934 7209])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7211 7471])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7473 7991])
            ("put" code nil nil [8007 8056])
            ("make-variable-buffer-local" code nil nil [8057 8105])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8107 8617])
            ("put" code nil nil [8633 8680])
            ("make-variable-buffer-local" code nil nil [8681 8727])
            ("mode-line-frame-control" function nil nil [8797 9034])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9144 9273])
            ("put" code nil nil [9289 9350])
            ("mode-line-process" variable nil nil [9352 9511])
            ("put" code nil nil [9527 9575])
            ("make-variable-buffer-local" code nil nil [9576 9623])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9625 10376])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10378 10487])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10489 10880])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10882 11272])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11274 12284])
            ("put" code nil nil [12285 12331])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [size-indication-mode] (quote (menu-item "Display Size Indication" size-indication-mode :help "Toggle displaying a size indication in the mode-line" :button (:toggle . size-indication-mode)))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12333 13277])
            ("column-number-indicator-zero-based" variable (:default-value t) nil [13279 13665])
            ("mode-line-percent-position" variable (:default-value (quote (-3 "%p"))) nil [13667 14457])
            ("put" code nil nil [14458 14515])
            ("mode-line-position" variable (:default-value (\` ((:propertize mode-line-percent-position local-map (\, mode-line-column-line-number-mode-map) mouse-face mode-line-highlight help-echo "Size indication mode
mouse-1: Display Line and Column Mode Menu") (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (column-number-indicator-zero-based (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (10 (\, (propertize " (%l,%C)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu")))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (column-number-indicator-zero-based (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))) (5 (\, (propertize " C%C" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu")))))))))) nil [14517 16636])
            ("put" code nil nil [16637 16686])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [16688 17421])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [17423 17907])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [17909 18222])
            ("put" code nil nil [18238 18300])
            ("make-variable-buffer-local" code nil nil [18301 18362])
            ("mode-line-misc-info" variable (:default-value (quote ((global-mode-string ("" global-mode-string " "))))) nil [18364 18575])
            ("put" code nil nil [18576 18626])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [18628 18761])
            ("put" code nil nil [18762 18813])
            ("let" code nil nil [18878 19443])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19447 19626])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19628 19825])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [19827 19994])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19996 20193])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20195 20404])
            ("bound-and-true-p" function (:arguments ("var")) nil [20406 20536])
            ("bindings--define-key" code nil nil [20655 20876])
            ("bindings--define-key" code nil nil [20877 21125])
            ("bindings--define-key" code nil nil [21126 21391])
            ("bindings--define-key" code nil nil [21392 21621])
            ("bindings--define-key" code nil nil [21622 21861])
            ("bindings--define-key" code nil nil [21862 22036])
            ("bindings--define-key" code nil nil [22037 22242])
            ("bindings--define-key" code nil nil [22243 22547])
            ("bindings--define-key" code nil nil [22548 22788])
            ("bindings--define-key" code nil nil [22789 22989])
            ("bindings--define-key" code nil nil [22990 23180])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23182 23421])
            ("minor-mode-alist" variable nil nil [23423 23720])
            ("put" code nil nil [23736 23783])
            ("setq" code nil nil [23854 24061])
            ("setq" code nil nil [24346 25608])
            ("setq" code nil nil [25644 25786])
            ("setq" code nil nil [25900 26303])
            ("make-variable-buffer-local" code nil nil [26305 26351])
            ("mapc" code nil nil [26673 27066])
            ("base64" package nil nil [27124 27141])
            ("md5" package nil nil [27142 27156])
            ("sha1" package nil nil [27157 27172])
            ("overlay" package nil nil [27173 27221])
            ("text-properties" package nil nil [27222 27292])
            ("define-key" code nil nil [27294 27336])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27338 27717])
            ("garbage-collect" code nil nil [27835 27852])
            ("setq" code nil nil [27856 27893])
            ("make-variable-buffer-local" code nil nil [27895 27956])
            ("global-set-key" code nil nil [27974 28026])
            ("global-set-key" code nil nil [28027 28081])
            ("global-set-key" code nil nil [28277 28329])
            ("global-set-key" code nil nil [28330 28376])
            ("global-set-key" code nil nil [28377 28428])
            ("put" code nil nil [28514 28549])
            ("visual-order-cursor-movement" variable nil nil [28602 29306])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29308 30064])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30066 30821])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30823 31431])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [31433 32040])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [32042 32117])
            ("define-key" code nil nil [32118 32155])
            ("define-key" code nil nil [32157 32202])
            ("define-key" code nil nil [32203 32237])
            ("define-key" code nil nil [32251 32305])
            ("define-key" code nil nil [32306 32351])
            ("substitute-key-definition" code nil nil [32460 32528])
            ("define-key" code nil nil [32530 32569])
            ("define-key" code nil nil [32570 32611])
            ("define-key" code nil nil [32612 32651])
            ("define-key" code nil nil [32652 32697])
            ("define-key" code nil nil [32698 32742])
            ("define-key" code nil nil [32743 32793])
            ("define-key" code nil nil [32794 32839])
            ("define-key" code nil nil [32840 32889])
            ("define-key" code nil nil [32890 32930])
            ("define-key" code nil nil [32931 32968])
            ("define-key" code nil nil [32969 33013])
            ("define-key" code nil nil [33014 33062])
            ("define-key" code nil nil [33063 33104])
            ("define-key" code nil nil [33178 33222])
            ("define-key" code nil nil [33289 33342])
            ("define-key" code nil nil [33376 33429])
            ("define-key" code nil nil [33430 33462])
            ("put" code nil nil [33463 33505])
            ("define-key" code nil nil [33576 33613])
            ("define-key" code nil nil [33614 33650])
            ("define-key" code nil nil [33829 33868])
            ("define-key" code nil nil [33869 33918])
            ("define-key" code nil nil [33919 33964])
            ("define-key" code nil nil [33966 34009])
            ("define-key" code nil nil [34010 34055])
            ("define-key" code nil nil [34056 34106])
            ("define-key" code nil nil [34107 34153])
            ("define-key" code nil nil [34154 34202])
            ("define-key" code nil nil [34203 34254])
            ("let" code nil nil [34256 35159])
            ("define-key" code nil nil [35161 35211])
            ("let" code nil nil [35212 35326])
            ("define-key" code nil nil [35327 35370])
            ("let" code nil nil [35397 35525])
            ("define-key" code nil nil [35526 35576])
            ("let" code nil nil [35608 35733])
            ("define-key" code nil nil [35734 35787])
            ("define-key" code nil nil [35843 35895])
            ("define-key" code nil nil [36178 36221])
            ("define-key" code nil nil [36223 36264])
            ("define-key" code nil nil [36265 36308])
            ("define-key" code nil nil [36309 36349])
            ("define-key" code nil nil [36350 36395])
            ("define-key" code nil nil [36396 36432])
            ("define-key" code nil nil [36433 36467])
            ("define-key" code nil nil [36518 36566])
            ("define-key" code nil nil [36624 36673])
            ("put" code nil nil [36674 36725])
            ("define-key" code nil nil [36727 36781])
            ("define-key" code nil nil [36782 36828])
            ("define-key" code nil nil [36829 36876])
            ("define-key" code nil nil [36877 36924])
            ("define-key" code nil nil [36926 36967])
            ("define-key" code nil nil [36968 37013])
            ("define-key" code nil nil [37014 37060])
            ("define-key" code nil nil [37061 37115])
            ("define-key" code nil nil [37116 37164])
            ("define-key" code nil nil [37166 37204])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [37206 37280])
            ("define-key" code nil nil [37281 37314])
            ("define-key" code nil nil [37316 37355])
            ("define-key" code nil nil [37356 37395])
            ("define-key" code nil nil [37396 37435])
            ("define-key" code nil nil [37436 37476])
            ("define-key" code nil nil [37477 37517])
            ("define-key" code nil nil [37518 37562])
            ("define-key" code nil nil [37563 37607])
            ("define-key" code nil nil [37608 37652])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [37654 37734])
            ("define-key" code nil nil [37735 37770])
            ("define-key" code nil nil [37772 37809])
            ("define-key" code nil nil [37810 37858])
            ("define-key" code nil nil [37859 37907])
            ("define-key" code nil nil [37908 37956])
            ("define-key" code nil nil [37957 38020])
            ("define-key" code nil nil [38021 38078])
            ("define-key" code nil nil [38079 38129])
            ("define-key" code nil nil [38130 38183])
            ("define-key" code nil nil [38184 38250])
            ("define-key" code nil nil [38360 38416])
            ("define-key" code nil nil [38417 38463])
            ("define-key" code nil nil [38660 38717])
            ("define-key" code nil nil [38718 38773])
            ("define-key" code nil nil [38774 38828])
            ("define-key" code nil nil [38829 38896])
            ("define-key" code nil nil [38897 38962])
            ("define-key" code nil nil [38963 39005])
            ("define-key" code nil nil [39006 39050])
            ("define-key" code nil nil [39051 39095])
            ("define-key" code nil nil [39096 39138])
            ("define-key" code nil nil [39139 39192])
            ("define-key" code nil nil [39193 39243])
            ("define-key" code nil nil [39244 39295])
            ("define-key" code nil nil [39296 39348])
            ("define-key" code nil nil [39349 39396])
            ("put" code nil nil [39397 39427])
            ("define-key" code nil nil [39428 39474])
            ("define-key" code nil nil [39475 39529])
            ("define-key" code nil nil [39530 39582])
            ("define-key" code nil nil [39583 39642])
            ("define-key" code nil nil [39643 39701])
            ("define-key" code nil nil [39702 39760])
            ("define-key" code nil nil [39761 39809])
            ("define-key" code nil nil [39810 39857])
            ("define-key" code nil nil [39858 39918])
            ("define-key" code nil nil [39919 39977])
            ("define-key" code nil nil [39978 40031])
            ("define-key" code nil nil [40032 40099])
            ("define-key" code nil nil [40100 40166])
            ("define-key" code nil nil [40278 40337])
            ("define-key" code nil nil [40338 40387])
            ("define-key" code nil nil [40388 40438])
            ("define-key" code nil nil [40439 40479])
            ("define-key" code nil nil [40578 40630])
            ("define-key" code nil nil [40631 40685])
            ("define-key" code nil nil [40686 40730])
            ("define-key" code nil nil [40731 40768])
            ("define-key" code nil nil [40769 40824])
            ("define-key" code nil nil [40825 40881])
            ("define-key" code nil nil [40897 40939])
            ("define-key" code nil nil [41171 41218])
            ("define-key" code nil nil [41219 41266])
            ("define-key" code nil nil [41267 41324])
            ("let" code nil nil [45285 46131])
            ("define-key" code nil nil [46133 46182])
            ("define-key" code nil nil [46183 46229])
            ("define-key" code nil nil [46230 46279])
            ("define-key" code nil nil [47446 47492])
            ("define-key" code nil nil [47614 47661])
            ("define-key" code nil nil [47663 47711])
            ("define-key" code nil nil [47713 47760])
            ("define-key" code nil nil [47761 47802])
            ("define-key" code nil nil [47803 47847])
            ("define-key" code nil nil [47848 47894])
            ("define-key" code nil nil [47896 47934])
            ("define-key" code nil nil [47935 47984])
            ("define-key" code nil nil [47985 48037])
            ("define-key" code nil nil [48038 48084])
            ("define-key" code nil nil [48085 48130])
            ("define-key" code nil nil [48131 48174])
            ("define-key" code nil nil [48175 48224])
            ("define-key" code nil nil [48226 48261])
            ("define-key" code nil nil [48262 48300])
            ("define-key" code nil nil [48301 48340])
            ("define-key" code nil nil [48341 48376])
            ("define-key" code nil nil [48377 48424])
            ("define-key" code nil nil [48426 48471])
            ("define-key" code nil nil [48472 48511])
            ("define-key" code nil nil [48512 48557])
            ("define-key" code nil nil [48558 48608])
            ("defalias" code nil nil [48610 48671])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [48672 48787])
            ("define-key" code nil nil [48788 48848])
            ("global-set-key" code nil nil [48850 48889])
            ("define-key" code nil nil [48890 48932])
            ("global-set-key" code nil nil [48933 48971])
            ("define-key" code nil nil [48972 49014])
            ("global-set-key" code nil nil [49091 49130])
            ("global-set-key" code nil nil [49131 49169])
            ("global-set-key" code nil nil [49229 49267])
            ("global-set-key" code nil nil [49268 49318])
            ("global-set-key" code nil nil [49379 49419])
            ("global-set-key" code nil nil [49421 49466])
            ("define-key" code nil nil [49467 49512])
            ("global-set-key" code nil nil [49513 49557])
            ("define-key" code nil nil [49558 49602])
            ("global-set-key" code nil nil [49603 49651])
            ("define-key" code nil nil [49652 49700])
            ("global-set-key" code nil nil [49701 49742])
            ("define-key" code nil nil [49743 49784])
            ("global-set-key" code nil nil [49785 49835])
            ("define-key" code nil nil [49836 49886])
            ("global-set-key" code nil nil [49887 49931])
            ("define-key" code nil nil [49932 49976])
            ("define-key" code nil nil [49978 50019])
            ("define-key" code nil nil [50020 50062])
            ("define-key" code nil nil [50063 50108])
            ("define-key" code nil nil [50109 50147])
            ("define-key" code nil nil [50148 50188])
            ("define-key" code nil nil [50189 50227])
            ("define-key" code nil nil [50228 50266])
            ("define-key" code nil nil [50484 50535])
            ("define-key" code nil nil [50536 50590])
            ("define-key" code nil nil [50591 50632])
            ("define-key" code nil nil [50633 50675])
            ("define-key" code nil nil [50676 50723])
            ("define-key" code nil nil [50724 50765])
            ("define-key" code nil nil [50766 50805])
            ("define-key" code nil nil [50806 50850])
            ("define-key" code nil nil [50851 50895])
            ("define-key" code nil nil [50896 50950])
            ("define-key" code nil nil [50952 50997])
            ("define-key" code nil nil [50999 51039])
            ("define-key" code nil nil [51040 51095])
            ("define-key" code nil nil [51096 51150])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [51154 52210])
            ("define-key" code nil nil [52211 52249])
            ("define-key" code nil nil [52251 52291])
            ("define-key" code nil nil [52292 52335])
            ("define-key" code nil nil [52338 52382])
            ("define-key" code nil nil [52383 52426])
            ("define-key" code nil nil [52427 52467])
            ("define-key" code nil nil [52468 52511])
            ("define-key" code nil nil [52512 52554])
            ("define-key" code nil nil [52555 52594])
            ("define-key" code nil nil [52595 52648])
            ("define-key" code nil nil [52650 52691])
            ("define-key" code nil nil [52692 52732])
            ("define-key" code nil nil [52733 52773])
            ("define-key" code nil nil [52774 52818])
            ("define-key" code nil nil [52819 52862])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [52911 52983])
            ("define-key" code nil nil [52984 53021])
            ("define-key" code nil nil [53023 53067])
            ("define-key" code nil nil [53068 53115])
            ("define-key" code nil nil [53116 53162])
            ("define-key" code nil nil [53163 53207])
            ("define-key" code nil nil [53208 53263])
            ("define-key" code nil nil [53264 53317])
            ("define-key" code nil nil [53379 53433])
            ("define-key" code nil nil [53434 53476])
            ("define-key" code nil nil [53477 53519])
            ("define-key" code nil nil [53734 53778])
            ("define-key" code nil nil [53779 53820])
            ("define-key" code nil nil [53821 53864])
            ("define-key" code nil nil [53866 53900])
            ("define-key" code nil nil [53902 53948])
            ("define-key" code nil nil [53950 54013])
            ("define-key" code nil nil [54014 54078])
            ("define-key" code nil nil [54099 54147])
            ("define-key" code nil nil [54148 54196]))          
      :file "bindings.el"
      :pointmax 54328
      :fsize 54327
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [990 2023])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [2025 2322])
            ("save-selected-window" function (:arguments ("body")) nil [2324 3362])
            ("temp-buffer-window-setup-hook" variable nil nil [3364 3565])
            ("temp-buffer-window-show-hook" variable nil nil [3567 3788])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3790 4404])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4406 5650])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5652 8234])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8236 9125])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9127 11455])
            ("window-right" function (:arguments ("window")) nil [11762 11974])
            ("window-left" function (:arguments ("window")) nil [11976 12186])
            ("window-child" function (:arguments ("window")) nil [12188 12343])
            ("window-child-count" function (:arguments ("window")) nil [12345 12641])
            ("window-last-child" function (:arguments ("window")) nil [12643 12910])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12912 13684])
            ("window-normalize-frame" function (:arguments ("frame")) nil [13686 14116])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [14118 14825])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [14864 15636])
            ("ignore-window-parameters" variable nil nil [15638 15982])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [16032 16156])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [16158 16354])
            ("window-min-height" variable (:default-value 4) nil [16356 17059])
            ("window-min-pixel-height" function (:arguments ("window")) nil [17061 17248])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [17298 17421])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [17423 17618])
            ("window-min-width" variable (:default-value 10) nil [17620 18319])
            ("window-min-pixel-width" function (:arguments ("window")) nil [18321 18506])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18508 18825])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18827 19111])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [19113 19745])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [19747 20173])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [20175 21282])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [21284 21996])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [21998 23221])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [23223 23874])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [23876 24834])
            ("window-atom-root" function (:arguments ("window")) nil [24856 25276])
            ("window-make-atom" function (:arguments ("window")) nil [25278 25666])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [25668 28134])
            ("window--atom-check-1" function (:arguments ("window")) nil [28136 29024])
            ("window--atom-check" function (:arguments ("frame")) nil [29026 29414])
            ("window-sides-vertical" variable nil nil [29433 29729])
            ("window-sides-reversed" variable nil nil [29731 30632])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [30634 32283])
            ("defvar-local" code nil nil [32285 32734])
            ("window--sides-inhibit-check" variable nil nil [32736 32830])
            ("window--sides-reverse-on-frame-p" function (:arguments ("frame")) nil [32832 34401])
            ("window-main-window" function (:arguments ("frame")) nil [34403 35391])
            ("window--make-major-side-window-next-to" function (:arguments ("side")) nil [35393 37234])
            ("window--make-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [37236 39444])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [39446 45933])
            ("window-toggle-side-windows" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [45935 47449])
            ("window--sides-reverse-all" function nil nil [47451 47648])
            ("window--sides-reverse-frame" function (:arguments ("frame")) nil [47650 48107])
            ("window--sides-reverse-side" function (:arguments ("frame" "side")) nil [48109 49041])
            ("window--sides-reverse" function (:arguments ("symbol" "value")) nil [49043 49624])
            ("window--sides-verticalize-frame" function (:arguments ("frame")) nil [49626 50956])
            ("window--sides-verticalize" function (:arguments ("symbol" "value")) nil [50958 51172])
            ("window--sides-check-failed" function (:arguments ("frame")) nil [51174 52876])
            ("window--sides-check" function (:arguments ("frame")) nil [52878 53814])
            ("window--check" function (:arguments ("frame")) nil [53816 53996])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [54032 55876])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [55878 57499])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [57519 58467])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [58469 59273])
            ("window-size-fixed" variable nil nil [59275 59712])
            ("make-variable-buffer-local" code nil nil [59713 59760])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [59762 60188])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [60190 61594])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [61596 62134])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [62136 62496])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [62498 63203])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63205 63773])
            ("window--min-size-ignore-p" function (:arguments ("window" "ignore")) nil [63775 63995])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63997 67788])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [67790 69160])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69162 69667])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [69669 70994])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [70996 71644])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [71646 72988])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [72990 74773])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [74775 75384])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [75386 76686])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [76688 78134])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [78182 79991])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [79993 80651])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [80653 82165])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [82167 82723])
            ("defalias" code nil nil [82770 82816])
            ("defalias" code nil nil [82817 82860])
            ("window-full-height-p" function (:arguments ("window")) nil [82862 83400])
            ("window-full-width-p" function (:arguments ("window")) nil [83402 83834])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [83836 84367])
            ("declare-function" code nil nil [84369 84429])
            ("window-font-width" function (:arguments ("window" "face")) nil [84431 85061])
            ("window-font-height" function (:arguments ("window" "face")) nil [85063 85626])
            ("overflow-newline-into-fringe" variable nil nil [85628 85665])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [85667 87181])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [87183 88154])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [88156 90038])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [90040 90617])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [90619 91137])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [91139 91529])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [91824 97322])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [97324 98945])
            ("defalias" code nil nil [98947 98997])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [98999 100650])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [100652 101922])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [101924 103217])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [103219 104787])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [104789 104968])
            ("count-windows" function (:arguments ("minibuf")) nil [104970 105263])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [105288 106238])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [106240 107864])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [107866 109781])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [109783 110219])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [110221 110743])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [110745 111969])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [111971 112377])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [112379 116287])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [116289 116766])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [116768 116945])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [116947 120465])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [120467 127079])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [127081 130877])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [130879 132782])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [132784 133617])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [133619 135540])
            ("window--sanitize-window-sizes" function (:arguments ("horizontal")) nil [135542 136507])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [136509 143766])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [143768 145602])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [145604 147455])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [147457 148053])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [148055 148665])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [148685 151737])
            ("window-body-edges" function (:arguments ("window")) nil [151739 151947])
            ("defalias" code nil nil [151948 151998])
            ("window-pixel-edges" function (:arguments ("window")) nil [152000 152221])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [152223 152464])
            ("defalias" code nil nil [152465 152527])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [152529 152756])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [152758 153010])
            ("defalias" code nil nil [153011 153091])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [153093 153993])
            ("frame-root-window-p" function (:arguments ("window")) nil [153996 154135])
            ("window--subtree" function (:arguments ("window" "next")) nil [154137 154860])
            ("window-tree" function (:arguments ("frame")) nil [154862 155757])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [155760 158391])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [158527 159800])
            ("window-deletable-p" function (:arguments ("window")) nil [159825 161401])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [161403 161706])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [161708 165252])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [165254 169029])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [169031 169657])
            ("record-window-buffer" function (:arguments ("window")) nil [171393 172812])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [172814 173313])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [173315 174242])
            ("switch-to-visible-buffer" variable (:default-value t) nil [174244 174699])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [174701 180549])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [180551 184376])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [184378 185374])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [185376 186103])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [186105 186691])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [186693 187675])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [187677 188810])
            ("unbury-buffer" function (:user-visible-flag t) nil [188812 188937])
            ("next-buffer" function (:user-visible-flag t) nil [188939 189241])
            ("previous-buffer" function (:user-visible-flag t) nil [189243 189553])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [189555 191309])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [191311 192343])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [192345 197188])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [197190 197790])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [197792 198756])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [198759 210550])
            ("split-window-no-error" function (:arguments ("window" "size" "side" "pixelwise")) nil [210552 210919])
            ("split-window-keep-point" variable (:default-value t) nil [210996 211370])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [211372 213626])
            ("defalias" code nil nil [213628 213683])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [213685 214893])
            ("defalias" code nil nil [214895 214952])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [215455 218223])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [218225 218651])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [218653 219910])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [219912 220342])
            ("window-area-factor" variable (:default-value 1) nil [220389 220558])
            ("make-variable-buffer-local" code nil nil [220559 220607])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [220609 221263])
            ("balance-windows-area" function (:user-visible-flag t) nil [221265 225621])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [225691 228723])
            ("window-state-get" function (:arguments ("window" "writable")) nil [228725 230814])
            ("window-state-put-list" variable nil nil [230816 230894])
            ("window-state-put-stale-windows" variable nil nil [230896 230983])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [230985 233703])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [233705 237745])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [237747 241931])
            ("window-swap-states" function
               (:user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [241933 245348])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [245351 247868])
            ("display-buffer-function" variable nil nil [247870 248426])
            ("make-obsolete-variable" code nil nil [248428 248509])
            ("pop-up-frame-alist" variable nil nil [248690 249306])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [249308 249637])
            ("special-display-buffer-names" variable nil nil [249639 252229])
            ("make-obsolete-variable" code nil nil [252230 252313])
            ("put" code nil nil [252314 252373])
            ("special-display-regexps" variable nil nil [252375 255017])
            ("make-obsolete-variable" code nil nil [255018 255096])
            ("put" code nil nil [255097 255151])
            ("special-display-p" function (:arguments ("buffer-name")) nil [255153 256048])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [256050 256668])
            ("make-obsolete-variable" code nil nil [256669 256751])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [256753 258773])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [258775 259573])
            ("make-obsolete-variable" code nil nil [259574 259653])
            ("same-window-buffer-names" variable nil nil [259655 260227])
            ("same-window-regexps" variable nil nil [260229 260817])
            ("same-window-p" function (:arguments ("buffer-name")) nil [260819 261790])
            ("pop-up-frames" variable nil nil [261792 262204])
            ("display-buffer-reuse-frames" variable nil nil [262206 262435])
            ("make-obsolete-variable" code nil nil [262437 262565])
            ("pop-up-windows" variable (:default-value t) nil [262567 262691])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [262693 264076])
            ("split-height-threshold" variable (:default-value 80) nil [264078 264641])
            ("split-width-threshold" variable (:default-value 160) nil [264643 265031])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [265033 267374])
            ("split-window-sensibly" function (:arguments ("window")) nil [267376 270247])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [270249 271359])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [271361 272303])
            ("even-window-sizes" variable (:default-value t) nil [272305 272828])
            ("defvaralias" code nil nil [272829 272882])
            ("window--even-window-sizes" function (:arguments ("window")) nil [272884 273889])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [273891 277057])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [277059 277639])
            ("display-buffer-mark-dedicated" variable nil nil [277978 278187])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [278189 278828])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [278830 279205])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [279207 279542])
            ("put" code nil nil [279543 279606])
            ("display-buffer-alist" variable nil nil [279608 280619])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [280621 281045])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [281047 281631])
            ("put" code nil nil [281632 281693])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [281695 282118])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [282120 282292])
            ("put" code nil nil [282293 282358])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [282360 282590])
            ("put" code nil nil [282591 282656])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [282658 288761])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [288763 289096])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [289138 290633])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [290635 291120])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [291122 291463])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [291465 293111])
            ("display-buffer-reuse-mode-window" function (:arguments ("buffer" "alist")) nil [293113 295962])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [295964 296710])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [296712 297732])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [297734 299049])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [299051 299636])
            ("display-buffer-in-child-frame" function (:arguments ("buffer" "alist")) nil [299638 301320])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [301322 302410])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [302412 303893])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [303895 306182])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [306184 307925])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [307927 308382])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [308418 310295])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [310297 310931])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [310933 312077])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [312079 312635])
            ("switch-to-buffer-preserve-window-point" variable (:default-value t) nil [312637 313524])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [313526 314316])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [314318 318139])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [318141 319245])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [319247 320331])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [320334 321307])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [321309 321524])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [321526 321745])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [321747 323148])
            ("window-buffer-height" function (:arguments ("window")) nil [323150 323628])
            ("fit-window-to-buffer-horizontally" variable nil nil [323693 324087])
            ("fit-frame-to-buffer" variable nil nil [324201 324650])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [324652 325866])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [325868 327157])
            ("declare-function" code nil nil [327159 327230])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [327232 327467])
            ("declare-function" code nil nil [327469 327541])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [327543 337470])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [337472 343951])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [343953 344334])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [344336 345444])
            ("window-largest-empty-rectangle--maximums-1" function (:arguments ("quad" "maximums")) nil [345446 345779])
            ("window-largest-empty-rectangle--maximums" function (:arguments ("quad" "maximums" "count")) nil [345781 346061])
            ("window-largest-empty-rectangle--disjoint-maximums" function (:arguments ("maximums" "count")) nil [346063 346832])
            ("window-largest-empty-rectangle" function (:arguments ("window" "count" "min-width" "min-height" "positions" "left")) nil [346834 351595])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [351598 352420])
            ("window-group-start-function" variable nil nil [352840 352880])
            ("make-variable-buffer-local" code nil nil [352881 352938])
            ("put" code nil nil [352939 352992])
            ("window-group-start" function (:arguments ("window")) nil [352993 353492])
            ("window-group-end-function" variable nil nil [353494 353532])
            ("make-variable-buffer-local" code nil nil [353533 353588])
            ("put" code nil nil [353589 353640])
            ("window-group-end" function (:arguments ("window" "update")) nil [353641 354447])
            ("set-window-group-start-function" variable nil nil [354449 354493])
            ("make-variable-buffer-local" code nil nil [354494 354555])
            ("put" code nil nil [354556 354613])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [354614 355255])
            ("recenter-window-group-function" variable nil nil [355257 355300])
            ("make-variable-buffer-local" code nil nil [355301 355361])
            ("put" code nil nil [355362 355418])
            ("recenter-window-group" function (:arguments ("arg")) nil [355419 356589])
            ("pos-visible-in-window-group-p-function" variable nil nil [356591 356642])
            ("make-variable-buffer-local" code nil nil [356643 356711])
            ("put" code nil nil [356712 356776])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [356777 358253])
            ("selected-window-group-function" variable nil nil [358255 358298])
            ("make-variable-buffer-local" code nil nil [358299 358359])
            ("put" code nil nil [358360 358416])
            ("selected-window-group" function nil nil [358417 358767])
            ("move-to-window-group-line-function" variable nil nil [358769 358816])
            ("make-variable-buffer-local" code nil nil [358817 358881])
            ("put" code nil nil [358882 358942])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [358943 359537])
            ("recenter-last-op" variable nil nil [359541 359766])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [359768 360628])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [360630 361777])
            ("define-key" code nil nil [361779 361831])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [361833 362967])
            ("define-key" code nil nil [362969 363032])
            ("scroll-error-top-bottom" variable nil nil [363202 363646])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363648 364711])
            ("put" code nil nil [364713 364755])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364757 365824])
            ("put" code nil nil [365826 365870])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365940 366223])
            ("put" code nil nil [366225 366264])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366266 366551])
            ("put" code nil nil [366553 366594])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [366598 366993])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366995 367679])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367681 368184])
            ("mouse-autoselect-window-timer" variable nil nil [368187 368277])
            ("mouse-autoselect-window-position-1" variable nil nil [368279 368393])
            ("mouse-autoselect-window-position" variable nil nil [368395 368506])
            ("mouse-autoselect-window-window" variable nil nil [368508 368609])
            ("mouse-autoselect-window-state" variable nil nil [368611 368908])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [368910 369681])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [369683 370511])
            ("mouse-autoselect-window-select" function nil nil [370513 374513])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [374515 377025])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [377027 377712])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [377781 379223])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "windows")) nil [379225 379834])
            ("window-adjust-process-window-size-smallest" function (:arguments ("_process" "windows")) nil [379836 380127])
            ("window-adjust-process-window-size-largest" function (:arguments ("_process" "windows")) nil [380129 380418])
            ("window--process-window-list" function nil nil [380420 381633])
            ("window--adjust-process-windows" function nil nil [381635 382331])
            ("add-hook" code nil nil [382333 382409])
            ("define-key" code nil nil [382500 382541])
            ("define-key" code nil nil [382542 382590])
            ("define-key" code nil nil [382591 382637])
            ("define-key" code nil nil [382638 382684])
            ("define-key" code nil nil [382685 382725])
            ("define-key" code nil nil [382726 382768])
            ("define-key" code nil nil [382769 382824])
            ("define-key" code nil nil [382825 382879])
            ("define-key" code nil nil [382880 382943])
            ("define-key" code nil nil [382944 382987])
            ("define-key" code nil nil [382988 383040]))          
      :file "window.el"
      :pointmax 383066
      :fsize 383069
      :lastmodtime '(23525 29521 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4837])
            ("setq-local" function (:arguments ("var" "val")) nil [4839 5086])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5088 5529])
            ("push" function (:arguments ("newelt" "place")) nil [5531 6125])
            ("pop" function (:arguments ("place")) nil [6127 6984])
            ("when" function (:arguments ("cond" "body")) nil [6986 7274])
            ("unless" function (:arguments ("cond" "body")) nil [7276 7562])
            ("dolist" function (:arguments ("spec" "body")) nil [7564 9024])
            ("dotimes" function (:arguments ("spec" "body")) nil [9026 10491])
            ("declare" function (:arguments ("_specs")) nil [10493 11068])
            ("ignore-errors" function (:arguments ("body")) nil [11070 11377])
            ("gensym-counter" variable nil nil [11408 11511])
            ("gensym" function (:arguments ("prefix")) nil [11513 11833])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11835 11983])
            ("error" function (:arguments ("args")) nil [12040 12556])
            ("user-error" function (:arguments ("format" "args")) nil [12558 13218])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13220 14133])
            ("frame-configuration-p" function (:arguments ("object")) nil [14247 14502])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14504 14881])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15075 15655])
            ("caar" function (:arguments ("x")) nil [15657 15784])
            ("cadr" function (:arguments ("x")) nil [15786 15913])
            ("cdar" function (:arguments ("x")) nil [15915 16042])
            ("cddr" function (:arguments ("x")) nil [16044 16171])
            ("caaar" function (:arguments ("x")) nil [16173 16324])
            ("caadr" function (:arguments ("x")) nil [16326 16477])
            ("cadar" function (:arguments ("x")) nil [16479 16630])
            ("caddr" function (:arguments ("x")) nil [16632 16783])
            ("cdaar" function (:arguments ("x")) nil [16785 16936])
            ("cdadr" function (:arguments ("x")) nil [16938 17089])
            ("cddar" function (:arguments ("x")) nil [17091 17242])
            ("cdddr" function (:arguments ("x")) nil [17244 17395])
            ("caaaar" function (:arguments ("x")) nil [17397 17568])
            ("caaadr" function (:arguments ("x")) nil [17570 17741])
            ("caadar" function (:arguments ("x")) nil [17743 17914])
            ("caaddr" function (:arguments ("x")) nil [17916 18087])
            ("cadaar" function (:arguments ("x")) nil [18089 18260])
            ("cadadr" function (:arguments ("x")) nil [18262 18433])
            ("caddar" function (:arguments ("x")) nil [18435 18606])
            ("cadddr" function (:arguments ("x")) nil [18608 18779])
            ("cdaaar" function (:arguments ("x")) nil [18781 18952])
            ("cdaadr" function (:arguments ("x")) nil [18954 19125])
            ("cdadar" function (:arguments ("x")) nil [19127 19298])
            ("cdaddr" function (:arguments ("x")) nil [19300 19471])
            ("cddaar" function (:arguments ("x")) nil [19473 19644])
            ("cddadr" function (:arguments ("x")) nil [19646 19817])
            ("cdddar" function (:arguments ("x")) nil [19819 19990])
            ("cddddr" function (:arguments ("x")) nil [19992 20163])
            ("last" function (:arguments ("list" "n")) nil [20165 20582])
            ("butlast" function (:arguments ("list" "n")) nil [20584 20812])
            ("nbutlast" function (:arguments ("list" "n")) nil [20814 21091])
            ("zerop" function (:arguments ("number")) nil [21093 21323])
            ("delete-dups" function (:arguments ("list")) nil [21325 22112])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22179 22637])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22639 24646])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24648 25465])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25505 26305])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26307 26629])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26631 26899])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26901 27336])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27338 27822])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [27824 28317])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28319 28913])
            ("remove" function (:arguments ("elt" "seq")) nil [28915 29268])
            ("remq" function (:arguments ("elt" "list")) nil [29270 29601])
            ("kbd" function (:arguments ("keys")) nil [29626 30066])
            ("put" code nil nil [30067 30085])
            ("undefined" function (:user-visible-flag t) nil [30087 30615])
            ("put" code nil nil [30710 30745])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [30747 31311])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31313 31965])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [31967 34028])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34030 34710])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [34712 35182])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35236 35836])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [35838 36304])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36306 38175])
            ("put" code nil nil [38177 38234])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38236 38611])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [38642 39562])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39564 40368])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40370 40566])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40568 40797])
            ("key-substitution-in-progress" variable nil nil [40853 40946])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [40948 42330])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42332 43995])
            ("global-map" variable nil nil [44144 44318])
            ("esc-map" variable nil nil [44320 44460])
            ("ctl-x-map" variable nil nil [44462 44597])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [44599 44677])
            ("defalias" code nil nil [44678 44716])
            ("define-key" code nil nil [44717 44759])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [44761 44833])
            ("defalias" code nil nil [44834 44872])
            ("define-key" code nil nil [44873 44915])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [44955 45010])
            ("listify-key-sequence" function (:arguments ("key")) nil [45012 45250])
            ("eventp" function (:arguments ("obj")) nil [45252 45453])
            ("event-modifiers" function (:arguments ("event")) nil [45455 46749])
            ("event-basic-type" function (:arguments ("event")) nil [46751 47519])
            ("mouse-movement-p" function (:arguments ("object")) nil [47521 47654])
            ("mouse-event-p" function (:arguments ("object")) nil [47656 47874])
            ("event-start" function (:arguments ("event")) nil [47876 49036])
            ("event-end" function (:arguments ("event")) nil [49038 49356])
            ("event-click-count" function (:arguments ("event")) nil [49358 49568])
            ("event-line-count" function (:arguments ("event")) nil [49570 49769])
            ("posnp" function (:arguments ("obj")) nil [49826 50474])
            ("posn-window" function (:arguments ("position")) nil [50508 50690])
            ("posn-area" function (:arguments ("position")) nil [50692 51016])
            ("posn-point" function (:arguments ("position")) nil [51018 51484])
            ("posn-set-point" function (:arguments ("position")) nil [51486 51806])
            ("posn-x-y" function (:arguments ("position")) nil [51808 52061])
            ("declare-function" code nil nil [52063 52129])
            ("posn-col-row" function (:arguments ("position")) nil [52131 53949])
            ("posn-actual-col-row" function (:arguments ("position")) nil [53951 54539])
            ("posn-timestamp" function (:arguments ("position")) nil [54541 54729])
            ("posn-string" function (:arguments ("position")) nil [54731 55090])
            ("posn-image" function (:arguments ("position")) nil [55092 55332])
            ("posn-object" function (:arguments ("position")) nil [55334 55703])
            ("posn-object-x-y" function (:arguments ("position")) nil [55705 55992])
            ("posn-object-width-height" function (:arguments ("position")) nil [55994 56254])
            ("make-obsolete" code nil nil [56297 56363])
            ("make-obsolete" code nil nil [56364 56413])
            ("make-obsolete" code nil nil [56428 56501])
            ("make-obsolete" code nil nil [56502 56575])
            ("make-obsolete" code nil nil [56576 56651])
            ("make-obsolete" code nil nil [56652 56725])
            ("make-obsolete" code nil nil [56726 56799])
            ("make-obsolete" code nil nil [56800 56875])
            ("log10" function (:arguments ("x")) nil [56877 56986])
            ("defalias" code nil nil [57034 57068])
            ("make-obsolete" code nil nil [57069 57123])
            ("defalias" code nil nil [57124 57160])
            ("make-obsolete" code nil nil [57161 57217])
            ("set-advertised-calling-convention" code nil nil [57219 57320])
            ("set-advertised-calling-convention" code nil nil [57321 57389])
            ("set-advertised-calling-convention" code nil nil [57390 57461])
            ("set-advertised-calling-convention" code nil nil [57462 57547])
            ("make-obsolete-variable" code nil nil [57610 57674])
            ("make-obsolete-variable" code nil nil [57675 57758])
            ("make-obsolete-variable" code nil nil [57759 57831])
            ("make-obsolete-variable" code nil nil [57832 57908])
            ("make-obsolete-variable" code nil nil [57909 57966])
            ("make-obsolete" code nil nil [57967 58023])
            ("make-obsolete" code nil nil [58024 58084])
            ("make-obsolete" code nil nil [58086 58140])
            ("make-obsolete" code nil nil [58141 58197])
            ("make-obsolete-variable" code nil nil [58199 58323])
            ("define-obsolete-variable-alias" code nil nil [58362 58449])
            ("define-obsolete-variable-alias" code nil nil [58451 58544])
            ("define-obsolete-variable-alias" code nil nil [58545 58638])
            ("make-obsolete-variable" code nil nil [58884 58948])
            ("make-obsolete-variable" code nil nil [58950 59008])
            ("defvaralias" code nil nil [59010 59067])
            ("defalias" code nil nil [59140 59184])
            ("defalias" code nil nil [59185 59229])
            ("defalias" code nil nil [59230 59263])
            ("defalias" code nil nil [59264 59297])
            ("defalias" code nil nil [59298 59334])
            ("defalias" code nil nil [59335 59370])
            ("defalias" code nil nil [59371 59397])
            ("defalias" code nil nil [59398 59424])
            ("defalias" code nil nil [59425 59447])
            ("defalias" code nil nil [59473 59512])
            ("defalias" code nil nil [59513 59567])
            ("defalias" code nil nil [59568 59638])
            ("defalias" code nil nil [59639 59711])
            ("defalias" code nil nil [59712 59755])
            ("defalias" code nil nil [59756 59800])
            ("defalias" code nil nil [59801 59834])
            ("defalias" code nil nil [59835 59868])
            ("defalias" code nil nil [59900 59943])
            ("defalias" code nil nil [59944 59993])
            ("defalias" code nil nil [59995 60048])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60087 62216])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62218 63886])
            ("letrec" function (:arguments ("binders" "body")) nil [63888 64517])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [64519 65929])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [65931 67770])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [67772 71139])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71142 72461])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [72463 73771])
            ("delay-mode-hooks" variable nil nil [73793 73887])
            ("delayed-mode-hooks" variable nil nil [73888 73969])
            ("make-variable-buffer-local" code nil nil [73970 74018])
            ("put" code nil nil [74019 74061])
            ("delayed-after-hook-functions" variable nil nil [74063 74206])
            ("make-variable-buffer-local" code nil nil [74207 74265])
            ("change-major-mode-after-body-hook" variable nil nil [74267 74381])
            ("after-change-major-mode-hook" variable nil nil [74383 74485])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [74487 75840])
            ("delay-mode-hooks" function (:arguments ("body")) nil [75842 76241])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76302 76643])
            ("derived-mode-p" function (:arguments ("modes")) nil [76645 76876])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77067 77260])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77262 79947])
            ("autoloadp" function (:arguments ("object")) nil [79969 80071])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [80555 81318])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81320 82816])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [82818 84224])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84249 85574])
            ("process-lines" function (:arguments ("program" "args")) nil [85576 86181])
            ("process-live-p" function (:arguments ("process")) nil [86183 86496])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [86516 86986])
            ("process-kill-buffer-query-function" function nil nil [86988 87407])
            ("add-hook" code nil nil [87409 87484])
            ("process-get" function (:arguments ("process" "propname")) nil [87515 87727])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [87729 87968])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88008 88058])
            ("read-key-delay" variable (:default-value 0.01) nil [88060 88088])
            ("read-key" function (:arguments ("prompt")) nil [88137 91361])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91363 91700])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [91702 94438])
            ("read-number" function (:arguments ("prompt" "default")) nil [94440 95510])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [95512 97251])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97253 100587])
            ("declare-function" code nil nil [100627 100706])
            ("y-or-n-p" function (:arguments ("prompt")) nil [100708 104269])
            ("atomic-change-group" function (:arguments ("body")) nil [104300 105506])
            ("prepare-change-group" function (:arguments ("buffer")) nil [105508 106984])
            ("activate-change-group" function (:arguments ("handle")) nil [106986 107224])
            ("accept-change-group" function (:arguments ("handle")) nil [107226 107517])
            ("cancel-change-group" function (:arguments ("handle")) nil [107519 108910])
            ("define-obsolete-function-alias" code nil nil [108968 109050])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109052 110604])
            ("copy-overlay" function (:arguments ("o")) nil [110633 111207])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111209 112217])
            ("suspend-hook" variable nil nil [112239 112323])
            ("suspend-resume-hook" variable nil nil [112325 112423])
            ("temp-buffer-show-hook" variable nil nil [112425 112641])
            ("temp-buffer-setup-hook" variable nil nil [112643 112874])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [112876 113251])
            ("buffer-narrowed-p" function nil nil [113284 113418])
            ("find-tag-default-bounds" function nil nil [113420 113674])
            ("find-tag-default" function nil nil [113676 113942])
            ("find-tag-default-as-regexp" function nil nil [113944 114379])
            ("find-tag-default-as-symbol-regexp" function nil nil [114381 114940])
            ("play-sound" function (:arguments ("sound")) nil [114942 115761])
            ("declare-function" code nil nil [115763 115819])
            ("shell-quote-argument" function (:arguments ("argument")) nil [115821 118155])
            ("string-to-list" function (:arguments ("string")) nil [118157 118256])
            ("string-to-vector" function (:arguments ("string")) nil [118258 118358])
            ("string-or-null-p" function (:arguments ("object")) nil [118360 118497])
            ("booleanp" function (:arguments ("object")) nil [118499 118657])
            ("special-form-p" function (:arguments ("object")) nil [118659 118902])
            ("macrop" function (:arguments ("object")) nil [118904 119134])
            ("field-at-pos" function (:arguments ("pos")) nil [119136 119406])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119408 119771])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [119773 120583])
            ("yank-handled-properties" variable nil nil [120690 120722])
            ("yank-excluded-properties" variable nil nil [120723 120756])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [120758 121631])
            ("yank-undo-function" variable nil nil [121633 121660])
            ("insert-for-yank" function (:arguments ("string")) nil [121662 122143])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122145 123177])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123179 123664])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [123666 124352])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124354 124666])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [124795 125233])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125271 126255])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126257 126749])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [126751 128392])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128394 128943])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [128945 130135])
            ("track-mouse" function (:arguments ("body")) nil [130190 130496])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [130498 130886])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [130888 131408])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131410 131970])
            ("with-selected-window" function (:arguments ("window" "body")) nil [131972 133110])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133112 133853])
            ("save-window-excursion" function (:arguments ("body")) nil [133855 134674])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [134676 136071])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136124 138577])
            ("with-temp-file" function (:arguments ("file" "body")) nil [138579 139274])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139276 140203])
            ("with-temp-buffer" function (:arguments ("body")) nil [140205 140764])
            ("with-silent-modifications" function (:arguments ("body")) nil [140766 141756])
            ("with-output-to-string" function (:arguments ("body")) nil [141758 142203])
            ("with-local-quit" function (:arguments ("body")) nil [142205 142960])
            ("setq" code nil nil [143022 143154])
            ("while-no-input" function (:arguments ("body")) nil [143156 143656])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [143658 144211])
            ("define-obsolete-function-alias" code nil nil [144213 144308])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144310 145247])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145249 145944])
            ("with-case-table" function (:arguments ("table" "body")) nil [145946 146467])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [146469 146894])
            ("save-match-data-internal" variable nil nil [146928 146961])
            ("save-match-data" function (:arguments ("body")) nil [147219 147899])
            ("match-string" function (:arguments ("num" "string")) nil [147901 148546])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [148548 149272])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149275 149924])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [149927 151198])
            ("looking-at-p" function (:arguments ("regexp")) nil [151200 151378])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151380 151600])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [151602 153512])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [153534 153887])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154149 157265])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157267 157947])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [157949 158585])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [158619 159023])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159025 161706])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [161709 162104])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162106 162515])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [162517 163300])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163302 163537])
            ("load-history-regexp" function (:arguments ("file")) nil [163578 164214])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164216 164652])
            ("put" code nil nil [164654 164700])
            ("eval-after-load" function (:arguments ("file" "form")) nil [164701 168583])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [168585 168960])
            ("after-load-functions" variable nil nil [168962 169135])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169137 170704])
            ("eval-next-after-load" function (:arguments ("file")) nil [170706 171006])
            ("display-delayed-warnings" function nil nil [171010 171277])
            ("collapse-delayed-warnings" function nil nil [171279 171958])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172078 172418])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [172420 172675])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [172704 173047])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173049 173294])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173318 173954])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [173956 174276])
            ("syntax-after" function (:arguments ("pos")) nil [174278 174651])
            ("syntax-class" function (:arguments ("syntax")) nil [174653 175005])
            ("word-move-empty-char-table" variable nil nil [175036 175206])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175208 175946])
            ("backward-word-strictly" function (:arguments ("arg")) nil [175948 176530])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [176548 177131])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177146 177695])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177716 178198])
            ("text-clone--maintaining" variable nil nil [178220 178256])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178258 180324])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180326 182574])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [182682 184260])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184264 184660])
            ("backtrace" function nil nil [184662 184933])
            ("backtrace-frames" function (:arguments ("base")) nil [184935 185288])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185290 186090])
            ("called-interactively-p-functions" variable nil nil [186094 186511])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [186513 186598])
            ("called-interactively-p" function (:arguments ("kind")) nil [186600 190781])
            ("interactive-p" function nil nil [190783 191866])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [191868 192213])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192215 192523])
            ("define-obsolete-function-alias" code nil nil [192525 192612])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [192614 195390])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [195973 196740])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [196742 198481])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [198483 198982])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [198984 199101])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199103 200779])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [200781 200936])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [200938 202042])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202079 202238])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202241 203775])
            ("version-to-list" function (:arguments ("ver")) nil [203778 206561])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [206563 207394])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207397 208196])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208199 208984])
            ("version-list-not-zero" function (:arguments ("lst")) nil [208986 209296])
            ("version<" function (:arguments ("v1" "v2")) nil [209299 209803])
            ("version<=" function (:arguments ("v1" "v2")) nil [209805 210323])
            ("version=" function (:arguments ("v1" "v2")) nil [210325 210819])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [210821 211198])
            ("package--description-file" function (:arguments ("dir")) nil [211200 211531])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [211556 211906])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [211921 212622])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [212624 212846])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [212848 212910])
            ("when" code nil nil [213062 213187])
            ("unmsys--file-name" function (:arguments ("file")) nil [213320 213807]))          
      :file "subr.el"
      :pointmax 213832
      :fsize 213832
      :lastmodtime '(23525 29518 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("whitespace" customgroup (:user-visible-flag t) nil [9372 9561])
            ("whitespace-style" variable (:default-value (quote (face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))) nil [9564 16115])
            ("whitespace-space" variable (:default-value (quote whitespace-space)) nil [16117 16259])
            ("make-obsolete-variable" code nil nil [16260 16333])
            ("whitespace-space" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey20" :foreground "darkgray") (((class color) (background light)) :background "LightYellow" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [16336 16633])
            ("whitespace-hspace" variable (:default-value (quote whitespace-hspace)) nil [16636 16785])
            ("make-obsolete-variable" code nil nil [16786 16860])
            ("whitespace-hspace" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey24" :foreground "darkgray") (((class color) (background light)) :background "LemonChiffon3" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [16862 17187])
            ("whitespace-tab" variable (:default-value (quote whitespace-tab)) nil [17190 17324])
            ("make-obsolete-variable" code nil nil [17325 17443])
            ("whitespace-tab" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey22" :foreground "darkgray") (((class color) (background light)) :background "beige" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [17445 17728])
            ("whitespace-newline" variable (:default-value (quote whitespace-newline)) nil [17731 17948])
            ("make-obsolete-variable" code nil nil [17949 18024])
            ("whitespace-newline" variable
               (:default-value (quote ((default :weight normal) (((class color) (background dark)) :foreground "darkgray") (((class color) (min-colors 88) (background light)) :foreground "lightgray") (((class color) (background light)) :foreground "brown") (t :underline t)))
                :type "face")
                nil [18026 18549])
            ("whitespace-trailing" variable (:default-value (quote whitespace-trailing)) nil [18552 18712])
            ("make-obsolete-variable" code nil nil [18713 18789])
            ("whitespace-trailing" variable
               (:default-value (quote ((default :weight bold) (((class mono)) :inverse-video t :underline t) (t :background "red1" :foreground "yellow")))
                :type "face")
                nil [18791 19036])
            ("whitespace-line" variable (:default-value (quote whitespace-line)) nil [19039 19216])
            ("make-obsolete-variable" code nil nil [19217 19289])
            ("whitespace-line" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "gray20" :foreground "violet")))
                :type "face")
                nil [19291 19526])
            ("whitespace-space-before-tab" variable (:default-value (quote whitespace-space-before-tab)) nil [19529 19715])
            ("make-obsolete-variable" code nil nil [19716 19824])
            ("whitespace-space-before-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "DarkOrange" :foreground "firebrick")))
                :type "face")
                nil [19826 20052])
            ("whitespace-indentation" variable (:default-value (quote whitespace-indentation)) nil [20055 20257])
            ("make-obsolete-variable" code nil nil [20258 20337])
            ("whitespace-indentation" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [20339 20586])
            ("whitespace-big-indent" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "red" :foreground "firebrick")))
                :type "face")
                nil [20588 20799])
            ("whitespace-empty" variable (:default-value (quote whitespace-empty)) nil [20802 20983])
            ("make-obsolete-variable" code nil nil [20984 21057])
            ("whitespace-empty" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [21059 21298])
            ("whitespace-space-after-tab" variable (:default-value (quote whitespace-space-after-tab)) nil [21301 21503])
            ("make-obsolete-variable" code nil nil [21504 21611])
            ("whitespace-space-after-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [21613 21853])
            ("whitespace-hspace-regexp" variable (:default-value "\\(\302\240+\\)") nil [21856 22504])
            ("whitespace-space-regexp" variable (:default-value "\\( +\\)") nil [22507 23200])
            ("whitespace-tab-regexp" variable (:default-value "\\(	+\\)") nil [23203 23889])
            ("whitespace-trailing-regexp" variable (:default-value "\\([	 \302\240]+\\)$") nil [23892 24345])
            ("whitespace-space-before-tab-regexp" variable (:default-value "\\( +\\)\\(	+\\)") nil [24348 24630])
            ("whitespace-indentation-regexp" variable (:default-value (quote ("^	*\\(\\( \\{%d\\}\\)+\\)[^
	]" . "^ *\\(	+\\)[^
]"))) nil [24633 25140])
            ("whitespace-empty-at-bob-regexp" variable (:default-value "\\`\\(\\([ 	]*
\\)+\\)") nil [25143 25400])
            ("whitespace-empty-at-eob-regexp" variable (:default-value "^\\([ 	
]+\\)\\'") nil [25403 25642])
            ("whitespace-space-after-tab-regexp" variable (:default-value (quote ("	+\\(\\( \\{%d,\\}\\)+\\)" . "\\(	+\\) \\{%d,\\}"))) nil [25645 26123])
            ("whitespace-big-indent-regexp" variable (:default-value "^\\(\\(?:	\\{4,\\}\\| \\{32,\\}\\)[	 ]*\\)") nil [26125 26657])
            ("whitespace-line-column" variable (:default-value 80) nil [26660 27053])
            ("whitespace-display-mappings" variable (:default-value (quote ((space-mark 32 [183] [46]) (space-mark 160 [164] [95]) (newline-mark 10 [36 10]) (tab-mark 9 [187 9] [92 9])))) nil [27113 29233])
            ("whitespace-global-modes" variable (:default-value t) nil [29236 30143])
            ("whitespace-action" variable nil nil [30146 31386])
            ("define-minor-mode" code nil nil [31510 32214])
            ("define-minor-mode" code nil nil [32232 33105])
            ("define-minor-mode" code nil nil [33230 34526])
            ("whitespace-enable-predicate" variable (:default-value (lambda nil (and (cond ((eq whitespace-global-modes t)) ((listp whitespace-global-modes) (if (eq (car-safe whitespace-global-modes) (quote not)) (not (memq major-mode (cdr whitespace-global-modes))) (memq major-mode whitespace-global-modes))) (t nil)) (not noninteractive) (not (eq (aref (buffer-name) 0) 32)) (or (not (eq (aref (buffer-name) 0) 42)) (string= (buffer-name) "*scratch*"))))) nil [34528 35546])
            ("whitespace-turn-on-if-enabled" function nil nil [35548 35660])
            ("define-minor-mode" code nil nil [35677 36644])
            ("whitespace-style-value-list" variable
               (:constant-flag t
                :default-value (quote (face tabs spaces trailing lines lines-tail newline empty indentation indentation::tab indentation::space big-indent space-after-tab space-after-tab::tab space-after-tab::space space-before-tab space-before-tab::tab space-before-tab::space help-newline tab-mark space-mark newline-mark)))
                nil [36749 37265])
            ("whitespace-toggle-option-alist" variable
               (:constant-flag t
                :default-value (quote ((102 . face) (116 . tabs) (115 . spaces) (114 . trailing) (108 . lines) (76 . lines-tail) (110 . newline) (101 . empty) (9 . indentation) (73 . indentation::tab) (105 . indentation::space) (20 . big-indent) (1 . space-after-tab) (65 . space-after-tab::tab) (97 . space-after-tab::space) (2 . space-before-tab) (66 . space-before-tab::tab) (98 . space-before-tab::space) (84 . tab-mark) (83 . space-mark) (78 . newline-mark) (120 . whitespace-style))))
                nil [37268 38131])
            ("whitespace-active-style" variable nil nil [38134 38221])
            ("whitespace-point" variable (:default-value (point)) nil [38223 38361])
            ("defvar-local" code nil nil [38362 38464])
            ("whitespace-font-lock-refontify" variable nil nil [38466 38626])
            ("whitespace-bob-marker" variable nil nil [38628 38770])
            ("whitespace-eob-marker" variable nil nil [38772 38914])
            ("whitespace-buffer-changed" variable nil nil [38916 39096])
            ("whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39114 42084])
            ("whitespace-toggle-style" variable nil nil [42087 42179])
            ("global-whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [42197 45251])
            ("whitespace-cleanup" function (:user-visible-flag t) nil [45372 48830])
            ("whitespace-cleanup-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [48848 53934])
            ("whitespace-replace-action" function (:arguments ("action" "rstart" "rend" "regexp" "index")) nil [53964 54351])
            ("whitespace-regexp" function (:arguments ("regexp" "kind")) nil [54455 54737])
            ("whitespace-indentation-regexp" function (:arguments ("kind")) nil [54740 54918])
            ("whitespace-space-after-tab-regexp" function (:arguments ("kind")) nil [54921 55111])
            ("whitespace-report-list" variable
               (:constant-flag t
                :default-value (list (cons (quote empty) whitespace-empty-at-bob-regexp) (cons (quote empty) whitespace-empty-at-eob-regexp) (cons (quote trailing) whitespace-trailing-regexp) (cons (quote indentation) nil) (cons (quote indentation::tab) nil) (cons (quote indentation::space) nil) (cons (quote space-before-tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::space) whitespace-space-before-tab-regexp) (cons (quote space-after-tab) nil) (cons (quote space-after-tab::tab) nil) (cons (quote space-after-tab::space) nil)))
                nil [55114 55861])
            ("whitespace-report-text" variable
               (:constant-flag t
                :default-value (quote (" Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  >= `tab-width' SPACEs at beginning of line
 indentation::tab         []     []  >= `tab-width' SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  >= `tab-width' SPACEs after TAB
 space-after-tab::tab     []     []  >= `tab-width' SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  >= `tab-width' SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

" . " Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  TABs at beginning of line
 indentation::tab         []     []  >= `tab-width' SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  >= `tab-width' SPACEs after TAB
 space-after-tab::tab     []     []  >= `tab-width' SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  >= `tab-width' SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

")))
                nil [55864 58074])
            ("whitespace-report-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Report*")
                nil [58077 58188])
            ("whitespace-report" function
               (:user-visible-flag t
                :arguments ("force" "report-if-bogus"))
                nil [58206 58495])
            ("whitespace-report-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "force" "report-if-bogus"))
                nil [58513 63194])
            ("whitespace-font-lock-keywords" variable nil nil [63295 63416])
            ("whitespace-help-text" variable
               (:constant-flag t
                :default-value " Whitespace Toggle Options                  | scroll up  :  SPC   or > |
                                            | scroll down:  M-SPC or < |
 FACES                                      \\__________________________/
 []  f   - toggle face visualization
 []  t   - toggle TAB visualization
 []  s   - toggle SPACE and HARD SPACE visualization
 []  r   - toggle trailing blanks visualization
 []  l   - toggle \"long lines\" visualization
 []  L   - toggle \"long lines\" tail visualization
 []  n   - toggle NEWLINE visualization
 []  e   - toggle empty line at bob and/or eob visualization
 []  C-i - toggle indentation SPACEs visualization (via `indent-tabs-mode')
 []  I   - toggle indentation SPACEs visualization
 []  i   - toggle indentation TABs visualization
 []  C-t - toggle big indentation visualization
 []  C-a - toggle SPACEs after TAB visualization (via `indent-tabs-mode')
 []  A   - toggle SPACEs after TAB: SPACEs visualization
 []  a   - toggle SPACEs after TAB: TABs visualization
 []  C-b - toggle SPACEs before TAB visualization (via `indent-tabs-mode')
 []  B   - toggle SPACEs before TAB: SPACEs visualization
 []  b   - toggle SPACEs before TAB: TABs visualization

 DISPLAY TABLE
 []  T - toggle TAB visualization
 []  S - toggle SPACE and HARD SPACE visualization
 []  N - toggle NEWLINE visualization

      x - restore `whitespace-style' value

      ? - display this text

")
                nil [63419 64905])
            ("whitespace-help-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Toggle Options*")
                nil [64908 65027])
            ("whitespace-insert-value" function (:arguments ("value")) nil [65030 65187])
            ("whitespace-mark-x" function (:arguments ("nchars" "condition")) nil [65190 65362])
            ("whitespace-insert-option-mark" function (:arguments ("the-list" "the-value")) nil [65365 65683])
            ("whitespace-help-on" function (:arguments ("style")) nil [65686 66098])
            ("whitespace-display-window" function (:arguments ("buffer")) nil [66101 66525])
            ("whitespace-kill-buffer" function (:arguments ("buffer-name")) nil [66528 66751])
            ("whitespace-help-off" function nil nil [66754 66906])
            ("whitespace-help-scroll" function (:arguments ("up")) nil [66909 67323])
            ("whitespace-interactive-char" function (:arguments ("local-p")) nil [67326 69787])
            ("whitespace-toggle-list" function (:arguments ("local-p" "arg" "the-list")) nil [69824 70723])
            ("whitespace-display-table" variable nil nil [70726 70803])
            ("whitespace-display-table-was-local" variable nil nil [70805 70927])
            ("whitespace-turn-on" function nil nil [70929 71588])
            ("whitespace-turn-off" function nil nil [71591 71822])
            ("whitespace-style-face-p" function nil nil [71825 72986])
            ("whitespace-color-on" function nil nil [72989 78177])
            ("whitespace-color-off" function nil nil [78180 78583])
            ("whitespace-point--used" function (:arguments ("start" "end")) nil [78585 78911])
            ("whitespace-point--flush-used" function (:arguments ("limit")) nil [78913 79445])
            ("whitespace-trailing-regexp" function (:arguments ("limit")) nil [79447 79879])
            ("whitespace-empty-at-bob-regexp" function (:arguments ("limit")) nil [79882 81070])
            ("whitespace-looking-back" function (:arguments ("regexp" "limit")) nil [81073 81261])
            ("whitespace-empty-at-eob-regexp" function (:arguments ("limit")) nil [81264 82685])
            ("whitespace-buffer-changed" function (:arguments ("_beg" "_end")) nil [82688 82821])
            ("whitespace-post-command-hook" function nil nil [82824 85340])
            ("whitespace-style-mark-p" function nil nil [85473 85724])
            ("whitespace-char-valid-p" function (:arguments ("char")) nil [85727 85850])
            ("whitespace-display-vector-p" function (:arguments ("vec")) nil [85853 86107])
            ("whitespace-display-char-on" function nil nil [86110 87716])
            ("whitespace-display-char-off" function nil nil [87719 88013])
            ("whitespace-action-when-on" function nil nil [88100 88343])
            ("whitespace-write-file-hook" function nil nil [88346 88726])
            ("whitespace-warn-read-only" function (:arguments ("msg")) nil [88760 88945])
            ("whitespace-unload-function" function nil nil [89022 89290])
            ("whitespace" package nil nil [89327 89348])
            ("run-hooks" code nil nil [89351 89384]))          
      :file "whitespace.el"
      :pointmax 89415
      :fsize 89423
      :lastmodtime '(23525 29521 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1924 8904])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8906 9236])
            ("menu-bar-last-search-type" variable nil nil [9268 9376])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9378 9771])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9773 10170])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function (:user-visible-flag t) nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function (:user-visible-flag t) nil [28438 28737])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28739 30908])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31017 31171])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31173 31387])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31389 31596])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31598 31808])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31810 31926])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32210 34652])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34654 34834])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34836 35061])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35063 35274])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35276 35461])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35463 35645])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35647 35817])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35819 38231])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38233 38384])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38386 38572])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38574 38771])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38773 38968])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38970 39141])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39143 41167])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41169 41325])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41327 41480])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41482 41605])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote right)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote left)))))) (bindings--define-key menu [none] (quote (menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil)))) menu)) nil [41607 43159])
            ("menu-bar-frame-for-menubar" function nil nil [43161 43344])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [43346 43466])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43468 43616])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [43617 43769])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [43770 43931])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [43932 44096])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44097 44255])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44256 44423])
            ("when" code nil nil [44425 47199])
            ("display-line-numbers-type" variable nil nil [47201 47235])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47236 47438])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] (\` (menu-item "Visual Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote visual)) (message "Visual line numbers enabled"))) :help "Enable visual line numbers" :button (:radio eq display-line-numbers (quote visual)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [relative] (\` (menu-item "Relative Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote relative)) (message "Relative line numbers enabled"))) :help "Enable relative line numbers" :button (:radio eq display-line-numbers (quote relative)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [absolute] (\` (menu-item "Absolute Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled"))) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [none] (\` (menu-item "No Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled"))) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47440 49673])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] (\` (menu-item "Line Numbers for All Lines" (\, menu-bar-showhide-line-numbers-menu)))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll Bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool Bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [49675 53686])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [53688 55785])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55787 57733])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57735 63054])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [63085 65024])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [65026 67367])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [67369 67496])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Servers" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [67498 71560])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [71589 74429])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [74431 74554])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [74556 74692])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [74694 74833])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [74835 75006])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [75008 75189])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [75191 77412])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [77414 78688])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [78690 78838])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [78840 82588])
            ("bindings--define-key" code nil nil [82590 82677])
            ("bindings--define-key" code nil nil [82678 82772])
            ("bindings--define-key" code nil nil [82773 82866])
            ("bindings--define-key" code nil nil [82867 82951])
            ("bindings--define-key" code nil nil [82952 83036])
            ("bindings--define-key" code nil nil [83037 83137])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [83139 83443])
            ("menu-bar-non-minibuffer-window-p" function nil nil [83445 83891])
            ("kill-this-buffer" function (:user-visible-flag t) nil [83893 84437])
            ("kill-this-buffer-enabled-p" function nil nil [84439 84907])
            ("put" code nil nil [84909 84970])
            ("delete-frame-enabled-p" function nil nil [85045 85330])
            ("yank-menu-length" variable (:default-value 20) nil [85332 85443])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [85445 86436])
            ("put" code nil nil [86438 86484])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [86485 86717])
            ("buffers-menu-max-size" variable (:default-value 10) nil [86739 87083])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [87085 87434])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [87436 88180])
            ("buffers-menu-show-status" variable (:default-value t) nil [88182 88555])
            ("list-buffers-directory" variable nil nil [88557 88666])
            ("make-variable-buffer-local" code nil nil [88667 88719])
            ("menu-bar-select-buffer" function nil nil [88721 88810])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88812 88923])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88925 89795])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89864 89914])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [89916 90104])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [90106 90534])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90536 94422])
            ("add-hook" code nil nil [94424 94481])
            ("menu-bar-update-buffers" code nil nil [94483 94508])
            ("dolist" code nil nil [95131 95427])
            ("let" code nil nil [95429 95918])
            ("let" code nil nil [95920 96989])
            ("define-minor-mode" code nil nil [96992 98356])
            ("put" code nil nil [98800 98841])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98843 99249])
            ("declare-function" code nil nil [99251 99316])
            ("declare-function" code nil nil [99317 99386])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [99388 99602])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [99604 102614])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [102616 103364])
            ("tty-menu-open-use-tmm" variable nil nil [103366 103827])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [103829 103980])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [103982 105550])
            ("global-set-key" code nil nil [105552 105589])
            ("buffer-menu-open" function (:user-visible-flag t) nil [105591 105816])
            ("global-set-key" code nil nil [105818 105860])
            ("mouse-buffer-menu-keymap" function nil nil [105862 106189])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [106191 109736])
            ("menu-bar" package nil nil [109738 109757]))          
      :file "menu-bar.el"
      :pointmax 109785
      :fsize 109784
      :lastmodtime '(23525 29513 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6230])
            ("make-variable-buffer-local" code nil nil [6231 6278])
            ("put" code nil nil [6279 6322])
            ("find-file-existing-other-name" variable (:default-value t) nil [6324 6617])
            ("find-file-visit-truename" variable nil nil [6619 6991])
            ("put" code nil nil [6992 7054])
            ("revert-without-query" variable nil nil [7056 7421])
            ("buffer-file-number" variable nil nil [7423 7692])
            ("make-variable-buffer-local" code nil nil [7693 7741])
            ("put" code nil nil [7742 7786])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7788 7933])
            ("buffer-file-read-only" variable nil nil [7935 8025])
            ("make-variable-buffer-local" code nil nil [8026 8077])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8079 8523])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8591 8660])
            ("declare-function" code nil nil [8662 8712])
            ("declare-function" code nil nil [8713 8762])
            ("declare-function" code nil nil [8763 8849])
            ("declare-function" code nil nil [8850 8917])
            ("declare-function" code nil nil [8918 8990])
            ("declare-function" code nil nil [8991 9047])
            ("declare-function" code nil nil [9048 9107])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9109 9782])
            ("file-precious-flag" variable nil nil [9784 10624])
            ("break-hardlink-on-save" variable nil nil [10626 11381])
            ("version-control" variable nil nil [11383 11740])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11742 11886])
            ("put" code nil nil [11888 11967])
            ("dired-kept-versions" variable (:default-value 2) nil [11969 12109])
            ("delete-old-versions" variable nil nil [12111 12377])
            ("kept-old-versions" variable (:default-value 2) nil [12379 12518])
            ("put" code nil nil [12519 12574])
            ("kept-new-versions" variable (:default-value 2) nil [12576 12765])
            ("put" code nil nil [12766 12821])
            ("require-final-newline" variable nil nil [12823 13594])
            ("mode-require-final-newline" variable (:default-value t) nil [13596 14731])
            ("auto-save-default" variable (:default-value t) nil [14733 14875])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14877 16305])
            ("auto-save--timer" variable nil nil [16307 16374])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16376 16857])
            ("define-minor-mode" code nil nil [16859 17831])
            ("make-obsolete-variable" code nil nil [18026 18145])
            ("save-abbrevs" variable (:default-value t) nil [18147 18358])
            ("find-file-run-dired" variable (:default-value t) nil [18360 18557])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18559 18887])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [18948 19276])
            ("define-obsolete-variable-alias" code nil nil [19384 19485])
            ("find-file-not-found-functions" variable nil nil [19486 19787])
            ("define-obsolete-variable-alias" code nil nil [19885 19957])
            ("find-file-hook" variable nil nil [19958 20235])
            ("define-obsolete-variable-alias" code nil nil [20237 20316])
            ("write-file-functions" variable nil nil [20317 21121])
            ("put" code nil nil [21122 21168])
            ("local-write-file-hooks" variable nil nil [21170 21205])
            ("make-variable-buffer-local" code nil nil [21206 21258])
            ("put" code nil nil [21259 21307])
            ("make-obsolete-variable" code nil nil [21308 21385])
            ("define-obsolete-variable-alias" code nil nil [21387 21478])
            ("write-contents-functions" variable nil nil [21479 22366])
            ("make-variable-buffer-local" code nil nil [22367 22421])
            ("enable-local-variables" variable (:default-value t) nil [22423 23675])
            ("enable-dir-local-variables" variable (:default-value t) nil [23677 23898])
            ("local-enable-local-variables" variable (:default-value t) nil [25261 25738])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25740 26131])
            ("view-read-only" variable nil nil [26133 26483])
            ("file-name-history" variable nil nil [26485 26668])
            ("save-silently" variable nil nil [26670 26825])
            ("put" code nil nil [26829 26883])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [26884 27490])
            ("declare-function" code nil nil [27492 27564])
            ("declare-function" code nil nil [27565 27637])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27639 28795])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [28797 29918])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [29922 30190])
            ("cd-path" variable nil nil [30192 30322])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30324 30943])
            ("cd-absolute" function (:arguments ("dir")) nil [30945 31850])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [31852 33679])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [33681 35076])
            ("module-file-suffix" variable nil nil [35078 35105])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35107 35575])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [35577 36954])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [36956 39918])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [39920 40328])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40330 40934])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40936 42294])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42296 42498])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42500 44186])
            ("executable-find" function (:arguments ("command")) nil [44189 44497])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44499 45194])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45196 46948])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47247 47966])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [47968 49187])
            ("file-local-name" function (:arguments ("file")) nil [49189 49431])
            ("file-local-copy" function (:arguments ("file")) nil [49433 49822])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [49824 50105])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50107 50886])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [50888 55724])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [55726 57147])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57279 58396])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [58398 58829])
            ("temporary-file-directory" function nil nil [58831 59607])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [59609 60662])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [60664 61604])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [61606 62443])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [62445 64682])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [64685 65298])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65300 65741])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [65743 66986])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [66988 67102])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67104 68818])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68820 70202])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70204 71580])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [71582 72017])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72019 72444])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [72446 72827])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [72829 73280])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73282 73728])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73730 74679])
            ("kill-buffer-hook" variable nil nil [74740 74980])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74982 78035])
            ("create-file-buffer" function (:arguments ("filename")) nil [78160 78840])
            ("generate-new-buffer" function (:arguments ("name")) nil [78842 79047])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79049 79201])
            ("make-obsolete-variable" code nil nil [79202 79279])
            ("abbreviated-home-dir" variable nil nil [79281 79455])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [79457 83497])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [83499 85426])
            ("find-file-wildcards" variable (:default-value t) nil [85429 85676])
            ("find-file-suppress-same-file-warnings" variable nil nil [85678 86004])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86006 86285])
            ("out-of-memory-warning-percentage" variable nil nil [86287 86670])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [86672 87164])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87166 88004])
            ("files--message" function (:arguments ("format" "args")) nil [88006 88273])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88275 95343])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [95345 97839])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [97842 98863])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [98865 99557])
            ("insert-file-literally" function (:arguments ("filename")) nil [99559 100042])
            ("find-file-literally" variable nil nil [100044 100251])
            ("put" code nil nil [100252 100297])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100299 101628])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [101631 104971])
            ("define-obsolete-function-alias" code nil nil [104973 105048])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105050 107025])
            ("auto-mode-case-fold" variable (:default-value t) nil [107027 107465])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [107467 118991])
            ("put" code nil nil [118992 119038])
            ("conf-mode-maybe" function nil nil [119040 119290])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [119292 120687])
            ("define-obsolete-variable-alias" code nil nil [120689 120802])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121001 121861])
            ("define-obsolete-variable-alias" code nil nil [121863 121973])
            ("inhibit-local-variables-suffixes" variable nil nil [121975 122251])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [122323 122429])
            ("inhibit-local-variables-p" function nil nil [122431 123241])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123243 123761])
            ("magic-mode-alist" variable nil nil [123763 124297])
            ("put" code nil nil [124298 124345])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [124347 125890])
            ("put" code nil nil [125891 125947])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [125949 126091])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126093 133464])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [133717 134124])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134126 134392])
            ("set-auto-mode-1" function nil nil [134394 135899])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [135937 136143])
            ("put" code nil nil [136144 136198])
            ("hack-local-variables-hook" variable nil nil [136200 136433])
            ("safe-local-variable-values" variable nil nil [136435 136695])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [136697 137359])
            ("mapc" code nil nil [137387 138004])
            ("dolist" code nil nil [138646 139334])
            ("put" code nil nil [139336 139450])
            ("put" code nil nil [139452 139498])
            ("file-local-variables-alist" variable nil nil [139500 139855])
            ("make-variable-buffer-local" code nil nil [139856 139912])
            ("put" code nil nil [139913 139965])
            ("dir-local-variables-alist" variable nil nil [139967 140349])
            ("make-variable-buffer-local" code nil nil [140350 140405])
            ("before-hack-local-variables-hook" variable nil nil [140407 140825])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [140827 143697])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [143699 143786])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [143788 147066])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147068 149554])
            ("hack-local-variables--warned-lexical" variable nil nil [149615 149664])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [149666 156209])
            ("hack-local-variables-apply" function nil nil [156211 157012])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157014 157702])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [157704 158607])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [158609 158713])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [158715 158903])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [158905 160725])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [160727 161159])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [161161 162074])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [162140 162255])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [162257 162833])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [162835 162968])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [162970 163615])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [163617 165788])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [165790 166554])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [166556 167931])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [167933 168631])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [168633 169563])
            ("dir-locals-find-file" function (:arguments ("file")) nil [169565 172692])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [172694 173998])
            ("define-obsolete-function-alias" code nil nil [174000 174094])
            ("enable-remote-dir-locals" variable nil nil [174096 174262])
            ("hack-dir-local-variables--warned-coding" variable nil nil [174264 174316])
            ("hack-dir-local-variables" function nil nil [174318 175935])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [175937 176243])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [176247 176682])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [176684 181773])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [181775 183815])
            ("file-extended-attributes" function (:arguments ("filename")) nil [183818 184132])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [184134 184736])
            ("backup-buffer" function nil nil [184739 188362])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [188364 189465])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [189467 189760])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [189762 190461])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [190463 192270])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [192272 192997])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [192999 193928])
            ("file-name-base" function (:arguments ("filename")) nil [193930 194174])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [194176 194924])
            ("backup-directory-alist" variable nil nil [194926 195963])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [195965 197261])
            ("make-backup-file-name" function (:arguments ("file")) nil [197263 197576])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [197578 198328])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [198330 200930])
            ("backup-file-name-p" function (:arguments ("file")) nil [200932 201193])
            ("backup-extract-version-start" variable nil nil [201195 201232])
            ("backup-extract-version" function (:arguments ("fn")) nil [201407 201859])
            ("find-backup-file-name" function (:arguments ("fn")) nil [201861 204000])
            ("file-nlinks" function (:arguments ("filename")) nil [204002 204119])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [204121 206876])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206879 209697])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [209699 210270])
            ("auto-save-hook" variable nil nil [210272 210344])
            ("before-save-hook" variable nil nil [210346 210544])
            ("after-save-hook" variable nil nil [210546 210765])
            ("save-buffer-coding-system" variable nil nil [210767 211139])
            ("make-variable-buffer-local" code nil nil [211141 211196])
            ("put" code nil nil [211197 211248])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [211250 216094])
            ("basic-save-buffer-1" function nil nil [216376 216679])
            ("basic-save-buffer-2" function nil nil [216768 220929])
            ("declare-function" code nil nil [220931 221017])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [221019 222185])
            ("put" code nil nil [222186 222247])
            ("buffer-save-without-query" variable nil nil [222249 222365])
            ("make-variable-buffer-local" code nil nil [222366 222421])
            ("save-some-buffers-default-predicate" variable nil nil [222423 222835])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [222837 226576])
            ("clear-visited-file-modtime" function nil nil [226579 226760])
            ("not-modified" function (:arguments ("arg")) nil [226762 227285])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [227287 227573])
            ("insert-file" function (:arguments ("filename")) nil [227575 228023])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [228025 228683])
            ("file-newest-backup" function (:arguments ("filename")) nil [228685 229608])
            ("rename-uniquely" function (:user-visible-flag t) nil [229610 230626])
            ("files--ensure-directory" function (:arguments ("dir")) nil [230628 230879])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [230881 232428])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [232430 232576])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [232578 232926])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [232928 235691])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [235693 236253])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [236255 237373])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [237375 240495])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [240543 241105])
            ("put" code nil nil [241109 241157])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [241158 241610])
            ("put" code nil nil [241612 241681])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [241682 242154])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [242156 242718])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [242720 243635])
            ("before-revert-hook" variable nil nil [243637 243840])
            ("after-revert-hook" variable nil nil [243842 244197])
            ("revert-buffer-in-progress-p" variable nil nil [244199 244313])
            ("revert-buffer-internal-hook" variable nil nil [244315 244351])
            ("revert-buffer-preserve-modes" variable nil nil [244541 244578])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [244580 246792])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [246794 250149])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [250151 252351])
            ("recover-this-file" function (:user-visible-flag t) nil [252353 252584])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [252586 254669])
            ("recover-session" function (:user-visible-flag t) nil [254671 256403])
            ("recover-session-finish" function (:user-visible-flag t) nil [256405 258808])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [258810 259061])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [259063 259666])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [259668 260325])
            ("rename-auto-save-file" function nil nil [260329 260893])
            ("make-auto-save-file-name" function nil nil [260895 265066])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [265068 265296])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [265299 267482])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [267485 267646])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [267648 267814])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [267816 269422])
            ("files" package nil nil [269496 269532])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [269534 270880])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [270882 272720])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [272723 272850])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [272852 273389])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [273391 273578])
            ("get-free-disk-space" function (:arguments ("dir")) nil [273580 275350])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [275422 277811])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [277813 277858])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [277860 278675])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [278677 280688])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [281762 290518])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [290520 291086])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [291088 291572])
            ("kill-emacs-query-functions" variable nil nil [291574 291937])
            ("confirm-kill-emacs" variable nil nil [291939 292379])
            ("confirm-kill-processes" variable (:default-value t) nil [292381 292744])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [292746 295037])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295039 295559])
            ("setq" code nil nil [295669 295790])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [295991 299678])
            ("file-name-quoted-p" function (:arguments ("name")) nil [299680 299872])
            ("file-name-quote" function (:arguments ("name")) nil [299874 300195])
            ("file-name-unquote" function (:arguments ("name")) nil [300197 300577])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [300620 301087])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [301089 301938])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [301940 303094])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [303096 304179])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [304181 305248])
            ("define-obsolete-variable-alias" code nil nil [305250 305332])
            ("trash-directory" variable nil nil [305356 305759])
            ("trash--hexify-table" variable nil nil [305761 305789])
            ("declare-function" code nil nil [305791 305857])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [305859 310853])
            ("file-attribute-type" function (:arguments ("attributes")) nil [310855 311071])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [311073 311220])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [311222 311489])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [311491 311759])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [311761 311984])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [311986 312278])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [312280 312618])
            ("file-attribute-size" function (:arguments ("attributes")) nil [312620 312826])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [312828 313012])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [313014 313455])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [313457 313912])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [313914 314769])
            ("define-key" code nil nil [314772 314812])
            ("define-key" code nil nil [314813 314863])
            ("define-key" code nil nil [314864 314914])
            ("define-key" code nil nil [314915 314957])
            ("define-key" code nil nil [314958 315003])
            ("define-key" code nil nil [315004 315045])
            ("define-key" code nil nil [315046 315085])
            ("define-key" code nil nil [315086 315124])
            ("define-key" code nil nil [315125 315170])
            ("define-key" code nil nil [315171 315228])
            ("define-key" code nil nil [315229 315274])
            ("define-key" code nil nil [315276 315328])
            ("define-key" code nil nil [315329 315391])
            ("define-key" code nil nil [315392 315447])
            ("define-key" code nil nil [315448 315507])
            ("define-key" code nil nil [315508 315555])
            ("define-key" code nil nil [315557 315615])
            ("define-key" code nil nil [315616 315667])
            ("define-key" code nil nil [315668 315722])
            ("define-key" code nil nil [315723 315784])
            ("define-key" code nil nil [315785 315844]))          
      :file "files.el"
      :pointmax 315869
      :fsize 315868
      :lastmodtime '(23525 29508 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1239 2285])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2287 2983])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2985 3105])
            ("make-obsolete" code nil nil [3106 3168])
            ("copy-case-table" function (:arguments ("case-table")) nil [3170 3585])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3587 4421])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4423 5201])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5203 5804])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5806 6411])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6413 7061])
            ("case-table" package nil nil [7063 7084]))          
      :file "case-table.el"
      :pointmax 7114
      :fsize 7113
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("selection-coding-system" variable nil nil [1752 3132])
            ("next-selection-coding-system" variable nil nil [3134 3495])
            ("define-obsolete-function-alias" code nil nil [3532 3611])
            ("select-enable-clipboard" variable (:default-value t) nil [3613 3942])
            ("define-obsolete-variable-alias" code nil nil [3943 4036])
            ("select-enable-primary" variable nil nil [4038 4310])
            ("define-obsolete-variable-alias" code nil nil [4311 4400])
            ("gui--last-selected-text-clipboard" variable nil nil [4727 4825])
            ("gui--last-selected-text-primary" variable nil nil [4826 4920])
            ("gui-select-text" function (:arguments ("text")) nil [4922 5653])
            ("define-obsolete-function-alias" code nil nil [5654 5725])
            ("x-select-request-type" variable nil nil [5727 6437])
            ("gui--selection-value-internal" function (:arguments ("type")) nil [6693 7348])
            ("gui-selection-value" function nil nil [7350 9426])
            ("define-obsolete-function-alias" code nil nil [9428 9507])
            ("x-get-clipboard" function nil nil [9509 9673])
            ("gui-get-primary-selection" function nil nil [9675 10172])
            ("define-obsolete-function-alias" code nil nil [10173 10264])
            ("cl-defgeneric" code nil nil [10322 10634])
            ("cl-defgeneric" code nil nil [10636 11174])
            ("cl-defgeneric" code nil nil [11176 11507])
            ("cl-defgeneric" code nil nil [11509 11832])
            ("gui-get-selection" function (:arguments ("type" "data-type")) nil [11834 13584])
            ("define-obsolete-function-alias" code nil nil [13585 13660])
            ("gui-set-selection" function
               (:user-visible-flag t
                :arguments ("type" "data"))
                nil [13662 15392])
            ("define-obsolete-function-alias" code nil nil [15393 15468])
            ("gui--valid-simple-selection-p" function (:arguments ("data")) nil [15470 15920])
            ("xselect--selection-bounds" function (:arguments ("value")) nil [16116 16910])
            ("xselect--int-to-cons" function (:arguments ("n")) nil [16912 16982])
            ("xselect--encode-string" function (:arguments ("type" "str" "can-modify")) nil [16984 19567])
            ("xselect-convert-to-string" function (:arguments ("_selection" "type" "value")) nil [19569 19869])
            ("xselect-convert-to-length" function (:arguments ("_selection" "_type" "value")) nil [19871 20130])
            ("xselect-convert-to-targets" function (:arguments ("_selection" "_type" "_value")) nil [20132 20645])
            ("xselect-convert-to-delete" function (:arguments ("selection" "_type" "_value")) nil [20647 20991])
            ("xselect-convert-to-filename" function (:arguments ("_selection" "_type" "value")) nil [20993 21177])
            ("xselect-convert-to-charpos" function (:arguments ("_selection" "_type" "value")) nil [21179 21479])
            ("xselect-convert-to-lineno" function (:arguments ("_selection" "_type" "value")) nil [21481 21840])
            ("xselect-convert-to-colno" function (:arguments ("_selection" "_type" "value")) nil [21842 22232])
            ("xselect-convert-to-os" function (:arguments ("_selection" "_type" "_size")) nil [22234 22347])
            ("xselect-convert-to-host" function (:arguments ("_selection" "_type" "_size")) nil [22349 22452])
            ("xselect-convert-to-user" function (:arguments ("_selection" "_type" "_size")) nil [22454 22560])
            ("xselect-convert-to-class" function (:arguments ("_selection" "_type" "_size")) nil [22562 22705])
            ("xselect-convert-to-name" function (:arguments ("_selection" "_type" "_size")) nil [22841 22982])
            ("xselect-convert-to-integer" function (:arguments ("_selection" "_type" "value")) nil [22984 23104])
            ("xselect-convert-to-atom" function (:arguments ("_selection" "_type" "value")) nil [23106 23192])
            ("xselect-convert-to-identity" function (:arguments ("_selection" "_type" "value")) nil [23194 23289])
            ("xselect-convert-to-save-targets" function (:arguments ("selection" "_type" "_value")) nil [23409 23518])
            ("setq" code nil nil [23520 24371])
            ("select" package nil nil [24373 24390]))          
      :file "select.el"
      :pointmax 24416
      :fsize 24415
      :lastmodtime '(23525 29517 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1006 1052])
            ("make-display-table" function nil nil [1069 1176])
            ("or" code nil nil [1178 1260])
            ("put" code nil nil [1330 1369])
            ("put" code nil nil [1370 1403])
            ("put" code nil nil [1404 1439])
            ("put" code nil nil [1440 1476])
            ("put" code nil nil [1477 1523])
            ("put" code nil nil [1524 1568])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1585 2078])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2095 2609])
            ("describe-display-table" function (:arguments ("dt")) nil [2626 3545])
            ("display-table-print-array" function (:arguments ("desc")) nil [3547 3946])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3963 4285])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4302 5132])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5149 5462])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5657 5876])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5893 6386])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6403 6883])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6900 7252])
            ("create-glyph" function (:arguments ("string")) nil [7269 7698])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7715 8130])
            ("glyph-char" function (:arguments ("glyph")) nil [8147 8286])
            ("glyph-face" function (:arguments ("glyph")) nil [8303 8611])
            ("standard-display-european" function (:arguments ("arg")) nil [8628 10792])
            ("disp-table" package nil nil [10794 10815]))          
      :file "disp-table.el"
      :pointmax 10845
      :fsize 10844
      :lastmodtime '(23525 29505 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4783 4800])
            ("timer" include nil nil [4802 4818])
            ("filenotify" include nil nil [4819 4840])
            ("auto-revert" customgroup (:user-visible-flag t) nil [4956 5185])
            ("auto-revert-mode" variable nil nil [5319 5471])
            ("put" code nil nil [5472 5514])
            ("auto-revert-tail-mode" variable nil nil [5516 5683])
            ("put" code nil nil [5684 5731])
            ("auto-revert-timer" variable nil nil [5733 5799])
            ("auto-revert-interval" variable (:default-value 5) nil [5801 6536])
            ("auto-revert-stop-on-user-input" variable (:default-value t) nil [6538 7070])
            ("auto-revert-verbose" variable (:default-value t) nil [7072 7275])
            ("auto-revert-mode-text" variable (:default-value " ARev") nil [7277 7568])
            ("auto-revert-tail-mode-text" variable (:default-value " Tail") nil [7570 7822])
            ("auto-revert-mode-hook" variable nil nil [7824 8021])
            ("global-auto-revert-mode-text" variable nil nil [8023 8330])
            ("global-auto-revert-mode-hook" variable nil nil [8332 8471])
            ("global-auto-revert-non-file-buffers" variable nil nil [8473 9402])
            ("global-auto-revert-ignore-modes" variable nil nil [9404 9561])
            ("auto-revert-load-hook" variable nil nil [9563 9715])
            ("auto-revert-check-vc-info" variable nil nil [9717 10763])
            ("defvar-local" code nil nil [10765 10947])
            ("auto-revert-remote-files" variable nil nil [10949 11093])
            ("auto-revert-use-notify" variable (:default-value t) nil [11095 11604])
            ("auto-revert-notify-exclude-dir-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/"))) (unless auto-revert-remote-files "\\|^/[^/|:][^/|]+:"))) nil [11606 11980])
            ("auto-revert-buffer-list" variable nil nil [12006 12268])
            ("auto-revert-remaining-buffers" variable nil nil [12270 12370])
            ("auto-revert-tail-pos" variable nil nil [12372 12443])
            ("auto-revert-find-file-function" function nil nil [12445 12579])
            ("add-hook" code nil nil [12581 12643])
            ("auto-revert-notify-watch-descriptor-hash-list" variable (:default-value (make-hash-table :test (quote equal))) nil [12645 12934])
            ("defvar-local" code nil nil [12936 13051])
            ("put" code nil nil [13052 13113])
            ("defvar-local" code nil nil [13115 13276])
            ("auto-revert-remove-current-buffer" function nil nil [13293 13481])
            ("define-minor-mode" code nil nil [13498 14750])
            ("turn-on-auto-revert-mode" function nil nil [14768 14977])
            ("define-minor-mode" code nil nil [14995 17804])
            ("turn-on-auto-revert-tail-mode" function nil nil [17822 18060])
            ("define-minor-mode" code nil nil [18078 19356])
            ("auto-revert-set-timer" function (:user-visible-flag t) nil [19358 19972])
            ("auto-revert-notify-rm-watch" function nil nil [19974 20709])
            ("auto-revert-notify-add-watch" function nil nil [20711 22017])
            ("auto-revert-buffers-counter" variable (:default-value 1) nil [22549 22645])
            ("defvar-local" code nil nil [22646 23165])
            ("auto-revert-notify-handler" function (:arguments ("event")) nil [23167 26258])
            ("auto-revert-active-p" function nil nil [26260 26567])
            ("auto-revert-handler" function nil nil [26569 29462])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [29464 30125])
            ("auto-revert-buffers" function nil nil [30127 33100])
            ("autorevert" package nil nil [33115 33136])
            ("run-hooks" code nil nil [33138 33172]))          
      :file "autorevert.el"
      :pointmax 33202
      :fsize 33201
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax '((close-paren 4800 . 4801) (symbol 4765 . 4782) (open-paren 4764 . 4765)))
    (semanticdb-table "semanticdb-table"
      :file "filenotify.el"
      :fsize 17949
      :lastmodtime '(23525 29508 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reveal" customgroup (:user-visible-flag t) nil [1865 1943])
            ("reveal-around-mark" variable (:default-value t) nil [1945 2055])
            ("reveal-open-spots" variable nil nil [2057 2181])
            ("make-variable-buffer-local" code nil nil [2182 2229])
            ("reveal-last-tick" variable nil nil [2231 2260])
            ("make-variable-buffer-local" code nil nil [2261 2307])
            ("reveal-post-command" function nil nil [2325 3722])
            ("reveal-open-new-overlays" function (:arguments ("old-ols")) nil [3724 5913])
            ("reveal-close-old-overlays" function (:arguments ("old-ols")) nil [5915 8234])
            ("reveal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line)) (define-key map [remap move-end-of-line] (quote end-of-line)) map)) nil [8236 8551])
            ("define-minor-mode" code nil nil [8568 9256])
            ("define-minor-mode" code nil nil [9273 9892])
            ("reveal" package nil nil [9894 9911]))          
      :file "reveal.el"
      :pointmax 9937
      :fsize 9936
      :lastmodtime '(23525 29516 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1546 1592])
            ("gpm-mouse-enable" function nil nil [1594 2153])
            ("gpm-mouse-disable" function nil nil [2155 2354])
            ("define-obsolete-function-alias" code nil nil [2371 2440])
            ("define-minor-mode" code nil nil [2456 3530])
            ("t-mouse" package nil nil [3532 3550]))          
      :file "t-mouse.el"
      :pointmax 3577
      :fsize 3576
      :lastmodtime '(23525 29519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("display-line-numbers" customgroup (:user-visible-flag t) nil [1336 1451])
            ("display-line-numbers-type" variable (:default-value t) nil [1453 1851])
            ("display-line-numbers-grow-only" variable nil nil [1853 2014])
            ("display-line-numbers-width-start" variable nil nil [2016 2355])
            ("display-line-numbers-update-width" function nil nil [2357 2598])
            ("define-minor-mode" code nil nil [2615 3491])
            ("display-line-numbers--turn-on" function nil nil [3493 3740])
            ("define-globalized-minor-mode" code nil nil [3757 3878])
            ("display-line-numbers" package nil nil [3880 3911]))          
      :file "display-line-numbers.el"
      :pointmax 3951
      :fsize 3950
      :lastmodtime '(23525 29505 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1044 1060])
            ("cl-lib" include nil nil [1080 1097])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1119 1435])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1437 2118])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2120 2795])
            ("scroll-bar-lines" function nil nil [2797 3325])
            ("scroll-bar-mode" variable nil nil [3393 3417])
            ("horizontal-scroll-bar-mode" variable nil nil [3418 3453])
            ("previous-scroll-bar-mode" variable nil nil [3454 3491])
            ("scroll-bar-mode-explicit" variable nil nil [3493 3658])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3660 4072])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [4074 4764])
            ("setq" code nil nil [4865 4898])
            ("get-scroll-bar-mode" function nil nil [4900 4992])
            ("define-minor-mode" code nil nil [4994 5508])
            ("horizontal-scroll-bars-available-p" function nil nil [5510 5728])
            ("define-minor-mode" code nil nil [5730 6708])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6710 7335])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7337 7803])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7911 8441])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [8443 8698])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8700 9710])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9767 10231])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10233 11244])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11301 11801])
            ("scroll-bar-horizontal-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [11803 12860])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [12862 13610])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13612 14352])
            ("scroll-bar-toolkit-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14381 15581])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [15583 17168])
            ("cond" code nil nil [17239 17949])
            ("scroll-bar" package nil nil [17953 17974]))          
      :file "scroll-bar.el"
      :pointmax 18004
      :fsize 18003
      :lastmodtime '(23525 29517 0 0)
      :unmatched-syntax '((close-paren 1097 . 1098) (symbol 1062 . 1079) (open-paren 1061 . 1062)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1197 1239])
            ("mouse" customgroup (:user-visible-flag t) nil [1241 1348])
            ("mouse-yank-at-point" variable nil nil [1350 1489])
            ("mouse-drag-copy-region" variable nil nil [1491 1744])
            ("mouse-1-click-follows-link" variable (:default-value 450) nil [1746 3177])
            ("mouse-1-click-in-non-selected-windows" variable (:default-value t) nil [3179 3521])
            ("mouse--down-1-maybe-follows-link" function (:arguments ("_prompt")) nil [3523 5941])
            ("define-key" code nil nil [5943 6027])
            ("define-key" code nil nil [6028 6119])
            ("minor-mode-menu-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [6175 7428])
            ("mouse-minor-mode-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7430 7662])
            ("mouse-menu-major-mode-map" function nil nil [7664 8256])
            ("mouse-menu-non-singleton" function (:arguments ("menubar")) nil [8258 8713])
            ("mouse-menu-bar-map" function nil nil [8715 10927])
            ("mouse-major-mode-menu" function (:arguments ("event" "prefix")) nil [10929 11295])
            ("mouse-popup-menubar" function (:arguments ("event" "prefix")) nil [11297 11722])
            ("mouse-popup-menubar-stuff" function (:arguments ("event" "prefix")) nil [11724 12186])
            ("mouse-minibuffer-check" function (:arguments ("event")) nil [12227 12538])
            ("mouse-delete-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [12540 12838])
            ("mouse-select-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [12840 13264])
            ("define-obsolete-function-alias" code nil nil [13266 13345])
            ("tear-off-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13346 13731])
            ("mouse-delete-other-windows" function (:user-visible-flag t) nil [13733 13867])
            ("mouse-split-window-vertically" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13869 14699])
            ("mouse-split-window-horizontally" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [14701 15524])
            ("mouse-drag-line" function (:arguments ("start-event" "line")) nil [15526 21541])
            ("mouse-drag-mode-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [21543 22984])
            ("mouse-drag-header-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [22986 23686])
            ("mouse-drag-vertical-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [23688 23921])
            ("mouse-resize-frame" function (:arguments ("frame" "x-diff" "y-diff" "x-move" "y-move")) nil [23924 25378])
            ("mouse-drag-frame" function (:arguments ("start-event" "part")) nil [25380 38806])
            ("mouse-drag-left-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [38808 39015])
            ("mouse-drag-top-left-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39017 39240])
            ("mouse-drag-top-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39242 39446])
            ("mouse-drag-top-right-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39448 39674])
            ("mouse-drag-right-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39676 39886])
            ("mouse-drag-bottom-right-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39888 40123])
            ("mouse-drag-bottom-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [40125 40338])
            ("mouse-drag-bottom-left-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [40340 40572])
            ("mouse-select-region-move-to-beginning" variable nil nil [40574 40948])
            ("mouse-set-point" function
               (:user-visible-flag t
                :arguments ("event" "promote-to-region"))
                nil [40950 41819])
            ("mouse-last-region-beg" variable nil nil [41821 41855])
            ("mouse-last-region-end" variable nil nil [41856 41890])
            ("mouse-last-region-tick" variable nil nil [41891 41926])
            ("mouse-region-match" function nil nil [41928 42220])
            ("mouse--drag-start-event" variable nil nil [42222 42258])
            ("mouse-set-region" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [42260 44782])
            ("mouse-set-region-1" function nil nil [44784 45238])
            ("mouse-scroll-delay" variable (:default-value 0.25) nil [45240 45747])
            ("mouse-scroll-min-lines" variable (:default-value 1) nil [45749 46199])
            ("mouse-scroll-subr" function (:arguments ("window" "jump" "overlay" "start")) nil [46201 47633])
            ("mouse-selection-click-count" variable nil nil [47635 47673])
            ("mouse-selection-click-count-buffer" variable nil nil [47675 47722])
            ("mouse-drag-region" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [47724 48601])
            ("mouse-posn-property" function (:arguments ("pos" "property")) nil [48603 49646])
            ("mouse-on-link-p" function (:arguments ("pos")) nil [49648 52112])
            ("mouse-fixup-help-message" function (:arguments ("msg")) nil [52114 52903])
            ("mouse-drag-track" function (:arguments ("start-event")) nil [52905 56655])
            ("mouse--drag-set-mark-and-point" function (:arguments ("start" "click" "click-count")) nil [56657 57023])
            ("mouse-skip-word" function (:arguments ("dir")) nil [57076 58178])
            ("mouse-start-end" function (:arguments ("start" "end" "mode")) nil [58180 60877])
            ("mouse-set-mark-fast" function (:arguments ("click")) nil [60961 61177])
            ("mouse-undouble-last-event" function (:arguments ("events")) nil [61179 61852])
            ("mouse-set-mark" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [61927 62424])
            ("mouse-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [62426 62833])
            ("mouse-yank-at-click" function
               (:user-visible-flag t
                :arguments ("click" "arg"))
                nil [62835 63603])
            ("mouse-yank-primary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [63605 64318])
            ("mouse-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [64320 64618])
            ("mouse-save-then-kill-posn" variable nil nil [64853 64891])
            ("mouse-save-then-kill-delete-region" function (:arguments ("beg" "end")) nil [64893 66374])
            ("mouse-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [66376 69821])
            ("global-set-key" code nil nil [69825 69876])
            ("global-set-key" code nil nil [69877 69931])
            ("global-set-key" code nil nil [69932 69987])
            ("global-set-key" code nil nil [69988 70048])
            ("global-set-key" code nil nil [70049 70099])
            ("mouse-secondary-overlay" variable
               (:constant-flag t
                :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol (quote face) (quote secondary-selection)) ol))
                nil [70101 70382])
            ("mouse-secondary-click-count" variable nil nil [70384 70422])
            ("mouse-secondary-start" variable nil nil [70516 70550])
            ("mouse-start-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [70552 71195])
            ("mouse-set-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [71197 71820])
            ("mouse-drag-secondary" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [71822 75051])
            ("mouse-yank-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [75053 75601])
            ("mouse-kill-secondary" function (:user-visible-flag t) nil [75603 76506])
            ("mouse-secondary-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [76508 80416])
            ("secondary-selection-exist-p" function nil nil [80418 80603])
            ("secondary-selection-to-region" function nil nil [80605 81405])
            ("secondary-selection-from-region" function nil nil [81407 81837])
            ("mouse-buffer-menu-maxlen" variable (:default-value 20) nil [81841 82102])
            ("mouse-buffer-menu-mode-mult" variable (:default-value 4) nil [82104 82592])
            ("mouse-buffer-menu-mode-groups" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("Info\\|Help\\|Apropos\\|Man" . "Help") ("\\bVM\\b\\|\\bMH\\b\\|Message\\|Mail\\|Group\\|Score\\|Summary\\|Article" . "Mail/News") ("\\<C\\>" . "C") ("ObjC" . "C") ("Text" . "Text") ("Outline" . "Text") ("\\(HT\\|SG\\|X\\|XHT\\)ML" . "SGML") ("log\\|diff\\|vc\\|cvs\\|Annotate" . "Version Control") ("Threads\\|Memory\\|Disassembly\\|Breakpoints\\|Frames\\|Locals\\|Registers\\|Inferior I/O\\|Debugger" . "GDB") ("Lisp" . "Lisp"))))) nil [82594 83404])
            ("mouse-buffer-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [83406 83886])
            ("mouse-buffer-menu-map" function nil nil [83888 87035])
            ("mouse-buffer-menu-alist" function (:arguments ("buffers")) nil [87037 88081])
            ("mouse-buffer-menu-split" function (:arguments ("title" "alist")) nil [88083 88836])
            ("define-obsolete-function-alias" code nil nil [88839 88924])
            ("font-menu-add-default" function nil nil [88946 89254])
            ("x-fixed-font-alist" variable (:default-value (list (purecopy "Font Menu") (cons (purecopy "Misc") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("fixed" "fixed") ("6x10" "-misc-fixed-medium-r-normal--10-*-*-*-c-60-iso8859-1" "6x10") ("6x12" "-misc-fixed-medium-r-semicondensed--12-*-*-*-c-60-iso8859-1" "6x12") ("6x13" "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" "6x13") ("7x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1" "7x13") ("7x14" "-misc-fixed-medium-r-normal--14-*-*-*-c-70-iso8859-1" "7x14") ("8x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-80-iso8859-1" "8x13") ("9x15" "-misc-fixed-medium-r-normal--15-*-*-*-c-90-iso8859-1" "9x15") ("10x20" "-misc-fixed-medium-r-normal--20-*-*-*-c-100-iso8859-1" "10x20") ("11x18" "-misc-fixed-medium-r-normal--18-*-*-*-c-110-iso8859-1" "11x18") ("12x24" "-misc-fixed-medium-r-normal--24-*-*-*-c-120-iso8859-1" "12x24") ("") ("clean 5x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-50-iso8859-1") ("clean 6x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-60-iso8859-1") ("clean 8x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-80-iso8859-1") ("clean 8x10" "-schumacher-clean-medium-r-normal--10-*-*-*-c-80-iso8859-1") ("clean 8x14" "-schumacher-clean-medium-r-normal--14-*-*-*-c-80-iso8859-1") ("clean 8x16" "-schumacher-clean-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("") ("sony 8x16" "-sony-fixed-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("lucidasanstypewriter-12" "-b&h-lucidatypewriter-medium-r-normal-sans-*-120-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-14" "-b&h-lucidatypewriter-bold-r-normal-sans-*-140-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-24" "-b&h-lucidatypewriter-bold-r-normal-sans-*-240-*-*-*-*-iso8859-1"))))) (cons (purecopy "Courier") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("8" "-adobe-courier-medium-r-normal--*-80-*-*-m-*-iso8859-1") ("10" "-adobe-courier-medium-r-normal--*-100-*-*-m-*-iso8859-1") ("12" "-adobe-courier-medium-r-normal--*-120-*-*-m-*-iso8859-1") ("14" "-adobe-courier-medium-r-normal--*-140-*-*-m-*-iso8859-1") ("18" "-adobe-courier-medium-r-normal--*-180-*-*-m-*-iso8859-1") ("24" "-adobe-courier-medium-r-normal--*-240-*-*-m-*-iso8859-1") ("8 bold" "-adobe-courier-bold-r-normal--*-80-*-*-m-*-iso8859-1") ("10 bold" "-adobe-courier-bold-r-normal--*-100-*-*-m-*-iso8859-1") ("12 bold" "-adobe-courier-bold-r-normal--*-120-*-*-m-*-iso8859-1") ("14 bold" "-adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1") ("18 bold" "-adobe-courier-bold-r-normal--*-180-*-*-m-*-iso8859-1") ("24 bold" "-adobe-courier-bold-r-normal--*-240-*-*-m-*-iso8859-1") ("8 slant" "-adobe-courier-medium-o-normal--*-80-*-*-m-*-iso8859-1") ("10 slant" "-adobe-courier-medium-o-normal--*-100-*-*-m-*-iso8859-1") ("12 slant" "-adobe-courier-medium-o-normal--*-120-*-*-m-*-iso8859-1") ("14 slant" "-adobe-courier-medium-o-normal--*-140-*-*-m-*-iso8859-1") ("18 slant" "-adobe-courier-medium-o-normal--*-180-*-*-m-*-iso8859-1") ("24 slant" "-adobe-courier-medium-o-normal--*-240-*-*-m-*-iso8859-1") ("8 bold slant" "-adobe-courier-bold-o-normal--*-80-*-*-m-*-iso8859-1") ("10 bold slant" "-adobe-courier-bold-o-normal--*-100-*-*-m-*-iso8859-1") ("12 bold slant" "-adobe-courier-bold-o-normal--*-120-*-*-m-*-iso8859-1") ("14 bold slant" "-adobe-courier-bold-o-normal--*-140-*-*-m-*-iso8859-1") ("18 bold slant" "-adobe-courier-bold-o-normal--*-180-*-*-m-*-iso8859-1") ("24 bold slant" "-adobe-courier-bold-o-normal--*-240-*-*-m-*-iso8859-1"))))))) nil [89256 93536])
            ("declare-function" code nil nil [93538 93591])
            ("mouse-select-font" function (:user-visible-flag t) nil [93593 93974])
            ("declare-function" code nil nil [93976 94023])
            ("mouse-set-font" function
               (:user-visible-flag t
                :arguments ("fonts"))
                nil [94025 94872])
            ("mouse-appearance-menu-map" variable nil nil [94874 94912])
            ("declare-function" code nil nil [94913 94980])
            ("declare-function" code nil nil [94991 95097])
            ("declare-function" code nil nil [95098 95169])
            ("w32-use-w32-font-dialog" variable nil nil [95170 95202])
            ("w32-fixed-font-alist" variable nil nil [95203 95232])
            ("mouse-appearance-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [95234 98012])
            ("mouse-drag-and-drop-region" variable nil nil [98042 98744])
            ("mouse-drag-and-drop-region-cut-when-buffers-differ" variable nil nil [98746 99175])
            ("mouse-drag-and-drop-region-show-tooltip" variable (:default-value 256) nil [99177 99613])
            ("mouse-drag-and-drop-region-show-cursor" variable (:default-value t) nil [99615 100010])
            ("mouse-drag-and-drop-region" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [100012 100311])
            ("mouse-drag-and-drop-region" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [100313 111604])
            ("global-set-key" code nil nil [111642 111692])
            ("global-set-key" code nil nil [111693 111736])
            ("global-set-key" code nil nil [111737 111786])
            ("mouse--strip-first-event" function (:arguments ("_prompt")) nil [111788 111877])
            ("define-key" code nil nil [111879 111956])
            ("define-key" code nil nil [111957 112035])
            ("global-set-key" code nil nil [112037 112083])
            ("define-key" code nil nil [112156 112234])
            ("define-key" code nil nil [112235 112312])
            ("global-set-key" code nil nil [112313 112361])
            ("define-key" code nil nil [112362 112440])
            ("define-key" code nil nil [112441 112518])
            ("global-set-key" code nil nil [112643 112695])
            ("if" code nil nil [112696 112792])
            ("global-set-key" code nil nil [112836 113094])
            ("global-set-key" code nil nil [113314 113381])
            ("global-set-key" code nil nil [113382 113441])
            ("global-set-key" code nil nil [113508 113571])
            ("global-set-key" code nil nil [113572 113629])
            ("global-set-key" code nil nil [113630 113694])
            ("global-set-key" code nil nil [113695 113752])
            ("global-set-key" code nil nil [113753 113824])
            ("global-set-key" code nil nil [113825 113904])
            ("global-set-key" code nil nil [113905 113988])
            ("global-set-key" code nil nil [113989 114060])
            ("global-set-key" code nil nil [114061 114122])
            ("global-set-key" code nil nil [114123 114196])
            ("global-set-key" code nil nil [114197 114268])
            ("global-set-key" code nil nil [114269 114317])
            ("global-set-key" code nil nil [114318 114391])
            ("global-set-key" code nil nil [114392 114460])
            ("global-set-key" code nil nil [114461 114510])
            ("global-set-key" code nil nil [114511 114587])
            ("global-set-key" code nil nil [114588 114651])
            ("global-set-key" code nil nil [114652 114696])
            ("global-set-key" code nil nil [114697 114772])
            ("global-set-key" code nil nil [114773 114823])
            ("global-set-key" code nil nil [114824 114885])
            ("global-set-key" code nil nil [114886 114929])
            ("global-set-key" code nil nil [114930 115007])
            ("global-set-key" code nil nil [115008 115059])
            ("global-set-key" code nil nil [115060 115125])
            ("global-set-key" code nil nil [115126 115171])
            ("global-set-key" code nil nil [115172 115255])
            ("global-set-key" code nil nil [115256 115310])
            ("global-set-key" code nil nil [115311 115378])
            ("global-set-key" code nil nil [115379 115425])
            ("global-set-key" code nil nil [115426 115507])
            ("global-set-key" code nil nil [115508 115561])
            ("mouse" package nil nil [115563 115579]))          
      :file "mouse.el"
      :pointmax 115604
      :fsize 115609
      :lastmodtime '(23525 29514 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3640 3660])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3662 3837])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3839 4166])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4168 4623])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4625 4881])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4883 5439])
            ("put" code nil nil [5474 5533])
            ("hi-lock-auto-select-face" variable nil nil [5535 5772])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5774 5859])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5861 6179])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [6181 6346])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "light green" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "light green")) (t (:background "green"))))
                :type "face")
                nil [6348 6663])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6665 6842])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6844 6939])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6941 7113])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [7115 7290])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7292 7461])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7463 7596])
            ("defvar-local" code nil nil [7598 7702])
            ("put" code nil nil [7703 7750])
            ("defvar-local" code nil nil [7752 7865])
            ("put" code nil nil [7866 7920])
            ("define-obsolete-variable-alias" code nil nil [7922 8038])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [8039 8237])
            ("define-obsolete-variable-alias" code nil nil [8239 8382])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8384 8494])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8496 8836])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8838 9064])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [highlight-symbol-at-point] (quote (menu-item "Highlight Symbol at Point" highlight-symbol-at-point :help "Highlight symbol found near point without prompting."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [9066 10582])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "w." (quote highlight-symbol-at-point)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10584 11069])
            ("define-minor-mode" code nil nil [11108 15705])
            ("define-globalized-minor-mode" code nil nil [15722 15832])
            ("turn-on-hi-lock-if-enabled" function nil nil [15834 15993])
            ("defalias" code nil nil [16010 16079])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16095 16924])
            ("defalias" code nil nil [16942 16991])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17007 17636])
            ("defalias" code nil nil [17653 17709])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17725 18599])
            ("defalias" code nil nil [18616 18683])
            ("hi-lock-face-symbol-at-point" function (:user-visible-flag t) nil [18699 19386])
            ("hi-lock-keyword->face" function (:arguments ("keyword")) nil [19388 19458])
            ("declare-function" code nil nil [19508 19564])
            ("hi-lock--regexps-at-point" function nil nil [19566 21211])
            ("defvar-local" code nil nil [21213 21393])
            ("defalias" code nil nil [21410 21463])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [21479 24550])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [24567 25325])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [25356 26151])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [26153 26500])
            ("hi-lock-read-face-name" function nil nil [26502 27656])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [27658 29406])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [29408 29736])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [29738 31166])
            ("hi-lock-font-lock-hook" function nil nil [31168 31392])
            ("hi-lock--hashcons-hash" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [31394 31512])
            ("hi-lock--hashcons" function (:arguments ("string")) nil [31514 31690])
            ("hi-lock-unload-function" function nil nil [31692 31824])
            ("hi-lock" package nil nil [31826 31844]))          
      :file "hi-lock.el"
      :pointmax 31871
      :fsize 31870
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "font-lock.el"
      :fsize 102935
      :lastmodtime '(23525 29508 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1167 3375])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3393 4588])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4795 5461])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5796 6268])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6725 7035])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7037 9256])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9258 9630])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9632 10596])
            ("decompose-string" function (:arguments ("string")) nil [10598 10770])
            ("compose-chars" function (:arguments ("args")) nil [10772 11648])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11650 13632])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13636 15080])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15082 15993])
            ("global-set-key" code nil nil [15995 16052])
            ("lgstring-header" function (:arguments ("gstring")) nil [16173 16226])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16227 16298])
            ("lgstring-font" function (:arguments ("gstring")) nil [16299 16368])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16369 16445])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16446 16524])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16525 16580])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16581 16640])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16641 16701])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16702 16764])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16765 16841])
            ("lglyph-from" function (:arguments ("glyph")) nil [16843 16888])
            ("lglyph-to" function (:arguments ("glyph")) nil [16889 16932])
            ("lglyph-char" function (:arguments ("glyph")) nil [16933 16978])
            ("lglyph-code" function (:arguments ("glyph")) nil [16979 17024])
            ("lglyph-width" function (:arguments ("glyph")) nil [17025 17071])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17072 17121])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17122 17171])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17172 17219])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17220 17268])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17269 17320])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17322 17415])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17416 17475])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17476 17535])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17536 17598])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17599 17732])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17771 17823])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17870 18369])
            ("lgstring-remove-glyph" function (:arguments ("gstring" "idx")) nil [18408 18723])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18725 19298])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [19300 20514])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20516 26437])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [26439 28230])
            ("when" code nil nil [28277 28722])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [28724 30667])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [30670 31609])
            ("put" code nil nil [31611 31658])
            ("make-variable-buffer-local" code nil nil [31660 31715])
            ("setq-default" code nil nil [31716 31776])
            ("define-minor-mode" code nil nil [31793 32394])
            ("make-variable-buffer-local" code nil nil [32446 32497])
            ("define-minor-mode" code nil nil [32514 32894])
            ("defalias" code nil nil [32896 32954])
            ("composite" package nil nil [32956 32976]))          
      :file "composite.el"
      :pointmax 33008
      :fsize 33007
      :lastmodtime '(23525 29504 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable nil nil [1923 2370])
            ("display-format-alist" variable nil nil [2372 2624])
            ("initial-frame-alist" variable nil nil [2816 4049])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4051 4756])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5507 5803])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5805 6065])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6067 6317])
            ("frame-initial-frame" variable nil nil [6813 6845])
            ("frame-initial-frame-alist" variable nil nil [6924 6958])
            ("frame-initial-geometry-arguments" variable nil nil [6960 7005])
            ("frame-initialize" function nil nil [7194 8726])
            ("frame-notice-user-settings" variable (:default-value t) nil [8728 8837])
            ("declare-function" code nil nil [8839 8898])
            ("declare-function" code nil nil [8899 8971])
            ("defalias" code nil nil [8973 9023])
            ("frame-notice-user-settings" function nil nil [9220 20335])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [20337 20538])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20605 21780])
            ("get-other-frame" function nil nil [21782 22040])
            ("next-multiframe-window" function (:user-visible-flag t) nil [22042 22300])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [22302 22566])
            ("window-system-for-display" function (:arguments ("display")) nil [22568 23063])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [23065 23334])
            ("declare-function" code nil nil [23336 23393])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [23395 24747])
            ("make-frame-command" function (:user-visible-flag t) nil [24749 25012])
            ("before-make-frame-hook" variable nil nil [25014 25111])
            ("after-make-frame-functions" variable nil nil [25113 25279])
            ("after-setting-font-hook" variable nil nil [25281 25377])
            ("define-obsolete-function-alias" code nil nil [25407 25469])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [25471 25581])
            ("x-display-name" variable nil nil [25583 25606])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25608 29519])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29521 29820])
            ("minibuffer-frame-list" function nil nil [29822 30015])
            ("get-device-terminal" function (:arguments ("device")) nil [30067 30820])
            ("frames-on-display-list" function (:arguments ("device")) nil [30822 31264])
            ("framep-on-display" function (:arguments ("terminal")) nil [31266 31705])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31707 32568])
            ("declare-function" code nil nil [32570 32641])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32643 33753])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33755 34865])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34867 35097])
            ("suspend-frame" function (:user-visible-flag t) nil [35099 35576])
            ("make-frame-names-alist" function nil nil [35578 35984])
            ("frame-name-history" variable nil nil [35986 36017])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36018 36863])
            ("frame-background-mode" variable nil nil [36890 37566])
            ("declare-function" code nil nil [37568 37662])
            ("declare-function" code nil nil [37707 37777])
            ("inhibit-frame-set-background-mode" variable nil nil [37779 37825])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37827 40725])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [40727 41243])
            ("current-frame-configuration" function nil nil [41274 41870])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41872 43867])
            ("frame-height" function (:arguments ("frame")) nil [43962 44628])
            ("frame-width" function (:arguments ("frame")) nil [44630 44835])
            ("defalias" code nil nil [44837 44896])
            ("defalias" code nil nil [44897 44946])
            ("defalias" code nil nil [44947 44998])
            ("frame-inner-width" function (:arguments ("frame")) nil [45000 45250])
            ("frame-inner-height" function (:arguments ("frame")) nil [45252 45505])
            ("frame-outer-width" function (:arguments ("frame")) nil [45507 45764])
            ("frame-outer-height" function (:arguments ("frame")) nil [45766 46025])
            ("declare-function" code nil nil [46027 46132])
            ("define-obsolete-function-alias" code nil nil [46134 46207])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [46209 49525])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [49527 49778])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49780 50525])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50527 51272])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51274 51760])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51762 52228])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [52230 52612])
            ("define-minor-mode" code nil nil [52614 53494])
            ("define-minor-mode" code nil nil [53496 54337])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54339 54715])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [54717 55439])
            ("declare-function" code nil nil [55441 55503])
            ("declare-function" code nil nil [55504 55570])
            ("declare-function" code nil nil [55571 55635])
            ("frame-geometry" function (:arguments ("frame")) nil [55637 58116])
            ("frame--size-history" function (:arguments ("frame")) nil [58118 58946])
            ("declare-function" code nil nil [58948 59012])
            ("declare-function" code nil nil [59013 59081])
            ("declare-function" code nil nil [59082 59148])
            ("frame-edges" function (:arguments ("frame" "type")) nil [59150 60136])
            ("declare-function" code nil nil [60138 60201])
            ("declare-function" code nil nil [60202 60261])
            ("declare-function" code nil nil [60262 60323])
            ("mouse-absolute-pixel-position" function nil nil [60325 60875])
            ("declare-function" code nil nil [60877 60948])
            ("declare-function" code nil nil [60949 61022])
            ("declare-function" code nil nil [61023 61092])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [61094 61595])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [61597 62287])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [62289 63631])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [63633 64444])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [64446 65251])
            ("declare-function" code nil nil [65253 65321])
            ("declare-function" code nil nil [65322 65394])
            ("declare-function" code nil nil [65395 65465])
            ("frame-list-z-order" function (:arguments ("display")) nil [65467 66259])
            ("declare-function" code nil nil [66261 66336])
            ("declare-function" code nil nil [66337 66416])
            ("declare-function" code nil nil [66417 66494])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [66496 67857])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [67859 69021])
            ("declare-function" code nil nil [69058 69101])
            ("display-mouse-p" function (:arguments ("display")) nil [69103 69894])
            ("display-popup-menus-p" function (:arguments ("display")) nil [69896 70182])
            ("display-graphic-p" function (:arguments ("display")) nil [70184 70641])
            ("display-images-p" function (:arguments ("display")) nil [70643 70921])
            ("defalias" code nil nil [70923 70975])
            ("defalias" code nil nil [70976 71027])
            ("display-selections-p" function (:arguments ("display")) nil [71029 71657])
            ("declare-function" code nil nil [71659 71725])
            ("display-screens" function (:arguments ("display")) nil [71727 72116])
            ("declare-function" code nil nil [72118 72189])
            ("display-pixel-height" function (:arguments ("display")) nil [72191 72924])
            ("declare-function" code nil nil [72926 72996])
            ("display-pixel-width" function (:arguments ("display")) nil [72998 73726])
            ("display-mm-dimensions-alist" variable nil nil [73728 74346])
            ("declare-function" code nil nil [74348 74416])
            ("display-mm-height" function (:arguments ("display")) nil [74418 75297])
            ("declare-function" code nil nil [75299 75366])
            ("display-mm-width" function (:arguments ("display")) nil [75368 76243])
            ("declare-function" code nil nil [76245 76317])
            ("display-backing-store" function (:arguments ("display")) nil [76422 76940])
            ("declare-function" code nil nil [76942 77011])
            ("display-save-under" function (:arguments ("display")) nil [77013 77410])
            ("declare-function" code nil nil [77412 77477])
            ("display-planes" function (:arguments ("display")) nil [77479 77920])
            ("declare-function" code nil nil [77922 77992])
            ("display-color-cells" function (:arguments ("display")) nil [77994 78439])
            ("declare-function" code nil nil [78441 78512])
            ("display-visual-class" function (:arguments ("display")) nil [78514 79104])
            ("declare-function" code nil nil [79106 79192])
            ("declare-function" code nil nil [79193 79282])
            ("declare-function" code nil nil [79283 79371])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [79373 81898])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [81930 83800])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [83802 85058])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [85061 86690])
            ("define-obsolete-variable-alias" code nil nil [86735 86821])
            ("window-divider" customgroup (:user-visible-flag t) nil [86846 86949])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [86951 87815])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [87817 87947])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [87949 88599])
            ("window-divider-default-right-width" variable (:default-value 6) nil [88601 89242])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [89244 90536])
            ("define-minor-mode" code nil nil [90538 91118])
            ("blink-cursor-idle-timer" variable nil nil [91141 91316])
            ("blink-cursor-timer" variable nil nil [91318 91480])
            ("cursor" customgroup (:user-visible-flag t) nil [91482 91567])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [91569 91891])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [91893 92141])
            ("blink-cursor-blinks" variable (:default-value 10) nil [92143 92353])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [92355 92468])
            ("blink-cursor--start-idle-timer" function nil nil [92470 93018])
            ("blink-cursor--start-timer" function nil nil [93020 93305])
            ("blink-cursor-start" function nil nil [93307 93910])
            ("blink-cursor-timer-function" function nil nil [93912 94568])
            ("blink-cursor-end" function nil nil [94571 94966])
            ("blink-cursor-suspend" function nil nil [94968 95323])
            ("blink-cursor-check" function nil nil [95325 95660])
            ("define-obsolete-variable-alias" code nil nil [95662 95734])
            ("define-minor-mode" code nil nil [95736 96852])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [96891 97893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [97895 99330])
            ("define-key" code nil nil [99352 99400])
            ("define-key" code nil nil [99401 99450])
            ("define-key" code nil nil [99451 99493])
            ("define-key" code nil nil [99494 99535])
            ("define-key" code nil nil [99536 99590])
            ("define-key" code nil nil [99591 99651])
            ("define-key" code nil nil [99652 99712])
            ("define-obsolete-variable-alias" code nil nil [99762 99844])
            ("make-variable-buffer-local" code nil nil [99846 99900])
            ("make-obsolete-variable" code nil nil [99927 100021])
            ("mapc" code nil nil [100422 100837])
            ("frame" package nil nil [100839 100855]))          
      :file "frame.el"
      :pointmax 100880
      :fsize 100879
      :lastmodtime '(23525 29509 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1442 1479])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1481 2283])
            ("setenv-history" variable nil nil [2331 2358])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2360 2462])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2464 4018])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4020 4402])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4404 5396])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5466 7869])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7871 8921])
            ("env" package nil nil [8923 8937]))          
      :file "env.el"
      :pointmax 8960
      :fsize 8959
      :lastmodtime '(23525 29506 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1228 1245])
            ("cl-defstruct" code nil nil [1296 1628])
            ("cl-defun" code nil nil [1630 2251])
            ("register-alist" variable nil nil [2253 2966])
            ("register" customgroup (:user-visible-flag t) nil [2968 3054])
            ("register-separator" variable nil nil [3056 3452])
            ("register-preview-delay" variable (:default-value 1) nil [3454 3780])
            ("get-register" function (:arguments ("register")) nil [3782 3921])
            ("set-register" function (:arguments ("register" "value")) nil [3923 4163])
            ("register-describe-oneline" function (:arguments ("c")) nil [4165 4484])
            ("register-preview-default" function (:arguments ("r")) nil [4486 4686])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4688 4892])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4894 5536])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5538 6973])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6975 7662])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7664 8308])
            ("set-advertised-calling-convention" code nil nil [8370 8465])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8467 9099])
            ("set-advertised-calling-convention" code nil nil [9161 9255])
            ("make-obsolete" code nil nil [9257 9334])
            ("defalias" code nil nil [9336 9383])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9384 11427])
            ("register-swap-out" function nil nil [11429 11782])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11784 12485])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12487 13345])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13347 13826])
            ("list-registers" function (:user-visible-flag t) nil [13828 14205])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14207 16408])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16410 17617])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17619 18590])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18592 19598])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19600 20610])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20612 21548])
            ("register" package nil nil [21550 21569]))          
      :file "register.el"
      :pointmax 21596
      :fsize 21595
      :lastmodtime '(23525 29516 0 0)
      :unmatched-syntax '((close-paren 1245 . 1246) (symbol 1210 . 1227) (open-paren 1209 . 1210)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6710 6729])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6795 6889])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7284 7509])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7588 7847])
            ("define-obsolete-variable-alias" code nil nil [7912 8036])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8038 8821])
            ("define-obsolete-variable-alias" code nil nil [8922 9040])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9042 9418])
            ("define-obsolete-variable-alias" code nil nil [9554 9662])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9664 9965])
            ("define-obsolete-variable-alias" code nil nil [9967 10078])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10080 10382])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10384 11501])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11503 12023])
            ("hilit-chg-list" variable nil nil [12057 12084])
            ("hilit-chg-string" variable (:default-value " ??") nil [12085 12116])
            ("make-variable-buffer-local" code nil nil [12118 12164])
            ("define-minor-mode" code nil nil [12201 13979])
            ("define-minor-mode" code nil nil [13997 14681])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14684 16295])
            ("highlight-changes-face-list" variable nil nil [16298 16957])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [16960 17598])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17601 17940])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [17943 18778])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18780 19278])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19281 19601])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [19618 19944])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [19946 22668])
            ("hilit-chg-update" function nil nil [22670 23101])
            ("hilit-chg-set" function nil nil [23103 23513])
            ("hilit-chg-clear" function nil nil [23515 24222])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24240 24803])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [24821 25650])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [25729 27047])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27049 27450])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [27467 29599])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [29749 32141])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32158 33026])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33043 34428])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34431 34854])
            ("hilit-chg-get-diff-list-hk" function nil nil [34857 36320])
            ("define-globalized-minor-mode" code nil nil [36410 36526])
            ("define-obsolete-function-alias" code nil nil [36528 36627])
            ("highlight-changes-mode-turn-on" function nil nil [36629 37394])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37494 37647])
            ("add-to-list" code nil nil [37649 37758])
            ("add-to-list" code nil nil [37760 37821])
            ("hilit-chg-unload-function" function nil nil [38203 38347])
            ("hilit-chg" package nil nil [38349 38369]))          
      :file "hilit-chg.el"
      :pointmax 38398
      :fsize 38397
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "wid-edit.el"
      :fsize 126879
      :lastmodtime '(23525 29521 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1050 1067])
            ("obarray" include nil nil [1069 1087])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1089 1203])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1205 1395])
            ("only-global-abbrevs" variable nil nil [1397 1648])
            ("define-minor-mode" code nil nil [1650 2078])
            ("put" code nil nil [2080 2129])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2133 2413])
            ("define-obsolete-variable-alias" code nil nil [2414 2496])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2498 2669])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2671 3009])
            ("insert-abbrevs" function (:user-visible-flag t) nil [3011 3297])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3299 3597])
            ("abbrev-table-name" function (:arguments ("table")) nil [3599 3885])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3887 4773])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4775 5718])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5720 5915])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5917 6915])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6917 7434])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7436 7761])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7763 9522])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9524 9844])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9846 10079])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10083 10623])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10625 11115])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11117 11710])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11712 12143])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12145 12488])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12490 13101])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13103 13764])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13766 14461])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14487 14640])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14642 14872])
            ("defalias" code nil nil [14874 14963])
            ("defalias" code nil nil [14965 15135])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15191 15332])
            ("make-abbrev-table" function (:arguments ("props")) nil [15334 16073])
            ("abbrev-table-p" function (:arguments ("object")) nil [16075 16245])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16247 16827])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16829 17076])
            ("abbrev-minor-mode-table-alist" variable nil nil [17078 17333])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17335 17610])
            ("abbrevs-changed" variable nil nil [17612 17760])
            ("abbrev-all-caps" variable nil nil [17762 17903])
            ("abbrev-start-location" variable nil nil [17905 18107])
            ("abbrev-start-location-buffer" variable nil nil [18109 18287])
            ("last-abbrev" variable nil nil [18289 18386])
            ("last-abbrev-text" variable nil nil [18388 18518])
            ("last-abbrev-location" variable nil nil [18520 18610])
            ("pre-abbrev-expand-hook" variable nil nil [18787 19062])
            ("make-obsolete-variable" code nil nil [19063 19142])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19144 19771])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19773 22914])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22916 23659])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23661 24019])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [24021 24443])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24445 25492])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25495 26443])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26445 27139])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27142 27402])
            ("abbrev--before-point" function nil nil [27405 30023])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [30025 33069])
            ("abbrev-expand-functions" variable nil nil [33071 33157])
            ("make-obsolete-variable" code nil nil [33158 33238])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33240 33443])
            ("expand-abbrev" function (:user-visible-flag t) nil [33445 33936])
            ("abbrev--default-expand" function nil nil [33938 35457])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35459 36357])
            ("abbrev--write" function (:arguments ("sym")) nil [36359 36814])
            ("abbrev--describe" function (:arguments ("sym")) nil [36816 37210])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [37212 38253])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38255 40544])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40546 41397])
            ("define-derived-mode" code nil nil [41492 41622])
            ("abbrev" package nil nil [41624 41641]))          
      :file "abbrev.el"
      :pointmax 41667
      :fsize 41666
      :lastmodtime '(23525 29502 0 0)
      :unmatched-syntax '((close-paren 1067 . 1068) (symbol 1032 . 1049) (open-paren 1031 . 1032)))
    (semanticdb-table "semanticdb-table"
      :file "obarray.el"
      :fsize 2183
      :lastmodtime '(23525 29514 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el"
      :pointmax 59422
      :fsize 59421
      :lastmodtime '(23525 29504 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "widget.el"
      :fsize 3916
      :lastmodtime '(23525 29521 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [3956 3977])
            ("cl-lib" include nil nil [3978 3995])
            ("button" include nil nil [3996 4013])
            ("man" customgroup (:user-visible-flag t) nil [4015 4114])
            ("Man-notify" variable nil nil [4116 4135])
            ("Man-filter-list" variable nil nil [4137 4742])
            ("Man-uses-untabify-flag" variable (:default-value t) nil [4744 4845])
            ("Man-sed-script" variable nil nil [4846 4941])
            ("Man-fontify-manpage-flag" variable (:default-value t) nil [4943 5062])
            ("Man-overstrike" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [5064 5189])
            ("Man-underline" variable
               (:default-value (quote ((t (:inherit underline))))
                :type "face")
                nil [5191 5321])
            ("Man-reverse" variable
               (:default-value (quote ((t (:inherit highlight))))
                :type "face")
                nil [5323 5453])
            ("Man-ansi-color-map" variable (:default-value (let ((ansi-color-faces-vector [default Man-overstrike default Man-underline Man-underline default default Man-reverse])) (ansi-color-make-color-map))) nil [5455 5703])
            ("Man-notify-method" variable (:default-value (if (boundp (quote Man-notify)) Man-notify (quote friendly))) nil [5770 6848])
            ("Man-width" variable nil nil [6850 7306])
            ("Man-frame-parameters" variable nil nil [7308 7529])
            ("Man-downcase-section-letters-flag" variable (:default-value t) nil [7531 7995])
            ("Man-circular-pages-flag" variable (:default-value t) nil [7997 8138])
            ("Man-section-translations-alist" variable (:default-value (list (quote ("3C++" . "3")) (quote ("3X11" . "3")) (quote ("1-UCB" . "")))) nil [8140 8779])
            ("Man-header-file-path" variable (:default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil (quote (t nil)) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base (quote ("/usr/include" "/usr/local/include")))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include")))))) nil [8819 9473])
            ("Man-name-local-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("NOM" "NAME"))) "$")) nil [9475 9729])
            ("manual-program" variable (:default-value "man") nil [9731 9841])
            ("Man-untabify-command" variable (:default-value "pr") nil [9843 9953])
            ("Man-untabify-command-args" variable (:default-value (list "-t" "-e")) nil [9955 10122])
            ("Man-sed-command" variable (:default-value "sed") nil [10124 10237])
            ("Man-awk-command" variable (:default-value "awk") nil [10239 10352])
            ("Man-coding-system" variable nil nil [10510 10720])
            ("Man-mode-hook" variable nil nil [10722 10818])
            ("Man-cooked-hook" variable nil nil [10820 10952])
            ("Man-name-regexp" variable (:default-value "[-[:alnum:]_\302\255+][-[:alnum:]_.:\302\255+]*") nil [10954 11089])
            ("Man-section-regexp" variable (:default-value "[0-9][a-zA-Z0-9+]*\\|[LNln]") nil [11091 11220])
            ("Man-page-header-regexp" variable (:default-value (if (string-match "-solaris2\\." system-configuration) (concat "^[-[:alnum:]_].*[ 	]\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\)$") (concat "^[ 	]*\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\).*\\1"))) nil [11222 11558])
            ("Man-heading-regexp" variable (:default-value "^\\([[:upper:]][[:upper:]0-9 /-]+\\)$") nil [11560 11686])
            ("Man-see-also-regexp" variable (:default-value "\\(SEE ALSO\\|VOIR AUSSI\\|SIEHE AUCH\\|V\303\211ASE TAMBI\303\211N\\|VEJA TAMB\303\211M\\|VEDERE ANCHE\\|ZOBACZ TAK\305\273E\\|\304\260LG\304\260L\304\260 BELGELER\\|\345\217\202\347\205\247\\|\345\217\202\350\247\201 SEE ALSO\\|\345\217\203\350\246\213 SEE ALSO\\)") nil [11688 11987])
            ("Man-first-heading-regexp" variable (:default-value "^NAME$\\|^[ 	]*No manual entry fo.*$") nil [12203 12397])
            ("Man-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\(\342\200\220?
[ 	]+" Man-name-regexp "\\)*\\)[ 	]*(\\(" Man-section-regexp "\\))")) nil [12399 12611])
            ("Man-apropos-regexp" variable (:default-value (concat "\\[\\(" Man-name-regexp "\\)\\][ 	]*(\\(" Man-section-regexp "\\))")) nil [12613 12801])
            ("Man-synopsis-regexp" variable (:default-value "SYNOPSIS") nil [12803 12959])
            ("Man-files-regexp" variable (:default-value "FILES\\>") nil [12961 13191])
            ("Man-include-regexp" variable (:default-value "#[ 	]*include[ 	]*") nil [13193 13310])
            ("Man-file-name-regexp" variable (:default-value "[^<>\", 	
]+") nil [13312 13432])
            ("Man-normal-file-prefix-regexp" variable (:default-value "[/~$]") nil [13434 13553])
            ("Man-header-regexp" variable (:default-value (concat "\\(" Man-include-regexp "\\)" "[<\"]" "\\(" Man-file-name-regexp "\\)" "[>\"]")) nil [13555 13764])
            ("Man-normal-file-regexp" variable (:default-value (concat Man-normal-file-prefix-regexp Man-file-name-regexp)) nil [13766 13921])
            ("Man-hyphenated-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\)\\((\\(" Man-section-regexp "\\))\\)?")) nil [14019 14206])
            ("Man-switches" variable nil nil [14208 14442])
            ("Man-specified-section-option" variable (:default-value (if (string-match "-solaris[0-9.]*$" system-configuration) "-s" "")) nil [14444 14622])
            ("Man-support-local-filenames" variable (:default-value (quote auto-detect)) nil [14624 14897])
            ("man-imenu-title" variable (:default-value "Contents") nil [14899 15050])
            ("Man-original-frame" variable nil nil [15100 15127])
            ("make-variable-buffer-local" code nil nil [15128 15176])
            ("Man-arguments" variable nil nil [15177 15199])
            ("make-variable-buffer-local" code nil nil [15200 15243])
            ("put" code nil nil [15244 15283])
            ("Man--sections" variable nil nil [15285 15311])
            ("make-variable-buffer-local" code nil nil [15312 15355])
            ("Man--refpages" variable nil nil [15356 15382])
            ("make-variable-buffer-local" code nil nil [15383 15426])
            ("Man-page-list" variable nil nil [15427 15453])
            ("make-variable-buffer-local" code nil nil [15454 15497])
            ("Man-current-page" variable nil nil [15498 15525])
            ("make-variable-buffer-local" code nil nil [15526 15572])
            ("Man-page-mode-string" variable (:default-value "1 of 1") nil [15573 15611])
            ("make-variable-buffer-local" code nil nil [15612 15662])
            ("Man-sysv-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g
	s/_//g
        s/o+/o/g
        s/+o/o/g
	:ovstrk
	s/\\(.\\)\\1/\\1/g
	t ovstrk
	}
/\\[[0-9][0-9]*m/ s///g")
                nil [15664 15910])
            ("Man-berkeley-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g\\
	s/_//g\\
        s/o+/o/g\\
        s/+o/o/g\\
	:ovstrk\\
	s/\\(.\\)\\1/\\1/g\\
	t ovstrk\\
	}\\
/\\[[0-9][0-9]*m/ s///g")
                nil [15912 16182])
            ("Man-topic-history" variable nil nil [16184 16236])
            ("Man-mode-syntax-table" variable (:default-value (let ((table (copy-syntax-table (standard-syntax-table)))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 58 "w" table) table)) nil [16238 16539])
            ("Man-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map "n" (quote Man-next-section)) (define-key map "p" (quote Man-previous-section)) (define-key map "n" (quote Man-next-manpage)) (define-key map "p" (quote Man-previous-manpage)) (define-key map "." (quote beginning-of-buffer)) (define-key map "r" (quote Man-follow-manual-reference)) (define-key map "g" (quote Man-goto-section)) (define-key map "s" (quote Man-goto-see-also-section)) (define-key map "k" (quote Man-kill)) (define-key map "u" (quote Man-update-manpage)) (define-key map "m" (quote man)) (define-key map "" (quote man-follow)) (easy-menu-define nil map "`Man-mode' menu." (quote ("Man" ["Next Section" Man-next-section t] ["Previous Section" Man-previous-section t] ["Go To Section..." Man-goto-section t] ["Go To \"SEE ALSO\" Section" Man-goto-see-also-section :active (cl-member Man-see-also-regexp Man--sections :test (function string-match-p))] ["Follow Reference..." Man-follow-manual-reference :active Man--refpages :help "Go to a manpage referred to in the \"SEE ALSO\" section"] "--" ["Next Manpage" Man-next-manpage :active (> (length Man-page-list) 1)] ["Previous Manpage" Man-previous-manpage :active (> (length Man-page-list) 1)] "--" ["Man..." man t] ["Kill Buffer" Man-kill t] ["Quit" quit-window t]))) map)) nil [16541 18304])
            ("define-button-type" code nil nil [18317 18480])
            ("Man-xref-button-action" function (:arguments ("button")) nil [18482 18763])
            ("define-button-type" code nil nil [18765 18865])
            ("define-button-type" code nil nil [18868 19183])
            ("define-button-type" code nil nil [19185 19563])
            ("Man-init-defvars" function nil nil [19655 22416])
            ("Man-make-page-mode-string" function nil nil [22418 22649])
            ("Man-build-man-command" function nil nil [22651 23738])
            ("Man-translate-cleanup" function (:arguments ("string")) nil [23741 24161])
            ("Man-translate-references" function (:arguments ("ref")) nil [24163 25528])
            ("Man-support-local-filenames" function nil nil [25530 26896])
            ("Man-default-man-entry" function (:arguments ("pos")) nil [27017 30523])
            ("defalias" code nil nil [30712 30741])
            ("Man-completion-cache" variable nil nil [30743 30981])
            ("Man-man-k-use-anchor" variable (:default-value (memq system-type (quote (gnu gnu/linux gnu/kfreebsd)))) nil [30983 31511])
            ("Man-parse-man-k" function nil nil [31513 33169])
            ("Man-completion-table" function (:arguments ("string" "pred" "action")) nil [33171 36417])
            ("man" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [36434 38770])
            ("man-follow" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [38787 39045])
            ("Man-start-calling" function (:arguments ("body")) nil [39047 41610])
            ("Man-getpage-in-background" function (:arguments ("topic")) nil [41612 43363])
            ("Man-update-manpage" function (:user-visible-flag t) nil [43365 44304])
            ("Man-notify-when-ready" function (:arguments ("man-buffer")) nil [44306 45874])
            ("Man-softhyphen-to-minus" function nil nil [45876 46208])
            ("Man-fontify-manpage" function (:user-visible-flag t) nil [46210 48673])
            ("Man-highlight-references" function (:arguments ("xref-man-type")) nil [48675 49904])
            ("Man-highlight-references0" function (:arguments ("start-section" "regexp" "button-pos" "target" "type")) nil [49906 50701])
            ("Man-cleanup-manpage" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [50703 51970])
            ("Man-bgproc-filter" function (:arguments ("process" "string")) nil [51972 52948])
            ("Man-bgproc-sentinel" function (:arguments ("process" "msg")) nil [52950 56452])
            ("Man-page-from-arguments" function (:arguments ("args")) nil [56454 56709])
            ("bookmark-make-record-function" variable nil nil [56837 56875])
            ("define-derived-mode" code nil nil [56877 59363])
            ("Man-build-section-alist" function nil nil [59365 59792])
            ("Man-build-references-alist" function nil nil [59794 61033])
            ("Man-build-page-list" function nil nil [61035 62171])
            ("Man-strip-page-headers" function nil nil [62173 63048])
            ("Man-unindent" function nil nil [63050 64348])
            ("Man-next-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [64448 65011])
            ("Man-previous-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [65013 65326])
            ("Man-find-section" function (:arguments ("section")) nil [65328 65690])
            ("Man--last-section" variable nil nil [65692 65722])
            ("Man-goto-section" function
               (:user-visible-flag t
                :arguments ("section"))
                nil [65724 66308])
            ("Man-goto-see-also-section" function (:user-visible-flag t) nil [66311 66629])
            ("Man-possibly-hyphenated-word" function nil nil [66631 67324])
            ("Man--last-refpage" variable nil nil [67326 67356])
            ("Man-follow-manual-reference" function
               (:user-visible-flag t
                :arguments ("reference"))
                nil [67358 68602])
            ("Man-kill" function (:user-visible-flag t) nil [68604 68701])
            ("Man-goto-page" function
               (:user-visible-flag t
                :arguments ("page" "noerror"))
                nil [68703 69684])
            ("Man-next-manpage" function (:user-visible-flag t) nil [69687 70080])
            ("Man-previous-manpage" function (:user-visible-flag t) nil [70082 70484])
            ("Man-view-header-file" function (:arguments ("file")) nil [70509 70952])
            ("declare-function" code nil nil [70979 71091])
            ("declare-function" code nil nil [71092 71155])
            ("declare-function" code nil nil [71156 71216])
            ("declare-function" code nil nil [71217 71281])
            ("Man-default-bookmark-title" function nil nil [71283 71608])
            ("Man-bookmark-make-record" function nil nil [71610 71884])
            ("Man-bookmark-jump" function (:arguments ("bookmark")) nil [71901 72552])
            ("Man-init-defvars" code nil nil [72612 72630])
            ("man" package nil nil [72632 72646]))          
      :file "man.el"
      :pointmax 72669
      :fsize 72699
      :lastmodtime '(23525 29513 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ansi-color.el"
      :fsize 25013
      :lastmodtime '(23525 29502 0 0))
    (semanticdb-table "semanticdb-table"
      :file "button.el"
      :fsize 20279
      :lastmodtime '(23525 29503 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cus-face" include nil nil [4464 4483])
            ("wid-edit" include nil nil [4484 4503])
            ("custom-versions-load-alist" variable nil nil [4505 4540])
            ("recentf-exclude" variable nil nil [4557 4581])
            ("condition-case" code nil nil [4602 4660])
            ("condition-case" code nil nil [4662 4721])
            ("put" code nil nil [4723 4767])
            ("put" code nil nil [4768 4816])
            ("custom-add-to-group" code nil nil [4817 4886])
            ("emacs" customgroup (:user-visible-flag t) nil [4915 5015])
            ("editing" customgroup (:user-visible-flag t) nil [5070 5143])
            ("convenience" customgroup (:user-visible-flag t) nil [5145 5232])
            ("files" customgroup (:user-visible-flag t) nil [5234 5301])
            ("wp" customgroup (:user-visible-flag t) nil [5303 5434])
            ("text" customgroup (:user-visible-flag t) nil [5436 5582])
            ("data" customgroup (:user-visible-flag t) nil [5584 5662])
            ("abbrev" customgroup (:user-visible-flag t) nil [5664 5783])
            ("matching" customgroup (:user-visible-flag t) nil [5785 5871])
            ("emulations" customgroup (:user-visible-flag t) nil [5873 5993])
            ("external" customgroup (:user-visible-flag t) nil [5995 6073])
            ("comm" customgroup (:user-visible-flag t) nil [6075 6193])
            ("processes" customgroup (:user-visible-flag t) nil [6195 6299])
            ("programming" customgroup (:user-visible-flag t) nil [6301 6391])
            ("languages" customgroup (:user-visible-flag t) nil [6393 6484])
            ("lisp" customgroup (:user-visible-flag t) nil [6486 6661])
            ("c" customgroup (:user-visible-flag t) nil [6663 6863])
            ("tools" customgroup (:user-visible-flag t) nil [6865 6930])
            ("applications" customgroup (:user-visible-flag t) nil [6932 7010])
            ("calendar" customgroup (:user-visible-flag t) nil [7012 7100])
            ("mail" customgroup (:user-visible-flag t) nil [7102 7184])
            ("news" customgroup (:user-visible-flag t) nil [7186 7301])
            ("games" customgroup (:user-visible-flag t) nil [7303 7379])
            ("development" customgroup (:user-visible-flag t) nil [7381 7469])
            ("docs" customgroup (:user-visible-flag t) nil [7471 7549])
            ("extensions" customgroup (:user-visible-flag t) nil [7551 7634])
            ("internal" customgroup (:user-visible-flag t) nil [7636 7736])
            ("maint" customgroup (:user-visible-flag t) nil [7738 7855])
            ("environment" customgroup (:user-visible-flag t) nil [7857 7939])
            ("hardware" customgroup (:user-visible-flag t) nil [7941 8043])
            ("terminals" customgroup (:user-visible-flag t) nil [8045 8123])
            ("unix" customgroup (:user-visible-flag t) nil [8125 8227])
            ("i18n" customgroup (:user-visible-flag t) nil [8229 8398])
            ("x" customgroup (:user-visible-flag t) nil [8400 8463])
            ("frames" customgroup (:user-visible-flag t) nil [8465 8557])
            ("tex" customgroup (:user-visible-flag t) nil [8559 8705])
            ("faces" customgroup (:user-visible-flag t) nil [8707 8775])
            ("help" customgroup (:user-visible-flag t) nil [8777 8848])
            ("multimedia" customgroup (:user-visible-flag t) nil [8850 8947])
            ("local" customgroup (:user-visible-flag t) nil [8949 9014])
            ("customize" customgroup
               (:user-visible-flag t
                :value (quote ((widgets custom-group))))
                nil [9016 9145])
            ("custom-faces" customgroup (:user-visible-flag t) nil [9147 9239])
            ("custom-browse" customgroup (:user-visible-flag t) nil [9241 9340])
            ("custom-buffer" customgroup (:user-visible-flag t) nil [9342 9441])
            ("custom-menu" customgroup (:user-visible-flag t) nil [9443 9538])
            ("alloc" customgroup (:user-visible-flag t) nil [9540 9669])
            ("undo" customgroup (:user-visible-flag t) nil [9671 9779])
            ("mode-line" customgroup (:user-visible-flag t) nil [9781 9858])
            ("editing-basics" customgroup (:user-visible-flag t) nil [9860 9942])
            ("display" customgroup (:user-visible-flag t) nil [9944 10033])
            ("execute" customgroup (:user-visible-flag t) nil [10035 10110])
            ("installation" customgroup (:user-visible-flag t) nil [10112 10189])
            ("dired" customgroup (:user-visible-flag t) nil [10191 10256])
            ("limits" customgroup (:user-visible-flag t) nil [10258 10325])
            ("debug" customgroup (:user-visible-flag t) nil [10327 10397])
            ("keyboard" customgroup (:user-visible-flag t) nil [10399 10473])
            ("menu" customgroup (:user-visible-flag t) nil [10475 10542])
            ("dnd" customgroup (:user-visible-flag t) nil [10544 10622])
            ("auto-save" customgroup (:user-visible-flag t) nil [10624 10704])
            ("processes-basics" customgroup (:user-visible-flag t) nil [10706 10797])
            ("mule" customgroup (:user-visible-flag t) nil [10799 10870])
            ("windows" customgroup (:user-visible-flag t) nil [10872 10986])
            ("custom-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map widget-keymap) (define-key map [remap self-insert-command] (quote Custom-no-edit)) (define-key map "" (quote Custom-newline)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) (define-key map "q" (quote Custom-buffer-done)) (define-key map "u" (quote Custom-goto-parent)) (define-key map "n" (quote widget-forward)) (define-key map "p" (quote widget-backward)) map)) nil [11013 11661])
            ("custom-mode-link-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map custom-mode-map) (define-key map [down-mouse-2] nil) (define-key map [down-mouse-1] (quote mouse-drag-region)) (define-key map [mouse-2] (quote widget-move-and-invoke)) map)) nil [11663 11969])
            ("custom-field-keymap" variable (:default-value (let ((map (copy-keymap widget-field-keymap))) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) map)) nil [11971 12211])
            ("widget-put" code nil nil [12213 12288])
            ("custom-split-regexp-maybe" function (:arguments ("regexp")) nil [12306 12618])
            ("custom-variable-prompt" function nil nil [12620 13179])
            ("custom-menu-filter" function (:arguments ("menu" "widget")) nil [13181 13732])
            ("custom-prefix-list" variable nil nil [13750 13848])
            ("custom-unlispify-menu-entries" variable (:default-value t) nil [13850 13997])
            ("custom-unlispify-remove-prefixes" variable nil nil [13999 14355])
            ("custom-unlispify-menu-entry" function (:arguments ("symbol" "no-suffix")) nil [14357 15339])
            ("custom-unlispify-tag-names" variable (:default-value t) nil [15341 15484])
            ("custom-unlispify-tag-name" function (:arguments ("symbol")) nil [15486 15678])
            ("custom-prefix-add" function (:arguments ("symbol" "prefixes")) nil [15680 15858])
            ("custom-guess-name-alist" variable (:default-value (quote (("-p\\'" boolean) ("-flag\\'" boolean) ("-hook\\'" hook) ("-face\\'" face) ("-file\\'" file) ("-function\\'" function) ("-functions\\'" (repeat function)) ("-list\\'" (repeat sexp)) ("-alist\\'" (alist :key-type sexp :value-type sexp))))) nil [15872 16594])
            ("custom-guess-doc-alist" variable (:default-value (quote (("\\`\\*?Non-nil " boolean)))) nil [16596 17109])
            ("custom-guess-type" function (:arguments ("symbol")) nil [17111 17913])
            ("custom-browse-sort-alphabetically" variable nil nil [17944 18110])
            ("custom-browse-order-groups" variable nil nil [18112 18408])
            ("custom-browse-only-groups" variable nil nil [18410 18565])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [18582 18762])
            ("custom-buffer-order-groups" variable (:default-value (quote last)) nil [18764 19062])
            ("custom-menu-sort-alphabetically" variable nil nil [19079 19236])
            ("custom-menu-order-groups" variable (:default-value (quote first)) nil [19238 19533])
            ("custom-sort-items" function (:arguments ("items" "sort-alphabetically" "order-groups")) nil [19535 20634])
            ("custom-commands" variable (:default-value (quote ((" Apply " Custom-set t "Apply settings (for the current session only)." "index" "Apply") (" Apply and Save " Custom-save (or custom-file user-init-file) "Apply settings and save for future sessions." "save" "Save") (" Undo Edits " Custom-reset-current t "Restore customization buffer to reflect existing settings." "refresh" "Undo") (" Reset Customizations " Custom-reset-saved t "Undo any settings applied only for the current session." "undo" "Reset") (" Erase Customizations " Custom-reset-standard (or custom-file user-init-file) "Un-customize settings in this and future sessions." "delete" "Uncustomize") (" Help for Customize " Custom-help t "Get help for using Customize." "help" "Help") (" Exit " Custom-buffer-done t "Exit Customize." "exit" "Exit")))) nil [20809 21723])
            ("Custom-help" function (:user-visible-flag t) nil [21725 21861])
            ("custom-reset-menu" variable (:default-value (quote (("Undo Edits in Customization Buffer" . Custom-reset-current) ("Revert This Session's Customizations" . Custom-reset-saved) ("Erase Customizations" . Custom-reset-standard)))) nil [21863 22284])
            ("custom-options" variable nil nil [22286 22362])
            ("custom-command-apply" function (:arguments ("fun" "query" "strong-query")) nil [22364 22986])
            ("Custom-set" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [22988 23294])
            ("Custom-save" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [23296 23928])
            ("custom-reset" function (:arguments ("_widget" "event")) nil [23930 24157])
            ("Custom-reset-current" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24159 24518])
            ("Custom-reset-saved" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24520 24945])
            ("custom-reset-standard-variables-list" variable nil nil [25367 25416])
            ("custom-reset-standard-faces-list" variable nil nil [25417 25462])
            ("custom-reset-standard-save-and-update" function nil nil [25716 26884])
            ("Custom-reset-standard" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [26886 27801])
            ("custom-prompt-variable" function (:arguments ("prompt-var" "prompt-val" "comment")) nil [27831 29609])
            ("customize-set-value" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [29626 30396])
            ("customize-set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [30413 31659])
            ("customize-save-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [31676 33155])
            ("customize-push-and-save" function (:arguments ("list-var" "elts")) nil [33440 34106])
            ("customize" function (:user-visible-flag t) nil [34123 34435])
            ("customize-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [34452 35118])
            ("customize-read-group" function nil nil [35120 35520])
            ("customize-group" function
               (:user-visible-flag t
                :arguments ("group" "other-window"))
                nil [35537 36337])
            ("customize-group-other-window" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [36354 36559])
            ("defalias" code nil nil [36576 36624])
            ("customize-option" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [36641 37106])
            ("defalias" code nil nil [37123 37197])
            ("customize-option-other-window" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [37214 37760])
            ("customize-changed-options-previous-release" variable (:default-value "25.3") nil [37762 37893])
            ("customize-package-emacs-version-alist" variable nil nil [37971 39311])
            ("defalias" code nil nil [39328 39384])
            ("customize-changed-options" function
               (:user-visible-flag t
                :arguments ("since-version"))
                nil [39401 41753])
            ("customize-package-emacs-version" function (:arguments ("symbol" "package-version")) nil [41755 43022])
            ("customize-version-lessp" function (:arguments ("version1" "version2")) nil [43024 43883])
            ("customize-face" function
               (:user-visible-flag t
                :arguments ("face" "other-window"))
                nil [43900 45189])
            ("customize-face-other-window" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [45206 45669])
            ("custom-unsaved-options" function nil nil [45671 46269])
            ("defalias" code nil nil [46271 46322])
            ("customize-unsaved" function (:user-visible-flag t) nil [46339 46655])
            ("customize-rogue" function (:user-visible-flag t) nil [46672 47348])
            ("customize-saved" function (:user-visible-flag t) nil [47364 47956])
            ("declare-function" code nil nil [47958 48018])
            ("apropos-regexp" variable nil nil [48019 48042])
            ("customize-apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "type"))
                nil [48059 49811])
            ("customize-apropos-options" function
               (:user-visible-flag t
                :arguments ("regexp" "ignored"))
                nil [49828 50045])
            ("customize-apropos-faces" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50062 50240])
            ("customize-apropos-groups" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50257 50439])
            ("custom-prompt-customize-unsaved-options" function nil nil [50456 50803])
            ("custom-buffer-style" variable (:default-value (quote links)) nil [50818 51205])
            ("custom-buffer-done-kill" variable nil nil [51207 51363])
            ("custom-buffer-indent" variable (:default-value 3) nil [51365 51486])
            ("custom-get-fresh-buffer" function (:arguments ("name")) nil [51488 52402])
            ("custom-buffer-create" function (:arguments ("options" "name" "_description")) nil [52419 52867])
            ("custom-buffer-create-other-window" function (:arguments ("options" "name" "_description")) nil [52884 53446])
            ("custom-reset-button-menu" variable (:default-value t) nil [53448 53677])
            ("custom-buffer-verbose-help" variable (:default-value t) nil [53679 53830])
            ("Custom-buffer-done" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [53832 54001])
            ("custom-button" variable nil nil [54003 54081])
            ("custom-button-mouse" variable nil nil [54083 54173])
            ("custom-button-pressed" variable nil nil [54175 54269])
            ("custom-search-field" variable (:default-value t) nil [54271 54418])
            ("custom-raised-buttons" variable (:default-value (not (equal (face-valid-attribute-values :box) (quote (("unspecified" . unspecified)))))) nil [54420 55039])
            ("custom-buffer-create-internal" function (:arguments ("options" "_description")) nil [55041 59332])
            ("customize-browse" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [59372 60704])
            ("define-widget" code nil nil [60706 60880])
            ("custom-browse-visibility-action" function (:arguments ("widget" "_ignore")) nil [60882 61016])
            ("define-widget" code nil nil [61018 61204])
            ("custom-browse-group-tag-action" function (:arguments ("widget" "_ignore")) nil [61206 61371])
            ("define-widget" code nil nil [61373 61566])
            ("custom-browse-variable-tag-action" function (:arguments ("widget" "_ignore")) nil [61568 61739])
            ("define-widget" code nil nil [61741 61922])
            ("custom-browse-face-tag-action" function (:arguments ("widget" "_ignore")) nil [61924 62087])
            ("custom-browse-alist" variable
               (:constant-flag t
                :default-value (quote (("   " "space") (" | " "vertical") ("-\\ " "top") (" |-" "middle") (" `-" "bottom"))))
                nil [62089 62242])
            ("custom-browse-insert-prefix" function (:arguments ("prefix")) nil [62244 62851])
            ("widget-put" code nil nil [63175 63227])
            ("widget-put" code nil nil [63228 63465])
            ("widget-put" code nil nil [63466 63525])
            ("define-widget" code nil nil [63560 63869])
            ("custom-magic-faces" customgroup (:user-visible-flag t) nil [63903 64019])
            ("custom-invalid" variable
               (:default-value (quote ((((class color)) :foreground "yellow1" :background "red1") (t :weight bold :slant italic :underline t)))
                :type "face")
                nil [64021 64241])
            ("custom-rogue" variable
               (:default-value (quote ((((class color)) :foreground "pink" :background "black") (t :underline t)))
                :type "face")
                nil [64243 64450])
            ("custom-modified" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [64452 64741])
            ("custom-set" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "blue1" :background "white") (((class color)) :foreground "blue" :background "white") (t :slant italic)))
                :type "face")
                nil [64743 65030])
            ("custom-changed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [65032 65315])
            ("custom-themed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [65317 65602])
            ("custom-saved" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [65604 65729])
            ("custom-magic-alist" variable
               (:constant-flag t
                :default-value (quote ((nil "#" underline "UNINITIALIZED, you should not see this.") (unknown "?" italic "UNKNOWN, you should not see this.") (hidden "-" default "HIDDEN, invoke \"Show\" in the previous line to show." "group now hidden, invoke \"Show\", above, to show contents.") (invalid "x" custom-invalid "INVALID, the displayed value cannot be set.") (modified "*" custom-modified "EDITED, shown value does not take effect until you set or save it." "something in this group has been edited but not set.") (set "+" custom-set "SET for current session only." "something in this group has been set but not saved.") (changed ":" custom-changed "CHANGED outside Customize." "something in this group has been changed outside customize.") (saved "!" custom-saved "SAVED and set." "something in this group has been set and saved.") (themed "o" custom-themed "THEMED." "visible group members are set by enabled themes.") (rogue "@" custom-rogue "NO CUSTOMIZATION DATA; not intended to be customized." "something in this group is not prepared for customization.") (standard " " nil "STANDARD." "visible group members are all at standard values."))))
                nil [65731 68156])
            ("custom-magic-show" variable (:default-value (quote long)) nil [68158 68418])
            ("custom-magic-show-hidden" variable (:default-value (quote (option face))) nil [68420 68768])
            ("custom-magic-show-button" variable nil nil [68770 68930])
            ("define-widget" code nil nil [68932 69203])
            ("widget-magic-mouse-down-action" function (:arguments ("widget" "_event")) nil [69205 69407])
            ("custom-magic-value-create" function (:arguments ("widget")) nil [69409 71937])
            ("custom-magic-reset" function (:arguments ("widget")) nil [71939 72144])
            ("custom-button" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "lightgrey" :foreground "black")))
                :type "face")
                nil [72172 72472])
            ("custom-button-mouse" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "grey90" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [72474 72954])
            ("custom-button-unraised" variable
               (:default-value (quote ((t :inherit underline)))
                :type "face")
                nil [72956 73127])
            ("setq" code nil nil [73129 73221])
            ("setq" code nil nil [73223 73314])
            ("custom-button-pressed" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style pressed-button) :background "lightgrey" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [73316 73624])
            ("custom-button-pressed-unraised" variable
               (:default-value (quote ((default :inherit custom-button-unraised) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [73626 73950])
            ("setq" code nil nil [73952 74074])
            ("custom-documentation" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [74076 74206])
            ("custom-state" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "lime green") (((class color) (background light)) :foreground "dark green")))
                :type "face")
                nil [74208 74452])
            ("custom-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [74454 74582])
            ("define-widget" code nil nil [74584 75065])
            ("custom-convert-widget" function (:arguments ("widget")) nil [75067 75428])
            ("custom-notify" function (:arguments ("widget" "args")) nil [75430 75762])
            ("custom-redraw" function (:arguments ("widget")) nil [75764 76359])
            ("custom-redraw-magic" function (:arguments ("widget")) nil [76361 76735])
            ("custom-show" function (:arguments ("widget" "value")) nil [76737 77021])
            ("custom-load-widget" function (:arguments ("widget")) nil [77023 77141])
            ("custom-unloaded-symbol-p" function (:arguments ("symbol")) nil [77143 77621])
            ("custom-unloaded-widget-p" function (:arguments ("widget")) nil [77623 77790])
            ("custom-toggle-hide" function (:arguments ("widget")) nil [77792 78251])
            ("custom-toggle-parent" function (:arguments ("widget" "_ignore")) nil [78253 78398])
            ("custom-add-see-also" function (:arguments ("widget" "prefix")) nil [78400 79302])
            ("custom-add-parent-links" function (:arguments ("widget" "initial-string" "_doc-initial-string")) nil [79304 80180])
            ("custom-comment" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [80243 80632])
            ("custom-comment-tag" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "gray80") (((class color) (background light)) :foreground "blue4") (((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (t :weight bold)))
                :type "face")
                nil [80665 81116])
            ("define-widget" code nil nil [81118 81339])
            ("custom-comment-create" function (:arguments ("widget")) nil [81341 81752])
            ("custom-comment-hide" function (:arguments ("widget")) nil [81754 81852])
            ("custom-comment-show" function (:arguments ("widget")) nil [81955 82072])
            ("custom-comment-invisible-p" function (:arguments ("widget")) nil [82074 82252])
            ("custom-variable-tag" variable
               (:default-value (\` ((((class color) (background dark)) :foreground "light blue" :weight bold) (((min-colors 88) (class color) (background light)) :foreground "blue1" :weight bold) (((class color) (background light)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [82289 82663])
            ("custom-variable-button" variable
               (:default-value (quote ((t :underline t :weight bold)))
                :type "face")
                nil [82665 82795])
            ("custom-variable-default-form" variable (:default-value (quote edit)) nil [82797 82980])
            ("custom-variable-documentation" function (:arguments ("variable")) nil [82982 83615])
            ("define-widget" code nil nil [83617 85187])
            ("custom-variable-type" function (:arguments ("symbol")) nil [85189 86014])
            ("custom-variable-value-create" function (:arguments ("widget")) nil [86016 91504])
            ("custom-toggle-hide-variable" function (:arguments ("visibility-widget" "_ignore")) nil [91506 92599])
            ("custom-tag-action" function (:arguments ("widget" "args")) nil [92601 92794])
            ("custom-tag-mouse-down-action" function (:arguments ("widget" "args")) nil [92796 93022])
            ("custom-variable-state" function (:arguments ("symbol" "val")) nil [93024 94680])
            ("custom-variable-state-set" function (:arguments ("widget" "state")) nil [94682 94984])
            ("custom-variable-standard-value" function (:arguments ("widget")) nil [94986 95079])
            ("custom-variable-menu" variable (:default-value (\` (("Set for Current Session" custom-variable-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-variable-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))))))) ("Undo Edits" custom-redraw (lambda (widget) (and (default-boundp (widget-value widget)) (memq (widget-get widget :custom-state) (quote (modified changed)))))) ("Revert This Session's Customization" custom-variable-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-variable-reset-standard (lambda (widget) (and (get (widget-value widget) (quote standard-value)) (memq (widget-get widget :custom-state) (quote (modified set changed saved rogue)))))))))) ("Set to Backup Value" custom-variable-reset-backup (lambda (widget) (get (widget-value widget) (quote backup-value)))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("Show Current Value" custom-variable-edit (lambda (widget) (eq (widget-get widget :custom-form) (quote lisp)))) ("Show Saved Lisp Expression" custom-variable-edit-lisp (lambda (widget) (eq (widget-get widget :custom-form) (quote edit))))))) nil [95081 97273])
            ("custom-variable-action" function (:arguments ("widget" "event")) nil [97275 97935])
            ("custom-variable-edit" function (:arguments ("widget")) nil [97937 98111])
            ("custom-variable-edit-lisp" function (:arguments ("widget")) nil [98113 98323])
            ("custom-variable-set" function (:arguments ("widget")) nil [98325 100092])
            ("custom-variable-mark-to-save" function (:arguments ("widget")) nil [100094 101813])
            ("custom-variable-state-set-and-redraw" function (:arguments ("widget")) nil [101815 102013])
            ("custom-variable-save" function (:arguments ("widget")) nil [102015 102212])
            ("custom-variable-reset-saved" function (:arguments ("widget")) nil [102214 103359])
            ("custom-variable-mark-to-reset-standard" function (:arguments ("widget")) nil [103361 104810])
            ("custom-variable-reset-standard" function (:arguments ("widget")) nil [104812 105256])
            ("custom-variable-backup-value" function (:arguments ("widget")) nil [105258 105728])
            ("custom-variable-reset-backup" function (:arguments ("widget")) nil [105730 106766])
            ("define-widget" code nil nil [106804 107045])
            ("custom-visibility" variable
               (:default-value (quote ((t :height 0.8 :inherit link)))
                :type "face")
                nil [107047 107195])
            ("define-widget" code nil nil [107233 108126])
            ("custom-face-edit-value-create" function (:arguments ("widget")) nil [108128 109573])
            ("custom-face-edit-value-visibility-action" function (:arguments ("widget" "_ignore")) nil [109575 109853])
            ("custom-face-edit-fix-value" function (:arguments ("_widget" "value")) nil [109855 110051])
            ("custom-face-edit-convert-widget" function (:arguments ("widget")) nil [110053 110400])
            ("custom-face-edit" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-edit)))
                nil [110402 110520])
            ("custom-face-edit-deactivate" function (:arguments ("widget")) nil [110522 111076])
            ("custom-face-edit-activate" function (:arguments ("widget")) nil [111078 111552])
            ("custom-face-edit-delete" function (:arguments ("widget")) nil [111554 112116])
            ("custom-face-edit-attribute-tag" function (:arguments ("widget")) nil [112119 112474])
            ("define-widget" code nil nil [112510 114875])
            ("custom-face-tag" variable
               (:default-value (quote ((t :inherit custom-variable-tag)))
                :type "face")
                nil [114908 115023])
            ("custom-face-default-form" variable (:default-value (quote selected)) nil [115025 115227])
            ("define-widget" code nil nil [115229 116771])
            ("define-widget" code nil nil [116773 117201])
            ("custom-face-all" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-all)))
                nil [117203 117318])
            ("custom-filter-face-spec" function (:arguments ("spec" "filter-index" "default-filter")) nil [117320 118447])
            ("custom-pre-filter-face-spec" function (:arguments ("spec")) nil [118449 118640])
            ("custom-post-filter-face-spec" function (:arguments ("spec")) nil [118642 118792])
            ("custom-face-widget-to-spec" function (:arguments ("widget")) nil [118794 119206])
            ("custom-face-get-current-spec" function (:arguments ("face")) nil [119208 119732])
            ("custom-toggle-hide-face" function (:arguments ("visibility-widget" "_ignore")) nil [119734 120777])
            ("custom-face-value-create" function (:arguments ("widget")) nil [120779 125203])
            ("custom-face-menu" variable (:default-value (\` (("Set for Current Session" custom-face-set) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-face-save))))) ("Undo Edits" custom-redraw (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified changed))))) ("Revert This Session's Customization" custom-face-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-face-reset-standard (lambda (widget) (get (widget-value widget) (quote face-defface-spec)))))))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("For Current Display" custom-face-edit-selected (lambda (widget) (not (eq (widget-get widget :custom-form) (quote selected))))) ("For All Kinds of Displays" custom-face-edit-all (lambda (widget) (not (eq (widget-get widget :custom-form) (quote all))))) ("Show Lisp Expression" custom-face-edit-lisp (lambda (widget) (not (eq (widget-get widget :custom-form) (quote lisp)))))))) nil [125205 126743])
            ("custom-face-edit-selected" function (:arguments ("widget")) nil [126745 126955])
            ("custom-face-edit-all" function (:arguments ("widget")) nil [126957 127152])
            ("custom-face-edit-lisp" function (:arguments ("widget")) nil [127154 127360])
            ("custom-face-state" function (:arguments ("face")) nil [127362 128381])
            ("custom-face-state-set" function (:arguments ("widget")) nil [128383 128535])
            ("custom-face-action" function (:arguments ("widget" "event")) nil [128537 129061])
            ("custom-face-set" function (:arguments ("widget")) nil [129063 129756])
            ("custom-face-mark-to-save" function (:arguments ("widget")) nil [129758 130506])
            ("custom-face-state-set-and-redraw" function (:arguments ("widget")) nil [130508 130694])
            ("custom-face-save" function (:arguments ("widget")) nil [130696 130865])
            ("define-obsolete-function-alias" code nil nil [130898 130983])
            ("custom-face-reset-saved" function (:arguments ("widget")) nil [130985 131838])
            ("custom-face-standard-value" function (:arguments ("widget")) nil [131840 131932])
            ("custom-face-mark-to-reset-standard" function (:arguments ("widget")) nil [131934 133532])
            ("custom-face-reset-standard" function (:arguments ("widget")) nil [133534 133857])
            ("widget-face-prompt-value-history" variable nil nil [133883 133980])
            ("define-widget" code nil nil [133982 134618])
            ("widget-face-sample-face-get" function (:arguments ("widget")) nil [134620 134749])
            ("widget-face-notify" function (:arguments ("widget" "child" "event")) nil [134751 135004])
            ("define-widget" code nil nil [135031 135612])
            ("custom-hook-convert-widget" function (:arguments ("widget")) nil [135614 136042])
            ("define-widget" code nil nil [136081 136402])
            ("custom-group-link-action" function (:arguments ("widget" "_ignore")) nil [136404 136501])
            ("custom-group-tag-faces" variable nil nil [136535 136793])
            ("custom-group-tag-1" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "pink") (((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red")))
                :type "face")
                nil [136795 137129])
            ("custom-group-tag" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :weight bold)))
                :type "face")
                nil [137131 137502])
            ("custom-group-subtitle" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [137504 137640])
            ("custom-group-doc-align-col" variable (:default-value 20) nil [137642 137680])
            ("define-widget" code nil nil [137682 138419])
            ("custom-group-sample-face-get" function (:arguments ("widget")) nil [138421 138588])
            ("define-widget" code nil nil [138590 138744])
            ("custom-group-visibility-create" function (:arguments ("widget")) nil [138746 138906])
            ("custom-group-members" function (:arguments ("symbol" "groups-only")) nil [138908 139287])
            ("custom-group-value-create" function (:arguments ("widget")) nil [139289 147473])
            ("custom-group-menu" variable (:default-value (\` (("Set for Current Session" custom-group-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-group-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))))))) ("Undo Edits" custom-group-reset-current (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified))))) ("Revert This Session's Customizations" custom-group-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-group-reset-standard (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set saved)))))))))))) nil [147475 148676])
            ("custom-group-action" function (:arguments ("widget" "event")) nil [148678 149193])
            ("custom-group-set" function (:arguments ("widget")) nil [149195 149422])
            ("custom-group-mark-to-save" function (:arguments ("widget")) nil [149424 149678])
            ("custom-group-state-set-and-redraw" function (:arguments ("widget")) nil [149680 149976])
            ("custom-group-save" function (:arguments ("widget")) nil [149978 150151])
            ("custom-group-reset-current" function (:arguments ("widget")) nil [150153 150391])
            ("custom-group-reset-saved" function (:arguments ("widget")) nil [150393 150642])
            ("custom-group-reset-standard" function (:arguments ("widget")) nil [150644 150929])
            ("custom-group-mark-to-reset-standard" function (:arguments ("widget")) nil [150931 151226])
            ("custom-group-state-update" function (:arguments ("widget")) nil [151228 151821])
            ("custom-file" variable nil nil [151881 153719])
            ("custom-file" function (:arguments ("no-error")) nil [153721 154223])
            ("declare-function" code nil nil [154273 154333])
            ("custom-save-all" function nil nil [154350 155764])
            ("customize-save-customized" function (:user-visible-flag t) nil [155781 156780])
            ("custom-save-delete" function (:arguments ("symbol")) nil [156833 158136])
            ("sort-fold-case" variable nil nil [158138 158161])
            ("custom-save-variables" function nil nil [158184 161109])
            ("custom-save-faces" function nil nil [161111 162959])
            ("custom-menu-nesting" variable (:default-value 2) nil [163005 163114])
            ("custom-face-menu-create" function (:arguments ("_widget" "symbol")) nil [163116 163319])
            ("custom-variable-menu-create" function (:arguments ("_widget" "symbol")) nil [163321 163739])
            ("widget-put" code nil nil [163788 164010])
            ("custom-group-menu-create" function (:arguments ("_widget" "symbol")) nil [164012 164306])
            ("custom-menu-create" function (:arguments ("symbol")) nil [164323 165283])
            ("customize-menu-create" function (:arguments ("symbol" "name")) nil [165300 165753])
            ("easy-menu-define" code nil nil [165788 166196])
            ("tool-bar-map" variable nil nil [166198 166219])
            ("custom-tool-bar-map" variable nil nil [166407 166478])
            ("Custom-no-edit" function
               (:user-visible-flag t
                :arguments ("_pos" "_event"))
                nil [166502 166698])
            ("Custom-newline" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [166700 167296])
            ("Custom-goto-parent" function (:user-visible-flag t) nil [167298 167696])
            ("define-obsolete-variable-alias" code nil nil [167698 167773])
            ("Custom-mode-hook" variable nil nil [167775 167888])
            ("custom-state-buffer-message" function (:arguments ("widget")) nil [167890 168096])
            ("custom--initialize-widget-variables" function nil nil [168098 169015])
            ("define-derived-mode" code nil nil [169017 170596])
            ("put" code nil nil [170598 170637])
            ("define-obsolete-function-alias" code nil nil [170639 170704])
            ("cus-edit" package nil nil [170720 170739]))          
      :file "cus-edit.el"
      :pointmax 170767
      :fsize 170766
      :lastmodtime '(23525 29504 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "cus-face.el"
      :fsize 13238
      :lastmodtime '(23525 29504 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("xml-undefined-entity" variable
               (:constant-flag t
                :default-value "?")
                nil [3142 3223])
            ("xml-default-ns" variable
               (:constant-flag t
                :default-value (quote (("" . "") ("xml" . "http://www.w3.org/XML/1998/namespace") ("xmlns" . "http://www.w3.org/2000/xmlns/"))))
                nil [3225 3424])
            ("xml-entity-alist" variable (:default-value (quote (("lt" . "&#60;") ("gt" . ">") ("apos" . "'") ("quot" . "\"") ("amp" . "&#38;")))) nil [3426 3614])
            ("xml-entity-expansion-limit" variable (:default-value 20000) nil [3616 3953])
            ("xml-parameter-entity-alist" variable nil nil [3955 4040])
            ("xml-sub-parser" variable nil nil [4042 4129])
            ("xml-validating-parser" variable nil nil [4131 4210])
            ("xml-node-name" function (:arguments ("node")) nil [4212 4646])
            ("xml-node-attributes" function (:arguments ("node")) nil [4648 4764])
            ("xml-node-children" function (:arguments ("node")) nil [4766 4900])
            ("xml-get-children" function (:arguments ("node" "child-name")) nil [4902 5268])
            ("xml-get-attribute-or-nil" function (:arguments ("node" "attribute")) nil [5270 5488])
            ("xml-get-attribute" function (:arguments ("node" "attribute")) nil [5490 5727])
            ("xml-entity-value-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:\"\\(?:[^%&\"]\\|" xml-pe-reference-re "\\|" xml-reference-re "\\)*\"\\|'\\(?:[^%&']\\|" xml-pe-reference-re "\\|" xml-reference-re "\\)*'\\)"))
                nil [9510 9748])
            ("xml-att-def-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:\\s-*" xml-name-re "\\s-*" xml-att-type-re "\\s-*" xml-default-decl-re "\\)"))
                nil [9247 9374])
            ("xml-default-decl-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:#REQUIRED\\|#IMPLIED\\|" "\\(?:#FIXED\\s-+\\)*" xml-att-value-re "\\)"))
                nil [9054 9190])
            ("xml-att-type-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:CDATA\\|" xml-tokenized-type-re "\\|" xml-notation-type-re "\\|" xml-enumerated-type-re "\\)"))
                nil [8829 8976])
            ("xml-enumerated-type-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:" xml-notation-type-re "\\|" xml-enumeration-re "\\)"))
                nil [8621 8729])
            ("xml-enumeration-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:(\\s-*" xml-nmtoken-re "\\(?:\\s-*|\\s-*" xml-nmtoken-re "\\)*\\s-+)\\)"))
                nil [8430 8565])
            ("xml-notation-type-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:NOTATION\\s-+(\\s-*" xml-name-re "\\(?:\\s-*|\\s-*" xml-name-re "\\)*\\s-*)\\)"))
                nil [8177 8308])
            ("xml-tokenized-type-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:ID\\|IDREF\\|IDREFS\\|ENTITY\\|" "ENTITIES\\|NMTOKEN\\|NMTOKENS\\)"))
                nil [7980 8100])
            ("xml-att-value-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:\"\\(?:[^&\"]\\|" xml-reference-re "\\)*\"\\|" "'\\(?:[^&']\\|" xml-reference-re "\\)*'\\)"))
                nil [7405 7560])
            ("xml-reference-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:" xml-entity-ref "\\|" xml-char-ref-re "\\)"))
                nil [7208 7295])
            ("xml-pe-reference-re" variable
               (:constant-flag t
                :default-value (concat "%\\(" xml-name-re "\\);"))
                nil [7097 7162])
            ("xml-entity-or-char-ref-re" variable
               (:constant-flag t
                :default-value (concat "&\\(?:#\\(x\\)?\\([0-9a-fA-F]+\\)\\|\\(" xml-name-re "\\)\\);"))
                nil [6940 7058])
            ("xml-entity-ref" variable
               (:constant-flag t
                :default-value (concat "&" xml-name-re ";"))
                nil [6884 6938])
            ("xml-char-ref-re" variable
               (:constant-flag t
                :default-value "\\(?:&#[0-9]+;\\|&#x[0-9a-fA-F]+;\\)")
                nil [6779 6845])
            ("xml-nmtokens-re" variable
               (:constant-flag t
                :default-value (concat xml-nmtoken-re "\\(?: " xml-name-re "\\)*"))
                nil [6638 6716])
            ("xml-nmtoken-re" variable
               (:constant-flag t
                :default-value (concat xml-name-char-re "+"))
                nil [6537 6592])
            ("xml-names-re" variable
               (:constant-flag t
                :default-value (concat xml-name-re "\\(?: " xml-name-re "\\)*"))
                nil [6431 6503])
            ("xml-name-re" variable
               (:constant-flag t
                :default-value (concat xml-name-start-char-re xml-name-char-re "*"))
                nil [6316 6391])
            ("xml-name-char-re" variable
               (:constant-flag t
                :default-value (concat "[-0-9.[:word:]:_·̀-ͯ‿-⁀]"))
                nil [6205 6268])
            ("xml-name-start-char-re" variable
               (:constant-flag t
                :default-value (concat "[[:word:]:_]"))
                nil [6029 6086])
            ("xml-syntax-table" variable (:default-value (let ((table (make-char-table (quote syntax-table) (quote (3))))) (dolist (c (quote (32 9 13 10))) (modify-syntax-entry c " " table)) (modify-syntax-entry (quote (65 . 90)) "w" table) (modify-syntax-entry (quote (97 . 122)) "w" table) (modify-syntax-entry (quote (192 . 214)) "w" table) (modify-syntax-entry (quote (216 . 246)) "w" table) (modify-syntax-entry (quote (248 . 767)) "w" table) (modify-syntax-entry (quote (880 . 893)) "w" table) (modify-syntax-entry (quote (895 . 8191)) "w" table) (modify-syntax-entry (quote (8204 . 8205)) "w" table) (modify-syntax-entry (quote (8304 . 8591)) "w" table) (modify-syntax-entry (quote (11264 . 12271)) "w" table) (modify-syntax-entry (quote (12289 . 55295)) "w" table) (modify-syntax-entry (quote (63744 . 64975)) "w" table) (modify-syntax-entry (quote (65008 . 65533)) "w" table) (modify-syntax-entry (quote (65536 . 983039)) "w" table) table)) nil [10404 11748])
            ("xml-parse-file" function (:arguments ("file" "parse-dtd" "parse-ns")) nil [11784 12593])
            ("xml-parse-region" function (:arguments ("beg" "end" "buffer" "parse-dtd" "parse-ns")) nil [12610 13816])
            ("xml--parse-buffer" function (:arguments ("parse-dtd" "parse-ns")) nil [14005 15063])
            ("xml-maybe-do-ns" function (:arguments ("name" "default" "xml-ns")) nil [15065 16466])
            ("xml-parse-tag" function (:arguments ("parse-dtd" "parse-ns")) nil [16468 17314])
            ("xml-parse-tag-1" function (:arguments ("parse-dtd" "parse-ns")) nil [17316 21679])
            ("xml-parse-string" function nil nil [21681 23935])
            ("xml-parse-attlist" function (:arguments ("xml-ns")) nil [23937 25613])
            ("xml-skip-dtd" function nil nil [25803 25965])
            ("xml-parse-dtd" function (:arguments ("_parse-ns")) nil [25967 32849])
            ("xml--entity-replacement-text" function (:arguments ("string")) nil [32851 34170])
            ("xml-parse-elem-type" function (:arguments ("string")) nil [34172 35169])
            ("xml-substitute-special" function (:arguments ("string")) nil [35211 36824])
            ("xml-substitute-numeric-entities" function (:arguments ("string")) nil [36826 37454])
            ("xml-debug-print" function (:arguments ("xml" "indent-string")) nil [37507 37818])
            ("defalias" code nil nil [37820 37858])
            ("xml-escape-string" function (:arguments ("string")) nil [37860 38642])
            ("xml-debug-print-internal" function (:arguments ("xml" "indent-string")) nil [38644 39647])
            ("xml" package nil nil [39649 39663]))          
      :file "xml.el"
      :pointmax 39686
      :fsize 39692
      :lastmodtime '(23525 29522 0 0)
      :unmatched-syntax '((close-paren 9749 . 9750) (symbol 5930 . 5946) (open-paren 5929 . 5930)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [902 1354])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1356 1940])
            ("declare-function" code nil nil [1942 2014])
            ("help-xref-stack-item" variable nil nil [2016 2045])
            ("face-name-history" variable nil nil [2047 2228])
            ("font-selection" customgroup (:user-visible-flag t) nil [2399 2481])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2484 3266])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3440 5433])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5479 6543])
            ("face-list" function nil nil [6718 6819])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6821 7522])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7524 7786])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7788 9039])
            ("facep" function (:arguments ("face")) nil [9219 9368])
            ("check-face" function (:arguments ("face")) nil [9371 9525])
            ("face-id" function (:arguments ("face" "_frame")) nil [9706 10048])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [10050 10467])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10470 11183])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [11186 11530])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11533 11962])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [12160 14052])
            ("declare-function" code nil nil [14055 14150])
            ("declare-function" code nil nil [14152 14266])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [14268 14977])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14980 15343])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [15346 15942])
            ("face-name" function (:arguments ("face")) nil [16126 16218])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [16221 16687])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16689 18503])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18505 19093])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [19096 19377])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [19379 20435])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20437 21493])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21495 22515])
            ("defalias" code nil nil [22518 22566])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22569 23022])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [23025 23459])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23462 23981])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23984 24488])
            ("face-documentation" function (:arguments ("face")) nil [24664 25086])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [25089 25277])
            ("defalias" code nil nil [25280 25327])
            ("defalias" code nil nil [25328 25383])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25564 33275])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33277 33728])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33731 34131])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34134 34591])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34594 34999])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [35002 35499])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35502 35928])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36134 36603])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36606 37075])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [37078 37683])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37686 38455])
            ("define-obsolete-function-alias" code nil nil [38457 38570])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38573 39146])
            ("define-obsolete-function-alias" code nil nil [39148 39269])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [39271 39687])
            ("define-obsolete-function-alias" code nil nil [39689 39760])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39763 40199])
            ("define-obsolete-function-alias" code nil nil [40201 40276])
            ("defalias" code nil nil [40279 40335])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [40338 41138])
            ("crm-separator" variable nil nil [41324 41346])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [41362 44220])
            ("x-bitmap-file-path" variable nil nil [44279 44306])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [44308 46997])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [47000 47770])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [47773 47920])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47923 48938])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48941 49558])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [49719 52060])
            ("declare-function" code nil nil [52062 52108])
            ("declare-function" code nil nil [52109 52200])
            ("read-face-font" function (:arguments ("face" "frame")) nil [52202 52574])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [52577 53005])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [53007 53952])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53954 54743])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54914 55077])
            ("help-xref-stack" variable nil nil [55206 55230])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [55231 58266])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [58269 62402])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [62680 63270])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [63273 65075])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [65078 66573])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [66753 66912])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66914 67987])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67989 70092])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [70094 71807])
            ("face-spec-set-2" function (:arguments ("face" "frame" "face-attrs")) nil [71809 72263])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [72265 73339])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [73341 73536])
            ("face-default-spec" function (:arguments ("face")) nil [73538 73726])
            ("face-user-default-spec" function (:arguments ("face")) nil [73728 74011])
            ("defined-colors" function (:arguments ("frame")) nil [74269 74727])
            ("defalias" code nil nil [74728 74772])
            ("defined-colors-with-face-attributes" function (:arguments ("frame")) nil [74774 75399])
            ("readable-foreground-color" function (:arguments ("color")) nil [75401 75828])
            ("declare-function" code nil nil [75830 75900])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [75902 76569])
            ("defalias" code nil nil [76570 76616])
            ("declare-function" code nil nil [76618 76685])
            ("color-values" function (:arguments ("color" "frame")) nil [76687 77606])
            ("defalias" code nil nil [77608 77648])
            ("declare-function" code nil nil [77650 77717])
            ("display-color-p" function (:arguments ("display")) nil [77719 78121])
            ("defalias" code nil nil [78122 78168])
            ("declare-function" code nil nil [78170 78240])
            ("display-grayscale-p" function (:arguments ("display")) nil [78242 78675])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [78677 81542])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [81544 82550])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [82552 84085])
            ("foreground-color-at-point" function nil nil [84087 84245])
            ("background-color-at-point" function nil nil [84247 84405])
            ("declare-function" code nil nil [84576 84621])
            ("declare-function" code nil nil [84622 84715])
            ("declare-function" code nil nil [84716 84810])
            ("declare-function" code nil nil [84811 84865])
            ("x-display-name" variable nil nil [84866 84889])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [84891 85786])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [85789 86795])
            ("declare-function" code nil nil [86797 86847])
            ("declare-function" code nil nil [86848 86914])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [86916 88117])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [88119 89516])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [89518 90194])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [90197 90956])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [90958 91523])
            ("tty-setup-hook" variable nil nil [91525 91757])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [91759 93332])
            ("tty-set-up-initial-frame-faces" function nil nil [93438 93595])
            ("basic-faces" customgroup (:user-visible-flag t) nil [93766 93841])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [93843 93975])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [93977 94056])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [94058 94423])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [94425 94532])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [94534 94724])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [94726 94830])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [94832 94960])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [94962 95442])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [95444 95882])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [95884 96351])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [96353 96603])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [96605 97147])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [97309 98235])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [98237 98785])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [98787 99064])
            ("line-number" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [99102 99513])
            ("line-number-current-line" variable
               (:default-value (quote ((t :inherit line-number)))
                :type "face")
                nil [99515 100064])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100066 100496])
            ("homoglyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100498 100706])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [100708 100968])
            ("nobreak-hyphen" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100970 101189])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [101191 101308])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [101310 101606])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [101608 102146])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [102148 102422])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102424 102667])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102669 102852])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [102854 104190])
            ("header-line-highlight" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [104192 104334])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [104336 104501])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [104503 104971])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [104973 105390])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [105392 105805])
            ("internal-border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [105807 105944])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [105946 106441])
            ("setq" code nil nil [106443 106554])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [106556 106868])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [106870 107008])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107010 107139])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [107141 107591])
            ("put" code nil nil [107593 107625])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107627 107753])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [107755 108045])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [108047 108291])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [108293 108415])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [108417 108691])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [108693 109223])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [109225 109459])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [109461 109880])
            ("read-multiple-choice-face" variable
               (:default-value (quote ((t (:inherit underline :weight bold))))
                :type "face")
                nil [109882 110071])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [110097 110269])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [110271 110517])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [110519 110666])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [110668 110803])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [110805 111271])
            ("show-paren-match-expression" variable
               (:default-value (quote ((t :inherit show-paren-match)))
                :type "face")
                nil [111273 111508])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [111510 111701])
            ("x-font-regexp" variable nil nil [112077 112103])
            ("x-font-regexp-head" variable nil nil [112104 112135])
            ("x-font-regexp-weight" variable nil nil [112136 112169])
            ("x-font-regexp-slant" variable nil nil [112170 112202])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [112204 112244])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [112245 112284])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [112285 112325])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [112326 112367])
            ("let" code nil nil [112450 113668])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [113671 114758])
            ("font-list-limit" variable (:default-value 100) nil [114760 114875])
            ("make-obsolete-variable" code nil nil [114876 114928])
            ("faces" package nil nil [114930 114946]))          
      :file "faces.el"
      :pointmax 114971
      :fsize 114970
      :lastmodtime '(23525 29507 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable nil nil [1170 1255])
            ("initialization" customgroup (:user-visible-flag t) nil [1257 1338])
            ("initial-buffer-choice" variable nil nil [1340 2311])
            ("inhibit-startup-screen" variable nil nil [2313 2566])
            ("defvaralias" code nil nil [2568 2628])
            ("defvaralias" code nil nil [2629 2691])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2693 2743])
            ("inhibit-startup-echo-area-message" variable nil nil [3043 4097])
            ("inhibit-default-init" variable nil nil [4099 4229])
            ("inhibit-startup-buffer-menu" variable nil nil [4231 4395])
            ("command-switch-alist" variable nil nil [4397 4665])
            ("command-line-args-left" variable nil nil [4667 4751])
            ("defvaralias" code nil nil [4753 4988])
            ("internal-make-var-non-special" code nil nil [4989 5026])
            ("argi" variable nil nil [5028 5080])
            ("internal-make-var-non-special" code nil nil [5081 5118])
            ("command-line-functions" variable nil nil [5120 5574])
            ("command-line-default-directory" variable nil nil [5576 5744])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5852 9036])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9038 11990])
            ("before-init-hook" variable nil nil [11993 12103])
            ("after-init-hook" variable nil nil [12105 12521])
            ("emacs-startup-hook" variable nil nil [12523 12630])
            ("term-setup-hook" variable nil nil [12632 12947])
            ("make-obsolete-variable" code nil nil [12949 13065])
            ("inhibit-startup-hooks" variable nil nil [13067 13266])
            ("keyboard-type" variable nil nil [13268 13489])
            ("window-setup-hook" variable nil nil [13491 13938])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13940 14109])
            ("init-file-user" variable nil nil [14111 14758])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14760 16031])
            ("make-obsolete-variable" code nil nil [16033 16105])
            ("mail-host-address" variable nil nil [16107 16305])
            ("user-mail-address" variable (:default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name))))) nil [16307 16729])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16731 17484])
            ("emacs-basic-display" variable nil nil [17486 17518])
            ("init-file-debug" variable nil nil [17520 17548])
            ("init-file-had-error" variable nil nil [17550 17646])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17648 17700])
            ("no-blinking-cursor" variable nil nil [17702 17733])
            ("pure-space-overflow" variable nil nil [17735 17820])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17822 17998])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18000 18236])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18238 19990])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19992 20761])
            ("normal-top-level" function nil nil [20763 30539])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30647 30873])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30875 30965])
            ("cl-defgeneric" code nil nil [30967 31308])
            ("cl-defmethod" code nil nil [31309 31405])
            ("cl-defgeneric" code nil nil [31407 31745])
            ("tty-handle-args" function (:arguments ("args")) nil [31747 34494])
            ("declare-function" code nil nil [34496 34590])
            ("declare-function" code nil nil [34591 34650])
            ("declare-function" code nil nil [34651 34695])
            ("server-name" variable nil nil [34697 34717])
            ("server-process" variable nil nil [34718 34741])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [34743 37718])
            ("command-line" function nil nil [37720 59239])
            ("x-apply-session-resources" function nil nil [59241 60320])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [60322 60730])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/thegnuproject.html"))) "Browse https://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [60905 63689])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [63691 66849])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [66852 66971])
            ("fancy-splash-image" variable nil nil [66973 67170])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [67173 67545])
            ("fancy-splash-insert" function (:arguments ("args")) nil [67616 69012])
            ("declare-function" code nil nil [69014 69083])
            ("fancy-splash-image-file" function nil nil [69085 69564])
            ("fancy-splash-head" function nil nil [69566 70584])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [70586 73725])
            ("exit-splash-screen" function (:user-visible-flag t) nil [73727 73836])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [73838 75269])
            ("fancy-about-screen" function nil nil [75271 76029])
            ("fancy-splash-frame" function nil nil [76031 76627])
            ("use-fancy-splash-screens-p" function nil nil [76629 77444])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [77447 79953])
            ("normal-mouse-startup-screen" function nil nil [79955 81761])
            ("normal-no-mouse-startup-screen" function nil nil [81763 85892])
            ("normal-about-screen" function nil nil [85894 87355])
            ("startup-echo-area-message" function nil nil [87357 87554])
            ("display-startup-echo-area-message" function nil nil [87556 88820])
            ("display-startup-screen" function (:arguments ("concise")) nil [88822 89274])
            ("display-about-screen" function (:user-visible-flag t) nil [89276 89522])
            ("defalias" code nil nil [89524 89569])
            ("defalias" code nil nil [89570 89627])
            ("command-line-1" function (:arguments ("args-left")) nil [89629 106773])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [106775 107507]))          
      :file "startup.el"
      :pointmax 107534
      :fsize 107565
      :lastmodtime '(23525 29518 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("xterm-mouse-debug-buffer" variable nil nil [1493 1530])
            ("xterm-mouse-translate" function (:arguments ("_event")) nil [1532 1645])
            ("xterm-mouse-translate-extended" function (:arguments ("_event")) nil [1647 1940])
            ("xterm-mouse-translate-1" function (:arguments ("extension")) nil [1942 3787])
            ("xt-mouse-epoch" variable nil nil [4045 4072])
            ("xterm-mouse-position-function" function (:arguments ("pos")) nil [4114 4384])
            ("xterm-mouse-truncate-wrap" function (:arguments ("f")) nil [4386 5016])
            ("xterm-mouse-utf-8" variable nil nil [5018 5299])
            ("xterm-mouse--read-coordinate" function nil nil [5301 6076])
            ("xterm-mouse--read-number-from-terminal" function (:arguments ("extension")) nil [6655 6990])
            ("xterm-mouse--read-event-sequence" function (:arguments ("extension")) nil [7349 9052])
            ("xterm-mouse--set-click-count" function (:arguments ("event" "click-count")) nil [9054 9500])
            ("xterm-mouse-event" function (:arguments ("extension")) nil [9502 12658])
            ("define-minor-mode" code nil nil [12675 13790])
            ("xterm-mouse-tracking-enable-sequence" function nil nil [13792 15234])
            ("xterm-mouse-tracking-enable-sequence" variable
               (:constant-flag t
                :default-value "[?1000h[?1002h[?1005h[?1006h")
                nil [15236 16531])
            ("make-obsolete-variable" code nil nil [16533 16672])
            ("xterm-mouse-tracking-disable-sequence" function nil nil [16674 16936])
            ("xterm-mouse-tracking-disable-sequence" variable
               (:constant-flag t
                :default-value "[?1006l[?1005l[?1002l[?1000l")
                nil [16938 17094])
            ("make-obsolete-variable" code nil nil [17096 17237])
            ("xterm-mouse--tracking-sequence" function (:arguments ("suffix")) nil [17239 17555])
            ("turn-on-xterm-mouse-tracking-on-terminal" function (:arguments ("terminal")) nil [17557 19144])
            ("turn-off-xterm-mouse-tracking-on-terminal" function (:arguments ("terminal")) nil [19146 20540])
            ("xt-mouse" package nil nil [20542 20561]))          
      :file "xt-mouse.el"
      :pointmax 20589
      :fsize 20588
      :lastmodtime '(23525 29522 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1159 1176])
            ("bookmark" include nil nil [1177 1196])
            ("declare-function" code nil nil [1198 1312])
            ("declare-function" code nil nil [1313 1368])
            ("declare-function" code nil nil [1369 1430])
            ("declare-function" code nil nil [1431 1507])
            ("declare-function" code nil nil [1508 1622])
            ("declare-function" code nil nil [1623 1691])
            ("declare-function" code nil nil [1692 1759])
            ("declare-function" code nil nil [1760 1814])
            ("declare-function" code nil nil [1815 1879])
            ("declare-function" code nil nil [1880 1945])
            ("declare-function" code nil nil [1946 2010])
            ("declare-function" code nil nil [2011 2076])
            ("declare-function" code nil nil [2077 2136])
            ("declare-function" code nil nil [2137 2204])
            ("xwidget-insert" function (:arguments ("pos" "type" "title" "width" "height" "args")) nil [2206 2708])
            ("xwidget-at" function (:arguments ("pos")) nil [2710 3056])
            ("browse-url" include nil nil [3160 3181])
            ("image-mode" include nil nil [3182 3203])
            ("xwidget-webkit-browse-url" function
               (:user-visible-flag t
                :arguments ("url" "new-session"))
                nil [3261 3987])
            ("xwidget-webkit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "g" (quote xwidget-webkit-browse-url)) (define-key map "a" (quote xwidget-webkit-adjust-size-dispatch)) (define-key map "b" (quote xwidget-webkit-back)) (define-key map "r" (quote xwidget-webkit-reload)) (define-key map "t" (lambda nil (interactive) (message "o"))) (define-key map "" (quote xwidget-webkit-insert-string)) (define-key map "w" (quote xwidget-webkit-current-url)) (define-key map "+" (quote xwidget-webkit-zoom-in)) (define-key map "-" (quote xwidget-webkit-zoom-out)) (define-key map (kbd "SPC") (quote xwidget-webkit-scroll-up)) (define-key map (kbd "DEL") (quote xwidget-webkit-scroll-down)) (define-key map [remap scroll-up] (quote xwidget-webkit-scroll-up)) (define-key map [remap scroll-up-command] (quote xwidget-webkit-scroll-up)) (define-key map [remap scroll-down] (quote xwidget-webkit-scroll-down)) (define-key map [remap scroll-down-command] (quote xwidget-webkit-scroll-down)) (define-key map [remap forward-char] (quote xwidget-webkit-scroll-forward)) (define-key map [remap backward-char] (quote xwidget-webkit-scroll-backward)) (define-key map [remap right-char] (quote xwidget-webkit-scroll-forward)) (define-key map [remap left-char] (quote xwidget-webkit-scroll-backward)) (define-key map [remap previous-line] (quote xwidget-webkit-scroll-down)) (define-key map [remap next-line] (quote xwidget-webkit-scroll-up)) (define-key map [remap beginning-of-buffer] (quote xwidget-webkit-scroll-top)) (define-key map [remap end-of-buffer] (quote xwidget-webkit-scroll-bottom)) map)) nil [4047 5916])
            ("xwidget-webkit-zoom-in" function (:user-visible-flag t) nil [5918 6066])
            ("xwidget-webkit-zoom-out" function (:user-visible-flag t) nil [6068 6218])
            ("xwidget-webkit-scroll-up" function (:user-visible-flag t) nil [6220 6392])
            ("xwidget-webkit-scroll-down" function (:user-visible-flag t) nil [6394 6571])
            ("xwidget-webkit-scroll-forward" function (:user-visible-flag t) nil [6573 6756])
            ("xwidget-webkit-scroll-backward" function (:user-visible-flag t) nil [6758 6944])
            ("xwidget-webkit-scroll-top" function (:user-visible-flag t) nil [6946 7141])
            ("xwidget-webkit-scroll-bottom" function (:user-visible-flag t) nil [7143 7376])
            ("define-key" code nil nil [7586 7659])
            ("xwidget-log" function (:arguments ("msg")) nil [7660 7855])
            ("xwidget-event-handler" function (:user-visible-flag t) nil [7857 8382])
            ("xwidget-webkit-callback" function (:arguments ("xwidget" "xwidget-event-type")) nil [8384 9828])
            ("bookmark-make-record-function" variable nil nil [9830 9868])
            ("define-derived-mode" code nil nil [9869 10190])
            ("xwidget-webkit-bookmark-make-record" function nil nil [10192 10508])
            ("xwidget-webkit-last-session-buffer" variable nil nil [10511 10558])
            ("xwidget-webkit-last-session" function nil nil [10560 10792])
            ("xwidget-webkit-current-session" function nil nil [10794 10989])
            ("xwidget-adjust-size-to-content" function (:arguments ("xw")) nil [10991 11326])
            ("xwidget-webkit-activeelement-js" variable (:default-value "
function findactiveelement(doc){
//alert(doc.activeElement.value);
   if(doc.activeElement.value != undefined){
      return doc.activeElement;
   }else{
        // recurse over the child documents:
        var frames = doc.getElementsByTagName('frame');
        for (var i = 0; i < frames.length; i++)
        {
                var d = frames[i].contentDocument;
                 var rv = findactiveelement(d);
                 if(rv != undefined){
                    return rv;
                 }
        }
    }
    return undefined;
};


") nil [11329 12349])
            ("xwidget-webkit-insert-string" function (:user-visible-flag t) nil [12351 13262])
            ("xwidget-xwbl" variable nil nil [13264 13285])
            ("xwidget-webkit-begin-edit-textarea" function (:arguments ("xw" "text")) nil [13286 13564])
            ("xwidget-webkit-end-edit-textarea" function (:user-visible-flag t) nil [13566 13952])
            ("xwidget-webkit-show-element" function
               (:user-visible-flag t
                :arguments ("xw" "element-selector"))
                nil [13954 14496])
            ("xwidget-webkit-show-named-element" function
               (:user-visible-flag t
                :arguments ("xw" "element-name"))
                nil [14498 15246])
            ("xwidget-webkit-show-id-element" function
               (:user-visible-flag t
                :arguments ("xw" "element-id"))
                nil [15248 15716])
            ("xwidget-webkit-show-id-or-named-element" function
               (:user-visible-flag t
                :arguments ("xw" "element-id"))
                nil [15718 16267])
            ("xwidget-webkit-adjust-size-to-content" function (:user-visible-flag t) nil [16269 16436])
            ("xwidget-webkit-adjust-size-dispatch" function (:user-visible-flag t) nil [16438 16817])
            ("xwidget-webkit-adjust-size-to-window" function (:arguments ("xwidget" "window")) nil [16819 17071])
            ("xwidget-webkit-adjust-size" function
               (:user-visible-flag t
                :arguments ("w" "h"))
                nil [17073 17308])
            ("xwidget-webkit-fit-width" function (:user-visible-flag t) nil [17310 17578])
            ("xwidget-webkit-auto-adjust-size" function (:arguments ("window")) nil [17580 17904])
            ("xwidget-webkit-adjust-size-in-frame" function (:arguments ("frame")) nil [17906 18092])
            ("eval-after-load" code nil nil [18094 18230])
            ("xwidget-webkit-new-session" function (:arguments ("url")) nil [18232 18969])
            ("xwidget-webkit-goto-url" function (:arguments ("url")) nil [18972 19185])
            ("xwidget-webkit-back" function (:user-visible-flag t) nil [19187 19375])
            ("xwidget-webkit-reload" function (:user-visible-flag t) nil [19377 19566])
            ("xwidget-webkit-current-url" function (:user-visible-flag t) nil [19568 19879])
            ("xwidget-webkit-get-selection" function (:arguments ("proc")) nil [19913 20123])
            ("xwidget-webkit-copy-selection-as-kill" function (:user-visible-flag t) nil [20125 20322])
            ("xwidget-get" function (:arguments ("xwidget" "propname")) nil [20452 20668])
            ("xwidget-put" function (:arguments ("xwidget" "propname" "value")) nil [20670 20973])
            ("xwidget-view-list" variable nil nil [21034 21060])
            ("xwidget-list" variable nil nil [21086 21107])
            ("xwidget-delete-zombies" function nil nil [21139 21463])
            ("xwidget-cleanup" function (:user-visible-flag t) nil [21465 21892])
            ("xwidget-kill-buffer-query-function" function nil nil [21894 22234])
            ("when" code nil nil [22236 22514])
            ("xwidget" package nil nil [22516 22534]))          
      :file "xwidget.el"
      :pointmax 22560
      :fsize 22559
      :lastmodtime '(23525 29522 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "bookmark.el"
      :fsize 89408
      :lastmodtime '(23525 29503 0 0))
    (semanticdb-table "semanticdb-table"
      :file "image-mode.el"
      :fsize 48347
      :lastmodtime '(23525 29511 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166 1107])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1109 1207])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209 1325])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327 1437])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1439 1575])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1577 1947])
            ("if" code nil nil [1949 2040])
            ("ada-add-extensions" function (:prototype-flag t) nil [2171 2457])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2459 2556])
            ("if" code nil nil [2558 2654])
            ("if" code nil nil [2782 2877])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3008 3110])
            ("if" code nil nil [3112 3208])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3339 3475])
            ("if" code nil nil [3477 3573])
            ("put" code nil nil [3687 3756])
            ("add-log-current-defun-function" variable nil nil [3758 4013])
            ("custom-autoload" code nil nil [4015 4076])
            ("add-log-full-name" variable nil nil [4078 4243])
            ("custom-autoload" code nil nil [4245 4293])
            ("add-log-mailing-address" variable nil nil [4295 4656])
            ("custom-autoload" code nil nil [4658 4712])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4714 4811])
            ("find-change-log" function (:prototype-flag t) nil [4813 5902])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5904 7205])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7207 7471])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7473 7899])
            ("add-log-current-defun" function (:prototype-flag t) nil [7901 8422])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8424 8825])
            ("if" code nil nil [8827 8940])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [9067 9721])
            ("custom-autoload" code nil nil [9723 9775])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [9777 10326])
            ("custom-autoload" code nil nil [10328 10387])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10389 10515])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10517 10644])
            ("ad-add-advice" function (:prototype-flag t) nil [10646 11708])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11710 12791])
            ("defadvice" function (:prototype-flag t) nil [12793 14967])
            ("function-put" code nil nil [14969 15013])
            ("function-put" code nil nil [15015 15065])
            ("if" code nil nil [15067 15160])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15262 16084])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16086 17894])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17896 18272])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18274 18702])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18704 19164])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19166 19291])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19293 19498])
            ("if" code nil nil [19500 19595])
            ("push" code nil nil [19699 19756])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [19758 19941])
            ("allout-setup" function (:prototype-flag t) nil [19943 20267])
            ("allout-auto-activation" variable nil nil [20269 20933])
            ("custom-autoload" code nil nil [20935 20989])
            ("put" code nil nil [20991 21113])
            ("put" code nil nil [21115 21207])
            ("put" code nil nil [21209 21323])
            ("put" code nil nil [21325 21382])
            ("put" code nil nil [21384 21442])
            ("put" code nil nil [21444 21508])
            ("put" code nil nil [21510 21580])
            ("put" code nil nil [21582 21723])
            ("put" code nil nil [21725 21846])
            ("put" code nil nil [21848 21967])
            ("put" code nil nil [21969 22109])
            ("put" code nil nil [22111 22252])
            ("put" code nil nil [22254 22319])
            ("put" code nil nil [22321 22422])
            ("put" code nil nil [22424 22494])
            ("put" code nil nil [22496 22562])
            ("allout-mode-p" function (:prototype-flag t) nil [22564 22670])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [22672 35665])
            ("defalias" code nil nil [35667 35714])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35716 35992])
            ("if" code nil nil [35994 36091])
            ("push" code nil nil [36227 36292])
            ("allout-widgets-setup" function (:prototype-flag t) nil [36294 36519])
            ("allout-widgets-auto-activation" variable nil nil [36521 37055])
            ("custom-autoload" code nil nil [37057 37127])
            ("put" code nil nil [37129 37252])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37254 38271])
            ("if" code nil nil [38273 38378])
            ("defalias" code nil nil [38497 38550])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38552 38947])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [38949 39035])
            ("if" code nil nil [39037 39175])
            ("animate-string" function (:prototype-flag t) nil [39293 39684])
            ("animate-sequence" function (:prototype-flag t) nil [39686 40050])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40052 40367])
            ("if" code nil nil [40369 40466])
            ("push" code nil nil [40582 40645])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40647 40757])
            ("ansi-color-process-output" function (:prototype-flag t) nil [40759 41348])
            ("if" code nil nil [41350 41455])
            ("push" code nil nil [41599 41662])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41664 42518])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42520 42616])
            ("antlr-set-tabs" function (:prototype-flag t) nil [42618 42814])
            ("if" code nil nil [42816 42916])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43033 43397])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43399 43595])
            ("if" code nil nil [43597 43690])
            ("apropos-read-pattern" function (:prototype-flag t) nil [43798 44151])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44153 44655])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44657 44957])
            ("apropos-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44959 45266])
            ("defalias" code nil nil [45268 45312])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45314 46077])
            ("apropos-documentation-property" function (:prototype-flag t) nil [46079 46239])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46241 46920])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46922 47215])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47217 47859])
            ("apropos-local-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47861 48137])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48139 48855])
            ("if" code nil nil [48857 48956])
            ("archive-mode" function (:prototype-flag t) nil [49067 49592])
            ("if" code nil nil [49594 49694])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49796 52881])
            ("if" code nil nil [52883 53059])
            ("push" code nil nil [53183 53242])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [53244 60927])
            ("if" code nil nil [60929 61026])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61157 61885])
            ("if" code nil nil [61887 61983])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [62103 62270])
            ("custom-autoload" code nil nil [62272 62331])
            ("if" code nil nil [62333 62439])
            ("push" code nil nil [62581 62650])
            ("auth-source-pass-enable" function (:prototype-flag t) nil [62652 62760])
            ("if" code nil nil [62762 62879])
            ("autoarg-mode" variable nil nil [62987 63121])
            ("custom-autoload" code nil nil [63123 63168])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63170 64253])
            ("autoarg-kp-mode" variable nil nil [64255 64552])
            ("custom-autoload" code nil nil [64554 64602])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64604 65029])
            ("if" code nil nil [65031 65130])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65261 65366])
            ("if" code nil nil [65368 65469])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65586 65791])
            ("define-auto-insert" function (:prototype-flag t) nil [65793 66097])
            ("auto-insert-mode" variable nil nil [66099 66400])
            ("custom-autoload" code nil nil [66402 66454])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66456 66874])
            ("if" code nil nil [66876 66981])
            ("put" code nil nil [67122 67182])
            ("put" code nil nil [67184 67249])
            ("put" code nil nil [67251 67306])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67308 67853])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67855 68671])
            ("batch-update-autoloads" function (:prototype-flag t) nil [68673 68927])
            ("if" code nil nil [68929 69079])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69196 69955])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [69957 70172])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70174 71099])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [71101 71340])
            ("global-auto-revert-mode" variable nil nil [71342 71671])
            ("custom-autoload" code nil nil [71673 71732])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71734 72760])
            ("if" code nil nil [72762 72890])
            ("if" code nil nil [73031 73132])
            ("mouse-avoidance-mode" variable nil nil [73234 73477])
            ("custom-autoload" code nil nil [73479 73530])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73532 74672])
            ("if" code nil nil [74674 74779])
            ("add-to-list" code nil nil [74910 74978])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [74980 75279])
            ("if" code nil nil [75281 75377])
            ("put" code nil nil [75485 75540])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75542 75772])
            ("display-battery-mode" variable nil nil [75774 76091])
            ("custom-autoload" code nil nil [76093 76146])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76148 76635])
            ("if" code nil nil [76637 76736])
            ("benchmark-run" function (:prototype-flag t) nil [76880 77314])
            ("function-put" code nil nil [77316 77370])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [77372 77708])
            ("function-put" code nil nil [77710 77773])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77775 78086])
            ("if" code nil nil [78088 78197])
            ("if" code nil nil [78328 78474])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78599 79313])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79315 81984])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [81986 82731])
            ("if" code nil nil [82733 82830])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [82981 83085])
            ("if" code nil nil [83087 83196])
            ("if" code nil nil [83323 83420])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [83535 83702])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [83704 83947])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [83949 84093])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84095 84207])
            ("if" code nil nil [84209 84306])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84427 89389])
            ("if" code nil nil [89391 89498])
            ("define-key" code nil nil [89609 89652])
            ("define-key" code nil nil [89654 89696])
            ("define-key" code nil nil [89698 89753])
            ("define-key" code nil nil [89755 89804])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "M" (quote bookmark-set-no-overwrite)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [89806 90694])
            ("fset" code nil nil [90696 90729])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90731 91915])
            ("bookmark-set-no-overwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91917 93199])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93201 94133])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94135 94277])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94279 94595])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94597 94862])
            ("defalias" code nil nil [94864 94917])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94919 95528])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95530 95940])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95942 96436])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96438 96563])
            ("function-put" code nil nil [96565 96628])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96630 97407])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97409 98337])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98339 98607])
            ("defalias" code nil nil [98609 98656])
            ("defalias" code nil nil [98658 98705])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98707 98834])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [98836 100283])
            ("defalias" code nil nil [100285 100340])
            ("if" code nil nil [100342 100476])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [100601 101164])
            ("custom-autoload" code nil nil [101166 101227])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101229 101578])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101580 101839])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101841 101975])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101977 102096])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102098 102800])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102802 103096])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103098 103382])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103384 103631])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103633 104442])
            ("make-obsolete" code nil nil [104444 104493])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104495 105298])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105300 106037])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106039 106342])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106344 107141])
            ("make-obsolete" code nil nil [107143 107190])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107192 107342])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107344 107988])
            ("make-obsolete" code nil nil [107990 108040])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108042 108743])
            ("make-obsolete" code nil nil [108745 108792])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108794 109541])
            ("make-obsolete" code nil nil [109543 109587])
            ("browse-url-conkeror" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109589 110402])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110404 110888])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110890 111192])
            ("make-obsolete" code nil nil [111194 111245])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111247 111667])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111669 112362])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112364 113075])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113077 113478])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113480 113687])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113689 114055])
            ("if" code nil nil [114057 114162])
            ("push" code nil nil [114254 114308])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114310 114512])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114514 114724])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114726 114825])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114827 115453])
            ("if" code nil nil [115455 115544])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115662 116266])
            ("if" code nil nil [116268 116367])
            ("put" code nil nil [116521 116655])
            ("put" code nil nil [116657 116718])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116720 117032])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117034 117187])
            ("if" code nil nil [117189 117300])
            ("if" code nil nil [117441 117559])
            ("put" code nil nil [117699 117757])
            ("put" code nil nil [117758 117829])
            ("put" code nil nil [117830 117899])
            ("put" code nil nil [117900 117964])
            ("put" code nil nil [117966 118105])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [118107 118481])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [118483 118841])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118843 119042])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119044 119782])
            ("put" code nil nil [119783 119836])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119838 120235])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120237 120454])
            ("byte-compile" function (:prototype-flag t) nil [120456 120637])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120639 121321])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [121323 121551])
            ("batch-byte-compile" function (:prototype-flag t) nil [121553 122004])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [122006 122450])
            ("if" code nil nil [122452 122653])
            ("if" code nil nil [122793 122932])
            ("put" code nil nil [123072 123129])
            ("if" code nil nil [123131 123276])
            ("if" code nil nil [123419 123531])
            ("put" code nil nil [123657 123720])
            ("put" code nil nil [123722 123783])
            ("put" code nil nil [123785 123848])
            ("if" code nil nil [123850 123957])
            ("if" code nil nil [124100 124230])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124373 124657])
            ("if" code nil nil [124659 124802])
            ("if" code nil nil [124931 125032])
            ("if" code nil nil [125172 125317])
            ("if" code nil nil [125443 125564])
            ("if" code nil nil [125707 125836])
            ("if" code nil nil [125976 126103])
            ("if" code nil nil [126232 126327])
            ("if" code nil nil [126456 126557])
            ("if" code nil nil [126700 126832])
            ("if" code nil nil [126958 127057])
            ("if" code nil nil [127177 127289])
            ("define-key" code nil nil [127398 127439])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127441 127578])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127580 127732])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127734 127856])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127858 128119])
            ("calc-eval" function (:prototype-flag t) nil [128121 128405])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128407 128705])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128707 128871])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128873 129014])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129016 129161])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129163 129299])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129301 129509])
            ("defmath" function (:prototype-flag t) nil [129511 129921])
            ("function-put" code nil nil [129923 129965])
            ("if" code nil nil [129967 130108])
            ("if" code nil nil [130269 130374])
            ("if" code nil nil [130495 130599])
            ("if" code nil nil [130726 130832])
            ("if" code nil nil [130953 131057])
            ("if" code nil nil [131181 131286])
            ("if" code nil nil [131410 131515])
            ("if" code nil nil [131679 131778])
            ("if" code nil nil [131899 132010])
            ("if" code nil nil [132131 132236])
            ("if" code nil nil [132363 132484])
            ("if" code nil nil [132608 132713])
            ("if" code nil nil [132840 132946])
            ("if" code nil nil [133073 133172])
            ("if" code nil nil [133296 133394])
            ("if" code nil nil [133521 133620])
            ("if" code nil nil [133747 133846])
            ("if" code nil nil [133970 134076])
            ("if" code nil nil [134200 134314])
            ("if" code nil nil [134435 134539])
            ("if" code nil nil [134663 134768])
            ("if" code nil nil [134892 134990])
            ("if" code nil nil [135151 135254])
            ("if" code nil nil [135378 135497])
            ("if" code nil nil [135618 135722])
            ("if" code nil nil [135849 135966])
            ("if" code nil nil [136090 136200])
            ("if" code nil nil [136324 136437])
            ("if" code nil nil [136561 136666])
            ("if" code nil nil [136793 136892])
            ("if" code nil nil [137013 137110])
            ("if" code nil nil [137234 137339])
            ("if" code nil nil [137466 137564])
            ("if" code nil nil [137691 137797])
            ("if" code nil nil [137924 138029])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [138153 138206])
            ("if" code nil nil [138208 138306])
            ("if" code nil nil [138433 138539])
            ("if" code nil nil [138660 138764])
            ("if" code nil nil [138925 139044])
            ("if" code nil nil [139165 139286])
            ("if" code nil nil [139407 139511])
            ("if" code nil nil [139632 139742])
            ("if" code nil nil [139863 139960])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [140077 140221])
            ("if" code nil nil [140223 140328])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [140457 142084])
            ("if" code nil nil [142086 142259])
            ("canlock-insert-header" function (:prototype-flag t) nil [142377 142542])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142544 142737])
            ("if" code nil nil [142739 142838])
            ("if" code nil nil [142969 143063])
            ("if" code nil nil [143188 143291])
            ("if" code nil nil [143439 143537])
            ("if" code nil nil [143665 143758])
            ("if" code nil nil [143886 144014])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [144156 144269])
            ("if" code nil nil [144271 144366])
            ("if" code nil nil [144497 144731])
            ("c-guess-guessed-offsets-alist" variable nil nil [144862 144941])
            ("c-guess-guessed-basic-offset" variable nil nil [144943 145020])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145022 145392])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145394 145710])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145712 146076])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146078 146388])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146390 146749])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146751 147640])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147642 148081])
            ("if" code nil nil [148083 148183])
            ("if" code nil nil [148314 148408])
            ("if" code nil nil [148539 148640])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [148768 149220])
            ("add-to-list" code nil nil [149222 149288])
            ("add-to-list" code nil nil [149290 149369])
            ("add-to-list" code nil nil [149371 149439])
            ("add-to-list" code nil nil [149441 149493])
            ("add-to-list" code nil nil [149495 149554])
            ("add-to-list" code nil nil [149556 149618])
            ("add-to-list" code nil nil [149620 149674])
            ("add-to-list" code nil nil [149676 149728])
            ("add-to-list" code nil nil [149730 149785])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149787 150335])
            ("c-or-c++-mode" function (:prototype-flag t) nil [150337 150798])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150800 151357])
            ("add-to-list" code nil nil [151359 151414])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151416 151986])
            ("add-to-list" code nil nil [151988 152046])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152048 152610])
            ("add-to-list" code nil nil [152612 152668])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152670 153251])
            ("add-to-list" code nil nil [153253 153344])
            ("add-to-list" code nil nil [153346 153405])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153407 153969])
            ("add-to-list" code nil nil [153971 154027])
            ("add-to-list" code nil nil [154029 154086])
            ("add-to-list" code nil nil [154088 154146])
            ("add-to-list" code nil nil [154148 154206])
            ("add-to-list" code nil nil [154208 154266])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154268 154826])
            ("if" code nil nil [154828 154999])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155141 156267])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156269 156814])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156816 157154])
            ("if" code nil nil [157156 157278])
            ("put" code nil nil [157405 157457])
            ("put" code nil nil [157458 157514])
            ("put" code nil nil [157515 157573])
            ("if" code nil nil [157575 157745])
            ("ccl-compile" function (:prototype-flag t) nil [157869 157994])
            ("ccl-dump" function (:prototype-flag t) nil [157996 158082])
            ("declare-ccl-program" function (:prototype-flag t) nil [158084 158546])
            ("define-ccl-program" function (:prototype-flag t) nil [158548 166435])
            ("function-put" code nil nil [166437 166490])
            ("check-ccl-program" function (:prototype-flag t) nil [166492 166813])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [166815 167098])
            ("if" code nil nil [167100 167191])
            ("cconv-closure-convert" function (:prototype-flag t) nil [167315 167620])
            ("cconv-warnings-only" function (:prototype-flag t) nil [167622 167743])
            ("if" code nil nil [167745 167840])
            ("if" code nil nil [167936 168027])
            ("push" code nil nil [168140 168196])
            ("if" code nil nil [168198 168293])
            ("if" code nil nil [168436 168545])
            ("if" code nil nil [168685 168786])
            ("if" code nil nil [168929 169032])
            ("if" code nil nil [169178 169289])
            ("push" code nil nil [169419 169478])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169480 169713])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169715 169948])
            ("cfengine-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169950 170072])
            ("if" code nil nil [170074 170174])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [170288 170801])
            ("if" code nil nil [170803 170906])
            ("push" code nil nil [171029 171085])
            ("if" code nil nil [171087 171181])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171337 171518])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171520 171718])
            ("if" code nil nil [171720 171831])
            ("push" code nil nil [171971 172032])
            ("put" code nil nil [172033 172102])
            ("put" code nil nil [172103 172169])
            ("put" code nil nil [172170 172247])
            ("put" code nil nil [172248 172325])
            ("put" code nil nil [172326 172409])
            ("put" code nil nil [172410 172481])
            ("put" code nil nil [172482 172558])
            ("put" code nil nil [172559 172637])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [172639 172751])
            ("put" code nil nil [172752 172816])
            ("put" code nil nil [172817 172882])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172884 173104])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173106 173634])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173636 174176])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174178 174467])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174469 174770])
            ("checkdoc-file" function (:prototype-flag t) nil [174772 174897])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174899 175254])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175256 175626])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175628 175917])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175919 176278])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176280 176495])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176497 176838])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176840 177205])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177207 177414])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177416 177662])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177664 177915])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177917 178186])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178188 178436])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178438 178657])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178659 178899])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178901 179140])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179142 179372])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179374 179926])
            ("checkdoc-package-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179928 180055])
            ("if" code nil nil [180057 180158])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180301 180453])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180455 180562])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180564 180712])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180714 180817])
            ("post-read-decode-hz" function (:prototype-flag t) nil [180819 180887])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [180889 180961])
            ("if" code nil nil [180963 181132])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181243 181648])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181650 182022])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182024 182649])
            ("if" code nil nil [182651 182816])
            ("if" code nil nil [182931 183070])
            ("if" code nil nil [183240 183335])
            ("push" code nil nil [183481 183542])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [183686 187195])
            ("if" code nil nil [187197 187310])
            ("push" code nil nil [187436 187493])
            ("define-obsolete-variable-alias" code nil nil [187495 187585])
            ("cl-custom-print-functions" variable nil nil [187587 188073])
            ("cl-old-struct-compat-mode" variable nil nil [188075 188412])
            ("custom-autoload" code nil nil [188414 188471])
            ("cl-old-struct-compat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [188473 188754])
            ("if" code nil nil [188756 188849])
            ("if" code nil nil [189016 189110])
            ("push" code nil nil [189250 189309])
            ("cl-print-object" function (:prototype-flag t) nil [189311 189613])
            ("cl-prin1" function (:prototype-flag t) nil [189615 189930])
            ("cl-prin1-to-string" function (:prototype-flag t) nil [189932 190075])
            ("if" code nil nil [190077 190195])
            ("if" code nil nil [190359 190453])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [190581 191117])
            ("if" code nil nil [191119 191218])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [191332 191996])
            ("if" code nil nil [191998 192158])
            ("color-name-to-rgb" function (:prototype-flag t) nil [192260 192797])
            ("if" code nil nil [192799 192894])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [192999 193667])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [193669 194464])
            ("make-comint" function (:prototype-flag t) nil [194466 195204])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195206 195546])
            ("function-put" code nil nil [195548 195605])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [195607 195827])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195829 196127])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [196129 196423])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [196425 196680])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [196682 196950])
            ("if" code nil nil [196952 197087])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197207 198484])
            ("if" code nil nil [198486 198587])
            ("if" code nil nil [198710 198812])
            ("compilation-mode-hook" variable nil nil [198940 199028])
            ("custom-autoload" code nil nil [199030 199082])
            ("compilation-start-hook" variable nil nil [199084 199226])
            ("custom-autoload" code nil nil [199228 199281])
            ("compilation-window-height" variable nil nil [199283 199393])
            ("custom-autoload" code nil nil [199395 199451])
            ("compilation-process-setup-function" variable nil nil [199453 199758])
            ("compilation-buffer-name-function" variable nil nil [199760 200057])
            ("compilation-finish-function" variable nil nil [200059 200264])
            ("compilation-finish-functions" variable nil nil [200266 200484])
            ("put" code nil nil [200485 200543])
            ("compilation-ask-about-save" variable (:default-value t) nil [200545 200714])
            ("custom-autoload" code nil nil [200716 200773])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [200775 201021])
            ("custom-autoload" code nil nil [201023 201077])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [201079 201726])
            ("custom-autoload" code nil nil [201728 201774])
            ("put" code nil nil [201775 201920])
            ("compilation-disable-input" variable nil nil [201922 202164])
            ("custom-autoload" code nil nil [202166 202222])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202224 203477])
            ("compilation-start" function (:prototype-flag t) nil [203479 204431])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204433 204835])
            ("put" code nil nil [204837 204885])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204887 205379])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205381 205793])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205795 206024])
            ("if" code nil nil [206026 206180])
            ("dynamic-completion-mode" variable nil nil [206297 206626])
            ("custom-autoload" code nil nil [206628 206687])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206689 206964])
            ("if" code nil nil [206966 207509])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207651 209078])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209080 209235])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209237 209709])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209711 210135])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210137 210897])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210899 211058])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211060 211386])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211388 211716])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211718 212035])
            ("conf-toml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212037 212316])
            ("conf-desktop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212318 212701])
            ("if" code nil nil [212703 212801])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212919 213241])
            ("cookie-insert" function (:prototype-flag t) nil [213243 213491])
            ("cookie-snarf" function (:prototype-flag t) nil [213493 213771])
            ("if" code nil nil [213773 213870])
            ("put" code nil nil [214013 214072])
            ("put" code nil nil [214073 214132])
            ("put" code nil nil [214133 214192])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214194 214646])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214648 214915])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214917 215039])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215041 215259])
            ("if" code nil nil [215261 215364])
            ("put" code nil nil [215508 215564])
            ("put" code nil nil [215565 215621])
            ("put" code nil nil [215622 215688])
            ("put" code nil nil [215689 215745])
            ("put" code nil nil [215746 215816])
            ("put" code nil nil [215817 215887])
            ("put" code nil nil [215888 215951])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215953 224246])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224248 224331])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224333 224439])
            ("if" code nil nil [224441 224559])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224675 224971])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224973 225069])
            ("if" code nil nil [225071 225162])
            ("completing-read-multiple" function (:prototype-flag t) nil [225280 226242])
            ("if" code nil nil [226244 226335])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [226466 227121])
            ("add-to-list" code nil nil [227123 227181])
            ("scss-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227183 227272])
            ("css-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227274 227615])
            ("if" code nil nil [227617 227721])
            ("cua-mode" variable nil nil [227852 228121])
            ("custom-autoload" code nil nil [228123 228165])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228167 229285])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229287 229413])
            ("if" code nil nil [229415 229511])
            ("if" code nil nil [229642 229738])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229869 230057])
            ("if" code nil nil [230059 230155])
            ("cursor-sensor-inhibit" variable nil nil [230311 230345])
            ("cursor-intangible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230347 230490])
            ("cursor-sensor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230492 230991])
            ("if" code nil nil [230993 231104])
            ("if" code nil nil [231212 231347])
            ("custom-browse-sort-alphabetically" variable nil nil [231458 231580])
            ("custom-autoload" code nil nil [231582 231647])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [231649 231767])
            ("custom-autoload" code nil nil [231769 231834])
            ("custom-menu-sort-alphabetically" variable nil nil [231836 231951])
            ("custom-autoload" code nil nil [231953 232016])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232018 232543])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232545 233198])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [233200 233859])
            ("customize-push-and-save" function (:prototype-flag t) nil [233861 234273])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234275 234569])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234571 234832])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234834 235027])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235029 235186])
            ("defalias" code nil nil [235188 235236])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235238 235348])
            ("defalias" code nil nil [235350 235424])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235426 235605])
            ("customize-package-emacs-version-alist" variable nil nil [235607 236947])
            ("defalias" code nil nil [236949 237005])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237007 237470])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237472 237891])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237893 238223])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238225 238349])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238351 238463])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238465 238559])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238561 239094])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239096 239245])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239247 239361])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239363 239479])
            ("custom-prompt-customize-unsaved-options" function (:prototype-flag t) nil [239481 239708])
            ("custom-buffer-create" function (:prototype-flag t) nil [239710 240056])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [240058 240494])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240496 240619])
            ("custom-file" variable nil nil [240621 242141])
            ("custom-autoload" code nil nil [242143 242186])
            ("custom-save-all" function (:prototype-flag t) nil [242188 242287])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242289 242413])
            ("custom-menu-create" function (:prototype-flag t) nil [242415 242584])
            ("customize-menu-create" function (:prototype-flag t) nil [242586 242890])
            ("if" code nil nil [242892 243010])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243124 243546])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243548 243670])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243672 243793])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243795 244024])
            ("if" code nil nil [244026 244145])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244268 244358])
            ("if" code nil nil [244360 244458])
            ("push" code nil nil [244579 244637])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244639 245150])
            ("define-obsolete-function-alias" code nil nil [245152 245223])
            ("global-cwarn-mode" variable nil nil [245225 245530])
            ("custom-autoload" code nil nil [245532 245580])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245582 245975])
            ("if" code nil nil [245977 246104])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [246247 246385])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [246387 246539])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246541 247130])
            ("if" code nil nil [247132 247249])
            ("put" code nil nil [247356 247411])
            ("put" code nil nil [247412 247463])
            ("define-key" code nil nil [247465 247505])
            ("define-key" code nil nil [247507 247555])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247557 248047])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248049 249146])
            ("if" code nil nil [249148 249247])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [249376 249488])
            ("if" code nil nil [249490 249595])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249702 249980])
            ("if" code nil nil [249982 250075])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250206 254215])
            ("if" code nil nil [254217 254313])
            ("setq" code nil nil [254437 254459])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [254461 254874])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [254876 255588])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [255590 255913])
            ("debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [255915 256654])
            ("defalias" code nil nil [256656 256706])
            ("cancel-debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256708 257061])
            ("defalias" code nil nil [257063 257127])
            ("if" code nil nil [257129 257248])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257369 257490])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257492 258219])
            ("if" code nil nil [258221 258322])
            ("push" code nil nil [258435 258495])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258497 258597])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258599 258752])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258754 258927])
            ("if" code nil nil [258929 259038])
            ("defalias" code nil nil [259143 259197])
            ("delete-selection-mode" variable nil nil [259199 259520])
            ("custom-autoload" code nil nil [259522 259575])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259577 260328])
            ("if" code nil nil [260330 260450])
            ("define-derived-mode" function (:prototype-flag t) nil [260580 262807])
            ("function-put" code nil nil [262809 262863])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [262865 263149])
            ("if" code nil nil [263151 263255])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263372 263790])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263792 264673])
            ("describe-char-eldoc" function (:prototype-flag t) nil [264675 265211])
            ("if" code nil nil [265213 265316])
            ("desktop-save-mode" variable nil nil [265424 265729])
            ("custom-autoload" code nil nil [265731 265781])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265783 266713])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [266715 267267])
            ("custom-autoload" code nil nil [267269 267322])
            ("defvar-local" code nil nil [267324 267920])
            ("desktop-buffer-mode-handlers" variable nil nil [267922 269230])
            ("put" code nil nil [269232 269291])
            ("desktop-minor-mode-handlers" variable nil nil [269293 270608])
            ("put" code nil nil [270610 270668])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [270670 271123])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271125 272461])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272463 272608])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272610 273134])
            ("desktop-load-default" function (:prototype-flag t) nil [273136 273279])
            ("make-obsolete" code nil nil [273281 273345])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273347 273602])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273604 273719])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273721 273809])
            ("if" code nil nil [273811 273910])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274031 274446])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274448 274642])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274644 274922])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274924 275059])
            ("if" code nil nil [275061 275158])
            ("if" code nil nil [275263 275360])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275500 275850])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275852 276619])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276621 276711])
            ("if" code nil nil [276713 276829])
            ("diff-switches" variable (:default-value (purecopy "-u")) nil [276934 277046])
            ("custom-autoload" code nil nil [277048 277089])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [277091 277166])
            ("custom-autoload" code nil nil [277168 277208])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277210 277776])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277778 278111])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [278113 278228])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278230 278434])
            ("if" code nil nil [278436 278529])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278649 279229])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279231 279511])
            ("if" code nil nil [279513 279611])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279715 279935])
            ("if" code nil nil [279937 280040])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [280142 280817])
            ("custom-autoload" code nil nil [280819 280870])
            ("dired-directory" variable nil nil [280872 281175])
            ("define-key" code nil nil [281177 281210])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281212 282228])
            ("define-key" code nil nil [282230 282278])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282280 282435])
            ("define-key" code nil nil [282437 282484])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282486 282632])
            ("dired-noselect" function (:prototype-flag t) nil [282634 282790])
            ("dired-mode" function (:prototype-flag t) nil [282792 285833])
            ("put" code nil nil [285835 285879])
            ("if" code nil nil [285881 285976])
            ("if" code nil nil [286127 286272])
            ("if" code nil nil [286417 286530])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286641 287233])
            ("dirtrack" function (:prototype-flag t) nil [287235 287564])
            ("if" code nil nil [287566 287667])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287794 288162])
            ("if" code nil nil [288164 288266])
            ("make-display-table" function (:prototype-flag t) nil [288383 288480])
            ("display-table-slot" function (:prototype-flag t) nil [288482 288801])
            ("set-display-table-slot" function (:prototype-flag t) nil [288803 289133])
            ("describe-display-table" function (:prototype-flag t) nil [289135 289252])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289254 289395])
            ("standard-display-8bit" function (:prototype-flag t) nil [289397 289903])
            ("standard-display-default" function (:prototype-flag t) nil [289905 290044])
            ("standard-display-ascii" function (:prototype-flag t) nil [290046 290162])
            ("standard-display-g1" function (:prototype-flag t) nil [290164 290395])
            ("standard-display-graphic" function (:prototype-flag t) nil [290397 290615])
            ("standard-display-underline" function (:prototype-flag t) nil [290617 290746])
            ("create-glyph" function (:prototype-flag t) nil [290748 290879])
            ("make-glyph-code" function (:prototype-flag t) nil [290881 291019])
            ("glyph-char" function (:prototype-flag t) nil [291021 291123])
            ("glyph-face" function (:prototype-flag t) nil [291125 291256])
            ("standard-display-european" function (:prototype-flag t) nil [291258 292159])
            ("if" code nil nil [292161 292280])
            ("display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292435 292793])
            ("global-display-line-numbers-mode" variable nil nil [292795 293160])
            ("custom-autoload" code nil nil [293162 293240])
            ("global-display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293242 293740])
            ("if" code nil nil [293742 293867])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293994 294381])
            ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [294477 295420])
            ("custom-autoload" code nil nil [295422 295467])
            ("if" code nil nil [295469 295560])
            ("if" code nil nil [295664 295755])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295886 296298])
            ("defalias" code nil nil [296300 296331])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296333 296452])
            ("if" code nil nil [296454 296555])
            ("doc-view-mode-p" function (:prototype-flag t) nil [296666 296882])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296884 297229])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [297231 297418])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297420 297787])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [297789 297858])
            ("if" code nil nil [297860 297961])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298076 298178])
            ("if" code nil nil [298180 298297])
            ("if" code nil nil [298393 298484])
            ("if" code nil nil [298592 298686])
            ("if" code nil nil [298797 298927])
            ("if" code nil nil [299035 299173])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299278 299680])
            ("if" code nil nil [299682 299779])
            ("push" code nil nil [299893 299950])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299952 300039])
            ("if" code nil nil [300041 300148])
            ("if" code nil nil [300288 300465])
            ("defalias" code nil nil [300612 300671])
            ("define-minor-mode" function (:prototype-flag t) nil [300673 304158])
            ("function-put" code nil nil [304160 304212])
            ("defalias" code nil nil [304214 304285])
            ("defalias" code nil nil [304287 304353])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [304355 305682])
            ("function-put" code nil nil [305684 305747])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [305749 306431])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [306433 306683])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [306685 306881])
            ("if" code nil nil [306883 306988])
            ("easy-menu-define" function (:prototype-flag t) nil [307129 310607])
            ("function-put" code nil nil [310609 310670])
            ("easy-menu-do-define" function (:prototype-flag t) nil [310672 310755])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [310757 311055])
            ("easy-menu-change" function (:prototype-flag t) nil [311057 311948])
            ("if" code nil nil [311950 312066])
            ("if" code nil nil [312197 312298])
            ("if" code nil nil [312429 312526])
            ("if" code nil nil [312657 312758])
            ("if" code nil nil [312889 312990])
            ("if" code nil nil [313121 313218])
            ("if" code nil nil [313349 313446])
            ("if" code nil nil [313577 313678])
            ("push" code nil nil [313805 313863])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313865 313948])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313950 314271])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314273 314583])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314585 315158])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315160 315374])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315376 315697])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315699 316009])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316011 316329])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316331 316609])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316611 316909])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316911 317182])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317184 317921])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317923 318668])
            ("defalias" code nil nil [318670 318706])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318708 319011])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319013 319292])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319294 319398])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319400 319502])
            ("ebnf-setup" function (:prototype-flag t) nil [319504 319589])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319591 319767])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319769 319963])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319965 320087])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320089 320250])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320252 320418])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320420 320585])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320587 320830])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320832 321064])
            ("if" code nil nil [321066 321162])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321290 321682])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321684 321822])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321824 321921])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321923 322028])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322030 322135])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322137 322240])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322242 322345])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322347 322481])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322483 322615])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322617 322749])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322751 322882])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322884 323014])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323016 323146])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323148 323444])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323446 323717])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323719 323931])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323933 324118])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324120 324457])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324459 324599])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324601 324743])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324745 324874])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324876 324983])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324985 325229])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325231 325325])
            ("if" code nil nil [325327 325459])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325576 327027])
            ("if" code nil nil [327029 327163])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327277 327509])
            ("if" code nil nil [327511 327633])
            ("ecomplete-setup" function (:prototype-flag t) nil [327747 327833])
            ("if" code nil nil [327835 327938])
            ("push" code nil nil [328045 328099])
            ("global-ede-mode" variable nil nil [328101 328398])
            ("custom-autoload" code nil nil [328400 328444])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328446 328821])
            ("if" code nil nil [328823 328953])
            ("if" code nil nil [329076 329172])
            ("if" code nil nil [329330 329440])
            ("if" code nil nil [329600 329696])
            ("if" code nil nil [329862 329960])
            ("if" code nil nil [330132 330233])
            ("if" code nil nil [330399 330523])
            ("if" code nil nil [330652 330750])
            ("if" code nil nil [330913 331016])
            ("if" code nil nil [331179 331282])
            ("if" code nil nil [331445 331542])
            ("if" code nil nil [331711 331818])
            ("if" code nil nil [331981 332101])
            ("if" code nil nil [332267 332372])
            ("if" code nil nil [332532 332633])
            ("if" code nil nil [332791 332901])
            ("if" code nil nil [333027 333147])
            ("if" code nil nil [333273 333376])
            ("if" code nil nil [333499 333600])
            ("if" code nil nil [333755 333859])
            ("if" code nil nil [334002 334102])
            ("if" code nil nil [334248 334382])
            ("if" code nil nil [334531 334633])
            ("if" code nil nil [334779 334880])
            ("if" code nil nil [335026 335127])
            ("if" code nil nil [335270 335370])
            ("if" code nil nil [335516 335645])
            ("if" code nil nil [335797 335918])
            ("if" code nil nil [336070 336173])
            ("if" code nil nil [336322 336431])
            ("if" code nil nil [336594 336708])
            ("if" code nil nil [336837 336942])
            ("if" code nil nil [337071 337175])
            ("if" code nil nil [337347 337447])
            ("if" code nil nil [337587 337694])
            ("if" code nil nil [337854 337970])
            ("edebug-all-defs" variable nil nil [338097 338564])
            ("custom-autoload" code nil nil [338566 338611])
            ("edebug-all-forms" variable nil nil [338613 338847])
            ("custom-autoload" code nil nil [338849 338895])
            ("edebug-basic-spec" function (:prototype-flag t) nil [338897 339103])
            ("defalias" code nil nil [339105 339157])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339159 340036])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340038 340129])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340131 340217])
            ("if" code nil nil [340219 340375])
            ("push" code nil nil [340482 340541])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340543 340786])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340788 341044])
            ("defalias" code nil nil [341046 341078])
            ("defalias" code nil nil [341080 341110])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341112 341333])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341335 341548])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341550 342085])
            ("defalias" code nil nil [342087 342122])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342124 342676])
            ("defalias" code nil nil [342678 342715])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342717 343003])
            ("defalias" code nil nil [343005 343041])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343043 343345])
            ("defalias" code nil nil [343347 343400])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343402 343701])
            ("defalias" code nil nil [343703 343741])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343743 344132])
            ("defalias" code nil nil [344134 344182])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344184 344760])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344762 345167])
            ("defalias" code nil nil [345169 345234])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345236 345669])
            ("defalias" code nil nil [345671 345764])
            ("defalias" code nil nil [345766 345842])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345844 346294])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346296 346746])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346748 347271])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347273 347830])
            ("defalias" code nil nil [347832 347874])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347876 348271])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348273 348745])
            ("defalias" code nil nil [348747 348817])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348819 349490])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349492 350230])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350232 350656])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350658 351119])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351121 351469])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351471 352035])
            ("defalias" code nil nil [352037 352073])
            ("defalias" code nil nil [352075 352120])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352122 352546])
            ("defalias" code nil nil [352548 352585])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352587 352733])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352735 352869])
            ("ediff-files-command" function (:prototype-flag t) nil [352871 352990])
            ("ediff3-files-command" function (:prototype-flag t) nil [352992 353115])
            ("ediff-merge-command" function (:prototype-flag t) nil [353117 353242])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [353244 353399])
            ("ediff-directories-command" function (:prototype-flag t) nil [353401 353534])
            ("ediff-directories3-command" function (:prototype-flag t) nil [353536 353670])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [353672 353817])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [353819 353991])
            ("if" code nil nil [353993 354088])
            ("if" code nil nil [354211 354311])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354434 354492])
            ("if" code nil nil [354494 354594])
            ("if" code nil nil [354717 354834])
            ("if" code nil nil [354957 355057])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355180 355267])
            ("defalias" code nil nil [355269 355311])
            ("if" code nil nil [355313 355413])
            ("if" code nil nil [355536 355636])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355759 355971])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355973 356201])
            ("if" code nil nil [356203 356303])
            ("if" code nil nil [356426 356552])
            ("if" code nil nil [356675 356775])
            ("push" code nil nil [356882 356940])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356942 357424])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357426 357548])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357550 357702])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357704 358379])
            ("format-kbd-macro" function (:prototype-flag t) nil [358381 358762])
            ("if" code nil nil [358764 358863])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358979 359217])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359219 359293])
            ("if" code nil nil [359295 359386])
            ("if" code nil nil [359528 359631])
            ("if" code nil nil [359776 359874])
            ("if" code nil nil [359999 360099])
            ("if" code nil nil [360241 360353])
            ("with-electric-help" function (:prototype-flag t) nil [360455 361678])
            ("electric-helpify" function (:prototype-flag t) nil [361680 361755])
            ("if" code nil nil [361757 361864])
            ("push" code nil nil [361987 362043])
            ("if" code nil nil [362045 362256])
            ("if" code nil nil [362403 362503])
            ("if" code nil nil [362685 362856])
            ("push" code nil nil [363002 363063])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [363065 363452])
            ("if" code nil nil [363454 363625])
            ("if" code nil nil [363807 363909])
            ("if" code nil nil [364071 364195])
            ("if" code nil nil [364368 364467])
            ("if" code nil nil [364626 364738])
            ("electric-pair-mode" variable nil nil [364852 365161])
            ("custom-autoload" code nil nil [365163 365216])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365218 365874])
            ("electric-pair-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365876 366004])
            ("if" code nil nil [366006 366113])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366230 366545])
            ("if" code nil nil [366547 366652])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366776 366848])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366850 367002])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367004 367137])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367139 367266])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367268 367459])
            ("if" code nil nil [367461 367556])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367674 367819])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367821 368095])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368097 368335])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368337 368563])
            ("if" code nil nil [368565 368656])
            ("if" code nil nil [368818 368946])
            ("if" code nil nil [369111 369218])
            ("if" code nil nil [369380 369478])
            ("if" code nil nil [369637 369735])
            ("if" code nil nil [369894 369991])
            ("if" code nil nil [370150 370248])
            ("if" code nil nil [370407 370504])
            ("if" code nil nil [370657 370752])
            ("if" code nil nil [370911 371009])
            ("if" code nil nil [371174 371274])
            ("if" code nil nil [371439 371539])
            ("if" code nil nil [371704 371803])
            ("if" code nil nil [371965 372064])
            ("if" code nil nil [372223 372321])
            ("if" code nil nil [372483 372581])
            ("if" code nil nil [372740 372869])
            ("if" code nil nil [373028 373142])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373259 374074])
            ("if" code nil nil [374076 374201])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374322 374483])
            ("set-advertised-calling-convention" code nil nil [374485 374555])
            ("if" code nil nil [374557 374666])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374777 374914])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374916 375118])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375120 375252])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375254 375455])
            ("emerge-files-command" function (:prototype-flag t) nil [375457 375518])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [375520 375595])
            ("emerge-files-remote" function (:prototype-flag t) nil [375597 375680])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [375682 375788])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375790 375946])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375948 376162])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376164 376263])
            ("if" code nil nil [376265 376362])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376493 377045])
            ("enriched-encode" function (:prototype-flag t) nil [377047 377122])
            ("enriched-decode" function (:prototype-flag t) nil [377124 377190])
            ("if" code nil nil [377192 377293])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377389 377509])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377511 377639])
            ("epa-select-keys" function (:prototype-flag t) nil [377641 378001])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378003 378205])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378207 378275])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378277 378379])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378381 378477])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378479 379413])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379415 379665])
            ("function-put" code nil nil [379667 379731])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379733 380374])
            ("function-put" code nil nil [380376 380430])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380432 380702])
            ("function-put" code nil nil [380704 380771])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380773 381428])
            ("function-put" code nil nil [381430 381482])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381484 382163])
            ("function-put" code nil nil [382165 382220])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382222 382322])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382324 382402])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382404 382500])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382502 382658])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382660 382750])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382752 382845])
            ("if" code nil nil [382847 382938])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383052 383135])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383137 383218])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383220 383297])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383299 383382])
            ("epa-file-handler" function (:prototype-flag t) nil [383493 383573])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383575 383631])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383633 383690])
            ("if" code nil nil [383692 383788])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383899 384176])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384178 384330])
            ("function-put" code nil nil [384332 384385])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384387 384556])
            ("function-put" code nil nil [384558 384610])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384612 384763])
            ("function-put" code nil nil [384765 384815])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384817 385377])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385379 385552])
            ("function-put" code nil nil [385554 385611])
            ("epa-global-mail-mode" variable nil nil [385613 385930])
            ("custom-autoload" code nil nil [385932 385986])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385988 386258])
            ("if" code nil nil [386260 386361])
            ("push" code nil nil [386456 386512])
            ("epg-make-context" function (:prototype-flag t) nil [386514 386693])
            ("if" code nil nil [386695 386786])
            ("epg-find-configuration" function (:prototype-flag t) nil [386903 387445])
            ("epg-configuration" function (:prototype-flag t) nil [387447 387581])
            ("make-obsolete" code nil nil [387583 387649])
            ("epg-check-configuration" function (:prototype-flag t) nil [387651 387807])
            ("epg-expand-group" function (:prototype-flag t) nil [387809 387922])
            ("if" code nil nil [387924 388022])
            ("push" code nil nil [388125 388179])
            ("erc-select-read-args" function (:prototype-flag t) nil [388181 388302])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388304 389129])
            ("defalias" code nil nil [389131 389158])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389160 389307])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [389309 389581])
            ("if" code nil nil [389583 389694])
            ("erc-autoaway-mode" function (:prototype-flag t) nil [389833 389877])
            ("if" code nil nil [389879 389983])
            ("if" code nil nil [390111 390210])
            ("erc-button-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390335 390381])
            ("if" code nil nil [390383 390481])
            ("erc-capab-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390603 390656])
            ("if" code nil nil [390658 390770])
            ("erc-define-minor-mode" function (:prototype-flag t) nil [390895 390941])
            ("if" code nil nil [390943 391041])
            ("erc-dcc-mode" function (:prototype-flag t) nil [391157 391191])
            ("erc-cmd-DCC" function (:prototype-flag t) nil [391193 391493])
            ("pcomplete/erc-mode/DCC" function (:prototype-flag t) nil [391495 391600])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [391602 391696])
            ("erc-ctcp-query-DCC" function (:prototype-flag t) nil [391698 391945])
            ("if" code nil nil [391947 392064])
            ("erc-notifications-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392241 392308])
            ("if" code nil nil [392310 392437])
            ("erc-cmd-ezb" function (:prototype-flag t) nil [392576 392699])
            ("erc-ezb-get-login" function (:prototype-flag t) nil [392701 392960])
            ("erc-ezb-lookup-action" function (:prototype-flag t) nil [392962 393038])
            ("erc-ezb-notice-autodetect" function (:prototype-flag t) nil [393040 393160])
            ("erc-ezb-identify" function (:prototype-flag t) nil [393162 393266])
            ("erc-ezb-init-session-list" function (:prototype-flag t) nil [393268 393387])
            ("erc-ezb-end-of-session-list" function (:prototype-flag t) nil [393389 393520])
            ("erc-ezb-add-session" function (:prototype-flag t) nil [393522 393640])
            ("erc-ezb-select" function (:prototype-flag t) nil [393642 393765])
            ("erc-ezb-select-session" function (:prototype-flag t) nil [393767 393871])
            ("erc-ezb-initialize" function (:prototype-flag t) nil [393873 393981])
            ("if" code nil nil [393983 394087])
            ("erc-fill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394206 394248])
            ("erc-fill" function (:prototype-flag t) nil [394250 394444])
            ("if" code nil nil [394446 394542])
            ("if" code nil nil [394670 394769])
            ("if" code nil nil [394897 394996])
            ("erc-identd-mode" function (:prototype-flag t) nil [395121 395161])
            ("erc-identd-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395163 395548])
            ("erc-identd-stop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395550 395621])
            ("if" code nil nil [395623 395728])
            ("erc-create-imenu-index" function (:prototype-flag t) nil [395850 395916])
            ("if" code nil nil [395918 396028])
            ("erc-autojoin-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396147 396193])
            ("if" code nil nil [396195 396291])
            ("if" code nil nil [396410 396545])
            ("erc-list-mode" function (:prototype-flag t) nil [396664 396700])
            ("if" code nil nil [396702 396798])
            ("erc-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396914 396954])
            ("erc-logging-enabled" function (:prototype-flag t) nil [396956 397312])
            ("erc-save-buffer-in-logs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397314 397810])
            ("if" code nil nil [397812 397907])
            ("erc-match-mode" function (:prototype-flag t) nil [398029 398067])
            ("erc-add-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398069 398158])
            ("erc-delete-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398160 398255])
            ("erc-add-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398257 398349])
            ("erc-delete-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398351 398449])
            ("erc-add-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398451 398552])
            ("erc-delete-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398554 398661])
            ("erc-add-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398663 398785])
            ("erc-delete-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398787 398915])
            ("if" code nil nil [398917 399014])
            ("erc-menu-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399133 399175])
            ("if" code nil nil [399177 399278])
            ("erc-netsplit-mode" function (:prototype-flag t) nil [399417 399461])
            ("erc-cmd-WHOLEFT" function (:prototype-flag t) nil [399463 399541])
            ("if" code nil nil [399543 399643])
            ("erc-determine-network" function (:prototype-flag t) nil [399782 400035])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400037 400168])
            ("if" code nil nil [400170 400270])
            ("erc-notify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400395 400441])
            ("erc-cmd-NOTIFY" function (:prototype-flag t) nil [400443 400687])
            ("pcomplete/erc-mode/NOTIFY" function (:prototype-flag t) nil [400689 400759])
            ("if" code nil nil [400761 400859])
            ("erc-page-mode" function (:prototype-flag t) nil [400978 401014])
            ("if" code nil nil [401016 401112])
            ("erc-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [401254 401307])
            ("if" code nil nil [401309 401430])
            ("erc-replace-mode" function (:prototype-flag t) nil [401558 401600])
            ("if" code nil nil [401602 401709])
            ("erc-ring-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [401828 401870])
            ("if" code nil nil [401872 401968])
            ("erc-services-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402107 402157])
            ("erc-nickserv-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402159 402292])
            ("erc-nickserv-identify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402294 402487])
            ("if" code nil nil [402489 402589])
            ("erc-sound-mode" function (:prototype-flag t) nil [402711 402749])
            ("if" code nil nil [402751 402848])
            ("erc-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402987 403143])
            ("if" code nil nil [403145 403245])
            ("erc-spelling-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403384 403434])
            ("if" code nil nil [403436 403545])
            ("erc-timestamp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403667 403715])
            ("if" code nil nil [403717 403814])
            ("erc-track-minor-mode" variable nil nil [403936 404094])
            ("custom-autoload" code nil nil [404096 404151])
            ("erc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404153 404694])
            ("erc-track-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404696 404740])
            ("if" code nil nil [404742 404839])
            ("erc-truncate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404978 405028])
            ("erc-truncate-buffer-to-size" function (:prototype-flag t) nil [405030 405294])
            ("erc-truncate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405296 405470])
            ("if" code nil nil [405472 405587])
            ("erc-xdcc-mode" function (:prototype-flag t) nil [405706 405742])
            ("erc-xdcc-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405744 405838])
            ("if" code nil nil [405840 405936])
            ("ert-deftest" function (:prototype-flag t) nil [406054 406636])
            ("function-put" code nil nil [406638 406684])
            ("function-put" code nil nil [406686 406738])
            ("put" code nil nil [406740 406782])
            ("put" code nil nil [406784 406823])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [406825 407231])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [407233 407582])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407584 407977])
            ("defalias" code nil nil [407979 408023])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408025 408167])
            ("if" code nil nil [408169 408260])
            ("put" code nil nil [408384 408435])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408437 408542])
            ("if" code nil nil [408544 408637])
            ("if" code nil nil [408759 408857])
            ("if" code nil nil [408979 409113])
            ("if" code nil nil [409235 409332])
            ("if" code nil nil [409451 409548])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409673 409754])
            ("if" code nil nil [409756 409854])
            ("if" code nil nil [409993 410094])
            ("if" code nil nil [410216 410314])
            ("if" code nil nil [410439 410537])
            ("if" code nil nil [410662 410761])
            ("if" code nil nil [410883 411005])
            ("push" code nil nil [411123 411182])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411184 411720])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411722 411904])
            ("eshell-command-result" function (:prototype-flag t) nil [411906 412270])
            ("define-obsolete-function-alias" code nil nil [412272 412348])
            ("if" code nil nil [412350 412447])
            ("tags-file-name" variable nil nil [412569 412871])
            ("put" code nil nil [412873 412949])
            ("put" code nil nil [412951 413002])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [413004 413232])
            ("custom-autoload" code nil nil [413234 413284])
            ("tags-table-list" variable nil nil [413286 413625])
            ("custom-autoload" code nil nil [413627 413671])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [413673 413884])
            ("custom-autoload" code nil nil [413886 413941])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [413943 414221])
            ("custom-autoload" code nil nil [414223 414267])
            ("find-tag-hook" variable nil nil [414269 414482])
            ("custom-autoload" code nil nil [414484 414526])
            ("find-tag-default-function" variable nil nil [414528 414807])
            ("custom-autoload" code nil nil [414809 414863])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414865 414957])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414959 415588])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [415590 416350])
            ("tags-table-files" function (:prototype-flag t) nil [416352 416629])
            ("tags-lazy-completion-table" function (:prototype-flag t) nil [416631 416697])
            ("tags-completion-at-point-function" function nil nil [416699 416867])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [416869 417867])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [417869 418833])
            ("make-obsolete" code nil nil [418835 418891])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [418893 419885])
            ("make-obsolete" code nil nil [419887 419969])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419971 420952])
            ("make-obsolete" code nil nil [420954 421034])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421036 421937])
            ("make-obsolete" code nil nil [421939 421998])
            ("defalias" code nil nil [422000 422047])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422049 422598])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422600 423198])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423200 423667])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423669 424268])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424270 424546])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424548 424659])
            ("make-obsolete" code nil nil [424661 424717])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424719 424984])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424986 425243])
            ("etags--xref-backend" function (:prototype-flag t) nil [425245 425304])
            ("if" code nil nil [425306 425648])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [425791 425871])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425873 426491])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426493 427129])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427131 427425])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427427 428135])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428137 428843])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428845 429077])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429079 429195])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429197 429706])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429708 429812])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429814 429959])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429961 430095])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [430097 430413])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [430415 430559])
            ("ethio-find-file" function (:prototype-flag t) nil [430561 430691])
            ("ethio-write-file" function (:prototype-flag t) nil [430693 430829])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430831 431003])
            ("ethio-composition-function" function (:prototype-flag t) nil [431005 431102])
            ("if" code nil nil [431104 431232])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431339 431565])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431567 431748])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431750 431931])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431933 432738])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432740 433019])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433021 433175])
            ("cond" code nil nil [433177 435161])
            ("if" code nil nil [435163 435256])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [435375 435496])
            ("eudc-display-url" function (:prototype-flag t) nil [435498 435595])
            ("eudc-display-mail" function (:prototype-flag t) nil [435597 435707])
            ("eudc-display-sound" function (:prototype-flag t) nil [435709 435815])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [435817 435939])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [435941 436051])
            ("if" code nil nil [436053 436150])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436278 436476])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436478 436602])
            ("if" code nil nil [436604 436704])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436843 436967])
            ("if" code nil nil [436969 437078])
            ("if" code nil nil [437200 437298])
            ("if" code nil nil [437423 437527])
            ("if" code nil nil [437652 437751])
            ("if" code nil nil [437873 437971])
            ("ewoc-create" function (:prototype-flag t) nil [438092 438893])
            ("if" code nil nil [438895 438988])
            ("eww-suggest-uris" variable (:default-value (quote (eww-links-at-point url-get-url-at-point eww-current-url))) nil [439092 439420])
            ("custom-autoload" code nil nil [439422 439465])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439467 439654])
            ("defalias" code nil nil [439656 439683])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439685 439761])
            ("eww-search-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439763 440064])
            ("eww-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440066 440136])
            ("eww-browse-url" function (:prototype-flag t) nil [440138 440215])
            ("eww-list-bookmarks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440217 440293])
            ("if" code nil nil [440295 440386])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [440531 440725])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440727 441072])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441074 441489])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [441491 441736])
            ("if" code nil nil [441738 441843])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [441948 442850])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [442852 443037])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443039 443232])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443234 443419])
            ("define-key" code nil nil [443421 443478])
            ("define-key" code nil nil [443480 443533])
            ("if" code nil nil [443535 443632])
            ("if" code nil nil [443740 443839])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443955 446334])
            ("if" code nil nil [446336 446427])
            ("face-remap-add-relative" function (:prototype-flag t) nil [446544 447636])
            ("face-remap-reset-base" function (:prototype-flag t) nil [447638 447889])
            ("face-remap-set-base" function (:prototype-flag t) nil [447891 448598])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448600 449028])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449030 449483])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449485 449670])
            ("define-key" code nil nil [449672 449728])
            ("define-key" code nil nil [449730 449786])
            ("define-key" code nil nil [449788 449844])
            ("define-key" code nil nil [449846 449902])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449904 451058])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451060 451443])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451445 451930])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451932 452628])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452630 452878])
            ("if" code nil nil [452880 453046])
            ("push" code nil nil [453166 453224])
            ("feedmail-send-it" function (:prototype-flag t) nil [453226 453482])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453484 453637])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453639 453940])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453942 454268])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454270 455417])
            ("if" code nil nil [455419 455520])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455619 456041])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456043 456559])
            ("defalias" code nil nil [456561 456597])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456599 456956])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456958 457284])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457286 457485])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [457487 457654])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457656 457753])
            ("if" code nil nil [457755 457897])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458011 458253])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458255 458676])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458678 458771])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458773 458940])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458942 459139])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459141 459537])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459539 459975])
            ("if" code nil nil [459977 460081])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460198 460488])
            ("if" code nil nil [460490 460596])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460704 461221])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461223 461393])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461395 461803])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461805 461973])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461975 462128])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462130 462277])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462279 462393])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462395 462524])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462526 462653])
            ("enable-connection-local-variables" variable (:default-value t) nil [462655 462759])
            ("connection-local-set-profiles" function (:prototype-flag t) nil [462761 463346])
            ("connection-local-set-profile-variables" function (:prototype-flag t) nil [463348 463998])
            ("hack-connection-local-variables-apply" function (:prototype-flag t) nil [464000 464229])
            ("with-connection-local-profiles" function (:prototype-flag t) nil [464231 464447])
            ("function-put" code nil nil [464449 464520])
            ("if" code nil nil [464522 464701])
            ("filesets-init" function (:prototype-flag t) nil [464812 464964])
            ("if" code nil nil [464966 465067])
            ("push" code nil nil [465177 465236])
            ("find-cmd" function (:prototype-flag t) nil [465238 465675])
            ("if" code nil nil [465677 465774])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465891 466218])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466220 466605])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466607 467027])
            ("if" code nil nil [467029 467156])
            ("ff-special-constructs" variable (:default-value (\` (((\, (purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]")) lambda nil (buffer-substring (match-beginning 2) (match-end 2)))))) nil [467270 467787])
            ("custom-autoload" code nil nil [467789 467843])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467845 468115])
            ("defalias" code nil nil [468117 468169])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468171 470064])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470066 470166])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470168 470299])
            ("if" code nil nil [470301 470430])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470574 470741])
            ("find-library-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470743 470912])
            ("find-library-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470914 471081])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [471083 471586])
            ("find-function-noselect" function (:prototype-flag t) nil [471588 472273])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472275 472806])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472808 472987])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472989 473166])
            ("find-variable-noselect" function (:prototype-flag t) nil [473168 473670])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473672 474201])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474203 474382])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474384 474561])
            ("find-definition-noselect" function (:prototype-flag t) nil [474563 475087])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475089 475636])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475638 475812])
            ("find-function-on-key-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475814 475978])
            ("find-function-on-key-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475980 476142])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476144 476264])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476266 476386])
            ("find-function-setup-keys" function (:prototype-flag t) nil [476388 476523])
            ("if" code nil nil [476525 476643])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476757 476865])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476867 476979])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476981 477120])
            ("if" code nil nil [477122 477225])
            ("push" code nil nil [477329 477386])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477388 477505])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477507 477669])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477671 477766])
            ("if" code nil nil [477768 477898])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478012 478264])
            ("enable-flow-control-on" function (:prototype-flag t) nil [478266 478650])
            ("if" code nil nil [478652 478760])
            ("fill-flowed-encode" function (:prototype-flag t) nil [478884 478963])
            ("fill-flowed" function (:prototype-flag t) nil [478965 479050])
            ("if" code nil nil [479052 479157])
            ("push" code nil nil [479284 479342])
            ("flymake-log" function (:prototype-flag t) nil [479344 479676])
            ("flymake-make-diagnostic" function (:prototype-flag t) nil [479678 479946])
            ("flymake-diagnostics" function (:prototype-flag t) nil [479948 480223])
            ("flymake-diag-region" function (:prototype-flag t) nil [480225 480462])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480464 481955])
            ("flymake-mode-on" function (:prototype-flag t) nil [481957 482035])
            ("flymake-mode-off" function (:prototype-flag t) nil [482037 482117])
            ("if" code nil nil [482119 482218])
            ("push" code nil nil [482368 482431])
            ("if" code nil nil [482433 482542])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482673 482781])
            ("flyspell-mode" variable nil nil [482782 482847])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482849 484116])
            ("turn-on-flyspell" function (:prototype-flag t) nil [484118 484215])
            ("turn-off-flyspell" function (:prototype-flag t) nil [484217 484316])
            ("flyspell-mode-off" function (:prototype-flag t) nil [484318 484401])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484403 484501])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484503 484581])
            ("if" code nil nil [484583 484770])
            ("push" code nil nil [484877 484936])
            ("if" code nil nil [484938 485037])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [485142 485262])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [485264 485386])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485388 486819])
            ("follow-scroll-up-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486821 487273])
            ("follow-scroll-down-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487275 487745])
            ("follow-scroll-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487747 488132])
            ("follow-scroll-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488134 488524])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488526 489217])
            ("if" code nil nil [489219 489316])
            ("if" code nil nil [489460 489659])
            ("push" code nil nil [489779 489839])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489841 490278])
            ("if" code nil nil [490280 490393])
            ("if" code nil nil [490513 490619])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490721 491525])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491527 491610])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491612 491724])
            ("if" code nil nil [491726 491821])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491949 494997])
            ("if" code nil nil [494999 495098])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495216 495442])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495444 495697])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495699 495932])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495934 496325])
            ("fortune-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496327 496575])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496577 496927])
            ("if" code nil nil [496929 497028])
            ("frameset-session-filter-alist" variable (:default-value (quote ((name . :never) (left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified)))) nil [497139 497448])
            ("frameset-persistent-filter-alist" variable (:default-value (nconc (quote ((background-color . frameset-filter-sanitize-color) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (client . :never) (delete-before . :never) (font . frameset-filter-font-param) (foreground-color . frameset-filter-sanitize-color) (frameset--text-pixel-height . :save) (frameset--text-pixel-width . :save) (fullscreen . frameset-filter-shelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (outer-window-id . :never) (parent-frame . :never) (parent-id . :never) (mouse-wheel-frame . :never) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-id . :never) (window-system . :never))) frameset-session-filter-alist)) nil [497450 498520])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [498522 500737])
            ("frameset-frame-id" function (:prototype-flag t) nil [500739 501174])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [501176 501293])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [501295 501529])
            ("frameset-save" function (:prototype-flag t) nil [501531 502292])
            ("frameset-restore" function (:prototype-flag t) nil [502294 505274])
            ("frameset--jump-to-register" function (:prototype-flag t) nil [505276 505448])
            ("frameset--print-register" function (:prototype-flag t) nil [505450 505639])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505641 505926])
            ("if" code nil nil [505928 506029])
            ("if" code nil nil [506134 506245])
            ("push" code nil nil [506365 506424])
            ("if" code nil nil [506426 506527])
            ("if" code nil nil [506648 506749])
            ("gdb-enable-debug" variable nil nil [506874 507025])
            ("custom-autoload" code nil nil [507027 507075])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [507077 507515])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [507517 510545])
            ("if" code nil nil [510547 510678])
            ("if" code nil nil [510822 510927])
            ("generic-mode-list" variable nil nil [511057 511221])
            ("define-generic-mode" function (:prototype-flag t) nil [511223 512799])
            ("function-put" code nil nil [512801 512861])
            ("function-put" code nil nil [512863 512917])
            ("generic-mode-internal" function (:prototype-flag t) nil [512919 513072])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [513074 513469])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [513471 513972])
            ("make-obsolete" code nil nil [513974 514037])
            ("if" code nil nil [514039 514138])
            ("if" code nil nil [514252 514376])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [514504 514883])
            ("if" code nil nil [514885 514984])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [515108 515275])
            ("gmm-message" function (:prototype-flag t) nil [515277 515601])
            ("gmm-error" function (:prototype-flag t) nil [515603 515765])
            ("gmm-widget-p" function (:prototype-flag t) nil [515767 515860])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [515862 516709])
            ("if" code nil nil [516711 516820])
            ("push" code nil nil [516928 516984])
            ("when" code nil nil [516985 517064])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517066 517206])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517208 517599])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517601 517683])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517685 518294])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518296 518581])
            ("if" code nil nil [518583 518676])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518803 518881])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518883 518957])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518959 519067])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519069 519477])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [519479 519582])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [519584 519913])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [519915 520213])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [520215 520349])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [520351 520541])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [520543 520800])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520802 520896])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520898 520998])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521000 521153])
            ("if" code nil nil [521155 521254])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [521375 521495])
            ("if" code nil nil [521497 521605])
            ("if" code nil nil [521732 521831])
            ("if" code nil nil [521958 522065])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522209 522304])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522306 522424])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522426 522714])
            ("if" code nil nil [522716 522827])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522954 523130])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523132 523252])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523254 523381])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [523383 523698])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [523700 523997])
            ("if" code nil nil [523999 524098])
            ("if" code nil nil [524222 524329])
            ("if" code nil nil [524456 524561])
            ("if" code nil nil [524682 524797])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524924 525472])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525474 525585])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [525587 525964])
            ("if" code nil nil [525966 526071])
            ("if" code nil nil [526198 526297])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [526424 526503])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [526505 526584])
            ("if" code nil nil [526586 526685])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526812 526924])
            ("if" code nil nil [526926 527031])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527158 527261])
            ("if" code nil nil [527263 527362])
            ("if" code nil nil [527483 527580])
            ("if" code nil nil [527707 527815])
            ("gnus--random-face-with-type" function (:prototype-flag t) nil [527936 528107])
            ("message-goto-eoh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528109 528153])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528155 528346])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528348 528480])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528482 528688])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528690 528889])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [528891 529044])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [529046 529220])
            ("gnus-random-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529222 529393])
            ("gnus-insert-random-face-header" function (:prototype-flag t) nil [529395 529523])
            ("if" code nil nil [529525 529622])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529766 529933])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529935 530113])
            ("if" code nil nil [530115 530226])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530353 530566])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530568 530676])
            ("if" code nil nil [530678 530777])
            ("gnus-article-html" function (:prototype-flag t) nil [530901 530979])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [530981 531058])
            ("if" code nil nil [531060 531158])
            ("if" code nil nil [531305 531417])
            ("if" code nil nil [531538 531635])
            ("defalias" code nil nil [531759 531804])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531806 531944])
            ("if" code nil nil [531946 532044])
            ("if" code nil nil [532171 532270])
            ("if" code nil nil [532388 532484])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [532602 532674])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532676 532847])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532849 533004])
            ("if" code nil nil [533006 533115])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533242 534378])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534380 534727])
            ("gnus-group-split" function (:prototype-flag t) nil [534729 534967])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [534969 537148])
            ("if" code nil nil [537150 537261])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537382 537745])
            ("gnus-button-mailto" function (:prototype-flag t) nil [537747 537832])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537834 537939])
            ("define-mail-user-agent" code nil nil [537941 538060])
            ("if" code nil nil [538062 538159])
            ("gnus-notifications" function (:prototype-flag t) nil [538318 538672])
            ("if" code nil nil [538674 538795])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538922 539066])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539068 539218])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539220 539393])
            ("if" code nil nil [539395 539500])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [539627 539839])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [539841 540040])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [540042 540224])
            ("gnus-intersection" function (:prototype-flag t) nil [540226 540300])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [540302 540464])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [540466 540640])
            ("defalias" code nil nil [540642 540709])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [540711 540909])
            ("gnus-sorted-union" function (:prototype-flag t) nil [540911 541059])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [541061 541245])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [541247 541364])
            ("if" code nil nil [541366 541465])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541609 541708])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541710 541810])
            ("if" code nil nil [541812 541914])
            ("if" code nil nil [542055 542159])
            ("if" code nil nil [542283 542381])
            ("if" code nil nil [542508 542607])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542734 543107])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543109 543440])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543442 543512])
            ("if" code nil nil [543514 543619])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543743 543850])
            ("if" code nil nil [543852 543950])
            ("if" code nil nil [544074 544172])
            ("gnus-declare-backend" function (:prototype-flag t) nil [544299 544441])
            ("if" code nil nil [544443 544542])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [544663 544867])
            ("if" code nil nil [544869 544966])
            ("if" code nil nil [545093 545192])
            ("if" code nil nil [545316 545414])
            ("if" code nil nil [545538 545636])
            ("if" code nil nil [545754 545850])
            ("if" code nil nil [545968 546064])
            ("gnus-add-configuration" function (:prototype-flag t) nil [546185 546320])
            ("if" code nil nil [546322 546419])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [546532 546928])
            ("custom-autoload" code nil nil [546930 546981])
            ("if" code nil nil [546983 547101])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547216 547980])
            ("if" code nil nil [547982 548079])
            ("define-obsolete-function-alias" code nil nil [548201 548286])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548288 548580])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548582 549016])
            ("put" code nil nil [549017 549064])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549066 549365])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549367 549505])
            ("if" code nil nil [549507 549613])
            ("gravatar-retrieve" function (:prototype-flag t) nil [549736 549945])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [549947 550080])
            ("if" code nil nil [550082 550183])
            ("grep-window-height" variable nil nil [550302 550413])
            ("custom-autoload" code nil nil [550415 550461])
            ("grep-command" variable nil nil [550463 550901])
            ("custom-autoload" code nil nil [550903 550945])
            ("grep-find-command" variable nil nil [550947 551205])
            ("custom-autoload" code nil nil [551207 551254])
            ("grep-setup-hook" variable nil nil [551256 551358])
            ("custom-autoload" code nil nil [551360 551403])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (\` (((\, (concat "^\\(?:" "\\(?1:[^ 
]+\\)\\(?3: \\)\\(?2:[0-9]+\\):" "\\|" "\\(?1:[^
:]+?[^
/:]\\):[	 ]*\\(?2:[1-9][0-9]*\\)[	 ]*:" "\\)")) 1 2 ((\, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) (quote grep-match-face)))) (when mbeg (- mbeg beg)))))) \, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) (quote grep-match-face))) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) nil nil (3 (quote (face nil display ":")))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [551405 552286])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [552288 552475])
            ("find-program" variable (:default-value (purecopy "find")) nil [552477 552622])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [552624 552822])
            ("grep-find-use-xargs" variable nil nil [552824 553138])
            ("grep-history" variable nil nil [553140 553192])
            ("grep-find-history" variable nil nil [553194 553256])
            ("grep-process-setup" function (:prototype-flag t) nil [553258 553435])
            ("grep-compute-defaults" function (:prototype-flag t) nil [553437 553497])
            ("grep-mode" function (:prototype-flag t) nil [553499 553603])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [553605 554506])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554508 554867])
            ("defalias" code nil nil [554869 554901])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554903 555813])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555815 556912])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [556914 557203])
            ("defalias" code nil nil [557205 557231])
            ("if" code nil nil [557233 557347])
            ("if" code nil nil [557462 557587])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [557703 558250])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558252 558462])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558464 558674])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558676 559037])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559039 559255])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559257 559469])
            ("guiler" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559471 559689])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559691 560320])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560322 560408])
            ("gud-tooltip-mode" variable nil nil [560410 560711])
            ("custom-autoload" code nil nil [560713 560758])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560760 561012])
            ("if" code nil nil [561014 561112])
            ("gv-get" function (:prototype-flag t) nil [561227 561717])
            ("gv-letplace" function (:prototype-flag t) nil [561719 562269])
            ("function-put" code nil nil [562271 562323])
            ("gv-define-expander" function (:prototype-flag t) nil [562325 562636])
            ("function-put" code nil nil [562638 562697])
            ("gv--defun-declaration" function (:prototype-flag t) nil [562699 562796])
            ("or" code nil nil [562798 562998])
            ("or" code nil nil [563000 563146])
            ("gv-define-setter" function (:prototype-flag t) nil [563148 563821])
            ("function-put" code nil nil [563823 563880])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [563882 564465])
            ("setf" function (:prototype-flag t) nil [564467 564819])
            ("put" code nil nil [564821 564873])
            ("gv-ref" function (:prototype-flag t) nil [564875 565167])
            ("if" code nil nil [565169 565258])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565382 565808])
            ("if" code nil nil [565810 565938])
            ("if" code nil nil [566081 566178])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566290 566385])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566387 566609])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566611 566854])
            ("if" code nil nil [566856 566951])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567072 567202])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567204 567398])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [567400 567523])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567525 567821])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567823 568065])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568067 568241])
            ("if" code nil nil [568243 568344])
            ("help-at-pt-string" function (:prototype-flag t) nil [568461 568854])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [568856 569134])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569136 569617])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569619 569778])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569780 569943])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [569945 571321])
            ("custom-autoload" code nil nil [571323 571387])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [571389 572332])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572334 573348])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573350 573726])
            ("if" code nil nil [573728 573854])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573965 574149])
            ("help-C-file-name" function (:prototype-flag t) nil [574151 574350])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [574352 575102])
            ("describe-function-1" function (:prototype-flag t) nil [575104 575175])
            ("variable-at-point" function (:prototype-flag t) nil [575177 575413])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575415 575757])
            ("describe-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575759 576135])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576137 576387])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576389 576714])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576716 576846])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576848 576977])
            ("if" code nil nil [576979 577088])
            ("three-step-help" variable nil nil [577205 577534])
            ("custom-autoload" code nil nil [577536 577585])
            ("if" code nil nil [577587 577697])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577811 578013])
            ("help-mode-setup" function (:prototype-flag t) nil [578015 578112])
            ("help-mode-finish" function (:prototype-flag t) nil [578114 578217])
            ("help-setup-xref" function (:prototype-flag t) nil [578219 578813])
            ("help-buffer" function (:prototype-flag t) nil [578815 579152])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579154 580175])
            ("help-xref-button" function (:prototype-flag t) nil [580177 580546])
            ("help-insert-xref-button" function (:prototype-flag t) nil [580548 580849])
            ("help-xref-on-pp" function (:prototype-flag t) nil [580851 580976])
            ("define-obsolete-function-alias" code nil nil [580978 581054])
            ("help-bookmark-jump" function (:prototype-flag t) nil [581056 581282])
            ("if" code nil nil [581284 581409])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581536 581643])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581645 581725])
            ("if" code nil nil [581727 581824])
            ("if" code nil nil [581935 582064])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582163 585703])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585705 585926])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585928 586063])
            ("if" code nil nil [586065 586177])
            ("if" code nil nil [586325 586451])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586559 589379])
            ("global-hi-lock-mode" variable nil nil [589381 589694])
            ("custom-autoload" code nil nil [589696 589748])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589750 590154])
            ("defalias" code nil nil [590156 590225])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590227 590641])
            ("defalias" code nil nil [590643 590692])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590694 591085])
            ("defalias" code nil nil [591087 591143])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591145 591750])
            ("defalias" code nil nil [591752 591819])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591821 592243])
            ("defalias" code nil nil [592245 592298])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592300 592651])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592653 592977])
            ("if" code nil nil [592979 593107])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593232 595043])
            ("if" code nil nil [595045 595266])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [595397 596838])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [596840 597742])
            ("turn-off-hideshow" function (:prototype-flag t) nil [597744 597845])
            ("if" code nil nil [597847 597942])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598056 599147])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [599149 599784])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [599786 600005])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600007 600149])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600151 600301])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600303 600980])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600982 601566])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601568 602186])
            ("global-highlight-changes-mode" variable nil nil [602188 602541])
            ("custom-autoload" code nil nil [602543 602607])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602609 603079])
            ("if" code nil nil [603081 603224])
            ("push" code nil nil [603340 603401])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [603403 603874])
            ("custom-autoload" code nil nil [603876 603942])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603944 604430])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [604432 604699])
            ("if" code nil nil [604701 604822])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [604930 605775])
            ("global-hl-line-mode" variable nil nil [605777 606090])
            ("custom-autoload" code nil nil [606092 606144])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606146 606715])
            ("if" code nil nil [606717 606834])
            ("if" code nil nil [606953 607065])
            ("if" code nil nil [607184 607297])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [607426 608247])
            ("custom-autoload" code nil nil [608249 608305])
            ("put" code nil nil [608307 608362])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [608364 608865])
            ("custom-autoload" code nil nil [608867 608924])
            ("put" code nil nil [608926 608982])
            ("holiday-local-holidays" variable nil nil [608984 609098])
            ("custom-autoload" code nil nil [609100 609154])
            ("put" code nil nil [609156 609209])
            ("holiday-other-holidays" variable nil nil [609211 609332])
            ("custom-autoload" code nil nil [609334 609388])
            ("put" code nil nil [609390 609443])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [609445 609760])
            ("custom-autoload" code nil nil [609762 609817])
            ("put" code nil nil [609819 609873])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [609875 610299])
            ("custom-autoload" code nil nil [610301 610359])
            ("put" code nil nil [610361 610418])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [610420 610930])
            ("custom-autoload" code nil nil [610932 610988])
            ("put" code nil nil [610990 611045])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the Báb") (holiday-fixed 5 29 "Ascension of Bahá’u’lláh") (holiday-fixed 7 9 "Martyrdom of the Báb") (holiday-fixed 10 20 "Birth of the Báb") (holiday-fixed 11 12 "Birth of Bahá’u’lláh") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu’l-Bahá"))))))) nil [611047 611592])
            ("custom-autoload" code nil nil [611594 611648])
            ("put" code nil nil [611650 611703])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [611705 612257])
            ("custom-autoload" code nil nil [612259 612313])
            ("put" code nil nil [612315 612368])
            ("put" code nil nil [612370 612418])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [612420 612680])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [612682 613505])
            ("defalias" code nil nil [613507 613546])
            ("if" code nil nil [613548 613660])
            ("push" code nil nil [613779 613842])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613844 614590])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614592 614901])
            ("if" code nil nil [614903 615017])
            ("if" code nil nil [615165 615529])
            ("define-ibuffer-column" function (:prototype-flag t) nil [615643 616744])
            ("function-put" code nil nil [616746 616812])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [616814 617315])
            ("function-put" code nil nil [617317 617379])
            ("function-put" code nil nil [617381 617437])
            ("define-ibuffer-op" function (:prototype-flag t) nil [617439 619458])
            ("function-put" code nil nil [619460 619518])
            ("function-put" code nil nil [619520 619572])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [619574 620139])
            ("function-put" code nil nil [620141 620203])
            ("function-put" code nil nil [620205 620261])
            ("if" code nil nil [620263 620364])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [620472 620699])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [620701 620942])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [620944 621811])
            ("ibuffer-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621813 622020])
            ("if" code nil nil [622022 622190])
            ("push" code nil nil [622329 622390])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622392 622653])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622655 623129])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623131 623478])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623480 624184])
            ("if" code nil nil [624186 624289])
            ("icomplete-mode" variable nil nil [624403 624696])
            ("custom-autoload" code nil nil [624698 624747])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624749 625508])
            ("when" code nil nil [625509 625704])
            ("if" code nil nil [625706 625809])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625928 627354])
            ("if" code nil nil [627356 627580])
            ("if" code nil nil [627764 627879])
            ("if" code nil nil [628021 628122])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [628267 629117])
            ("if" code nil nil [629119 629221])
            ("if" code nil nil [629372 629484])
            ("push" code nil nil [629611 629672])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629674 634634])
            ("if" code nil nil [634636 634735])
            ("ido-mode" variable nil nil [634831 635295])
            ("custom-autoload" code nil nil [635297 635334])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635336 635853])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635855 637551])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637553 637792])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637794 638021])
            ("ido-display-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638023 638252])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638254 638437])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638439 638668])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638670 638907])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638909 639010])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639012 641501])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641503 641730])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641732 641962])
            ("ido-find-alternate-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641964 642207])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642209 642434])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642436 642690])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642692 642944])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642946 643163])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643165 643390])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643392 643585])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643587 643792])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643794 643976])
            ("ido-dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643978 644218])
            ("ido-dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644220 644451])
            ("ido-read-buffer" function (:prototype-flag t) nil [644453 644844])
            ("ido-read-file-name" function (:prototype-flag t) nil [644846 645137])
            ("ido-read-directory-name" function (:prototype-flag t) nil [645139 645439])
            ("ido-completing-read" function (:prototype-flag t) nil [645441 646415])
            ("if" code nil nil [646417 646508])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646607 646807])
            ("if" code nil nil [646809 646929])
            ("if" code nil nil [647056 647161])
            ("define-obsolete-function-alias" code nil nil [647266 647339])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [647341 647645])
            ("if" code nil nil [647647 647767])
            ("image-type-from-data" function (:prototype-flag t) nil [647869 648061])
            ("image-type-from-buffer" function (:prototype-flag t) nil [648063 648263])
            ("image-type-from-file-header" function (:prototype-flag t) nil [648265 648482])
            ("image-type-from-file-name" function (:prototype-flag t) nil [648484 648688])
            ("image-type" function (:prototype-flag t) nil [648690 649158])
            ("image-type-available-p" function (:prototype-flag t) nil [649160 649320])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [649322 649819])
            ("create-image" function (:prototype-flag t) nil [649821 650700])
            ("put-image" function (:prototype-flag t) nil [650702 651421])
            ("insert-image" function (:prototype-flag t) nil [651423 652273])
            ("insert-sliced-image" function (:prototype-flag t) nil [652275 652858])
            ("remove-images" function (:prototype-flag t) nil [652860 653108])
            ("find-image" function (:prototype-flag t) nil [653110 653938])
            ("defimage" function (:prototype-flag t) nil [653940 654755])
            ("function-put" code nil nil [654757 654800])
            ("imagemagick-register-types" function (:prototype-flag t) nil [654802 655379])
            ("if" code nil nil [655381 655475])
            ("push" code nil nil [655594 655659])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [655661 656049])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [656051 656682])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [656684 657674])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657676 657956])
            ("defalias" code nil nil [657958 658012])
            ("define-obsolete-function-alias" code nil nil [658014 658073])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658075 658209])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658211 658370])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658372 658474])
            ("image-dired-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658476 658721])
            ("define-obsolete-function-alias" code nil nil [658723 658823])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658825 658954])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658956 659089])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659091 659216])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659218 659468])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659470 659593])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659595 660021])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660023 660234])
            ("if" code nil nil [660236 660343])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [660460 660998])
            ("custom-autoload" code nil nil [661000 661062])
            ("image-file-name-regexps" variable nil nil [661064 661537])
            ("custom-autoload" code nil nil [661539 661598])
            ("image-file-name-regexp" function (:prototype-flag t) nil [661600 661725])
            ("insert-image-file" function (:prototype-flag t) nil [661727 661984])
            ("auto-image-file-mode" variable nil nil [661986 662303])
            ("custom-autoload" code nil nil [662305 662361])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662363 662803])
            ("if" code nil nil [662805 662910])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663027 663312])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663314 663745])
            ("image-mode-to-text" function (:prototype-flag t) nil [663747 663985])
            ("image-bookmark-jump" function (:prototype-flag t) nil [663987 664055])
            ("if" code nil nil [664057 664157])
            ("if" code nil nil [664264 664357])
            ("imenu-sort-function" variable nil nil [664459 664995])
            ("custom-autoload" code nil nil [664997 665045])
            ("imenu-generic-expression" variable nil nil [665047 666575])
            ("put" code nil nil [666576 666631])
            ("make-variable-buffer-local" code nil nil [666633 666687])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [666689 667055])
            ("make-variable-buffer-local" code nil nil [667057 667114])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [667116 667556])
            ("make-variable-buffer-local" code nil nil [667558 667622])
            ("imenu-extract-index-name-function" variable nil nil [667624 667917])
            ("make-variable-buffer-local" code nil nil [667919 667982])
            ("imenu-name-lookup-function" variable nil nil [667984 668342])
            ("make-variable-buffer-local" code nil nil [668344 668400])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [668402 668605])
            ("make-variable-buffer-local" code nil nil [668607 668664])
            ("put" code nil nil [668665 668714])
            ("make-variable-buffer-local" code nil nil [668716 668764])
            ("make-variable-buffer-local" code nil nil [668766 668818])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668820 669038])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669040 669244])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669246 669461])
            ("if" code nil nil [669463 669558])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669687 669818])
            ("indian-compose-string" function (:prototype-flag t) nil [669820 669891])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [669893 669971])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [669973 670055])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670057 670182])
            ("if" code nil nil [670184 670295])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670426 670904])
            ("defalias" code nil nil [670906 670941])
            ("if" code nil nil [670943 671074])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep (quote ns)) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list (quote ("/usr/local/" "/usr/" "/opt/")))) (suffixes (quote ("share/" ""))) (standard-info-dirs (apply (function nconc) (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type (quote windows-nt))) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [671173 673118])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673120 673259])
            ("put" code nil nil [673261 673302])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673304 674252])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674254 674346])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674348 674471])
            ("info-standalone" function (:prototype-flag t) nil [674473 674680])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674682 674909])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674911 674992])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674994 675389])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675391 675550])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675552 675884])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675886 679577])
            ("put" code nil nil [679579 679644])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [679646 679982])
            ("put" code nil nil [679984 680053])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680055 680468])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680470 680625])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [680627 680808])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680810 681151])
            ("if" code nil nil [681153 681254])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681368 681612])
            ("put" code nil nil [681614 681658])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681660 682105])
            ("put" code nil nil [682107 682149])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682151 682554])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682556 682678])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682680 682798])
            ("if" code nil nil [682800 682898])
            ("push" code nil nil [683011 683069])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683071 684306])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684308 684898])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684900 685286])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [685288 686158])
            ("if" code nil nil [686160 686263])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686374 686524])
            ("Info-split-threshold" variable (:default-value 262144) nil [686526 686634])
            ("custom-autoload" code nil nil [686636 686688])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686690 687375])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687377 687539])
            ("batch-info-validate" function (:prototype-flag t) nil [687541 687871])
            ("if" code nil nil [687873 687979])
            ("define-inline" function (:prototype-flag t) nil [688106 688361])
            ("function-put" code nil nil [688363 688421])
            ("function-put" code nil nil [688423 688471])
            ("if" code nil nil [688473 688570])
            ("push" code nil nil [688695 688755])
            ("inversion-require-emacs" function (:prototype-flag t) nil [688757 688982])
            ("if" code nil nil [688984 689087])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689237 689376])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689378 689489])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [689491 689604])
            ("if" code nil nil [689606 689707])
            ("push" code nil nil [689817 689876])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689878 690143])
            ("if" code nil nil [690145 690245])
            ("if" code nil nil [690395 690498])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690642 690912])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690914 691173])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691175 691442])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691444 691711])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691713 691989])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691991 692267])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692269 692542])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692544 692809])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692811 693076])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693078 693178])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693180 693282])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693284 693413])
            ("if" code nil nil [693415 693510])
            ("define-key" code nil nil [693663 693727])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693729 693813])
            ("if" code nil nil [693815 693920])
            ("put" code nil nil [694045 694135])
            ("ispell-personal-dictionary" variable nil nil [694137 694311])
            ("custom-autoload" code nil nil [694313 694369])
            ("put" code nil nil [694371 694440])
            ("ispell-menu-map" variable nil nil [694442 694499])
            ("ispell-menu-map-needed" variable (:default-value (unless ispell-menu-map (quote reload))) nil [694501 694565])
            ("if" code nil nil [694567 696317])
            ("if" code nil nil [696319 697000])
            ("if" code nil nil [697002 697634])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage"))))) nil [697636 698535])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [698537 699375])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [699377 699922])
            ("put" code nil nil [699923 699978])
            ("define-key" code nil nil [699980 700017])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700019 701394])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [701396 701576])
            ("ispell-help" function (:prototype-flag t) nil [701578 702671])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [702673 702937])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [702939 703251])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703253 703504])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703506 703641])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703643 703754])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703756 703975])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703977 704098])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704100 704370])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704372 704502])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704504 704949])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704951 705599])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705601 706574])
            ("if" code nil nil [706576 706696])
            ("if" code nil nil [706849 706991])
            ("if" code nil nil [707144 707245])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [707388 707468])
            ("japanese-katakana" function (:prototype-flag t) nil [707470 707945])
            ("japanese-hiragana" function (:prototype-flag t) nil [707947 708189])
            ("japanese-hankaku" function (:prototype-flag t) nil [708191 708529])
            ("japanese-zenkaku" function (:prototype-flag t) nil [708531 708773])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708775 709059])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709061 709204])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709206 709550])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709552 709901])
            ("read-hiragana-string" function (:prototype-flag t) nil [709903 710147])
            ("if" code nil nil [710149 710252])
            ("jka-compr-inhibit" variable nil nil [710366 710580])
            ("jka-compr-handler" function (:prototype-flag t) nil [710582 710664])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [710666 710906])
            ("if" code nil nil [710908 711031])
            ("push" code nil nil [711143 711194])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711196 711272])
            ("js-jsx-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711274 711638])
            ("defalias" code nil nil [711640 711676])
            ("dolist" code nil nil [711678 711800])
            ("if" code nil nil [711802 711901])
            ("push" code nil nil [711999 712054])
            ("if" code nil nil [712056 712149])
            ("if" code nil nil [712254 712351])
            ("keypad-setup" variable nil nil [712476 712687])
            ("custom-autoload" code nil nil [712689 712733])
            ("keypad-numlock-setup" variable nil nil [712735 712953])
            ("custom-autoload" code nil nil [712955 713007])
            ("keypad-shifted-setup" variable nil nil [713009 713226])
            ("custom-autoload" code nil nil [713228 713280])
            ("keypad-numlock-shifted-setup" variable nil nil [713282 713507])
            ("custom-autoload" code nil nil [713509 713569])
            ("keypad-setup" function (:prototype-flag t) nil [713571 714614])
            ("kinsoku" function (:prototype-flag t) nil [714758 715402])
            ("if" code nil nil [715404 715503])
            ("kkc-after-update-conversion-functions" variable nil nil [715627 716005])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716007 716434])
            ("if" code nil nil [716436 716527])
            ("global-set-key" code nil nil [716632 716676])
            ("global-set-key" code nil nil [716678 716720])
            ("global-set-key" code nil nil [716722 716773])
            ("global-set-key" code nil nil [716775 716834])
            ("global-set-key" code nil nil [716836 716883])
            ("global-set-key" code nil nil [716885 716927])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716929 717011])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [717013 717170])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717172 718228])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718230 718693])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718695 719336])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719338 720264])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720266 720537])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720539 720913])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720915 721121])
            ("if" code nil nil [721123 721220])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [721363 721559])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [721561 721639])
            ("if" code nil nil [721641 721843])
            ("lao-compose-string" function (:prototype-flag t) nil [721972 722037])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [722039 722575])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [722577 722718])
            ("lao-composition-function" function (:prototype-flag t) nil [722720 722795])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722797 722864])
            ("if" code nil nil [722866 722962])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy (quote (("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8))))) nil [723109 723818])
            ("custom-autoload" code nil nil [723820 723879])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [723881 724093])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [724095 724302])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [724304 724596])
            ("if" code nil nil [724598 724708])
            ("latin1-display" variable nil nil [724864 725567])
            ("custom-autoload" code nil nil [725569 725620])
            ("latin1-display" function (:prototype-flag t) nil [725622 725963])
            ("latin1-display-ucs-per-lynx" variable nil nil [725965 726300])
            ("custom-autoload" code nil nil [726302 726366])
            ("if" code nil nil [726368 726478])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [726620 726716])
            ("if" code nil nil [726718 726821])
            ("if" code nil nil [726928 727021])
            ("if" code nil nil [727177 727289])
            ("put" code nil nil [727443 727505])
            ("put" code nil nil [727507 727559])
            ("put" code nil nil [727561 727623])
            ("put" code nil nil [727625 727686])
            ("add-to-list" code nil nil [727688 727750])
            ("less-css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727752 727907])
            ("if" code nil nil [727909 728015])
            ("push" code nil nil [728158 728220])
            ("let-alist" function (:prototype-flag t) nil [728222 729156])
            ("function-put" code nil nil [729158 729208])
            ("if" code nil nil [729210 729314])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729423 729688])
            ("if" code nil nil [729690 729783])
            ("push" code nil nil [729884 729943])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729945 730268])
            ("global-linum-mode" variable nil nil [730270 730575])
            ("custom-autoload" code nil nil [730577 730625])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [730627 730999])
            ("if" code nil nil [731001 731096])
            ("if" code nil nil [731237 731332])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731443 732617])
            ("if" code nil nil [732619 732764])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [732869 733068])
            ("custom-autoload" code nil nil [733070 733125])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [733127 734191])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734193 734953])
            ("if" code nil nil [734955 735052])
            ("log-edit" function (:prototype-flag t) nil [735169 736409])
            ("if" code nil nil [736411 736522])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736639 736732])
            ("if" code nil nil [736734 736835])
            ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [736931 737046])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux)))) nil [737048 737178])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [737180 737994])
            ("custom-autoload" code nil nil [737996 738035])
            ("lpr-switches" variable nil nil [738037 738245])
            ("custom-autoload" code nil nil [738247 738286])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [738288 738854])
            ("custom-autoload" code nil nil [738856 738894])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738896 739092])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739094 739660])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739662 739868])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739870 740450])
            ("if" code nil nil [740452 740551])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [740659 740842])
            ("custom-autoload" code nil nil [740844 740906])
            ("if" code nil nil [740908 741007])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741127 741400])
            ("if" code nil nil [741402 741542])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741670 741753])
            ("if" code nil nil [741755 741849])
            ("name-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741954 742257])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [742259 742957])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [742959 743618])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743620 745087])
            ("define-key" code nil nil [745089 745132])
            ("mail-extract-address-components" function (:prototype-flag t) nil [745256 746179])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746181 746301])
            ("if" code nil nil [746303 746406])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [746530 746660])
            ("mail-hist-enable" function (:prototype-flag t) nil [746662 746722])
            ("mail-hist-keep-history" variable (:default-value t) nil [746724 746829])
            ("custom-autoload" code nil nil [746831 746886])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [746888 747176])
            ("if" code nil nil [747178 747281])
            ("if" code nil nil [747408 747507])
            ("if" code nil nil [747634 747739])
            ("if" code nil nil [747877 747983])
            ("mail-use-rfc822" variable nil nil [748110 748288])
            ("custom-autoload" code nil nil [748290 748339])
            ("mail-dont-reply-to-names" variable nil nil [748341 748682])
            ("custom-autoload" code nil nil [748684 748742])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [748744 748850])
            ("mail-quote-printable" function (:prototype-flag t) nil [748852 749206])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [749208 749460])
            ("mail-unquote-printable" function (:prototype-flag t) nil [749462 749713])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [749715 750361])
            ("mail-fetch-field" function (:prototype-flag t) nil [750363 750839])
            ("if" code nil nil [750841 750940])
            ("mail-abbrevs-mode" variable nil nil [751067 751372])
            ("custom-autoload" code nil nil [751374 751427])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751429 751958])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [751960 752066])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [752068 752297])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [752299 752741])
            ("if" code nil nil [752743 752886])
            ("mail-complete-style" variable (:default-value (quote angles)) nil [753010 753324])
            ("custom-autoload" code nil nil [753326 753378])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753380 753791])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753793 754252])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [754254 754416])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754418 754690])
            ("make-obsolete" code nil nil [754692 754765])
            ("if" code nil nil [754767 754886])
            ("if" code nil nil [755002 755101])
            ("mailclient-send-it" function (:prototype-flag t) nil [755228 755442])
            ("if" code nil nil [755444 755549])
            ("if" code nil nil [755676 755781])
            ("if" code nil nil [755894 755991])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756133 759434])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759436 759553])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759555 759666])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759668 759781])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759783 759899])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759901 760012])
            ("if" code nil nil [760014 760116])
            ("if" code nil nil [760247 760348])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [760456 760630])
            ("if" code nil nil [760632 760736])
            ("defalias" code nil nil [760832 760861])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [760863 762191])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762193 762318])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [762320 762425])
            ("if" code nil nil [762427 762524])
            ("if" code nil nil [762652 762751])
            ("push" code nil nil [762868 762922])
            ("if" code nil nil [762924 763014])
            ("push" code nil nil [763118 763177])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763179 763734])
            ("if" code nil nil [763736 763833])
            ("minibuffer-depth-indicate-mode" variable nil nil [763944 764301])
            ("custom-autoload" code nil nil [764303 764367])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764369 764904])
            ("if" code nil nil [764906 765015])
            ("push" code nil nil [765110 765164])
            ("if" code nil nil [765166 765256])
            ("define-mail-user-agent" code nil nil [765374 765495])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765497 767911])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767913 768322])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768324 768445])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768447 768601])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768603 768741])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768743 768925])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768927 769080])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769082 769305])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769307 769425])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769427 769641])
            ("message-forward-make-body" function (:prototype-flag t) nil [769643 769742])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [769744 769832])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769834 769930])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769932 770032])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770034 770258])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770260 770417])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770419 770574])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770576 770710])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770712 770845])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770847 771087])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771089 771312])
            ("if" code nil nil [771314 771419])
            ("push" code nil nil [771560 771620])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771622 771717])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771719 771814])
            ("if" code nil nil [771816 771970])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772091 772258])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772260 772654])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772656 773068])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773070 773490])
            ("if" code nil nil [773492 773593])
            ("if" code nil nil [773714 773860])
            ("if" code nil nil [773981 774076])
            ("if" code nil nil [774203 774300])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774418 774558])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774560 774729])
            ("mh-smail-batch" function (:prototype-flag t) nil [774731 775289])
            ("define-mail-user-agent" code nil nil [775291 775420])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [775422 776222])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776224 777307])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777309 777619])
            ("if" code nil nil [777621 777715])
            ("if" code nil nil [777839 777935])
            ("push" code nil nil [778043 778101])
            ("put" code nil nil [778103 778142])
            ("put" code nil nil [778144 778181])
            ("put" code nil nil [778183 778226])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778228 778346])
            ("if" code nil nil [778348 778481])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778605 778820])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778822 779043])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779045 780786])
            ("if" code nil nil [780788 780884])
            ("if" code nil nil [781005 781100])
            ("if" code nil nil [781238 781336])
            ("if" code nil nil [781451 781554])
            ("if" code nil nil [781672 781766])
            ("if" code nil nil [781890 781986])
            ("if" code nil nil [782107 782202])
            ("if" code nil nil [782320 782414])
            ("if" code nil nil [782535 782631])
            ("if" code nil nil [782749 782843])
            ("if" code nil nil [782967 783063])
            ("if" code nil nil [783178 783271])
            ("if" code nil nil [783389 783483])
            ("if" code nil nil [783604 783699])
            ("if" code nil nil [783823 783919])
            ("if" code nil nil [784057 784164])
            ("if" code nil nil [784285 784380])
            ("if" code nil nil [784501 784596])
            ("mhtml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784741 785017])
            ("if" code nil nil [785019 785119])
            ("midnight-mode" variable nil nil [785230 785519])
            ("custom-autoload" code nil nil [785521 785568])
            ("midnight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785570 785684])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785686 786308])
            ("midnight-delay-set" function (:prototype-flag t) nil [786310 786529])
            ("if" code nil nil [786531 786653])
            ("minibuffer-electric-default-mode" variable nil nil [786779 787144])
            ("custom-autoload" code nil nil [787146 787217])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787219 787894])
            ("if" code nil nil [787896 788000])
            ("copy-from-above-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788099 788419])
            ("zap-up-to-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788421 788690])
            ("mark-beginning-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788692 788793])
            ("mark-end-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788795 788884])
            ("upcase-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788886 789001])
            ("forward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789003 789155])
            ("backward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789157 789305])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789307 789881])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789883 790327])
            ("if" code nil nil [790329 790441])
            ("add-hook" code nil nil [790552 790602])
            ("multi-isearch-next-buffer-function" variable nil nil [790604 791643])
            ("multi-isearch-next-buffer-current-function" variable nil nil [791645 791843])
            ("multi-isearch-current-buffer" variable nil nil [791845 792007])
            ("multi-isearch-buffer-list" variable nil nil [792009 792180])
            ("multi-isearch-file-list" variable nil nil [792182 792282])
            ("multi-isearch-setup" function (:prototype-flag t) nil [792284 792433])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792435 792779])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792781 793139])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793141 793566])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793568 794007])
            ("if" code nil nil [794009 794142])
            ("push" code nil nil [794286 794347])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794349 794440])
            ("if" code nil nil [794442 794542])
            ("if" code nil nil [794669 794766])
            ("if" code nil nil [794890 794986])
            ("if" code nil nil [795110 795206])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [795330 795438])
            ("if" code nil nil [795440 795536])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [795660 795787])
            ("mm-inline-external-body" function (:prototype-flag t) nil [795789 796082])
            ("if" code nil nil [796084 796187])
            ("mm-inline-partial" function (:prototype-flag t) nil [796314 796596])
            ("if" code nil nil [796598 796713])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [796828 796987])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [796989 797121])
            ("if" code nil nil [797123 797220])
            ("if" code nil nil [797338 797432])
            ("mm-uu-dissect" function (:prototype-flag t) nil [797544 797850])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [797852 798043])
            ("if" code nil nil [798045 798137])
            ("if" code nil nil [798255 798349])
            ("mml-to-mime" function (:prototype-flag t) nil [798455 798550])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [798552 799403])
            ("if" code nil nil [799405 799510])
            ("if" code nil nil [799628 799723])
            ("if" code nil nil [799847 799950])
            ("mml1991-encrypt" function (:prototype-flag t) nil [800068 800145])
            ("mml1991-sign" function (:prototype-flag t) nil [800147 800206])
            ("if" code nil nil [800208 800307])
            ("mml2015-decrypt" function (:prototype-flag t) nil [800425 800493])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [800495 800568])
            ("mml2015-verify" function (:prototype-flag t) nil [800570 800637])
            ("mml2015-verify-test" function (:prototype-flag t) nil [800639 800711])
            ("mml2015-encrypt" function (:prototype-flag t) nil [800713 800790])
            ("mml2015-sign" function (:prototype-flag t) nil [800792 800851])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [800853 800915])
            ("if" code nil nil [800917 801016])
            ("put" code nil nil [801145 801198])
            ("if" code nil nil [801200 801567])
            ("defalias" code nil nil [801695 801729])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801731 802877])
            ("if" code nil nil [802879 802997])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803109 803216])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803218 803336])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803338 803456])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803458 803581])
            ("if" code nil nil [803583 803698])
            ("if" code nil nil [803815 803915])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804032 804972])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804974 805594])
            ("if" code nil nil [805596 805696])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805792 805856])
            ("if" code nil nil [805858 805972])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806081 806159])
            ("if" code nil nil [806161 806254])
            ("msb-mode" variable nil nil [806350 806619])
            ("custom-autoload" code nil nil [806621 806658])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806660 807008])
            ("if" code nil nil [807010 807122])
            ("if" code nil nil [807240 807339])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807489 807983])
            ("read-charset" function (:prototype-flag t) nil [807985 808515])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808517 808639])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808641 808770])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808772 808890])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808892 810066])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810068 810189])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810191 810497])
            ("list-coding-categories" function (:prototype-flag t) nil [810499 810605])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810607 810767])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810769 810923])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810925 811197])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811199 811303])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811305 811638])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811640 811879])
            ("if" code nil nil [811881 812101])
            ("store-substring" function (:prototype-flag t) nil [812251 812380])
            ("truncate-string-to-width" function (:prototype-flag t) nil [812382 813648])
            ("nested-alist-p" function (:arguments ("obj")) nil [813650 814105])
            ("set-nested-alist" function (:prototype-flag t) nil [814107 814485])
            ("lookup-nested-alist" function (:prototype-flag t) nil [814487 815130])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [815132 815292])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [815294 815454])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [815456 815628])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [815630 815802])
            ("with-coding-priority" function (:prototype-flag t) nil [815804 816169])
            ("put" code nil nil [816170 816221])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [816223 816492])
            ("make-obsolete" code nil nil [816494 816568])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [816570 816841])
            ("char-displayable-p" function (:prototype-flag t) nil [816843 817195])
            ("filepos-to-bufferpos" function (:prototype-flag t) nil [817197 817833])
            ("bufferpos-to-filepos" function (:prototype-flag t) nil [817835 818477])
            ("if" code nil nil [818479 818624])
            ("if" code nil nil [818729 818841])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818963 819066])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819068 819171])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819173 819274])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819276 819369])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819371 819468])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819470 819565])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819567 819723])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819725 820085])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820087 820160])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820162 820526])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820528 820873])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820875 820962])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820964 821139])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821141 821475])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821477 821539])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821541 821735])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821737 821849])
            ("if" code nil nil [821851 822187])
            ("netrc-credentials" function (:prototype-flag t) nil [822297 822495])
            ("if" code nil nil [822497 822592])
            ("open-network-stream" function (:prototype-flag t) nil [822737 827180])
            ("defalias" code nil nil [827182 827235])
            ("if" code nil nil [827237 827350])
            ("newsticker-running-p" function (:prototype-flag t) nil [827492 827729])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827731 828094])
            ("if" code nil nil [828096 828204])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828352 828447])
            ("if" code nil nil [828449 828559])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828698 828819])
            ("if" code nil nil [828821 828928])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [829067 829322])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829324 829524])
            ("if" code nil nil [829526 829633])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829778 829870])
            ("if" code nil nil [829872 829981])
            ("if" code nil nil [830106 830218])
            ("if" code nil nil [830336 830435])
            ("if" code nil nil [830553 830652])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830770 830907])
            ("if" code nil nil [830909 831008])
            ("if" code nil nil [831120 831215])
            ("nndoc-add-type" function (:prototype-flag t) nil [831327 831675])
            ("if" code nil nil [831677 831772])
            ("if" code nil nil [831890 831989])
            ("if" code nil nil [832113 832216])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832337 832538])
            ("if" code nil nil [832540 832641])
            ("if" code nil nil [832765 832868])
            ("if" code nil nil [832989 833129])
            ("if" code nil nil [833244 833340])
            ("if" code nil nil [833449 833550])
            ("if" code nil nil [833665 833762])
            ("if" code nil nil [833886 833989])
            ("if" code nil nil [834110 834211])
            ("if" code nil nil [834326 834423])
            ("if" code nil nil [834532 834625])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834734 834862])
            ("if" code nil nil [834864 834957])
            ("if" code nil nil [835069 835164])
            ("if" code nil nil [835273 835384])
            ("if" code nil nil [835511 835616])
            ("if" code nil nil [835728 835823])
            ("if" code nil nil [835941 836061])
            ("if" code nil nil [836170 836263])
            ("if" code nil nil [836387 836490])
            ("if" code nil nil [836602 836697])
            ("if" code nil nil [836823 836934])
            ("define-obsolete-variable-alias" code nil nil [837039 837128])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [837130 837308])
            ("disabled-command-function" function (:prototype-flag t) nil [837310 837395])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837397 837641])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837643 837874])
            ("if" code nil nil [837876 837984])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838129 838450])
            ("if" code nil nil [838452 838552])
            ("if" code nil nil [838656 838772])
            ("push" code nil nil [838878 838935])
            ("if" code nil nil [838937 839030])
            ("if" code nil nil [839151 839248])
            ("if" code nil nil [839375 839508])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839632 842180])
            ("defalias" code nil nil [842181 842212])
            ("if" code nil nil [842214 842312])
            ("if" code nil nil [842430 842529])
            ("if" code nil nil [842656 842755])
            ("if" code nil nil [842882 842981])
            ("if" code nil nil [843102 843199])
            ("if" code nil nil [843323 843421])
            ("if" code nil nil [843528 843626])
            ("if" code nil nil [843733 843838])
            ("if" code nil nil [843945 844051])
            ("push" code nil nil [844163 844220])
            ("if" code nil nil [844222 844322])
            ("if" code nil nil [844461 844567])
            ("if" code nil nil [844680 844780])
            ("if" code nil nil [844896 844997])
            ("if" code nil nil [845122 845226])
            ("if" code nil nil [845348 845458])
            ("if" code nil nil [845571 845690])
            ("if" code nil nil [845843 845938])
            ("if" code nil nil [846051 846151])
            ("if" code nil nil [846270 846366])
            ("if" code nil nil [846479 846579])
            ("push" code nil nil [846694 846752])
            ("if" code nil nil [846754 846855])
            ("if" code nil nil [846997 847104])
            ("if" code nil nil [847220 847321])
            ("if" code nil nil [847434 847528])
            ("if" code nil nil [847647 847749])
            ("if" code nil nil [847874 847978])
            ("if" code nil nil [848103 848229])
            ("if" code nil nil [848351 848454])
            ("if" code nil nil [848579 848683])
            ("if" code nil nil [848808 848912])
            ("if" code nil nil [849022 849121])
            ("if" code nil nil [849237 849338])
            ("if" code nil nil [849448 849547])
            ("if" code nil nil [849700 849801])
            ("if" code nil nil [849920 850022])
            ("if" code nil nil [850144 850247])
            ("if" code nil nil [850375 850496])
            ("if" code nil nil [850612 850713])
            ("if" code nil nil [850863 850963])
            ("if" code nil nil [851076 851176])
            ("if" code nil nil [851304 851409])
            ("if" code nil nil [851531 851634])
            ("if" code nil nil [851756 851859])
            ("if" code nil nil [851978 852080])
            ("if" code nil nil [852202 852305])
            ("if" code nil nil [852418 852518])
            ("if" code nil nil [852634 852735])
            ("if" code nil nil [852863 852968])
            ("if" code nil nil [853096 853195])
            ("if" code nil nil [853337 853444])
            ("if" code nil nil [853566 853669])
            ("if" code nil nil [853782 853882])
            ("if" code nil nil [853998 854099])
            ("if" code nil nil [854215 854316])
            ("if" code nil nil [854438 854541])
            ("if" code nil nil [854663 854766])
            ("push" code nil nil [854878 854937])
            ("if" code nil nil [854939 855039])
            ("if" code nil nil [855158 855260])
            ("if" code nil nil [855376 855477])
            ("if" code nil nil [855590 855690])
            ("if" code nil nil [855812 855915])
            ("if" code nil nil [856031 856132])
            ("if" code nil nil [856251 856347])
            ("if" code nil nil [856506 856609])
            ("if" code nil nil [856725 856826])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [856951 857397])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [857399 857966])
            ("defalias" code nil nil [857968 858007])
            ("if" code nil nil [858009 858125])
            ("if" code nil nil [858258 858355])
            ("define-obsolete-function-alias" code nil nil [858483 858549])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [858551 859614])
            ("if" code nil nil [859616 859715])
            ("push" code nil nil [859818 859874])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [859876 860008])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860010 860370])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860372 860682])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [860684 860774])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [860776 860880])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860882 861756])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861758 864160])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864162 864418])
            ("put" code nil nil [864419 864487])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864489 864801])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [864803 864899])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [864901 865001])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [865003 865284])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [865286 866026])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866028 866190])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866192 866535])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866537 866685])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866687 866957])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866959 867199])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867201 867548])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867550 867701])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867703 867801])
            ("if" code nil nil [867803 867915])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868040 868148])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868150 869882])
            ("org-batch-agenda" function (:prototype-flag t) nil [869884 870322])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [870324 872106])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [872108 872209])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [872211 872356])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [872358 873078])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [873080 875438])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875440 875822])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875824 876038])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [876040 876344])
            ("org-diary" function (:prototype-flag t) nil [876346 877509])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [877511 877704])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877706 878062])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878064 878267])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878269 879517])
            ("if" code nil nil [879519 879617])
            ("if" code nil nil [879782 879881])
            ("if" code nil nil [880043 880148])
            ("if" code nil nil [880304 880405])
            ("if" code nil nil [880530 880628])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880756 880890])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880892 882205])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882207 882358])
            ("if" code nil nil [882360 882459])
            ("if" code nil nil [882618 882715])
            ("org-columns-remove-overlays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882843 882958])
            ("org-columns-get-format-and-top-level" function (:prototype-flag t) nil [882960 883042])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883044 883560])
            ("org-columns-compute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883562 883768])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [883770 884894])
            ("org-columns-insert-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [884896 885018])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885020 885126])
            ("if" code nil nil [885128 885227])
            ("org-check-version" function (:prototype-flag t) nil [885352 885462])
            ("if" code nil nil [885464 885562])
            ("if" code nil nil [885684 885781])
            ("if" code nil nil [885903 886006])
            ("if" code nil nil [886174 886283])
            ("if" code nil nil [886411 886518])
            ("org-duration-set-regexps" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [886657 886755])
            ("org-duration-p" function (:prototype-flag t) nil [886757 886861])
            ("org-duration-to-minutes" function (:prototype-flag t) nil [886863 887280])
            ("org-duration-from-minutes" function (:prototype-flag t) nil [887282 887669])
            ("org-duration-h:mm-only-p" function (:prototype-flag t) nil [887671 888058])
            ("if" code nil nil [888060 888169])
            ("if" code nil nil [888334 888441])
            ("if" code nil nil [888580 888685])
            ("if" code nil nil [888810 888915])
            ("if" code nil nil [889031 889130])
            ("if" code nil nil [889252 889349])
            ("if" code nil nil [889505 889606])
            ("if" code nil nil [889774 889883])
            ("if" code nil nil [890002 890103])
            ("if" code nil nil [890225 890322])
            ("if" code nil nil [890472 890569])
            ("if" code nil nil [890731 890829])
            ("if" code nil nil [890948 891049])
            ("if" code nil nil [891194 891307])
            ("if" code nil nil [891460 891559])
            ("org-lint" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891678 892063])
            ("if" code nil nil [892065 892166])
            ("if" code nil nil [892285 892381])
            ("if" code nil nil [892503 892606])
            ("org-load-noerror-mustsuffix" function (:prototype-flag t) nil [892725 892855])
            ("if" code nil nil [892857 892953])
            ("if" code nil nil [893069 893168])
            ("if" code nil nil [893330 893435])
            ("if" code nil nil [893557 893660])
            ("if" code nil nil [893802 893925])
            ("if" code nil nil [894081 894181])
            ("if" code nil nil [894320 894429])
            ("if" code nil nil [894551 894654])
            ("if" code nil nil [894770 894865])
            ("if" code nil nil [895024 895120])
            ("if" code nil nil [895279 895382])
            ("org-release" function (:prototype-flag t) nil [895510 895653])
            ("org-git-version" function (:prototype-flag t) nil [895655 895798])
            ("if" code nil nil [895914 896013])
            ("put" code nil nil [896120 896171])
            ("put" code nil nil [896172 896235])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [896237 897349])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [897351 897680])
            ("put" code nil nil [897681 897725])
            ("if" code nil nil [897727 897826])
            ("if" code nil nil [897964 898061])
            ("if" code nil nil [898217 898319])
            ("if" code nil nil [898478 898582])
            ("if" code nil nil [898735 898835])
            ("if" code nil nil [899003 899113])
            ("if" code nil nil [899269 899371])
            ("if" code nil nil [899521 899619])
            ("if" code nil nil [899766 899862])
            ("if" code nil nil [900012 900110])
            ("if" code nil nil [900260 900358])
            ("if" code nil nil [900520 900626])
            ("if" code nil nil [900788 900894])
            ("push" code nil nil [901023 901083])
            ("package-enable-at-startup" variable (:default-value t) nil [901085 901472])
            ("custom-autoload" code nil nil [901474 901530])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [901532 902167])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902169 902268])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902270 902658])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902660 903116])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903118 903613])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903615 903781])
            ("package-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903783 903977])
            ("package-reinstall" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903979 904139])
            ("package-autoremove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904141 904362])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904364 904481])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904483 904833])
            ("defalias" code nil nil [904835 904883])
            ("if" code nil nil [904885 905038])
            ("if" code nil nil [905182 905283])
            ("if" code nil nil [905414 905613])
            ("show-paren-mode" variable nil nil [905715 906012])
            ("custom-autoload" code nil nil [906014 906060])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906062 906519])
            ("if" code nil nil [906521 906621])
            ("put" code nil nil [906763 906810])
            ("parse-time-string" function (:prototype-flag t) nil [906812 907318])
            ("if" code nil nil [907320 907420])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907545 909537])
            ("if" code nil nil [909539 909655])
            ("password-cache" variable (:default-value t) nil [909792 909849])
            ("custom-autoload" code nil nil [909851 909903])
            ("password-cache-expiry" variable (:default-value 16) nil [909905 910080])
            ("custom-autoload" code nil nil [910082 910141])
            ("password-in-cache-p" function (:prototype-flag t) nil [910143 910244])
            ("if" code nil nil [910246 910353])
            ("pcase" function (:prototype-flag t) nil [910477 913112])
            ("function-put" code nil nil [913114 913160])
            ("pcase-exhaustive" function (:prototype-flag t) nil [913162 913352])
            ("function-put" code nil nil [913354 913411])
            ("pcase-lambda" function (:prototype-flag t) nil [913413 913713])
            ("function-put" code nil nil [913715 913762])
            ("function-put" code nil nil [913764 913821])
            ("pcase-let*" function (:prototype-flag t) nil [913823 914050])
            ("function-put" code nil nil [914052 914103])
            ("pcase-let" function (:prototype-flag t) nil [914105 914493])
            ("function-put" code nil nil [914495 914545])
            ("pcase-dolist" function (:prototype-flag t) nil [914547 914681])
            ("function-put" code nil nil [914683 914736])
            ("pcase-defmacro" function (:prototype-flag t) nil [914738 914940])
            ("function-put" code nil nil [914942 914997])
            ("function-put" code nil nil [914999 915048])
            ("if" code nil nil [915050 915145])
            ("pcomplete/cvs" function (:prototype-flag t) nil [915259 915355])
            ("if" code nil nil [915357 915460])
            ("pcomplete/gzip" function (:prototype-flag t) nil [915574 915654])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [915656 915738])
            ("pcomplete/make" function (:prototype-flag t) nil [915740 915824])
            ("pcomplete/tar" function (:prototype-flag t) nil [915826 915918])
            ("pcomplete/find" function (:prototype-flag t) nil [915920 916014])
            ("defalias" code nil nil [916016 916058])
            ("if" code nil nil [916060 916163])
            ("pcomplete/kill" function (:prototype-flag t) nil [916283 916399])
            ("pcomplete/umount" function (:prototype-flag t) nil [916401 916497])
            ("pcomplete/mount" function (:prototype-flag t) nil [916499 916593])
            ("if" code nil nil [916595 916724])
            ("pcomplete/rpm" function (:prototype-flag t) nil [916838 916928])
            ("if" code nil nil [916930 917033])
            ("pcomplete/cd" function (:prototype-flag t) nil [917150 917227])
            ("defalias" code nil nil [917229 917270])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [917272 917355])
            ("pcomplete/rm" function (:prototype-flag t) nil [917357 917434])
            ("pcomplete/xargs" function (:prototype-flag t) nil [917436 917519])
            ("defalias" code nil nil [917521 917564])
            ("pcomplete/which" function (:prototype-flag t) nil [917566 917649])
            ("pcomplete/chown" function (:prototype-flag t) nil [917651 917746])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [917748 917843])
            ("pcomplete/ssh" function (:prototype-flag t) nil [917845 917942])
            ("pcomplete/scp" function (:prototype-flag t) nil [917944 918099])
            ("if" code nil nil [918101 918201])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [918309 918401])
            ("pcomplete/ack" function (:prototype-flag t) nil [918403 918571])
            ("defalias" code nil nil [918573 918618])
            ("pcomplete/ag" function (:prototype-flag t) nil [918620 918706])
            ("if" code nil nil [918708 918807])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918921 919178])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919180 919288])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919290 919447])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919449 919563])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919565 919709])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919711 919829])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919831 919950])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [919952 920223])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [920225 920326])
            ("if" code nil nil [920328 920431])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920536 920803])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920805 921185])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921187 921695])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921697 922149])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922151 922596])
            ("cvs-dired-action" variable (:default-value (quote cvs-quickdir)) nil [922598 922766])
            ("custom-autoload" code nil nil [922768 922812])
            ("cvs-dired-use-hook" variable (:default-value (quote (4))) nil [922814 923145])
            ("custom-autoload" code nil nil [923147 923193])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [923195 923729])
            ("if" code nil nil [923731 923840])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] (\` (menu-item (\, (purecopy "Directory Status")) cvs-status :help (\, (purecopy "A more verbose status of a workarea"))))) (define-key m [checkout] (\` (menu-item (\, (purecopy "Checkout Module")) cvs-checkout :help (\, (purecopy "Check out a module from the repository"))))) (define-key m [update] (\` (menu-item (\, (purecopy "Update Directory")) cvs-update :help (\, (purecopy "Fetch updates from the repository"))))) (define-key m [examine] (\` (menu-item (\, (purecopy "Examine Directory")) cvs-examine :help (\, (purecopy "Examine the current state of a workarea"))))) (fset (quote cvs-global-menu) m))) nil [923960 924637])
            ("if" code nil nil [924639 924736])
            ("if" code nil nil [924856 924953])
            ("if" code nil nil [925076 925174])
            ("if" code nil nil [925294 925391])
            ("put" code nil nil [925532 925587])
            ("put" code nil nil [925588 925657])
            ("put" code nil nil [925658 925723])
            ("put" code nil nil [925724 925779])
            ("put" code nil nil [925780 925845])
            ("put" code nil nil [925846 925901])
            ("perl-flymake" function (:prototype-flag t) nil [925903 926191])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [926193 928399])
            ("if" code nil nil [928401 928538])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [928666 932424])
            ("defalias" code nil nil [932426 932464])
            ("if" code nil nil [932466 932565])
            ("pixel-scroll-mode" variable nil nil [932688 932993])
            ("custom-autoload" code nil nil [932995 933050])
            ("pixel-scroll-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933052 933343])
            ("if" code nil nil [933345 933447])
            ("plstore-open" function (:prototype-flag t) nil [933555 933661])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933663 933752])
            ("if" code nil nil [933754 933853])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [933966 934186])
            ("if" code nil nil [934188 934277])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934386 934636])
            ("if" code nil nil [934638 934731])
            ("pop3-movemail" function (:prototype-flag t) nil [934838 934973])
            ("if" code nil nil [934975 935068])
            ("pp-to-string" function (:prototype-flag t) nil [935183 935446])
            ("pp-buffer" function (:prototype-flag t) nil [935448 935567])
            ("pp" function (:prototype-flag t) nil [935569 935875])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935877 936058])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936060 936181])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936183 936377])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936379 936587])
            ("if" code nil nil [936589 936678])
            ("push" code nil nil [936788 936849])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936851 937071])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937073 937922])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937924 938802])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938804 939658])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939660 940585])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940587 941225])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941227 941885])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941887 942521])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942523 943228])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943230 943380])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943382 943571])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943573 943726])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943728 943910])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943912 944064])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944066 944257])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944259 944414])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944416 944592])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944594 945157])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945159 945440])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945442 945723])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945725 946093])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946095 946181])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946183 946269])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946271 946359])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946361 946852])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946854 947362])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947364 947860])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947862 948392])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948394 948495])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948497 948627])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948629 948756])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948758 948855])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948857 948998])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949000 949917])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949919 950015])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950017 950275])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950277 950379])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950381 950477])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950479 950562])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950564 950636])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950638 950709])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950711 950944])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950946 951023])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951025 951106])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951108 951182])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951184 951261])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951263 951343])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951345 951437])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951439 951511])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951513 951622])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951624 951696])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951698 951802])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951804 951904])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951906 951997])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951999 952092])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952094 952182])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952184 952280])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952282 952383])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952385 952486])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952488 952585])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952587 955099])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955101 956091])
            ("if" code nil nil [956093 956200])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956305 956661])
            ("if" code nil nil [956663 956760])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956871 957145])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957147 957240])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957242 957348])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957350 957455])
            ("if" code nil nil [957457 957558])
            ("project-current" function (:prototype-flag t) nil [957686 958055])
            ("project-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958057 958541])
            ("project-or-external-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958543 958777])
            ("project-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958779 958969])
            ("project-or-external-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958971 959191])
            ("if" code nil nil [959193 959292])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959417 959824])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959826 959965])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959967 960161])
            ("if" code nil nil [960163 960279])
            ("bdf-directory-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (list (expand-file-name "fonts/bdf" installation-directory)) (quote ("/usr/local/share/emacs/fonts/bdf")))) nil [960384 960672])
            ("custom-autoload" code nil nil [960674 960722])
            ("if" code nil nil [960724 960818])
            ("push" code nil nil [960945 961005])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961007 962084])
            ("if" code nil nil [962086 962180])
            ("if" code nil nil [962325 962424])
            ("push" code nil nil [962534 962595])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list (quote a4) (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list (quote a3) (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list (quote letter) (* 72 8.5) (* 72 11.0) "Letter") (list (quote legal) (* 72 8.5) (* 72 14.0) "Legal") (list (quote letter-small) (* 72 7.68) (* 72 10.16) "LetterSmall") (list (quote tabloid) (* 72 11.0) (* 72 17.0) "Tabloid") (list (quote ledger) (* 72 17.0) (* 72 11.0) "Ledger") (list (quote statement) (* 72 5.5) (* 72 8.5) "Statement") (list (quote executive) (* 72 7.5) (* 72 10.0) "Executive") (list (quote a4small) (* 72 7.47) (* 72 10.85) "A4Small") (list (quote b4) (* 72 10.125) (* 72 14.33) "B4") (list (quote b5) (* 72 7.16) (* 72 10.125) "B5") (quote (addresslarge 236.0 99.0 "AddressLarge")) (quote (addresssmall 236.0 68.0 "AddressSmall")) (quote (cuthanging13 90.0 222.0 "CutHanging13")) (quote (cuthanging15 90.0 114.0 "CutHanging15")) (quote (diskette 181.0 136.0 "Diskette")) (quote (eurofilefolder 139.0 112.0 "EuropeanFilefolder")) (quote (eurofoldernarrow 526.0 107.0 "EuroFolderNarrow")) (quote (eurofolderwide 526.0 136.0 "EuroFolderWide")) (quote (euronamebadge 189.0 108.0 "EuroNameBadge")) (quote (euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge")) (quote (filefolder 230.0 37.0 "FileFolder")) (quote (jewelry 76.0 136.0 "Jewelry")) (quote (mediabadge 180.0 136.0 "MediaBadge")) (quote (multipurpose 126.0 68.0 "MultiPurpose")) (quote (retaillabel 90.0 104.0 "RetailLabel")) (quote (shipping 271.0 136.0 "Shipping")) (quote (slide35mm 26.0 104.0 "Slide35mm")) (quote (spine8mm 187.0 26.0 "Spine8mm")) (quote (topcoated 425.19685 136.0 "TopCoatedPaper")) (quote (topcoatedpaper 396.0 136.0 "TopcoatedPaper150")) (quote (vhsface 205.0 127.0 "VHSFace")) (quote (vhsspine 400.0 50.0 "VHSSpine")) (quote (zipdisk 156.0 136.0 "ZipDisk"))))) nil [962597 964302])
            ("custom-autoload" code nil nil [964304 964363])
            ("ps-paper-type" variable (:default-value (quote letter)) nil [964365 964554])
            ("custom-autoload" code nil nil [964556 964601])
            ("ps-print-color-p" variable (:default-value (or (fboundp (quote x-color-values)) (fboundp (quote color-instance-rgb-components)))) nil [964603 964940])
            ("custom-autoload" code nil nil [964942 964990])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964992 965083])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965085 965600])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965602 965942])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965944 966139])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966141 966489])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966491 966788])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966790 967196])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967198 967455])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967457 967867])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967869 968378])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968380 968624])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968626 968814])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968816 969003])
            ("ps-setup" function (:prototype-flag t) nil [969005 969103])
            ("ps-extend-face-list" function (:prototype-flag t) nil [969105 969602])
            ("ps-extend-face" function (:prototype-flag t) nil [969604 970691])
            ("if" code nil nil [970693 970788])
            ("if" code nil nil [970896 970990])
            ("push" code nil nil [971103 971159])
            ("pulse-momentary-highlight-one-line" function (:prototype-flag t) nil [971161 971390])
            ("pulse-momentary-highlight-region" function (:prototype-flag t) nil [971392 971623])
            ("if" code nil nil [971625 971720])
            ("if" code nil nil [971827 971920])
            ("push" code nil nil [972044 972104])
            ("add-to-list" code nil nil [972106 972183])
            ("add-to-list" code nil nil [972185 972269])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972271 973059])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973061 973168])
            ("if" code nil nil [973170 973312])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973415 973957])
            ("if" code nil nil [973959 974062])
            ("quail-title" function (:prototype-flag t) nil [974192 974289])
            ("quail-use-package" function (:prototype-flag t) nil [974291 974586])
            ("quail-define-package" function (:prototype-flag t) nil [974588 978765])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978767 979205])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979207 979442])
            ("quail-define-rules" function (:prototype-flag t) nil [979444 980915])
            ("quail-install-map" function (:prototype-flag t) nil [980917 981201])
            ("quail-install-decode-map" function (:prototype-flag t) nil [981203 981529])
            ("quail-defrule" function (:prototype-flag t) nil [981531 982799])
            ("quail-defrule-internal" function (:prototype-flag t) nil [982801 983239])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [983241 983816])
            ("if" code nil nil [983818 983913])
            ("if" code nil nil [984060 984184])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [984325 984581])
            ("if" code nil nil [984583 984708])
            ("if" code nil nil [984849 984963])
            ("if" code nil nil [985087 985192])
            ("if" code nil nil [985339 985452])
            ("if" code nil nil [985576 985704])
            ("if" code nil nil [985828 985949])
            ("if" code nil nil [986093 986225])
            ("if" code nil nil [986352 986469])
            ("if" code nil nil [986613 986730])
            ("ucs-input-activate" function (:prototype-flag t) nil [986880 987174])
            ("if" code nil nil [987176 987285])
            ("if" code nil nil [987412 987529])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'local-write-file-hooks (lambda () (quickurl-read) nil)))
;; End:
")
                nil [987648 988169])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988171 988419])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988421 988542])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988544 988774])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988776 989044])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989046 989187])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989189 989304])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989306 989483])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989485 989610])
            ("if" code nil nil [989612 989713])
            ("if" code nil nil [989860 989965])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990075 990287])
            ("defalias" code nil nil [990289 990311])
            ("rcirc-connect" function (:prototype-flag t) nil [990313 990463])
            ("rcirc-track-minor-mode" variable nil nil [990465 990790])
            ("custom-autoload" code nil nil [990792 990845])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990847 991132])
            ("if" code nil nil [991134 991278])
            ("defalias" code nil nil [991425 991463])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991465 991853])
            ("if" code nil nil [991855 991982])
            ("recentf-mode" variable nil nil [992090 992375])
            ("custom-autoload" code nil nil [992377 992422])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992424 992846])
            ("if" code nil nil [992848 992947])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993046 993474])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [993476 993851])
            ("extract-rectangle" function (:prototype-flag t) nil [993853 994054])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994056 994704])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994706 994836])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994838 994952])
            ("insert-rectangle" function (:prototype-flag t) nil [994954 995325])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995327 995761])
            ("defalias" code nil nil [995763 995819])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995821 996312])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996314 996707])
            ("defalias" code nil nil [996709 996756])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996758 997103])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997105 997449])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997451 997843])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997845 998025])
            ("if" code nil nil [998027 998261])
            ("if" code nil nil [998386 998480])
            ("if" code nil nil [998602 998697])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998822 999337])
            ("if" code nil nil [999339 999436])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999560 999607])
            ("reftex-all-document-files" function (:prototype-flag t) nil [999608 999660])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999661 999720])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999721 999779])
            ("turn-on-reftex" function (:prototype-flag t) nil [999781 999856])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999858 1001269])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [1001271 1001456])
            ("if" code nil nil [1001458 1001555])
            ("if" code nil nil [1001729 1001830])
            ("if" code nil nil [1002007 1002109])
            ("if" code nil nil [1002283 1002384])
            ("if" code nil nil [1002567 1002671])
            ("if" code nil nil [1002851 1002954])
            ("if" code nil nil [1003134 1003237])
            ("if" code nil nil [1003411 1003512])
            ("if" code nil nil [1003686 1003787])
            ("if" code nil nil [1003961 1004062])
            ("put" code nil nil [1004209 1004301])
            ("put" code nil nil [1004302 1004394])
            ("put" code nil nil [1004395 1004452])
            ("put" code nil nil [1004453 1004535])
            ("if" code nil nil [1004537 1004639])
            ("regexp-opt" function (:prototype-flag t) nil [1004786 1006327])
            ("regexp-opt-depth" function (:prototype-flag t) nil [1006329 1006524])
            ("if" code nil nil [1006526 1006631])
            ("push" code nil nil [1006751 1006806])
            ("if" code nil nil [1006808 1006901])
            ("if" code nil nil [1007012 1007113])
            ("push" code nil nil [1007243 1007302])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007304 1007581])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007583 1007695])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007697 1007863])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [1007865 1007976])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007978 1008932])
            ("if" code nil nil [1008934 1009035])
            ("push" code nil nil [1009139 1009197])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009199 1009887])
            ("if" code nil nil [1009889 1009986])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [1010107 1011313])
            ("if" code nil nil [1011315 1011416])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011533 1012663])
            ("if" code nil nil [1012665 1012783])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012888 1013271])
            ("global-reveal-mode" variable nil nil [1013273 1013582])
            ("custom-autoload" code nil nil [1013584 1013634])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013636 1013990])
            ("if" code nil nil [1013992 1014089])
            ("if" code nil nil [1014233 1014332])
            ("if" code nil nil [1014450 1014562])
            ("if" code nil nil [1014680 1014779])
            ("if" code nil nil [1014895 1014994])
            ("if" code nil nil [1015112 1015211])
            ("if" code nil nil [1015329 1015428])
            ("if" code nil nil [1015543 1015640])
            ("ring-p" function (:prototype-flag t) nil [1015761 1015847])
            ("make-ring" function (:prototype-flag t) nil [1015849 1015945])
            ("if" code nil nil [1015947 1016040])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016153 1017878])
            ("if" code nil nil [1017880 1017977])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [1018089 1018172])
            ("custom-autoload" code nil nil [1018174 1018218])
            ("put" code nil nil [1018220 1018448])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type (quote (hpux usg-unix-v))) "/usr/mail/") (t "/usr/spool/mail/")))) nil [1018450 1018775])
            ("custom-autoload" code nil nil [1018777 1018827])
            ("custom-initialize-delay" code nil nil [1018828 1018880])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [1018882 1019075])
            ("rmail-user-mail-address-regexp" variable nil nil [1019077 1019697])
            ("custom-autoload" code nil nil [1019699 1019758])
            ("define-obsolete-variable-alias" code nil nil [1019760 1019852])
            ("rmail-default-dont-reply-to-names" variable nil nil [1019854 1020058])
            ("make-obsolete-variable" code nil nil [1020060 1020152])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^ARC-.*:" "\\|^Received-SPF:" "\\|^Authentication-Results:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [1020154 1021633])
            ("custom-autoload" code nil nil [1021635 1021685])
            ("rmail-displayed-headers" variable nil nil [1021687 1021867])
            ("custom-autoload" code nil nil [1021869 1021921])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [1021923 1022192])
            ("custom-autoload" code nil nil [1022194 1022250])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [1022252 1022462])
            ("custom-autoload" code nil nil [1022464 1022518])
            ("rmail-primary-inbox-list" variable nil nil [1022520 1022883])
            ("custom-autoload" code nil nil [1022885 1022938])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [1022940 1023047])
            ("custom-autoload" code nil nil [1023049 1023108])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [1023110 1023223])
            ("custom-autoload" code nil nil [1023225 1023281])
            ("rmail-mode-hook" variable nil nil [1023283 1023364])
            ("rmail-show-message-hook" variable nil nil [1023366 1023463])
            ("custom-autoload" code nil nil [1023465 1023517])
            ("rmail-file-coding-system" variable nil nil [1023519 1023626])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [1023628 1024000])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024002 1024583])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024585 1027928])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1027930 1028015])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028017 1028159])
            ("if" code nil nil [1028161 1028264])
            ("if" code nil nil [1028420 1028534])
            ("if" code nil nil [1028695 1028794])
            ("if" code nil nil [1028952 1029050])
            ("if" code nil nil [1029205 1029302])
            ("put" code nil nil [1029422 1029476])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029478 1030738])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030740 1031290])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031292 1031876])
            ("if" code nil nil [1031878 1031976])
            ("if" code nil nil [1032137 1032236])
            ("if" code nil nil [1032394 1032492])
            ("read-multiple-choice" function (:prototype-flag t) nil [1032610 1033980])
            ("rng-c-load-schema" function (:prototype-flag t) nil [1034104 1034247])
            ("if" code nil nil [1034249 1034346])
            ("if" code nil nil [1034461 1034558])
            ("if" code nil nil [1034676 1034771])
            ("if" code nil nil [1034895 1034992])
            ("if" code nil nil [1035116 1035213])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1035334 1035577])
            ("if" code nil nil [1035579 1035675])
            ("if" code nil nil [1035799 1035902])
            ("if" code nil nil [1036026 1036123])
            ("if" code nil nil [1036241 1036336])
            ("if" code nil nil [1036457 1036553])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036677 1037975])
            ("if" code nil nil [1037977 1038074])
            ("put" code nil nil [1038192 1038277])
            ("rng-xsd-compile" function (:prototype-flag t) nil [1038279 1039370])
            ("if" code nil nil [1039372 1039502])
            ("robin-define-package" function (:prototype-flag t) nil [1039632 1040075])
            ("robin-modify-package" function (:prototype-flag t) nil [1040077 1040363])
            ("robin-use-package" function (:prototype-flag t) nil [1040365 1040477])
            ("if" code nil nil [1040479 1040574])
            ("rot13" function (:prototype-flag t) nil [1040676 1040962])
            ("rot13-string" function (:prototype-flag t) nil [1040964 1041057])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041059 1041184])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041186 1041558])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041560 1041671])
            ("if" code nil nil [1041673 1041768])
            ("add-to-list" code nil nil [1041884 1041953])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041955 1042217])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1042219 1042636])
            ("if" code nil nil [1042638 1042729])
            ("if" code nil nil [1042831 1042926])
            ("push" code nil nil [1043067 1043127])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043129 1043213])
            ("add-to-list" code nil nil [1043215 1043473])
            ("dolist" code nil nil [1043475 1043610])
            ("if" code nil nil [1043612 1043710])
            ("push" code nil nil [1043826 1043887])
            ("ruler-mode" variable nil nil [1043889 1044004])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1044006 1044281])
            ("if" code nil nil [1044283 1044383])
            ("rx-to-string" function (:prototype-flag t) nil [1044498 1044728])
            ("rx" function (:prototype-flag t) nil [1044730 1053566])
            ("if" code nil nil [1053568 1053657])
            ("if" code nil nil [1053764 1053857])
            ("if" code nil nil [1053979 1054086])
            ("if" code nil nil [1054214 1054325])
            ("push" code nil nil [1054446 1054501])
            ("if" code nil nil [1054503 1054606])
            ("if" code nil nil [1054751 1054860])
            ("push" code nil nil [1054970 1055028])
            ("savehist-mode" variable nil nil [1055030 1055319])
            ("custom-autoload" code nil nil [1055321 1055368])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1055370 1056051])
            ("if" code nil nil [1056053 1056154])
            ("save-place-mode" variable nil nil [1056268 1056565])
            ("custom-autoload" code nil nil [1056567 1056617])
            ("save-place-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056619 1056861])
            ("save-place-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056863 1057355])
            ("if" code nil nil [1057357 1057494])
            ("if" code nil nil [1057605 1057726])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1057851 1058682])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058684 1059130])
            ("if" code nil nil [1059132 1059238])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059365 1059524])
            ("if" code nil nil [1059526 1059645])
            ("scroll-all-mode" variable nil nil [1059762 1060059])
            ("custom-autoload" code nil nil [1060061 1060112])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060114 1060534])
            ("if" code nil nil [1060536 1060641])
            ("if" code nil nil [1060758 1060968])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061088 1061584])
            ("if" code nil nil [1061586 1061693])
            ("when" code nil nil [1061808 1061885])
            ("if" code nil nil [1061887 1061986])
            ("push" code nil nil [1062108 1062167])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [1062169 1063718])
            ("custom-autoload" code nil nil [1063720 1063777])
            ("semantic-mode" variable nil nil [1063779 1064068])
            ("custom-autoload" code nil nil [1064070 1064117])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064119 1064680])
            ("if" code nil nil [1064682 1064794])
            ("if" code nil nil [1064978 1065088])
            ("if" code nil nil [1065299 1065425])
            ("if" code nil nil [1065598 1065720])
            ("if" code nil nil [1065887 1066008])
            ("if" code nil nil [1066207 1066321])
            ("if" code nil nil [1066502 1066610])
            ("if" code nil nil [1066797 1066926])
            ("if" code nil nil [1067096 1067210])
            ("if" code nil nil [1067400 1067541])
            ("if" code nil nil [1067734 1067846])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068022 1068136])
            ("if" code nil nil [1068138 1068252])
            ("if" code nil nil [1068448 1068577])
            ("if" code nil nil [1068770 1068882])
            ("if" code nil nil [1069031 1069144])
            ("if" code nil nil [1069331 1069441])
            ("if" code nil nil [1069616 1069722])
            ("if" code nil nil [1069891 1069997])
            ("if" code nil nil [1070155 1070267])
            ("if" code nil nil [1070431 1070556])
            ("if" code nil nil [1070705 1070832])
            ("if" code nil nil [1071016 1071127])
            ("if" code nil nil [1071311 1071422])
            ("if" code nil nil [1071612 1071725])
            ("if" code nil nil [1071898 1072033])
            ("if" code nil nil [1072217 1072328])
            ("if" code nil nil [1072480 1072594])
            ("if" code nil nil [1072793 1072909])
            ("if" code nil nil [1073087 1073200])
            ("if" code nil nil [1073358 1073468])
            ("if" code nil nil [1073679 1073808])
            ("if" code nil nil [1074010 1074160])
            ("if" code nil nil [1074332 1074500])
            ("if" code nil nil [1074672 1074780])
            ("if" code nil nil [1074947 1075064])
            ("if" code nil nil [1075239 1075345])
            ("if" code nil nil [1075520 1075626])
            ("if" code nil nil [1075807 1075915])
            ("if" code nil nil [1076055 1076158])
            ("if" code nil nil [1076313 1076422])
            ("if" code nil nil [1076586 1076710])
            ("if" code nil nil [1076885 1077010])
            ("if" code nil nil [1077179 1077286])
            ("if" code nil nil [1077464 1077575])
            ("if" code nil nil [1077750 1077923])
            ("if" code nil nil [1078101 1078208])
            ("if" code nil nil [1078354 1078460])
            ("if" code nil nil [1078632 1078750])
            ("if" code nil nil [1078934 1079065])
            ("if" code nil nil [1079264 1079414])
            ("if" code nil nil [1079554 1079661])
            ("if" code nil nil [1079839 1079946])
            ("if" code nil nil [1080130 1080262])
            ("if" code nil nil [1080437 1080543])
            ("if" code nil nil [1080724 1080839])
            ("if" code nil nil [1081041 1081178])
            ("if" code nil nil [1081351 1081473])
            ("if" code nil nil [1081675 1081812])
            ("if" code nil nil [1082008 1082128])
            ("if" code nil nil [1082333 1082472])
            ("if" code nil nil [1082668 1082788])
            ("if" code nil nil [1082960 1083065])
            ("if" code nil nil [1083252 1083376])
            ("if" code nil nil [1083557 1083665])
            ("if" code nil nil [1083855 1083976])
            ("if" code nil nil [1084151 1084257])
            ("if" code nil nil [1084403 1084509])
            ("if" code nil nil [1084702 1084814])
            ("if" code nil nil [1084966 1085094])
            ("if" code nil nil [1085261 1085372])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1085548 1085662])
            ("if" code nil nil [1085664 1085778])
            ("if" code nil nil [1085989 1086133])
            ("if" code nil nil [1086347 1086510])
            ("if" code nil nil [1086712 1086854])
            ("if" code nil nil [1087027 1087169])
            ("mail-from-style" variable (:default-value (quote default)) nil [1087290 1087696])
            ("custom-autoload" code nil nil [1087698 1087745])
            ("mail-specify-envelope-from" variable nil nil [1087747 1088203])
            ("custom-autoload" code nil nil [1088205 1088263])
            ("mail-self-blind" variable nil nil [1088265 1088466])
            ("custom-autoload" code nil nil [1088468 1088515])
            ("mail-interactive" variable (:default-value t) nil [1088517 1088674])
            ("custom-autoload" code nil nil [1088676 1088724])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [1088726 1089186])
            ("custom-autoload" code nil nil [1089188 1089238])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [1089240 1089382])
            ("custom-autoload" code nil nil [1089384 1089437])
            ("mail-archive-file-name" variable nil nil [1089439 1089632])
            ("custom-autoload" code nil nil [1089634 1089688])
            ("mail-default-reply-to" variable nil nil [1089690 1089889])
            ("custom-autoload" code nil nil [1089891 1089944])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [1089946 1090208])
            ("custom-autoload" code nil nil [1090210 1090266])
            ("mail-setup-hook" variable nil nil [1090268 1090366])
            ("custom-autoload" code nil nil [1090368 1090415])
            ("mail-aliases" variable (:default-value t) nil [1090417 1090723])
            ("mail-yank-prefix" variable (:default-value "> ") nil [1090725 1090894])
            ("custom-autoload" code nil nil [1090896 1090944])
            ("mail-indentation-spaces" variable (:default-value 3) nil [1090946 1091105])
            ("custom-autoload" code nil nil [1091107 1091162])
            ("mail-citation-hook" variable nil nil [1091164 1091660])
            ("custom-autoload" code nil nil [1091662 1091712])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [1091714 1092087])
            ("custom-autoload" code nil nil [1092089 1092148])
            ("mail-signature" variable (:default-value t) nil [1092150 1092598])
            ("custom-autoload" code nil nil [1092600 1092646])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [1092648 1092763])
            ("custom-autoload" code nil nil [1092765 1092816])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [1092818 1093086])
            ("custom-autoload" code nil nil [1093088 1093142])
            ("mail-default-headers" variable nil nil [1093144 1093382])
            ("custom-autoload" code nil nil [1093384 1093436])
            ("sendmail-query-once" function (:prototype-flag t) nil [1093438 1093618])
            ("define-mail-user-agent" code nil nil [1093620 1093714])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [1093716 1093899])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1093901 1095029])
            ("mail-mailing-lists" variable nil nil [1095031 1095243])
            ("custom-autoload" code nil nil [1095245 1095295])
            ("sendmail-coding-system" variable nil nil [1095297 1095616])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [1095618 1096094])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096096 1098284])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098286 1098475])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098477 1098664])
            ("if" code nil nil [1098666 1098775])
            ("push" code nil nil [1098892 1098947])
            ("if" code nil nil [1098949 1099040])
            ("put" code nil nil [1099145 1099187])
            ("put" code nil nil [1099189 1099231])
            ("put" code nil nil [1099233 1099279])
            ("server-name" variable (:default-value "server") nil [1099281 1099478])
            ("custom-autoload" code nil nil [1099480 1099521])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099523 1100270])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100272 1100505])
            ("server-mode" variable nil nil [1100507 1100788])
            ("custom-autoload" code nil nil [1100790 1100833])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1100835 1101222])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [1101224 1101539])
            ("if" code nil nil [1101541 1101638])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101734 1103183])
            ("if" code nil nil [1103185 1103295])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103437 1104158])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1104160 1105969])
            ("if" code nil nil [1105971 1106077])
            ("push" code nil nil [1106218 1106280])
            ("put" code nil nil [1106281 1106326])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1106328 1108908])
            ("defalias" code nil nil [1108910 1108948])
            ("if" code nil nil [1108950 1109046])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1109173 1111114])
            ("if" code nil nil [1111116 1111224])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1111341 1111781])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1111783 1112124])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112126 1112582])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112584 1112666])
            ("if" code nil nil [1112668 1112768])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [1112870 1113221])
            ("custom-autoload" code nil nil [1113223 1113275])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1113277 1114937])
            ("if" code nil nil [1114939 1115053])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115157 1115300])
            ("shr-insert-document" function (:prototype-flag t) nil [1115302 1115500])
            ("if" code nil nil [1115502 1115593])
            ("if" code nil nil [1115715 1115818])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115928 1116000])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116002 1116067])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116069 1116143])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116145 1116219])
            ("if" code nil nil [1116221 1116316])
            ("if" code nil nil [1116455 1116557])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116682 1117025])
            ("if" code nil nil [1117027 1117127])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1117252 1119397])
            ("if" code nil nil [1119399 1119496])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [1119607 1119724])
            ("define-skeleton" function (:prototype-flag t) nil [1119726 1119973])
            ("function-put" code nil nil [1119975 1120025])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [1120027 1120609])
            ("skeleton-insert" function (:prototype-flag t) nil [1120611 1124153])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1124155 1124881])
            ("if" code nil nil [1124883 1124984])
            ("smerge-refine-regions" function (:prototype-flag t) nil [1125110 1126043])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1126045 1126263])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1126265 1126569])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1126571 1126752])
            ("if" code nil nil [1126754 1126856])
            ("if" code nil nil [1126977 1127070])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1127185 1127355])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1127357 1127558])
            ("if" code nil nil [1127560 1127682])
            ("if" code nil nil [1127794 1127888])
            ("smtpmail-send-it" function (:prototype-flag t) nil [1128009 1128068])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1128070 1128207])
            ("if" code nil nil [1128209 1128310])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1128422 1128986])
            ("if" code nil nil [1128988 1129083])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129205 1129582])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129584 1129967])
            ("if" code nil nil [1129969 1130066])
            ("push" code nil nil [1130193 1130257])
            ("if" code nil nil [1130259 1130359])
            ("if" code nil nil [1130498 1130599])
            ("if" code nil nil [1130709 1130804])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1130924 1131318])
            ("if" code nil nil [1131320 1131450])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131574 1133238])
            ("if" code nil nil [1133240 1133343])
            ("put" code nil nil [1133441 1133493])
            ("sort-subr" function (:prototype-flag t) nil [1133495 1135646])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135648 1135988])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135990 1136340])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1136342 1136682])
            ("put" code nil nil [1136683 1136738])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1136740 1137317])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1137319 1137777])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1137779 1138890])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1138892 1139685])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139687 1139850])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139852 1140797])
            ("if" code nil nil [1140799 1140892])
            ("if" code nil nil [1141000 1141098])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141207 1141567])
            ("if" code nil nil [1141569 1141662])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141800 1142129])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [1142131 1142354])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [1142356 1142561])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142563 1142814])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142816 1143012])
            ("if" code nil nil [1143014 1143121])
            ("if" code nil nil [1143245 1143380])
            ("if" code nil nil [1143504 1143602])
            ("defalias" code nil nil [1143713 1143754])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143756 1144215])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144217 1144463])
            ("if" code nil nil [1144465 1144566])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144678 1144776])
            ("snarf-spooks" function (:prototype-flag t) nil [1144778 1144893])
            ("if" code nil nil [1144895 1144996])
            ("push" code nil nil [1145111 1145165])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [1145167 1145905])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145907 1146999])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147001 1147327])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147329 1147884])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147886 1149111])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149113 1150349])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150351 1151469])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151471 1152725])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152727 1154003])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154005 1155138])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155140 1156243])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156245 1157464])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1157466 1158961])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158963 1160116])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160118 1161445])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1161447 1162658])
            ("sql-vertica" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162660 1162756])
            ("if" code nil nil [1162758 1162849])
            ("push" code nil nil [1162968 1163026])
            ("if" code nil nil [1163028 1163134])
            ("if" code nil nil [1163277 1163381])
            ("if" code nil nil [1163562 1163669])
            ("if" code nil nil [1163838 1163941])
            ("if" code nil nil [1164084 1164188])
            ("if" code nil nil [1164349 1164459])
            ("if" code nil nil [1164643 1164760])
            ("if" code nil nil [1164926 1165054])
            ("if" code nil nil [1165247 1165358])
            ("if" code nil nil [1165510 1165624])
            ("if" code nil nil [1165773 1165879])
            ("if" code nil nil [1166031 1166152])
            ("if" code nil nil [1166295 1166399])
            ("if" code nil nil [1166577 1166683])
            ("if" code nil nil [1166861 1166967])
            ("if" code nil nil [1167136 1167239])
            ("if" code nil nil [1167411 1167515])
            ("if" code nil nil [1167670 1167787])
            ("if" code nil nil [1167956 1168064])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1168219 1168327])
            ("defalias" code nil nil [1168329 1168372])
            ("if" code nil nil [1168374 1168494])
            ("if" code nil nil [1168640 1168764])
            ("if" code nil nil [1168948 1169071])
            ("if" code nil nil [1169243 1169382])
            ("starttls-open-stream" function (:prototype-flag t) nil [1169501 1170352])
            ("if" code nil nil [1170354 1170455])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1170563 1170997])
            ("strokes-read-stroke" function (:prototype-flag t) nil [1170999 1171435])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [1171437 1171916])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171918 1172082])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172084 1172257])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172259 1172401])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172403 1172500])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172502 1172627])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172629 1172975])
            ("strokes-mode" variable nil nil [1172977 1173262])
            ("custom-autoload" code nil nil [1173264 1173309])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1173311 1174090])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174092 1174361])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174363 1174500])
            ("if" code nil nil [1174502 1174601])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174716 1174805])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174807 1174933])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174935 1175022])
            ("if" code nil nil [1175149 1175314])
            ("define-obsolete-function-alias" code nil nil [1175442 1175519])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175521 1176618])
            ("global-subword-mode" variable nil nil [1176620 1176933])
            ("custom-autoload" code nil nil [1176935 1176987])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176989 1177396])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177398 1177924])
            ("global-superword-mode" variable nil nil [1177926 1178247])
            ("custom-autoload" code nil nil [1178249 1178303])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178305 1178726])
            ("if" code nil nil [1178728 1178848])
            ("sc-cite-original" function (:prototype-flag t) nil [1178972 1179973])
            ("if" code nil nil [1179975 1180071])
            ("if" code nil nil [1180167 1180258])
            ("define-obsolete-function-alias" code nil nil [1180366 1180435])
            ("gpm-mouse-mode" variable (:default-value t) nil [1180437 1180728])
            ("custom-autoload" code nil nil [1180730 1180777])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180779 1181431])
            ("if" code nil nil [1181433 1181534])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1181639 1182034])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182036 1182530])
            ("if" code nil nil [1182532 1182635])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182757 1187857])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1187859 1188186])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188188 1188540])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188542 1188693])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188695 1189064])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189066 1189121])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189123 1189461])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189463 1189533])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189535 1189799])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189801 1189862])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189864 1190329])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190331 1190391])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190393 1190831])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190833 1191325])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191327 1191574])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191576 1191800])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191802 1193676])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193678 1193894])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193896 1194067])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194069 1194230])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194232 1194413])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194415 1194574])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194576 1194833])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194835 1195202])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195204 1195407])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195409 1195618])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195620 1196149])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1196151 1196907])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1196909 1198076])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198078 1199713])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199715 1199966])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199968 1200239])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200241 1205382])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1205384 1205692])
            ("if" code nil nil [1205694 1205800])
            ("push" code nil nil [1205958 1206023])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206122 1206231])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206233 1206346])
            ("if" code nil nil [1206348 1206441])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206552 1207331])
            ("if" code nil nil [1207333 1207429])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1207545 1208609])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1208611 1208812])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1208814 1209006])
            ("if" code nil nil [1209008 1209201])
            ("if" code nil nil [1209348 1209454])
            ("if" code nil nil [1209613 1209728])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209841 1210444])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1210446 1210678])
            ("if" code nil nil [1210680 1210802])
            ("if" code nil nil [1210904 1210999])
            ("make-term" function (:prototype-flag t) nil [1211098 1211517])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1211519 1211766])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1211768 1212014])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212016 1212590])
            ("if" code nil nil [1212592 1212747])
            ("testcover-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212891 1213248])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213250 1213351])
            ("if" code nil nil [1213353 1213456])
            ("push" code nil nil [1213570 1213627])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213629 1214366])
            ("if" code nil nil [1214368 1214465])
            ("tex-shell-file-name" variable nil nil [1214596 1214704])
            ("custom-autoload" code nil nil [1214706 1214757])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1214759 1215046])
            ("custom-autoload" code nil nil [1215048 1215093])
            ("tex-first-line-header-regexp" variable nil nil [1215095 1215372])
            ("custom-autoload" code nil nil [1215374 1215434])
            ("tex-main-file" variable nil nil [1215436 1215627])
            ("custom-autoload" code nil nil [1215629 1215674])
            ("tex-offer-save" variable (:default-value t) nil [1215676 1215779])
            ("custom-autoload" code nil nil [1215781 1215827])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [1215829 1215990])
            ("custom-autoload" code nil nil [1215992 1216039])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [1216041 1216210])
            ("custom-autoload" code nil nil [1216212 1216261])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [1216263 1216436])
            ("custom-autoload" code nil nil [1216438 1216488])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [1216490 1216786])
            ("custom-autoload" code nil nil [1216788 1216837])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [1216839 1217094])
            ("custom-autoload" code nil nil [1217096 1217146])
            ("latex-block-names" variable nil nil [1217148 1217284])
            ("custom-autoload" code nil nil [1217286 1217335])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [1217337 1217596])
            ("custom-autoload" code nil nil [1217598 1217648])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1217650 1217900])
            ("custom-autoload" code nil nil [1217902 1217955])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1217957 1218569])
            ("custom-autoload" code nil nil [1218571 1218628])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [1218630 1219120])
            ("custom-autoload" code nil nil [1219122 1219174])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [1219176 1219352])
            ("custom-autoload" code nil nil [1219354 1219408])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [1219410 1219708])
            ("custom-autoload" code nil nil [1219710 1219758])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1219760 1219871])
            ("custom-autoload" code nil nil [1219873 1219919])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1219921 1220034])
            ("custom-autoload" code nil nil [1220036 1220083])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1220085 1220517])
            ("defalias" code nil nil [1220519 1220549])
            ("defalias" code nil nil [1220551 1220593])
            ("defalias" code nil nil [1220595 1220629])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1220631 1222376])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1222378 1224082])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1224084 1225857])
            ("tex-start-shell" function (:prototype-flag t) nil [1225859 1225917])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1225919 1226003])
            ("if" code nil nil [1226005 1226151])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226282 1226708])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226710 1227051])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1227053 1227680])
            ("if" code nil nil [1227682 1227803])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1227931 1228050])
            ("custom-autoload" code nil nil [1228052 1228101])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1228103 1228224])
            ("custom-autoload" code nil nil [1228226 1228276])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1228278 1231101])
            ("if" code nil nil [1231103 1231202])
            ("if" code nil nil [1231347 1231449])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1231589 1231802])
            ("thai-compose-string" function (:prototype-flag t) nil [1231804 1231940])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1231942 1232049])
            ("thai-composition-function" function (:prototype-flag t) nil [1232051 1232128])
            ("if" code nil nil [1232130 1232313])
            ("if" code nil nil [1232453 1232551])
            ("forward-thing" function (:prototype-flag t) nil [1232665 1232989])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1232991 1233504])
            ("thing-at-point" function (:prototype-flag t) nil [1233506 1234023])
            ("sexp-at-point" function (:prototype-flag t) nil [1234025 1234132])
            ("symbol-at-point" function (:prototype-flag t) nil [1234134 1234245])
            ("number-at-point" function (:prototype-flag t) nil [1234247 1234358])
            ("list-at-point" function (:prototype-flag t) nil [1234360 1234472])
            ("if" code nil nil [1234474 1234684])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234789 1234879])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234881 1235121])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1235123 1235235])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1235237 1235360])
            ("defalias" code nil nil [1235362 1235402])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1235404 1235520])
            ("if" code nil nil [1235522 1235619])
            ("push" code nil nil [1235742 1235798])
            ("if" code nil nil [1235800 1235895])
            ("tibetan-char-p" function (:prototype-flag t) nil [1236038 1236196])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1236198 1236351])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1236353 1236547])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1236549 1236647])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1236649 1236766])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1236768 1237027])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1237029 1237266])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1237268 1237472])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1237474 1237650])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1237652 1237729])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1237731 1237812])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1237814 1237909])
            ("if" code nil nil [1237911 1238013])
            ("push" code nil nil [1238140 1238200])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238202 1238664])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238666 1239108])
            ("tildify-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1239110 1239967])
            ("tildify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1239969 1240582])
            ("if" code nil nil [1240584 1240683])
            ("display-time-day-and-date" variable nil nil [1240782 1240900])
            ("custom-autoload" code nil nil [1240902 1240955])
            ("put" code nil nil [1240956 1241006])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241008 1241326])
            ("display-time-mode" variable nil nil [1241328 1241633])
            ("custom-autoload" code nil nil [1241635 1241682])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241684 1242287])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1242289 1242514])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1242516 1242774])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1242776 1242892])
            ("if" code nil nil [1242894 1243076])
            ("date-to-time" function (:prototype-flag t) nil [1243216 1243401])
            ("defalias" code nil nil [1243403 1243442])
            ("seconds-to-time" function (:prototype-flag t) nil [1243444 1243543])
            ("days-to-time" function (:prototype-flag t) nil [1243545 1243637])
            ("time-since" function (:prototype-flag t) nil [1243639 1243791])
            ("define-obsolete-function-alias" code nil nil [1243793 1243862])
            ("date-to-day" function (:prototype-flag t) nil [1243864 1244009])
            ("days-between" function (:prototype-flag t) nil [1244011 1244174])
            ("date-leap-year-p" function (:prototype-flag t) nil [1244176 1244273])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1244275 1244403])
            ("time-to-days" function (:prototype-flag t) nil [1244405 1244623])
            ("safe-date-to-time" function (:prototype-flag t) nil [1244625 1244815])
            ("format-seconds" function (:prototype-flag t) nil [1244817 1245771])
            ("seconds-to-string" function (:prototype-flag t) nil [1245773 1245895])
            ("if" code nil nil [1245897 1246061])
            ("put" code nil nil [1246177 1246231])
            ("put" code nil nil [1246232 1246298])
            ("put" code nil nil [1246299 1246358])
            ("put" code nil nil [1246359 1246412])
            ("put" code nil nil [1246413 1246464])
            ("put" code nil nil [1246465 1246526])
            ("put" code nil nil [1246527 1246581])
            ("put" code nil nil [1246582 1246637])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1246639 1247581])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1247583 1247804])
            ("if" code nil nil [1247806 1247911])
            ("push" code nil nil [1248050 1248112])
            ("timeclock-mode-line-display" variable nil nil [1248114 1248464])
            ("custom-autoload" code nil nil [1248466 1248528])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1248530 1249095])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249097 1249863])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249865 1250340])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1250342 1250679])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1250681 1251021])
            ("timeclock-query-out" function (:prototype-flag t) nil [1251023 1251190])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1251192 1251359])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1251361 1251757])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1251759 1252055])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1252057 1252474])
            ("if" code nil nil [1252476 1252579])
            ("list-timers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1252726 1252841])
            ("put" code nil nil [1252843 1252936])
            ("if" code nil nil [1252938 1253043])
            ("if" code nil nil [1253154 1253255])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1253408 1253661])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1253663 1254119])
            ("if" code nil nil [1254121 1254332])
            ("if" code nil nil [1254436 1254545])
            ("define-key" code nil nil [1254641 1254684])
            ("define-key" code nil nil [1254686 1254747])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254749 1255244])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255246 1255528])
            ("tmm-prompt" function (:prototype-flag t) nil [1255530 1256159])
            ("if" code nil nil [1256161 1256252])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1256392 1258272])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258274 1258405])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258407 1258533])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258535 1258692])
            ("if" code nil nil [1258694 1258792])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258903 1259099])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1259101 1259866])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1259868 1260509])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1260511 1261220])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1261222 1261788])
            ("if" code nil nil [1261790 1261891])
            ("if" code nil nil [1261999 1262098])
            ("tq-create" function (:prototype-flag t) nil [1262213 1262501])
            ("if" code nil nil [1262503 1262592])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1262716 1262806])
            ("custom-autoload" code nil nil [1262808 1262849])
            ("trace-values" function (:prototype-flag t) nil [1262851 1263026])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1263028 1263912])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1263914 1264174])
            ("defalias" code nil nil [1264176 1264229])
            ("if" code nil nil [1264231 1264353])
            ("tramp-mode" variable (:default-value t) nil [1264463 1264577])
            ("custom-autoload" code nil nil [1264579 1264618])
            ("tramp-initial-file-name-regexp" variable
               (:constant-flag t
                :default-value "\\`/.+:.*:")
                nil [1264620 1264778])
            ("tramp-file-name-regexp" variable (:default-value tramp-initial-file-name-regexp) nil [1264780 1265097])
            ("tramp-autoload-file-name-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`/" (if (memq system-type (quote (cygwin windows-nt))) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") ":"))
                nil [1265099 1265467])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1265469 1265764])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1265766 1266093])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1266095 1266139])
            ("tramp-unload-file-name-handlers" function nil nil [1266141 1266483])
            ("tramp-completion-mode" variable nil nil [1266485 1266599])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1266601 1266697])
            ("if" code nil nil [1266699 1266802])
            ("if" code nil nil [1266924 1267023])
            ("if" code nil nil [1267151 1267252])
            ("if" code nil nil [1267377 1267477])
            ("if" code nil nil [1267616 1267718])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1267840 1267951])
            ("if" code nil nil [1267953 1268052])
            ("if" code nil nil [1268177 1268307])
            ("if" code nil nil [1268426 1268524])
            ("if" code nil nil [1268646 1268749])
            ("if" code nil nil [1268868 1268968])
            ("push" code nil nil [1269086 1269149])
            ("if" code nil nil [1269151 1269249])
            ("if" code nil nil [1269369 1269476])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1269587 1270373])
            ("if" code nil nil [1270375 1270510])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1270636 1270734])
            ("if" code nil nil [1270736 1270836])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1270981 1271029])
            ("global-set-key" code nil nil [1271031 1271067])
            ("global-set-key" code nil nil [1271069 1271102])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1271104 1271567])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1271569 1271828])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1271830 1272616])
            ("if" code nil nil [1272618 1272715])
            ("type-break-mode" variable nil nil [1272832 1273129])
            ("custom-autoload" code nil nil [1273131 1273182])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1273184 1276781])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1276783 1277064])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1277066 1277338])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1277340 1278619])
            ("if" code nil nil [1278621 1278734])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1278840 1279151])
            ("if" code nil nil [1279153 1279244])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279406 1279532])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1279534 1279654])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279656 1279782])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1279784 1279904])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279906 1280034])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1280036 1280158])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280160 1280288])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1280290 1280412])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280414 1280566])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1280568 1280714])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280716 1280868])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1280870 1281016])
            ("if" code nil nil [1281018 1281141])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1281283 1281528])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1281530 1281756])
            ("if" code nil nil [1281914 1282012])
            ("batch-unrmail" function (:prototype-flag t) nil [1282130 1282457])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282459 1282657])
            ("if" code nil nil [1282659 1282769])
            ("unsafep" function (:prototype-flag t) nil [1282899 1283140])
            ("if" code nil nil [1283142 1283258])
            ("url-retrieve" function (:prototype-flag t) nil [1283362 1284850])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1284852 1285429])
            ("if" code nil nil [1285431 1285522])
            ("if" code nil nil [1285644 1285741])
            ("url-get-authentication" function (:prototype-flag t) nil [1285860 1287027])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1287029 1287710])
            ("if" code nil nil [1287712 1287808])
            ("url-store-in-cache" function (:prototype-flag t) nil [1287930 1288038])
            ("url-is-cached" function (:prototype-flag t) nil [1288040 1288210])
            ("url-cache-extract" function (:prototype-flag t) nil [1288212 1288317])
            ("if" code nil nil [1288319 1288416])
            ("url-cid" function (:prototype-flag t) nil [1288532 1288585])
            ("if" code nil nil [1288587 1288690])
            ("if" code nil nil [1288815 1288919])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1289035 1289188])
            ("url-dav-request" function (:prototype-flag t) nil [1289190 1289973])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1289975 1290042])
            ("if" code nil nil [1290044 1290139])
            ("if" code nil nil [1290261 1290358])
            ("if" code nil nil [1290483 1290588])
            ("if" code nil nil [1290713 1290811])
            ("url-file" function (:prototype-flag t) nil [1290930 1291028])
            ("if" code nil nil [1291030 1291131])
            ("if" code nil nil [1291247 1291345])
            ("if" code nil nil [1291470 1291575])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1291688 1291818])
            ("url-open-stream" function (:prototype-flag t) nil [1291820 1292246])
            ("if" code nil nil [1292248 1292342])
            ("url-handler-mode" variable nil nil [1292481 1292782])
            ("custom-autoload" code nil nil [1292784 1292838])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1292840 1293141])
            ("url-file-handler" function (:prototype-flag t) nil [1293143 1293412])
            ("url-copy-file" function (:prototype-flag t) nil [1293414 1294068])
            ("url-file-local-copy" function (:prototype-flag t) nil [1294070 1294277])
            ("url-insert-buffer-contents" function (:prototype-flag t) nil [1294279 1294558])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1294560 1294667])
            ("if" code nil nil [1294669 1294769])
            ("if" code nil nil [1294897 1294996])
            ("url-default-expander" function (:prototype-flag t) nil [1295115 1295160])
            ("defalias" code nil nil [1295162 1295222])
            ("url-https" function (:prototype-flag t) nil [1295224 1295256])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1295258 1295304])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1295306 1295354])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1295356 1295404])
            ("if" code nil nil [1295406 1295503])
            ("if" code nil nil [1295622 1295722])
            ("url-irc" function (:prototype-flag t) nil [1295838 1295891])
            ("if" code nil nil [1295893 1295992])
            ("url-ldap" function (:prototype-flag t) nil [1296111 1296364])
            ("if" code nil nil [1296366 1296467])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1296592 1296654])
            ("url-mailto" function (:prototype-flag t) nil [1296656 1296745])
            ("if" code nil nil [1296747 1296860])
            ("if" code nil nil [1296988 1297094])
            ("url-man" function (:prototype-flag t) nil [1297213 1297296])
            ("url-info" function (:prototype-flag t) nil [1297298 1297374])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1297376 1297450])
            ("defalias" code nil nil [1297452 1297503])
            ("defalias" code nil nil [1297505 1297556])
            ("defalias" code nil nil [1297558 1297609])
            ("url-data" function (:prototype-flag t) nil [1297611 1297694])
            ("if" code nil nil [1297696 1297812])
            ("url-news" function (:prototype-flag t) nil [1297931 1297986])
            ("url-snews" function (:prototype-flag t) nil [1297988 1298044])
            ("if" code nil nil [1298046 1298147])
            ("if" code nil nil [1298263 1298361])
            ("isPlainHostName" function (:prototype-flag t) nil [1298474 1298535])
            ("dnsDomainIs" function (:prototype-flag t) nil [1298537 1298598])
            ("dnsResolve" function (:prototype-flag t) nil [1298600 1298656])
            ("isResolvable" function (:prototype-flag t) nil [1298658 1298716])
            ("isInNet" function (:prototype-flag t) nil [1298718 1298778])
            ("url-ns-prefs" function (:prototype-flag t) nil [1298780 1298848])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1298850 1298929])
            ("if" code nil nil [1298931 1299028])
            ("url-recreate-url" function (:prototype-flag t) nil [1299150 1299262])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1299264 1300711])
            ("if" code nil nil [1300713 1300810])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1300938 1301063])
            ("if" code nil nil [1301065 1301175])
            ("if" code nil nil [1301297 1301394])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1301516 1301954])
            ("if" code nil nil [1301956 1302058])
            ("url-tramp-protocols" variable (:default-value (quote ("ftp" "ssh" "scp" "rsync" "telnet"))) nil [1302180 1302363])
            ("custom-autoload" code nil nil [1302365 1302417])
            ("url-tramp-file-handler" function (:prototype-flag t) nil [1302419 1302668])
            ("if" code nil nil [1302670 1302781])
            ("url-debug" variable nil nil [1302900 1303208])
            ("custom-autoload" code nil nil [1303210 1303251])
            ("url-debug" function (:prototype-flag t) nil [1303253 1303320])
            ("url-parse-args" function (:prototype-flag t) nil [1303322 1303404])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1303406 1303823])
            ("url-normalize-url" function (:prototype-flag t) nil [1303825 1303966])
            ("url-lazy-message" function (:prototype-flag t) nil [1303968 1304158])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1304160 1304310])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1304312 1304421])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1304423 1304531])
            ("url-display-percentage" function (:prototype-flag t) nil [1304533 1304618])
            ("url-percentage" function (:prototype-flag t) nil [1304620 1304681])
            ("defalias" code nil nil [1304683 1304727])
            ("url-file-directory" function (:prototype-flag t) nil [1304729 1304840])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1304842 1304959])
            ("url-parse-query-string" function (:prototype-flag t) nil [1304961 1305066])
            ("url-build-query-string" function (:prototype-flag t) nil [1305068 1305691])
            ("url-unhex-string" function (:prototype-flag t) nil [1305693 1305996])
            ("url-hexify-string" function (:prototype-flag t) nil [1305998 1306623])
            ("url-encode-url" function (:prototype-flag t) nil [1306625 1306938])
            ("url-file-extension" function (:prototype-flag t) nil [1306940 1307157])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1307159 1307365])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1307367 1307616])
            ("if" code nil nil [1307618 1307714])
            ("if" code nil nil [1307833 1307929])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1308040 1308517])
            ("userlock--ask-user-about-supersession-threat" function (:prototype-flag t) nil [1308519 1308609])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1308611 1309117])
            ("if" code nil nil [1309119 1309270])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1309400 1309470])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1309472 1309547])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1309549 1309623])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1309625 1309704])
            ("if" code nil nil [1309706 1309801])
            ("utf7-encode" function (:prototype-flag t) nil [1309928 1310071])
            ("if" code nil nil [1310073 1310166])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310287 1310567])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310569 1310798])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1310800 1310988])
            ("if" code nil nil [1310990 1311091])
            ("vc-checkout-hook" variable nil nil [1311190 1311303])
            ("custom-autoload" code nil nil [1311305 1311347])
            ("vc-checkin-hook" variable nil nil [1311349 1311478])
            ("custom-autoload" code nil nil [1311480 1311521])
            ("vc-before-checkin-hook" variable nil nil [1311523 1311650])
            ("custom-autoload" code nil nil [1311652 1311700])
            ("vc-responsible-backend" function (:prototype-flag t) nil [1311702 1312166])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1312168 1313305])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1313307 1313972])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1313974 1314112])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1314114 1314503])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1314505 1314660])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1314662 1315064])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1315066 1315494])
            ("vc-root-dir" function (:prototype-flag t) nil [1315496 1315649])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1315651 1315908])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1315910 1316120])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1316122 1316801])
            ("vc-message-unresolved-conflicts" function (:prototype-flag t) nil [1316803 1316942])
            ("defalias" code nil nil [1316944 1316990])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1316992 1317325])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1317327 1317924])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1317926 1318344])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1318346 1318680])
            ("vc-print-branch-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1318682 1318786])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1318788 1319029])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319031 1319266])
            ("vc-region-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319268 1319446])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319448 1319691])
            ("define-obsolete-function-alias" code nil nil [1319693 1319761])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319763 1320446])
            ("defalias" code nil nil [1320448 1320478])
            ("vc-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1320480 1320968])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1320970 1321394])
            ("vc-transfer-file" function (:prototype-flag t) nil [1321396 1322007])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322009 1322237])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322239 1322475])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322477 1323090])
            ("vc-branch-part" function (:prototype-flag t) nil [1323092 1323195])
            ("if" code nil nil [1323197 1323307])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1323433 1325011])
            ("if" code nil nil [1325013 1325111])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1325222 1325326])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1325328 1325470])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1325472 1325642])
            ("if" code nil nil [1325644 1325741])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1325851 1326079])
            ("if" code nil nil [1326081 1326178])
            ("if" code nil nil [1326289 1326386])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1326497 1327218])
            ("if" code nil nil [1327220 1327313])
            ("vc-do-command" function (:prototype-flag t) nil [1327453 1328422])
            ("if" code nil nil [1328424 1328524])
            ("if" code nil nil [1328650 1328748])
            ("vc-git-registered" function (:arguments ("file")) nil [1328859 1329072])
            ("if" code nil nil [1329074 1329171])
            ("vc-hg-registered" function (:arguments ("file")) nil [1329279 1329486])
            ("if" code nil nil [1329488 1329583])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1329694 1329764])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1329766 1329882])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1329884 1330040])
            ("if" code nil nil [1330042 1330139])
            ("vc-rcs-master-templates" variable (:default-value (purecopy (quote ("%sRCS/%s,v" "%s%s,v" "%sRCS/%s")))) nil [1330250 1330440])
            ("custom-autoload" code nil nil [1330442 1330495])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1330497 1330557])
            ("if" code nil nil [1330559 1330653])
            ("vc-sccs-master-templates" variable (:default-value (purecopy (quote ("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir)))) nil [1330767 1330976])
            ("custom-autoload" code nil nil [1330978 1331033])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1331035 1331097])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1331099 1331796])
            ("if" code nil nil [1331798 1331897])
            ("vc-src-master-templates" variable (:default-value (purecopy (quote ("%s.src/%s,v")))) nil [1332008 1332179])
            ("custom-autoload" code nil nil [1332181 1332234])
            ("vc-src-registered" function (:arguments ("f")) nil [1332236 1332296])
            ("if" code nil nil [1332298 1332395])
            ("vc-svn-registered" function (:arguments ("f")) nil [1332506 1332827])
            ("if" code nil nil [1332829 1332926])
            ("if" code nil nil [1333034 1333133])
            ("push" code nil nil [1333274 1333335])
            ("add-to-list" code nil nil [1333337 1333413])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1333415 1335137])
            ("if" code nil nil [1335139 1335237])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1335388 1342008])
            ("if" code nil nil [1342010 1342140])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1342282 1367902])
            ("if" code nil nil [1367904 1368002])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1368142 1368266])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1368268 1368534])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1368536 1368673])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1368675 1368941])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1368943 1369080])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1369082 1369155])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1369157 1369234])
            ("if" code nil nil [1369236 1369358])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1369457 1369625])
            ("custom-autoload" code nil nil [1369627 1369684])
            ("view-mode" variable nil nil [1369686 1369859])
            ("make-variable-buffer-local" code nil nil [1369861 1369900])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1369902 1370035])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1370037 1370487])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1370489 1371066])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1371068 1371661])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1371663 1372753])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1372755 1373643])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1373645 1374531])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1374533 1379403])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1379405 1379949])
            ("make-obsolete" code nil nil [1379951 1380035])
            ("view-mode-enter" function (:prototype-flag t) nil [1380037 1380705])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1380707 1380814])
            ("if" code nil nil [1380816 1380917])
            ("push" code nil nil [1381038 1381097])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1381099 1381232])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1381234 1381349])
            ("if" code nil nil [1381351 1381514])
            ("if" code nil nil [1381656 1381755])
            ("if" code nil nil [1381886 1381990])
            ("if" code nil nil [1382135 1382235])
            ("if" code nil nil [1382380 1382503])
            ("if" code nil nil [1382648 1382754])
            ("if" code nil nil [1382899 1382999])
            ("if" code nil nil [1383144 1383243])
            ("if" code nil nil [1383360 1383457])
            ("if" code nil nil [1383571 1383668])
            ("if" code nil nil [1383776 1383871])
            ("if" code nil nil [1383982 1384078])
            ("warning-prefix-function" variable nil nil [1384219 1384616])
            ("warning-series" variable nil nil [1384618 1385056])
            ("warning-fill-prefix" variable nil nil [1385058 1385167])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1385169 1385408])
            ("display-warning" function (:prototype-flag t) nil [1385410 1386656])
            ("lwarn" function (:prototype-flag t) nil [1386658 1387517])
            ("warn" function (:prototype-flag t) nil [1387519 1387807])
            ("if" code nil nil [1387809 1387969])
            ("push" code nil nil [1388073 1388130])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1388132 1388522])
            ("if" code nil nil [1388524 1388621])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1388737 1389015])
            ("if" code nil nil [1389017 1389116])
            ("put" code nil nil [1389261 1389309])
            ("put" code nil nil [1389311 1389360])
            ("define-obsolete-function-alias" code nil nil [1389362 1389439])
            ("which-function-mode" variable nil nil [1389441 1389754])
            ("custom-autoload" code nil nil [1389756 1389811])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1389813 1390275])
            ("if" code nil nil [1390277 1390381])
            ("push" code nil nil [1390497 1390561])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1390563 1390973])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1390975 1391592])
            ("global-whitespace-mode" variable nil nil [1391594 1391919])
            ("custom-autoload" code nil nil [1391921 1391979])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1391981 1392421])
            ("global-whitespace-newline-mode" variable nil nil [1392423 1392780])
            ("custom-autoload" code nil nil [1392782 1392848])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1392850 1393508])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1393510 1396326])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1396328 1399158])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1399160 1401306])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1401308 1402925])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1402927 1403120])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1403122 1404542])
            ("if" code nil nil [1404544 1404649])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1404766 1404859])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1404861 1404959])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1404961 1405094])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1405096 1405358])
            ("if" code nil nil [1405360 1405461])
            ("widgetp" function (:prototype-flag t) nil [1405572 1405666])
            ("widget-prompt-value" function (:prototype-flag t) nil [1405668 1405886])
            ("widget-create" function (:prototype-flag t) nil [1405888 1406034])
            ("widget-delete" function (:prototype-flag t) nil [1406036 1406113])
            ("widget-insert" function (:prototype-flag t) nil [1406115 1406244])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [1406246 1406869])
            ("widget-setup" function (:prototype-flag t) nil [1406871 1406979])
            ("if" code nil nil [1406981 1407080])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1407191 1407618])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1407620 1408033])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408035 1408464])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408466 1408884])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408886 1409096])
            ("if" code nil nil [1409098 1409199])
            ("winner-mode" variable nil nil [1409304 1409585])
            ("custom-autoload" code nil nil [1409587 1409630])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1409632 1410286])
            ("if" code nil nil [1410288 1410385])
            ("push" code nil nil [1410486 1410544])
            ("woman-locale" variable nil nil [1410546 1410821])
            ("custom-autoload" code nil nil [1410823 1410864])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1410866 1411515])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1411517 1411630])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1411632 1412146])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1412148 1412259])
            ("if" code nil nil [1412261 1412412])
            ("if" code nil nil [1412514 1412609])
            ("if" code nil nil [1412705 1412796])
            ("xml-parse-file" function (:prototype-flag t) nil [1412892 1413628])
            ("xml-parse-region" function (:prototype-flag t) nil [1413630 1414597])
            ("if" code nil nil [1414599 1414690])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1414805 1415462])
            ("if" code nil nil [1415464 1415561])
            ("xref-find-backend" function (:prototype-flag t) nil [1415680 1415736])
            ("xref-pop-marker-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1415738 1415857])
            ("xref-marker-stack-empty-p" function (:prototype-flag t) nil [1415859 1415976])
            ("xref-find-definitions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1415978 1416403])
            ("xref-find-definitions-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416405 1416547])
            ("xref-find-definitions-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416549 1416689])
            ("xref-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416691 1416851])
            ("xref-find-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1416853 1417013])
            ("define-key" code nil nil [1417015 1417063])
            ("define-key" code nil nil [1417065 1417113])
            ("define-key" code nil nil [1417115 1417162])
            ("define-key" code nil nil [1417164 1417212])
            ("define-key" code nil nil [1417214 1417279])
            ("define-key" code nil nil [1417281 1417345])
            ("xref-collect-matches" function (:prototype-flag t) nil [1417347 1417572])
            ("if" code nil nil [1417574 1417667])
            ("if" code nil nil [1417795 1418077])
            ("if" code nil nil [1418204 1418304])
            ("xterm-mouse-mode" variable nil nil [1418415 1418716])
            ("custom-autoload" code nil nil [1418718 1418768])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1418770 1419417])
            ("if" code nil nil [1419419 1419549])
            ("xwidget-webkit-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419657 1419926])
            ("if" code nil nil [1419928 1420027])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420136 1420268])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1420270 1420368])
            ("if" code nil nil [1420370 1420463])
            ("if" code nil nil [1420582 1420683])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420792 1420854])
            ("if" code nil nil [1420856 1420949])
            ("loaddefs" package nil nil [1429167 1429186]))          
      :file "loaddefs.el"
      :pointmax 1429332
      :fsize 1429354
      :lastmodtime '(23525 29512 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
