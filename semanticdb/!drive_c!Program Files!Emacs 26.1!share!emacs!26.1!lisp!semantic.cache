;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2861 2959])
            ("defvar-local" code nil nil [2961 3073])
            ("global-hl-line-overlays" variable nil nil [3075 3277])
            ("hl-line" customgroup (:user-visible-flag t) nil [3279 3373])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3375 3524])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3526 3955])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3957 4393])
            ("global-hl-line-sticky-flag" variable nil nil [4395 4764])
            ("hl-line-range-function" variable nil nil [4766 5153])
            ("hl-line-overlay-buffer" variable nil nil [5155 5257])
            ("define-minor-mode" code nil nil [5274 6700])
            ("hl-line-make-overlay" function nil nil [6702 6884])
            ("hl-line-highlight" function nil nil [6886 7324])
            ("hl-line-unhighlight" function nil nil [7326 7474])
            ("hl-line-maybe-unhighlight" function nil nil [7476 8181])
            ("define-minor-mode" code nil nil [8198 9352])
            ("global-hl-line-highlight" function nil nil [9354 9954])
            ("global-hl-line-highlight-all" function nil nil [9956 10204])
            ("global-hl-line-unhighlight" function nil nil [10206 10382])
            ("global-hl-line-maybe-unhighlight" function nil nil [10384 11051])
            ("global-hl-line-unhighlight-all" function nil nil [11053 11347])
            ("hl-line-move" function (:arguments ("overlay")) nil [11349 11891])
            ("hl-line-unload-function" function nil nil [11893 12155])
            ("hl-line" package nil nil [12157 12175]))          
      :file "hl-line.el"
      :pointmax 12202
      :fsize 12201
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1098 2954])
            ("put" code nil nil [2970 3019])
            ("make-variable-buffer-local" code nil nil [3020 3068])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3070 3270])
            ("font-lock-major-mode" variable nil nil [3337 3366])
            ("define-minor-mode" code nil nil [3368 6246])
            ("font-lock-change-mode" function nil nil [6341 6395])
            ("font-lock-defontify" function nil nil [6397 6831])
            ("font-lock-set-defaults" variable nil nil [6833 6864])
            ("font-lock-default-function" function (:arguments ("mode")) nil [6865 7945])
            ("turn-on-font-lock" function nil nil [7947 8088])
            ("font-lock-global-modes" variable (:default-value t) nil [11013 11858])
            ("turn-on-font-lock-if-desired" function nil nil [11860 12174])
            ("define-globalized-minor-mode" code nil nil [12176 12487])
            ("font-core" package nil nil [12524 12544]))          
      :file "font-core.el"
      :pointmax 12573
      :fsize 12572
      :lastmodtime '(23525 29508 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("shell-command-dont-erase-buffer" variable nil nil [1268 1938])
            ("shell-command-saved-pos" variable nil nil [1940 2294])
            ("idle-update-delay" variable (:default-value 0.5) nil [2296 2593])
            ("killing" customgroup (:user-visible-flag t) nil [2595 2669])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2671 2773])
            ("next-error" customgroup (:user-visible-flag t) nil [2810 2911])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [2913 3044])
            ("next-error-highlight" variable (:default-value 0.5) nil [3046 3801])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3803 4496])
            ("next-error-recenter" variable nil nil [4498 4860])
            ("next-error-hook" variable nil nil [4862 5003])
            ("next-error-highlight-timer" variable nil nil [5005 5044])
            ("next-error-overlay-arrow-position" variable nil nil [5046 5092])
            ("put" code nil nil [5093 5171])
            ("add-to-list" code nil nil [5172 5249])
            ("next-error-last-buffer" variable nil nil [5251 5478])
            ("next-error-function" variable nil nil [5480 5938])
            ("make-variable-buffer-local" code nil nil [5939 5988])
            ("next-error-move-function" variable nil nil [5990 6303])
            ("make-variable-buffer-local" code nil nil [6304 6358])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6360 7442])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7444 9726])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [9728 11497])
            ("next-error-internal" function nil nil [11499 11920])
            ("defalias" code nil nil [11922 11961])
            ("defalias" code nil nil [11962 11996])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11998 12315])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12317 12585])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12587 13039])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13041 13419])
            ("next-error-follow-last-line" variable nil nil [13490 13530])
            ("define-minor-mode" code nil nil [13532 14240])
            ("next-error-follow-mode-post-command-hook" function nil nil [14356 14689])
            ("fundamental-mode" function (:user-visible-flag t) nil [14698 14907])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [14985 15469])
            ("put" code nil nil [15471 15511])
            ("define-derived-mode" code nil nil [15512 15657])
            ("self-insert-uses-region-functions" variable nil nil [15690 16550])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [16552 16685])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [16687 19491])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [19493 19841])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19843 20620])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20622 21423])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21425 22138])
            ("defalias" code nil nil [22140 22182])
            ("delete-blank-lines" function (:user-visible-flag t) nil [22201 23628])
            ("delete-trailing-lines" variable (:default-value t) nil [23630 23916])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [23918 24140])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [24142 26084])
            ("newline-and-indent" function (:user-visible-flag t) nil [26086 26519])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [26521 27747])
            ("read-quoted-char-radix" variable (:default-value 8) nil [27749 27970])
            ("read-quoted-char" function (:arguments ("prompt")) nil [27972 30821])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30823 32852])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32854 33047])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33049 33248])
            ("back-to-indentation" function (:user-visible-flag t) nil [33250 33540])
            ("fixup-whitespace" function (:user-visible-flag t) nil [33542 33885])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [33887 34325])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [34327 34587])
            ("cycle-spacing--context" variable nil nil [34589 34844])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [34846 37295])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [37298 38221])
            ("end-of-buffer" function (:arguments ("arg")) nil [38223 39470])
            ("delete-active-region" variable (:default-value t) nil [39472 40009])
            ("region-extract-function" variable (:default-value (lambda (method) (when (region-beginning) (cond ((eq method (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq method (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method)))))) nil [40011 40833])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [40835 41181])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [41183 42820])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [42822 43965])
            ("mark-whole-buffer" function nil nil [43967 44526])
            ("goto-line" function (:arguments ("line" "buffer")) nil [44570 46847])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [46849 47531])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [47533 48326])
            ("count-words--buffer-message" function nil nil [48328 48481])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [48483 48808])
            ("define-obsolete-function-alias" code nil nil [48810 48889])
            ("what-line" function (:user-visible-flag t) nil [48891 49242])
            ("count-lines" function (:arguments ("start" "end")) nil [49244 50081])
            ("line-number-at-pos" function (:arguments ("pos" "absolute")) nil [50083 50750])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [50752 55255])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [55320 55635])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [55637 56160])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [56162 56619])
            ("minibuffer-completing-symbol" variable nil nil [56621 56724])
            ("make-obsolete-variable" code nil nil [56725 56795])
            ("minibuffer-default" variable nil nil [56797 56990])
            ("eval-expression-print-level" variable (:default-value 4) nil [56992 57222])
            ("eval-expression-print-length" variable (:default-value 12) nil [57224 57457])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [57459 57668])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [57670 57919])
            ("eval-expression-print-format" function (:arguments ("value")) nil [57921 58608])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [58610 58724])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [58726 59410])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [59412 60029])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [60159 62681])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [62683 63610])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63612 65280])
            ("extended-command-history" variable nil nil [65283 65320])
            ("execute-extended-command--last-typed" variable nil nil [65321 65370])
            ("read-extended-command" function nil nil [65372 67556])
            ("suggest-key-bindings" variable (:default-value t) nil [67558 67924])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [67926 68091])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [68093 68555])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [68557 69467])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [69469 73272])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [73274 75883])
            ("minibuffer-history" variable nil nil [75886 76139])
            ("minibuffer-history-sexp-flag" variable nil nil [76140 76455])
            ("setq" code nil nil [76456 76510])
            ("setq" code nil nil [76511 76549])
            ("minibuffer-history-search-history" variable nil nil [76575 76621])
            ("minibuffer-text-before-history" variable nil nil [76623 76823])
            ("add-hook" code nil nil [76825 76889])
            ("minibuffer-history-initialize" function nil nil [76891 76975])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [76977 77192])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [77194 77584])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77586 80430])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80432 81486])
            ("minibuffer-temporary-goal-position" variable nil nil [81488 81535])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [81537 82177])
            ("minibuffer-default-add-done" variable nil nil [82179 82502])
            ("make-variable-buffer-local" code nil nil [82504 82561])
            ("minibuffer-default-add-completions" function nil nil [82563 83017])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [83019 85307])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85309 85560])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85562 85820])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85822 87413])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87415 89454])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [89456 90112])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90114 90399])
            ("minibuffer-prompt-width" function nil nil [90458 90747])
            ("add-hook" code nil nil [90780 90847])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [90849 90900])
            ("make-variable-buffer-local" code nil nil [90901 90973])
            ("minibuffer-history-isearch-setup" function nil nil [90975 91615])
            ("minibuffer-history-isearch-end" function nil nil [91617 91847])
            ("minibuffer-history-isearch-search" function nil nil [91849 93754])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [93756 95153])
            ("minibuffer-history-isearch-wrap" function nil nil [95155 95772])
            ("minibuffer-history-isearch-push-state" function nil nil [95774 96105])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [96107 96319])
            ("define-obsolete-function-alias" code nil nil [96397 96459])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [96461 96704])
            ("undo-in-region" variable nil nil [96706 96810])
            ("undo-no-redo" variable nil nil [96812 96887])
            ("pending-undo-list" variable nil nil [96889 97040])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97042 101663])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [101665 101946])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [101948 102210])
            ("undo-in-progress" variable nil nil [102212 102343])
            ("undo-more" function (:arguments ("n")) nil [102345 103040])
            ("primitive-undo" function (:arguments ("n" "list")) nil [103042 109676])
            ("undo-copy-list" function (:arguments ("list")) nil [109701 109799])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [109801 109910])
            ("undo-start" function (:arguments ("beg" "end")) nil [109912 110500])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [113498 115784])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [115786 116825])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [116827 117369])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [117371 118136])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [119027 119332])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [119334 119806])
            ("undo-delta" function (:arguments ("undo-elt")) nil [119977 120310])
            ("defvar-local" code nil nil [120506 121227])
            ("undo-auto-current-boundary-timer" variable nil nil [121229 121404])
            ("undo-auto--this-command-amalgamating" variable nil nil [121406 121602])
            ("undo-auto--needs-boundary-p" function nil nil [121604 121744])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [121746 122050])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [122052 122680])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [122682 123351])
            ("undo-auto--boundary-timer" function nil nil [123353 123530])
            ("undo-auto--boundary-ensure-timer" function nil nil [123532 123785])
            ("undo-auto--undoably-changed-buffers" variable nil nil [123787 124024])
            ("undo-auto--add-boundary" function nil nil [124026 124305])
            ("undo-auto-amalgamate" function nil nil [124307 125636])
            ("undo-auto--undoable-change" function nil nil [125638 125829])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [125860 127449])
            ("undo-ask-before-discard" variable nil nil [127452 128218])
            ("undo-extra-outer-limit" variable nil nil [128220 128496])
            ("make-variable-buffer-local" code nil nil [128497 128549])
            ("setq" code nil nil [128834 128893])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [128894 130685])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [130688 132077])
            ("shell-command-history" variable nil nil [132079 132269])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [132271 132385])
            ("shell-command-default-error-buffer" variable nil nil [132387 132702])
            ("declare-function" code nil nil [132704 132770])
            ("declare-function" code nil nil [132771 132857])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [132859 133563])
            ("declare-function" code nil nil [133565 133616])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [133618 133863])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [133865 134494])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [134496 135749])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [135751 136077])
            ("shell-command--save-pos-or-erase" function nil nil [136079 136810])
            ("shell-command--set-point-after-cmd" function (:arguments ("buffer")) nil [136812 138057])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [138059 139360])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [139362 148190])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [148192 150588])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [150773 151060])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [151062 160637])
            ("shell-command-to-string" function (:arguments ("command")) nil [160639 160899])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [160901 162351])
            ("process-file-side-effects" variable (:default-value t) nil [162353 162775])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [162777 163662])
            ("tabulated-list-format" variable nil nil [163684 163714])
            ("tabulated-list-entries" variable nil nil [163715 163746])
            ("tabulated-list-sort-key" variable nil nil [163747 163779])
            ("declare-function" code nil nil [163780 163846])
            ("declare-function" code nil nil [163847 163953])
            ("process-menu-query-only" variable nil nil [163955 163991])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [163993 164123])
            ("define-derived-mode" code nil nil [164125 164617])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [164619 164924])
            ("list-processes--refresh" function nil nil [164926 166673])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [166675 166772])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [166774 167737])
            ("setq" code nil nil [167762 167801])
            ("setq" code nil nil [167802 167838])
            ("internal-echo-keystrokes-prefix" function nil nil [167840 168445])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [168447 168653])
            ("prefix-command-update" function nil nil [168655 168822])
            ("prefix-command-preserve-state-hook" variable nil nil [168824 168936])
            ("prefix-command-preserve-state" function nil nil [168938 169431])
            ("reset-this-command-lengths" function nil nil [169433 169536])
            ("add-hook" code nil nil [169632 169728])
            ("universal-argument--description" function nil nil [169729 170188])
            ("add-hook" code nil nil [170190 170277])
            ("universal-argument--preserve" function nil nil [170278 170356])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [170358 171974])
            ("universal-argument--mode" function nil nil [171976 172086])
            ("universal-argument" function (:user-visible-flag t) nil [172088 172831])
            ("universal-argument-more" function (:arguments ("arg")) nil [172833 173305])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [173307 173681])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [173683 174451])
            ("filter-buffer-substring-functions" variable nil nil [174455 174632])
            ("make-obsolete-variable" code nil nil [174633 174757])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [174759 175165])
            ("buffer-substring-filters" variable nil nil [175167 175648])
            ("make-obsolete-variable" code nil nil [175649 175764])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [175766 176622])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [176624 177543])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [177587 178138])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [178140 179579])
            ("kill-ring" variable nil nil [179620 180075])
            ("kill-ring-max" variable (:default-value 60) nil [180077 180212])
            ("kill-ring-yank-pointer" variable nil nil [180214 180315])
            ("save-interprogram-paste-before-kill" variable nil nil [180317 180714])
            ("kill-do-not-save-duplicates" variable nil nil [180716 180945])
            ("kill-new" function (:arguments ("string" "replace")) nil [180947 182972])
            ("kill-append-merge-undo" variable nil nil [183153 183423])
            ("kill-append" function (:arguments ("string" "before-p")) nil [183425 184289])
            ("yank-pop-change-selection" variable nil nil [184291 184639])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [184641 186299])
            ("kill-read-only-ok" variable nil nil [186350 186486])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [186488 189364])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [189558 190691])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190693 191982])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [191984 193566])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [193568 194388])
            ("bidi-directional-controls-chars" variable (:default-value "\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [194390 194535])
            ("bidi-directional-non-controls-chars" variable (:default-value "^\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [194537 194687])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [194689 195795])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [195797 196898])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [196900 198826])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [198828 200131])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [200147 200972])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [201045 201508])
            ("yank-window-start" variable nil nil [201510 201540])
            ("yank-undo-function" variable nil nil [201541 201872])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201874 203590])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203592 206332])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206334 206524])
            ("kill-forward-chars" function (:arguments ("arg")) nil [206589 206734])
            ("kill-backward-chars" function (:arguments ("arg")) nil [206783 206929])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [206931 207406])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [207408 208760])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [208762 209379])
            ("kill-whole-line" variable nil nil [209416 209561])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209563 211777])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211779 213408])
            ("forward-visible-line" function (:arguments ("arg")) nil [213410 215900])
            ("end-of-visible-line" function nil nil [215902 216668])
            ("kill-current-buffer" function (:user-visible-flag t) nil [216670 217175])
            ("insert-buffer" function (:arguments ("buffer")) nil [217179 217732])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [217734 218634])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [218636 219178])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219180 219749])
            ("define-error" code nil nil [219752 219821])
            ("activate-mark-hook" variable nil nil [219823 220012])
            ("deactivate-mark-hook" variable nil nil [220014 220092])
            ("mark" function (:arguments ("force")) nil [220094 220718])
            ("deactivate-mark" function (:arguments ("force")) nil [220753 222843])
            ("activate-mark" function (:arguments ("no-tmm")) nil [222845 223236])
            ("set-mark" function (:arguments ("pos")) nil [223238 224462])
            ("save-mark-and-excursion--save" function nil nil [224464 224613])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [224615 225565])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [225567 226022])
            ("use-empty-active-region" variable nil nil [226024 226523])
            ("use-region-p" function nil nil [226525 227131])
            ("region-active-p" function nil nil [227133 227822])
            ("region-bounds" function nil nil [227824 228013])
            ("region-noncontiguous-p" function nil nil [228015 228238])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [228240 228346])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [228348 229219])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [229221 230057])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [230059 230375])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [230377 230842])
            ("add-function" code nil nil [230844 230940])
            ("defvar-local" code nil nil [230943 231042])
            ("put" code nil nil [231043 231078])
            ("mark-ring-max" variable (:default-value 16) nil [231080 231225])
            ("global-mark-ring" variable nil nil [231227 231311])
            ("global-mark-ring-max" variable (:default-value 16) nil [231313 231474])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [231476 231789])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [231791 232202])
            ("set-mark-command-repeat-pop" variable nil nil [232204 232663])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [232665 234984])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [234986 236540])
            ("pop-mark" function nil nil [236542 236961])
            ("define-obsolete-function-alias" code nil nil [236963 237052])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237053 237948])
            ("shift-select-mode" variable (:default-value t) nil [237950 238522])
            ("handle-shift-selection" function nil nil [238524 239849])
            ("define-minor-mode" code nil nil [239851 241211])
            ("widen-automatically" variable (:default-value t) nil [241213 241547])
            ("non-essential" variable nil nil [241549 241947])
            ("pop-global-mark" function (:user-visible-flag t) nil [241949 242764])
            ("next-line-add-newlines" variable nil nil [242767 242941])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [242943 245140])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [245142 246848])
            ("track-eol" variable nil nil [246850 247188])
            ("goal-column" variable nil nil [247190 247457])
            ("make-variable-buffer-local" code nil nil [247458 247499])
            ("temporary-goal-column" variable nil nil [247501 248018])
            ("last--line-number-width" variable nil nil [248020 248151])
            ("line-move-ignore-invisible" variable (:default-value t) nil [248153 248804])
            ("line-move-visual" variable (:default-value t) nil [248806 249382])
            ("declare-function" code nil nil [249419 249479])
            ("default-font-height" function nil nil [249481 250115])
            ("default-font-width" function nil nil [250117 250838])
            ("default-line-height" function nil nil [250840 251302])
            ("window-screen-lines" function nil nil [251304 251874])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [251921 255695])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [256019 257976])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [258124 261606])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [261760 266433])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [266435 269936])
            ("line-move-to-column" function (:arguments ("col")) nil [269938 271520])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271522 272877])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272879 274502])
            ("put" code nil nil [274632 274666])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274668 275701])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [275769 276333])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276335 277024])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277026 278448])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278450 278819])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278821 279200])
            ("visual-line" customgroup (:user-visible-flag t) nil [279202 279303])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [279305 279793])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [279795 280982])
            ("visual-line--saved-state" variable nil nil [280984 281021])
            ("define-minor-mode" code nil nil [281023 282849])
            ("turn-on-visual-line-mode" function nil nil [282851 282909])
            ("define-globalized-minor-mode" code nil nil [282911 283009])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283013 283527])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283529 283973])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283975 285729])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [285731 286338])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [286489 287746])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [287748 288752])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288755 289411])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [289413 290165])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290167 290379])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290381 290572])
            ("current-word" function (:arguments ("strict" "really-word")) nil [290574 292182])
            ("fill-prefix" variable nil nil [292185 292351])
            ("make-variable-buffer-local" code nil nil [292352 292393])
            ("put" code nil nil [292394 292451])
            ("auto-fill-inhibit-regexp" variable nil nil [292453 292619])
            ("do-auto-fill" function nil nil [292621 295977])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [295979 296305])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [296307 297414])
            ("internal-auto-fill" function nil nil [297416 297670])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [297672 297828])
            ("put" code nil nil [297830 297892])
            ("put" code nil nil [298066 298118])
            ("define-minor-mode" code nil nil [298120 299026])
            ("auto-fill-function" function nil nil [299093 299200])
            ("turn-on-auto-fill" function nil nil [299202 299295])
            ("turn-off-auto-fill" function nil nil [299297 299393])
            ("custom-add-option" code nil nil [299395 299449])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299451 300289])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300292 301082])
            ("defvaralias" code nil nil [301084 301142])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301144 301924])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301926 302470])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [302472 302589])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [302590 302717])
            ("define-minor-mode" code nil nil [302719 303452])
            ("define-minor-mode" code nil nil [303454 304382])
            ("define-minor-mode" code nil nil [304384 304860])
            ("define-minor-mode" code nil nil [304862 305166])
            ("define-minor-mode" code nil nil [305168 305476])
            ("define-minor-mode" code nil nil [305478 306474])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [306477 306608])
            ("blink-matching-paren" variable (:default-value t) nil [306610 307208])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [307210 307626])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [307628 307953])
            ("blink-matching-delay" variable (:default-value 1) nil [307955 308091])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [308093 308361])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [308363 309348])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [309350 309716])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [309718 309928])
            ("blink-matching-open" function (:user-visible-flag t) nil [309930 314494])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [314496 314685])
            ("blink-paren-post-self-insert-function" function nil nil [314687 315334])
            ("put" code nil nil [315336 315394])
            ("add-hook" code nil nil [315396 315775])
            ("keyboard-quit" function (:user-visible-flag t) nil [315962 316680])
            ("buffer-quit-function" variable nil nil [316682 316932])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [316934 317760])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [317762 318157])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [318161 318678])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [318680 320224])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [320226 320551])
            ("rfc822-goto-eoh" function nil nil [320553 320957])
            ("mail-encode-mml" variable nil nil [320999 321138])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [321140 323834])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [323836 324227])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324229 324617])
            ("set-variable-value-history" variable nil nil [324621 324806])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [324808 327904])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-current-buffer)) map)) nil [327959 328595])
            ("put" code nil nil [328663 328711])
            ("completion-reference-buffer" variable nil nil [328713 328942])
            ("completion-no-auto-exit" variable nil nil [328944 329125])
            ("completion-base-position" variable nil nil [329127 329497])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [329499 329798])
            ("completion-base-size" variable nil nil [329800 330255])
            ("make-obsolete-variable" code nil nil [330256 330335])
            ("delete-completion-window" function (:user-visible-flag t) nil [330337 330711])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [330713 330844])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [330846 332096])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [332098 334057])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [334141 334979])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [334981 335173])
            ("choose-completion-string-functions" variable nil nil [335175 335814])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [335816 339226])
            ("define-derived-mode" code nil nil [339228 339600])
            ("completion-list-mode-finish" function nil nil [339602 339798])
            ("add-hook" code nil nil [339800 339862])
            ("completion-show-help" variable (:default-value t) nil [339926 340077])
            ("completion-setup-function" function nil nil [340208 342190])
            ("add-hook" code nil nil [342192 342252])
            ("define-key" code nil nil [342254 342329])
            ("define-key" code nil nil [342330 342405])
            ("switch-to-completions" function (:user-visible-flag t) nil [342407 342948])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [343110 343353])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [343354 343607])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [343608 343861])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [343862 344115])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [344116 344373])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [344374 344622])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [344624 345688])
            ("define-key" code nil nil [345690 345761])
            ("define-key" code nil nil [345762 345833])
            ("define-key" code nil nil [345834 345904])
            ("define-key" code nil nil [345905 345974])
            ("define-key" code nil nil [345975 346046])
            ("define-key" code nil nil [346047 346120])
            ("mapc" code nil nil [346410 347005])
            ("clone-buffer-hook" variable nil nil [347057 347158])
            ("clone-indirect-buffer-hook" variable nil nil [347160 347279])
            ("clone-process" function (:arguments ("process" "newname")) nil [347281 348790])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [348893 351856])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [351859 353499])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [353502 353985])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [354033 355574])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [355576 356651])
            ("define-minor-mode" code nil nil [356653 360148])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [360151 360274])
            ("define-minor-mode" code nil nil [360276 361429])
            ("define-minor-mode" code nil nil [361431 362201])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [362204 362387])
            ("define-derived-mode" code nil nil [362389 362505])
            ("messages-buffer" function nil nil [362507 362794])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [363743 365169])
            ("bad-package-check" function (:arguments ("package")) nil [365171 365676])
            ("dolist" code nil nil [365678 365800])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [366453 369077])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369143 369512])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369514 369901])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369903 370304])
            ("simple" package nil nil [370309 370326]))          
      :file "simple.el"
      :pointmax 370352
      :fsize 370637
      :lastmodtime '(23525 29518 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1149 1180])
            ("linum-overlays" variable nil nil [1182 1241])
            ("linum-available" variable nil nil [1242 1302])
            ("linum-before-numbering-hook" variable nil nil [1303 1406])
            ("mapc" code nil nil [1408 1477])
            ("linum" customgroup (:user-visible-flag t) nil [1479 1563])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1565 2040])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2042 2168])
            ("linum-eager" variable (:default-value t) nil [2170 2431])
            ("linum-delay" variable nil nil [2433 2553])
            ("define-minor-mode" code nil nil [2570 4412])
            ("define-globalized-minor-mode" code nil nil [4429 4497])
            ("linum-on" function nil nil [4499 5161])
            ("linum-delete-overlays" function nil nil [5163 5901])
            ("linum-update-current" function nil nil [5903 6016])
            ("linum-update" function (:arguments ("buffer")) nil [6018 6433])
            ("declare-function" code nil nil [6469 6529])
            ("linum--face-width" function (:arguments ("face")) nil [6531 6723])
            ("linum-update-window" function (:arguments ("win")) nil [6725 9281])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [9283 9551])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [9553 9629])
            ("linum-schedule" function nil nil [9694 9848])
            ("linum-unload-function" function nil nil [9963 10089])
            ("linum" package nil nil [10091 10107]))          
      :file "linum.el"
      :pointmax 10132
      :fsize 10131
      :lastmodtime '(23525 29512 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [929 1264])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1267 1472])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1474 1733])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1735 1925])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1927 2372])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2374 2982])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2984 3334])
            ("mode-line-eol-desc-cache" variable nil nil [3336 3373])
            ("mode-line-eol-desc" function nil nil [3375 4254])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4282 4822])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4824 5109])
            ("put" code nil nil [5110 5162])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5164 5616])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5618 6540])
            ("put" code nil nil [6556 6606])
            ("make-variable-buffer-local" code nil nil [6607 6656])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6658 6869])
            ("put" code nil nil [6885 6932])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6934 7209])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7211 7471])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7473 7991])
            ("put" code nil nil [8007 8056])
            ("make-variable-buffer-local" code nil nil [8057 8105])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8107 8617])
            ("put" code nil nil [8633 8680])
            ("make-variable-buffer-local" code nil nil [8681 8727])
            ("mode-line-frame-control" function nil nil [8797 9034])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9144 9273])
            ("put" code nil nil [9289 9350])
            ("mode-line-process" variable nil nil [9352 9511])
            ("put" code nil nil [9527 9575])
            ("make-variable-buffer-local" code nil nil [9576 9623])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9625 10376])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10378 10487])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10489 10880])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10882 11272])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11274 12284])
            ("put" code nil nil [12285 12331])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [size-indication-mode] (quote (menu-item "Display Size Indication" size-indication-mode :help "Toggle displaying a size indication in the mode-line" :button (:toggle . size-indication-mode)))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12333 13277])
            ("column-number-indicator-zero-based" variable (:default-value t) nil [13279 13665])
            ("mode-line-percent-position" variable (:default-value (quote (-3 "%p"))) nil [13667 14457])
            ("put" code nil nil [14458 14515])
            ("mode-line-position" variable (:default-value (\` ((:propertize mode-line-percent-position local-map (\, mode-line-column-line-number-mode-map) mouse-face mode-line-highlight help-echo "Size indication mode
mouse-1: Display Line and Column Mode Menu") (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (column-number-indicator-zero-based (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (10 (\, (propertize " (%l,%C)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu")))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (column-number-indicator-zero-based (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))) (5 (\, (propertize " C%C" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu")))))))))) nil [14517 16636])
            ("put" code nil nil [16637 16686])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [16688 17421])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [17423 17907])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [17909 18222])
            ("put" code nil nil [18238 18300])
            ("make-variable-buffer-local" code nil nil [18301 18362])
            ("mode-line-misc-info" variable (:default-value (quote ((global-mode-string ("" global-mode-string " "))))) nil [18364 18575])
            ("put" code nil nil [18576 18626])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [18628 18761])
            ("put" code nil nil [18762 18813])
            ("let" code nil nil [18878 19443])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19447 19626])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19628 19825])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [19827 19994])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19996 20193])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20195 20404])
            ("bound-and-true-p" function (:arguments ("var")) nil [20406 20536])
            ("bindings--define-key" code nil nil [20655 20876])
            ("bindings--define-key" code nil nil [20877 21125])
            ("bindings--define-key" code nil nil [21126 21391])
            ("bindings--define-key" code nil nil [21392 21621])
            ("bindings--define-key" code nil nil [21622 21861])
            ("bindings--define-key" code nil nil [21862 22036])
            ("bindings--define-key" code nil nil [22037 22242])
            ("bindings--define-key" code nil nil [22243 22547])
            ("bindings--define-key" code nil nil [22548 22788])
            ("bindings--define-key" code nil nil [22789 22989])
            ("bindings--define-key" code nil nil [22990 23180])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23182 23421])
            ("minor-mode-alist" variable nil nil [23423 23720])
            ("put" code nil nil [23736 23783])
            ("setq" code nil nil [23854 24061])
            ("setq" code nil nil [24346 25608])
            ("setq" code nil nil [25644 25786])
            ("setq" code nil nil [25900 26303])
            ("make-variable-buffer-local" code nil nil [26305 26351])
            ("mapc" code nil nil [26673 27066])
            ("base64" package nil nil [27124 27141])
            ("md5" package nil nil [27142 27156])
            ("sha1" package nil nil [27157 27172])
            ("overlay" package nil nil [27173 27221])
            ("text-properties" package nil nil [27222 27292])
            ("define-key" code nil nil [27294 27336])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27338 27717])
            ("garbage-collect" code nil nil [27835 27852])
            ("setq" code nil nil [27856 27893])
            ("make-variable-buffer-local" code nil nil [27895 27956])
            ("global-set-key" code nil nil [27974 28026])
            ("global-set-key" code nil nil [28027 28081])
            ("global-set-key" code nil nil [28277 28329])
            ("global-set-key" code nil nil [28330 28376])
            ("global-set-key" code nil nil [28377 28428])
            ("put" code nil nil [28514 28549])
            ("visual-order-cursor-movement" variable nil nil [28602 29306])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29308 30064])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30066 30821])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30823 31431])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [31433 32040])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [32042 32117])
            ("define-key" code nil nil [32118 32155])
            ("define-key" code nil nil [32157 32202])
            ("define-key" code nil nil [32203 32237])
            ("define-key" code nil nil [32251 32305])
            ("define-key" code nil nil [32306 32351])
            ("substitute-key-definition" code nil nil [32460 32528])
            ("define-key" code nil nil [32530 32569])
            ("define-key" code nil nil [32570 32611])
            ("define-key" code nil nil [32612 32651])
            ("define-key" code nil nil [32652 32697])
            ("define-key" code nil nil [32698 32742])
            ("define-key" code nil nil [32743 32793])
            ("define-key" code nil nil [32794 32839])
            ("define-key" code nil nil [32840 32889])
            ("define-key" code nil nil [32890 32930])
            ("define-key" code nil nil [32931 32968])
            ("define-key" code nil nil [32969 33013])
            ("define-key" code nil nil [33014 33062])
            ("define-key" code nil nil [33063 33104])
            ("define-key" code nil nil [33178 33222])
            ("define-key" code nil nil [33289 33342])
            ("define-key" code nil nil [33376 33429])
            ("define-key" code nil nil [33430 33462])
            ("put" code nil nil [33463 33505])
            ("define-key" code nil nil [33576 33613])
            ("define-key" code nil nil [33614 33650])
            ("define-key" code nil nil [33829 33868])
            ("define-key" code nil nil [33869 33918])
            ("define-key" code nil nil [33919 33964])
            ("define-key" code nil nil [33966 34009])
            ("define-key" code nil nil [34010 34055])
            ("define-key" code nil nil [34056 34106])
            ("define-key" code nil nil [34107 34153])
            ("define-key" code nil nil [34154 34202])
            ("define-key" code nil nil [34203 34254])
            ("let" code nil nil [34256 35159])
            ("define-key" code nil nil [35161 35211])
            ("let" code nil nil [35212 35326])
            ("define-key" code nil nil [35327 35370])
            ("let" code nil nil [35397 35525])
            ("define-key" code nil nil [35526 35576])
            ("let" code nil nil [35608 35733])
            ("define-key" code nil nil [35734 35787])
            ("define-key" code nil nil [35843 35895])
            ("define-key" code nil nil [36178 36221])
            ("define-key" code nil nil [36223 36264])
            ("define-key" code nil nil [36265 36308])
            ("define-key" code nil nil [36309 36349])
            ("define-key" code nil nil [36350 36395])
            ("define-key" code nil nil [36396 36432])
            ("define-key" code nil nil [36433 36467])
            ("define-key" code nil nil [36518 36566])
            ("define-key" code nil nil [36624 36673])
            ("put" code nil nil [36674 36725])
            ("define-key" code nil nil [36727 36781])
            ("define-key" code nil nil [36782 36828])
            ("define-key" code nil nil [36829 36876])
            ("define-key" code nil nil [36877 36924])
            ("define-key" code nil nil [36926 36967])
            ("define-key" code nil nil [36968 37013])
            ("define-key" code nil nil [37014 37060])
            ("define-key" code nil nil [37061 37115])
            ("define-key" code nil nil [37116 37164])
            ("define-key" code nil nil [37166 37204])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [37206 37280])
            ("define-key" code nil nil [37281 37314])
            ("define-key" code nil nil [37316 37355])
            ("define-key" code nil nil [37356 37395])
            ("define-key" code nil nil [37396 37435])
            ("define-key" code nil nil [37436 37476])
            ("define-key" code nil nil [37477 37517])
            ("define-key" code nil nil [37518 37562])
            ("define-key" code nil nil [37563 37607])
            ("define-key" code nil nil [37608 37652])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [37654 37734])
            ("define-key" code nil nil [37735 37770])
            ("define-key" code nil nil [37772 37809])
            ("define-key" code nil nil [37810 37858])
            ("define-key" code nil nil [37859 37907])
            ("define-key" code nil nil [37908 37956])
            ("define-key" code nil nil [37957 38020])
            ("define-key" code nil nil [38021 38078])
            ("define-key" code nil nil [38079 38129])
            ("define-key" code nil nil [38130 38183])
            ("define-key" code nil nil [38184 38250])
            ("define-key" code nil nil [38360 38416])
            ("define-key" code nil nil [38417 38463])
            ("define-key" code nil nil [38660 38717])
            ("define-key" code nil nil [38718 38773])
            ("define-key" code nil nil [38774 38828])
            ("define-key" code nil nil [38829 38896])
            ("define-key" code nil nil [38897 38962])
            ("define-key" code nil nil [38963 39005])
            ("define-key" code nil nil [39006 39050])
            ("define-key" code nil nil [39051 39095])
            ("define-key" code nil nil [39096 39138])
            ("define-key" code nil nil [39139 39192])
            ("define-key" code nil nil [39193 39243])
            ("define-key" code nil nil [39244 39295])
            ("define-key" code nil nil [39296 39348])
            ("define-key" code nil nil [39349 39396])
            ("put" code nil nil [39397 39427])
            ("define-key" code nil nil [39428 39474])
            ("define-key" code nil nil [39475 39529])
            ("define-key" code nil nil [39530 39582])
            ("define-key" code nil nil [39583 39642])
            ("define-key" code nil nil [39643 39701])
            ("define-key" code nil nil [39702 39760])
            ("define-key" code nil nil [39761 39809])
            ("define-key" code nil nil [39810 39857])
            ("define-key" code nil nil [39858 39918])
            ("define-key" code nil nil [39919 39977])
            ("define-key" code nil nil [39978 40031])
            ("define-key" code nil nil [40032 40099])
            ("define-key" code nil nil [40100 40166])
            ("define-key" code nil nil [40278 40337])
            ("define-key" code nil nil [40338 40387])
            ("define-key" code nil nil [40388 40438])
            ("define-key" code nil nil [40439 40479])
            ("define-key" code nil nil [40578 40630])
            ("define-key" code nil nil [40631 40685])
            ("define-key" code nil nil [40686 40730])
            ("define-key" code nil nil [40731 40768])
            ("define-key" code nil nil [40769 40824])
            ("define-key" code nil nil [40825 40881])
            ("define-key" code nil nil [40897 40939])
            ("define-key" code nil nil [41171 41218])
            ("define-key" code nil nil [41219 41266])
            ("define-key" code nil nil [41267 41324])
            ("let" code nil nil [45285 46131])
            ("define-key" code nil nil [46133 46182])
            ("define-key" code nil nil [46183 46229])
            ("define-key" code nil nil [46230 46279])
            ("define-key" code nil nil [47446 47492])
            ("define-key" code nil nil [47614 47661])
            ("define-key" code nil nil [47663 47711])
            ("define-key" code nil nil [47713 47760])
            ("define-key" code nil nil [47761 47802])
            ("define-key" code nil nil [47803 47847])
            ("define-key" code nil nil [47848 47894])
            ("define-key" code nil nil [47896 47934])
            ("define-key" code nil nil [47935 47984])
            ("define-key" code nil nil [47985 48037])
            ("define-key" code nil nil [48038 48084])
            ("define-key" code nil nil [48085 48130])
            ("define-key" code nil nil [48131 48174])
            ("define-key" code nil nil [48175 48224])
            ("define-key" code nil nil [48226 48261])
            ("define-key" code nil nil [48262 48300])
            ("define-key" code nil nil [48301 48340])
            ("define-key" code nil nil [48341 48376])
            ("define-key" code nil nil [48377 48424])
            ("define-key" code nil nil [48426 48471])
            ("define-key" code nil nil [48472 48511])
            ("define-key" code nil nil [48512 48557])
            ("define-key" code nil nil [48558 48608])
            ("defalias" code nil nil [48610 48671])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [48672 48787])
            ("define-key" code nil nil [48788 48848])
            ("global-set-key" code nil nil [48850 48889])
            ("define-key" code nil nil [48890 48932])
            ("global-set-key" code nil nil [48933 48971])
            ("define-key" code nil nil [48972 49014])
            ("global-set-key" code nil nil [49091 49130])
            ("global-set-key" code nil nil [49131 49169])
            ("global-set-key" code nil nil [49229 49267])
            ("global-set-key" code nil nil [49268 49318])
            ("global-set-key" code nil nil [49379 49419])
            ("global-set-key" code nil nil [49421 49466])
            ("define-key" code nil nil [49467 49512])
            ("global-set-key" code nil nil [49513 49557])
            ("define-key" code nil nil [49558 49602])
            ("global-set-key" code nil nil [49603 49651])
            ("define-key" code nil nil [49652 49700])
            ("global-set-key" code nil nil [49701 49742])
            ("define-key" code nil nil [49743 49784])
            ("global-set-key" code nil nil [49785 49835])
            ("define-key" code nil nil [49836 49886])
            ("global-set-key" code nil nil [49887 49931])
            ("define-key" code nil nil [49932 49976])
            ("define-key" code nil nil [49978 50019])
            ("define-key" code nil nil [50020 50062])
            ("define-key" code nil nil [50063 50108])
            ("define-key" code nil nil [50109 50147])
            ("define-key" code nil nil [50148 50188])
            ("define-key" code nil nil [50189 50227])
            ("define-key" code nil nil [50228 50266])
            ("define-key" code nil nil [50484 50535])
            ("define-key" code nil nil [50536 50590])
            ("define-key" code nil nil [50591 50632])
            ("define-key" code nil nil [50633 50675])
            ("define-key" code nil nil [50676 50723])
            ("define-key" code nil nil [50724 50765])
            ("define-key" code nil nil [50766 50805])
            ("define-key" code nil nil [50806 50850])
            ("define-key" code nil nil [50851 50895])
            ("define-key" code nil nil [50896 50950])
            ("define-key" code nil nil [50952 50997])
            ("define-key" code nil nil [50999 51039])
            ("define-key" code nil nil [51040 51095])
            ("define-key" code nil nil [51096 51150])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [51154 52210])
            ("define-key" code nil nil [52211 52249])
            ("define-key" code nil nil [52251 52291])
            ("define-key" code nil nil [52292 52335])
            ("define-key" code nil nil [52338 52382])
            ("define-key" code nil nil [52383 52426])
            ("define-key" code nil nil [52427 52467])
            ("define-key" code nil nil [52468 52511])
            ("define-key" code nil nil [52512 52554])
            ("define-key" code nil nil [52555 52594])
            ("define-key" code nil nil [52595 52648])
            ("define-key" code nil nil [52650 52691])
            ("define-key" code nil nil [52692 52732])
            ("define-key" code nil nil [52733 52773])
            ("define-key" code nil nil [52774 52818])
            ("define-key" code nil nil [52819 52862])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [52911 52983])
            ("define-key" code nil nil [52984 53021])
            ("define-key" code nil nil [53023 53067])
            ("define-key" code nil nil [53068 53115])
            ("define-key" code nil nil [53116 53162])
            ("define-key" code nil nil [53163 53207])
            ("define-key" code nil nil [53208 53263])
            ("define-key" code nil nil [53264 53317])
            ("define-key" code nil nil [53379 53433])
            ("define-key" code nil nil [53434 53476])
            ("define-key" code nil nil [53477 53519])
            ("define-key" code nil nil [53734 53778])
            ("define-key" code nil nil [53779 53820])
            ("define-key" code nil nil [53821 53864])
            ("define-key" code nil nil [53866 53900])
            ("define-key" code nil nil [53902 53948])
            ("define-key" code nil nil [53950 54013])
            ("define-key" code nil nil [54014 54078])
            ("define-key" code nil nil [54099 54147])
            ("define-key" code nil nil [54148 54196]))          
      :file "bindings.el"
      :pointmax 54328
      :fsize 54327
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [990 2023])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [2025 2322])
            ("save-selected-window" function (:arguments ("body")) nil [2324 3362])
            ("temp-buffer-window-setup-hook" variable nil nil [3364 3565])
            ("temp-buffer-window-show-hook" variable nil nil [3567 3788])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3790 4404])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4406 5650])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5652 8234])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8236 9125])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9127 11455])
            ("window-right" function (:arguments ("window")) nil [11762 11974])
            ("window-left" function (:arguments ("window")) nil [11976 12186])
            ("window-child" function (:arguments ("window")) nil [12188 12343])
            ("window-child-count" function (:arguments ("window")) nil [12345 12641])
            ("window-last-child" function (:arguments ("window")) nil [12643 12910])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12912 13684])
            ("window-normalize-frame" function (:arguments ("frame")) nil [13686 14116])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [14118 14825])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [14864 15636])
            ("ignore-window-parameters" variable nil nil [15638 15982])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [16032 16156])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [16158 16354])
            ("window-min-height" variable (:default-value 4) nil [16356 17059])
            ("window-min-pixel-height" function (:arguments ("window")) nil [17061 17248])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [17298 17421])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [17423 17618])
            ("window-min-width" variable (:default-value 10) nil [17620 18319])
            ("window-min-pixel-width" function (:arguments ("window")) nil [18321 18506])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18508 18825])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18827 19111])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [19113 19745])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [19747 20173])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [20175 21282])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [21284 21996])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [21998 23221])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [23223 23874])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [23876 24834])
            ("window-atom-root" function (:arguments ("window")) nil [24856 25276])
            ("window-make-atom" function (:arguments ("window")) nil [25278 25666])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [25668 28134])
            ("window--atom-check-1" function (:arguments ("window")) nil [28136 29024])
            ("window--atom-check" function (:arguments ("frame")) nil [29026 29414])
            ("window-sides-vertical" variable nil nil [29433 29729])
            ("window-sides-reversed" variable nil nil [29731 30632])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [30634 32283])
            ("defvar-local" code nil nil [32285 32734])
            ("window--sides-inhibit-check" variable nil nil [32736 32830])
            ("window--sides-reverse-on-frame-p" function (:arguments ("frame")) nil [32832 34401])
            ("window-main-window" function (:arguments ("frame")) nil [34403 35391])
            ("window--make-major-side-window-next-to" function (:arguments ("side")) nil [35393 37234])
            ("window--make-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [37236 39444])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [39446 45933])
            ("window-toggle-side-windows" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [45935 47449])
            ("window--sides-reverse-all" function nil nil [47451 47648])
            ("window--sides-reverse-frame" function (:arguments ("frame")) nil [47650 48107])
            ("window--sides-reverse-side" function (:arguments ("frame" "side")) nil [48109 49041])
            ("window--sides-reverse" function (:arguments ("symbol" "value")) nil [49043 49624])
            ("window--sides-verticalize-frame" function (:arguments ("frame")) nil [49626 50956])
            ("window--sides-verticalize" function (:arguments ("symbol" "value")) nil [50958 51172])
            ("window--sides-check-failed" function (:arguments ("frame")) nil [51174 52876])
            ("window--sides-check" function (:arguments ("frame")) nil [52878 53814])
            ("window--check" function (:arguments ("frame")) nil [53816 53996])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [54032 55876])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [55878 57499])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [57519 58467])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [58469 59273])
            ("window-size-fixed" variable nil nil [59275 59712])
            ("make-variable-buffer-local" code nil nil [59713 59760])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [59762 60188])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [60190 61594])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [61596 62134])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [62136 62496])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [62498 63203])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63205 63773])
            ("window--min-size-ignore-p" function (:arguments ("window" "ignore")) nil [63775 63995])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63997 67788])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [67790 69160])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69162 69667])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [69669 70994])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [70996 71644])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [71646 72988])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [72990 74773])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [74775 75384])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [75386 76686])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [76688 78134])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [78182 79991])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [79993 80651])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [80653 82165])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [82167 82723])
            ("defalias" code nil nil [82770 82816])
            ("defalias" code nil nil [82817 82860])
            ("window-full-height-p" function (:arguments ("window")) nil [82862 83400])
            ("window-full-width-p" function (:arguments ("window")) nil [83402 83834])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [83836 84367])
            ("declare-function" code nil nil [84369 84429])
            ("window-font-width" function (:arguments ("window" "face")) nil [84431 85061])
            ("window-font-height" function (:arguments ("window" "face")) nil [85063 85626])
            ("overflow-newline-into-fringe" variable nil nil [85628 85665])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [85667 87181])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [87183 88154])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [88156 90038])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [90040 90617])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [90619 91137])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [91139 91529])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [91824 97322])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [97324 98945])
            ("defalias" code nil nil [98947 98997])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [98999 100650])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [100652 101922])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [101924 103217])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [103219 104787])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [104789 104968])
            ("count-windows" function (:arguments ("minibuf")) nil [104970 105263])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [105288 106238])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [106240 107864])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [107866 109781])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [109783 110219])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [110221 110743])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [110745 111969])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [111971 112377])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [112379 116287])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [116289 116766])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [116768 116945])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [116947 120465])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [120467 127079])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [127081 130877])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [130879 132782])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [132784 133617])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [133619 135540])
            ("window--sanitize-window-sizes" function (:arguments ("horizontal")) nil [135542 136507])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [136509 143766])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [143768 145602])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [145604 147455])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [147457 148053])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [148055 148665])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [148685 151737])
            ("window-body-edges" function (:arguments ("window")) nil [151739 151947])
            ("defalias" code nil nil [151948 151998])
            ("window-pixel-edges" function (:arguments ("window")) nil [152000 152221])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [152223 152464])
            ("defalias" code nil nil [152465 152527])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [152529 152756])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [152758 153010])
            ("defalias" code nil nil [153011 153091])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [153093 153993])
            ("frame-root-window-p" function (:arguments ("window")) nil [153996 154135])
            ("window--subtree" function (:arguments ("window" "next")) nil [154137 154860])
            ("window-tree" function (:arguments ("frame")) nil [154862 155757])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [155760 158391])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [158527 159800])
            ("window-deletable-p" function (:arguments ("window")) nil [159825 161401])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [161403 161706])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [161708 165252])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [165254 169029])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [169031 169657])
            ("record-window-buffer" function (:arguments ("window")) nil [171393 172812])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [172814 173313])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [173315 174242])
            ("switch-to-visible-buffer" variable (:default-value t) nil [174244 174699])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [174701 180549])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [180551 184376])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [184378 185374])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [185376 186103])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [186105 186691])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [186693 187675])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [187677 188810])
            ("unbury-buffer" function (:user-visible-flag t) nil [188812 188937])
            ("next-buffer" function (:user-visible-flag t) nil [188939 189241])
            ("previous-buffer" function (:user-visible-flag t) nil [189243 189553])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [189555 191309])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [191311 192343])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [192345 197188])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [197190 197790])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [197792 198756])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [198759 210550])
            ("split-window-no-error" function (:arguments ("window" "size" "side" "pixelwise")) nil [210552 210919])
            ("split-window-keep-point" variable (:default-value t) nil [210996 211370])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [211372 213626])
            ("defalias" code nil nil [213628 213683])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [213685 214893])
            ("defalias" code nil nil [214895 214952])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [215455 218223])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [218225 218651])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [218653 219910])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [219912 220342])
            ("window-area-factor" variable (:default-value 1) nil [220389 220558])
            ("make-variable-buffer-local" code nil nil [220559 220607])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [220609 221263])
            ("balance-windows-area" function (:user-visible-flag t) nil [221265 225621])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [225691 228723])
            ("window-state-get" function (:arguments ("window" "writable")) nil [228725 230814])
            ("window-state-put-list" variable nil nil [230816 230894])
            ("window-state-put-stale-windows" variable nil nil [230896 230983])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [230985 233703])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [233705 237745])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [237747 241931])
            ("window-swap-states" function
               (:user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [241933 245348])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [245351 247868])
            ("display-buffer-function" variable nil nil [247870 248426])
            ("make-obsolete-variable" code nil nil [248428 248509])
            ("pop-up-frame-alist" variable nil nil [248690 249306])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [249308 249637])
            ("special-display-buffer-names" variable nil nil [249639 252229])
            ("make-obsolete-variable" code nil nil [252230 252313])
            ("put" code nil nil [252314 252373])
            ("special-display-regexps" variable nil nil [252375 255017])
            ("make-obsolete-variable" code nil nil [255018 255096])
            ("put" code nil nil [255097 255151])
            ("special-display-p" function (:arguments ("buffer-name")) nil [255153 256048])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [256050 256668])
            ("make-obsolete-variable" code nil nil [256669 256751])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [256753 258773])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [258775 259573])
            ("make-obsolete-variable" code nil nil [259574 259653])
            ("same-window-buffer-names" variable nil nil [259655 260227])
            ("same-window-regexps" variable nil nil [260229 260817])
            ("same-window-p" function (:arguments ("buffer-name")) nil [260819 261790])
            ("pop-up-frames" variable nil nil [261792 262204])
            ("display-buffer-reuse-frames" variable nil nil [262206 262435])
            ("make-obsolete-variable" code nil nil [262437 262565])
            ("pop-up-windows" variable (:default-value t) nil [262567 262691])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [262693 264076])
            ("split-height-threshold" variable (:default-value 80) nil [264078 264641])
            ("split-width-threshold" variable (:default-value 160) nil [264643 265031])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [265033 267374])
            ("split-window-sensibly" function (:arguments ("window")) nil [267376 270247])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [270249 271359])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [271361 272303])
            ("even-window-sizes" variable (:default-value t) nil [272305 272828])
            ("defvaralias" code nil nil [272829 272882])
            ("window--even-window-sizes" function (:arguments ("window")) nil [272884 273889])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [273891 277057])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [277059 277639])
            ("display-buffer-mark-dedicated" variable nil nil [277978 278187])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [278189 278828])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [278830 279205])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [279207 279542])
            ("put" code nil nil [279543 279606])
            ("display-buffer-alist" variable nil nil [279608 280619])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [280621 281045])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [281047 281631])
            ("put" code nil nil [281632 281693])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [281695 282118])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [282120 282292])
            ("put" code nil nil [282293 282358])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [282360 282590])
            ("put" code nil nil [282591 282656])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [282658 288761])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [288763 289096])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [289138 290633])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [290635 291120])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [291122 291463])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [291465 293111])
            ("display-buffer-reuse-mode-window" function (:arguments ("buffer" "alist")) nil [293113 295962])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [295964 296710])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [296712 297732])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [297734 299049])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [299051 299636])
            ("display-buffer-in-child-frame" function (:arguments ("buffer" "alist")) nil [299638 301320])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [301322 302410])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [302412 303893])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [303895 306182])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [306184 307925])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [307927 308382])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [308418 310295])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [310297 310931])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [310933 312077])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [312079 312635])
            ("switch-to-buffer-preserve-window-point" variable (:default-value t) nil [312637 313524])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [313526 314316])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [314318 318139])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [318141 319245])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [319247 320331])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [320334 321307])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [321309 321524])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [321526 321745])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [321747 323148])
            ("window-buffer-height" function (:arguments ("window")) nil [323150 323628])
            ("fit-window-to-buffer-horizontally" variable nil nil [323693 324087])
            ("fit-frame-to-buffer" variable nil nil [324201 324650])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [324652 325866])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [325868 327157])
            ("declare-function" code nil nil [327159 327230])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [327232 327467])
            ("declare-function" code nil nil [327469 327541])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [327543 337470])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [337472 343951])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [343953 344334])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [344336 345444])
            ("window-largest-empty-rectangle--maximums-1" function (:arguments ("quad" "maximums")) nil [345446 345779])
            ("window-largest-empty-rectangle--maximums" function (:arguments ("quad" "maximums" "count")) nil [345781 346061])
            ("window-largest-empty-rectangle--disjoint-maximums" function (:arguments ("maximums" "count")) nil [346063 346832])
            ("window-largest-empty-rectangle" function (:arguments ("window" "count" "min-width" "min-height" "positions" "left")) nil [346834 351595])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [351598 352420])
            ("window-group-start-function" variable nil nil [352840 352880])
            ("make-variable-buffer-local" code nil nil [352881 352938])
            ("put" code nil nil [352939 352992])
            ("window-group-start" function (:arguments ("window")) nil [352993 353492])
            ("window-group-end-function" variable nil nil [353494 353532])
            ("make-variable-buffer-local" code nil nil [353533 353588])
            ("put" code nil nil [353589 353640])
            ("window-group-end" function (:arguments ("window" "update")) nil [353641 354447])
            ("set-window-group-start-function" variable nil nil [354449 354493])
            ("make-variable-buffer-local" code nil nil [354494 354555])
            ("put" code nil nil [354556 354613])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [354614 355255])
            ("recenter-window-group-function" variable nil nil [355257 355300])
            ("make-variable-buffer-local" code nil nil [355301 355361])
            ("put" code nil nil [355362 355418])
            ("recenter-window-group" function (:arguments ("arg")) nil [355419 356589])
            ("pos-visible-in-window-group-p-function" variable nil nil [356591 356642])
            ("make-variable-buffer-local" code nil nil [356643 356711])
            ("put" code nil nil [356712 356776])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [356777 358253])
            ("selected-window-group-function" variable nil nil [358255 358298])
            ("make-variable-buffer-local" code nil nil [358299 358359])
            ("put" code nil nil [358360 358416])
            ("selected-window-group" function nil nil [358417 358767])
            ("move-to-window-group-line-function" variable nil nil [358769 358816])
            ("make-variable-buffer-local" code nil nil [358817 358881])
            ("put" code nil nil [358882 358942])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [358943 359537])
            ("recenter-last-op" variable nil nil [359541 359766])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [359768 360628])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [360630 361777])
            ("define-key" code nil nil [361779 361831])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [361833 362967])
            ("define-key" code nil nil [362969 363032])
            ("scroll-error-top-bottom" variable nil nil [363202 363646])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363648 364711])
            ("put" code nil nil [364713 364755])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364757 365824])
            ("put" code nil nil [365826 365870])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365940 366223])
            ("put" code nil nil [366225 366264])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366266 366551])
            ("put" code nil nil [366553 366594])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [366598 366993])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366995 367679])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367681 368184])
            ("mouse-autoselect-window-timer" variable nil nil [368187 368277])
            ("mouse-autoselect-window-position-1" variable nil nil [368279 368393])
            ("mouse-autoselect-window-position" variable nil nil [368395 368506])
            ("mouse-autoselect-window-window" variable nil nil [368508 368609])
            ("mouse-autoselect-window-state" variable nil nil [368611 368908])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [368910 369681])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [369683 370511])
            ("mouse-autoselect-window-select" function nil nil [370513 374513])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [374515 377025])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [377027 377712])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [377781 379223])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "windows")) nil [379225 379834])
            ("window-adjust-process-window-size-smallest" function (:arguments ("_process" "windows")) nil [379836 380127])
            ("window-adjust-process-window-size-largest" function (:arguments ("_process" "windows")) nil [380129 380418])
            ("window--process-window-list" function nil nil [380420 381633])
            ("window--adjust-process-windows" function nil nil [381635 382331])
            ("add-hook" code nil nil [382333 382409])
            ("define-key" code nil nil [382500 382541])
            ("define-key" code nil nil [382542 382590])
            ("define-key" code nil nil [382591 382637])
            ("define-key" code nil nil [382638 382684])
            ("define-key" code nil nil [382685 382725])
            ("define-key" code nil nil [382726 382768])
            ("define-key" code nil nil [382769 382824])
            ("define-key" code nil nil [382825 382879])
            ("define-key" code nil nil [382880 382943])
            ("define-key" code nil nil [382944 382987])
            ("define-key" code nil nil [382988 383040]))          
      :file "window.el"
      :pointmax 383066
      :fsize 383069
      :lastmodtime '(23525 29521 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4837])
            ("setq-local" function (:arguments ("var" "val")) nil [4839 5086])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5088 5529])
            ("push" function (:arguments ("newelt" "place")) nil [5531 6125])
            ("pop" function (:arguments ("place")) nil [6127 6984])
            ("when" function (:arguments ("cond" "body")) nil [6986 7274])
            ("unless" function (:arguments ("cond" "body")) nil [7276 7562])
            ("dolist" function (:arguments ("spec" "body")) nil [7564 9024])
            ("dotimes" function (:arguments ("spec" "body")) nil [9026 10491])
            ("declare" function (:arguments ("_specs")) nil [10493 11068])
            ("ignore-errors" function (:arguments ("body")) nil [11070 11377])
            ("gensym-counter" variable nil nil [11408 11511])
            ("gensym" function (:arguments ("prefix")) nil [11513 11833])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11835 11983])
            ("error" function (:arguments ("args")) nil [12040 12556])
            ("user-error" function (:arguments ("format" "args")) nil [12558 13218])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13220 14133])
            ("frame-configuration-p" function (:arguments ("object")) nil [14247 14502])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14504 14881])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15075 15655])
            ("caar" function (:arguments ("x")) nil [15657 15784])
            ("cadr" function (:arguments ("x")) nil [15786 15913])
            ("cdar" function (:arguments ("x")) nil [15915 16042])
            ("cddr" function (:arguments ("x")) nil [16044 16171])
            ("caaar" function (:arguments ("x")) nil [16173 16324])
            ("caadr" function (:arguments ("x")) nil [16326 16477])
            ("cadar" function (:arguments ("x")) nil [16479 16630])
            ("caddr" function (:arguments ("x")) nil [16632 16783])
            ("cdaar" function (:arguments ("x")) nil [16785 16936])
            ("cdadr" function (:arguments ("x")) nil [16938 17089])
            ("cddar" function (:arguments ("x")) nil [17091 17242])
            ("cdddr" function (:arguments ("x")) nil [17244 17395])
            ("caaaar" function (:arguments ("x")) nil [17397 17568])
            ("caaadr" function (:arguments ("x")) nil [17570 17741])
            ("caadar" function (:arguments ("x")) nil [17743 17914])
            ("caaddr" function (:arguments ("x")) nil [17916 18087])
            ("cadaar" function (:arguments ("x")) nil [18089 18260])
            ("cadadr" function (:arguments ("x")) nil [18262 18433])
            ("caddar" function (:arguments ("x")) nil [18435 18606])
            ("cadddr" function (:arguments ("x")) nil [18608 18779])
            ("cdaaar" function (:arguments ("x")) nil [18781 18952])
            ("cdaadr" function (:arguments ("x")) nil [18954 19125])
            ("cdadar" function (:arguments ("x")) nil [19127 19298])
            ("cdaddr" function (:arguments ("x")) nil [19300 19471])
            ("cddaar" function (:arguments ("x")) nil [19473 19644])
            ("cddadr" function (:arguments ("x")) nil [19646 19817])
            ("cdddar" function (:arguments ("x")) nil [19819 19990])
            ("cddddr" function (:arguments ("x")) nil [19992 20163])
            ("last" function (:arguments ("list" "n")) nil [20165 20582])
            ("butlast" function (:arguments ("list" "n")) nil [20584 20812])
            ("nbutlast" function (:arguments ("list" "n")) nil [20814 21091])
            ("zerop" function (:arguments ("number")) nil [21093 21323])
            ("delete-dups" function (:arguments ("list")) nil [21325 22112])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22179 22637])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22639 24646])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24648 25465])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25505 26305])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26307 26629])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26631 26899])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26901 27336])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27338 27822])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [27824 28317])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28319 28913])
            ("remove" function (:arguments ("elt" "seq")) nil [28915 29268])
            ("remq" function (:arguments ("elt" "list")) nil [29270 29601])
            ("kbd" function (:arguments ("keys")) nil [29626 30066])
            ("put" code nil nil [30067 30085])
            ("undefined" function (:user-visible-flag t) nil [30087 30615])
            ("put" code nil nil [30710 30745])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [30747 31311])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31313 31965])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [31967 34028])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34030 34710])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [34712 35182])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35236 35836])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [35838 36304])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36306 38175])
            ("put" code nil nil [38177 38234])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38236 38611])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [38642 39562])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39564 40368])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40370 40566])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40568 40797])
            ("key-substitution-in-progress" variable nil nil [40853 40946])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [40948 42330])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42332 43995])
            ("global-map" variable nil nil [44144 44318])
            ("esc-map" variable nil nil [44320 44460])
            ("ctl-x-map" variable nil nil [44462 44597])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [44599 44677])
            ("defalias" code nil nil [44678 44716])
            ("define-key" code nil nil [44717 44759])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [44761 44833])
            ("defalias" code nil nil [44834 44872])
            ("define-key" code nil nil [44873 44915])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [44955 45010])
            ("listify-key-sequence" function (:arguments ("key")) nil [45012 45250])
            ("eventp" function (:arguments ("obj")) nil [45252 45453])
            ("event-modifiers" function (:arguments ("event")) nil [45455 46749])
            ("event-basic-type" function (:arguments ("event")) nil [46751 47519])
            ("mouse-movement-p" function (:arguments ("object")) nil [47521 47654])
            ("mouse-event-p" function (:arguments ("object")) nil [47656 47874])
            ("event-start" function (:arguments ("event")) nil [47876 49036])
            ("event-end" function (:arguments ("event")) nil [49038 49356])
            ("event-click-count" function (:arguments ("event")) nil [49358 49568])
            ("event-line-count" function (:arguments ("event")) nil [49570 49769])
            ("posnp" function (:arguments ("obj")) nil [49826 50474])
            ("posn-window" function (:arguments ("position")) nil [50508 50690])
            ("posn-area" function (:arguments ("position")) nil [50692 51016])
            ("posn-point" function (:arguments ("position")) nil [51018 51484])
            ("posn-set-point" function (:arguments ("position")) nil [51486 51806])
            ("posn-x-y" function (:arguments ("position")) nil [51808 52061])
            ("declare-function" code nil nil [52063 52129])
            ("posn-col-row" function (:arguments ("position")) nil [52131 53949])
            ("posn-actual-col-row" function (:arguments ("position")) nil [53951 54539])
            ("posn-timestamp" function (:arguments ("position")) nil [54541 54729])
            ("posn-string" function (:arguments ("position")) nil [54731 55090])
            ("posn-image" function (:arguments ("position")) nil [55092 55332])
            ("posn-object" function (:arguments ("position")) nil [55334 55703])
            ("posn-object-x-y" function (:arguments ("position")) nil [55705 55992])
            ("posn-object-width-height" function (:arguments ("position")) nil [55994 56254])
            ("make-obsolete" code nil nil [56297 56363])
            ("make-obsolete" code nil nil [56364 56413])
            ("make-obsolete" code nil nil [56428 56501])
            ("make-obsolete" code nil nil [56502 56575])
            ("make-obsolete" code nil nil [56576 56651])
            ("make-obsolete" code nil nil [56652 56725])
            ("make-obsolete" code nil nil [56726 56799])
            ("make-obsolete" code nil nil [56800 56875])
            ("log10" function (:arguments ("x")) nil [56877 56986])
            ("defalias" code nil nil [57034 57068])
            ("make-obsolete" code nil nil [57069 57123])
            ("defalias" code nil nil [57124 57160])
            ("make-obsolete" code nil nil [57161 57217])
            ("set-advertised-calling-convention" code nil nil [57219 57320])
            ("set-advertised-calling-convention" code nil nil [57321 57389])
            ("set-advertised-calling-convention" code nil nil [57390 57461])
            ("set-advertised-calling-convention" code nil nil [57462 57547])
            ("make-obsolete-variable" code nil nil [57610 57674])
            ("make-obsolete-variable" code nil nil [57675 57758])
            ("make-obsolete-variable" code nil nil [57759 57831])
            ("make-obsolete-variable" code nil nil [57832 57908])
            ("make-obsolete-variable" code nil nil [57909 57966])
            ("make-obsolete" code nil nil [57967 58023])
            ("make-obsolete" code nil nil [58024 58084])
            ("make-obsolete" code nil nil [58086 58140])
            ("make-obsolete" code nil nil [58141 58197])
            ("make-obsolete-variable" code nil nil [58199 58323])
            ("define-obsolete-variable-alias" code nil nil [58362 58449])
            ("define-obsolete-variable-alias" code nil nil [58451 58544])
            ("define-obsolete-variable-alias" code nil nil [58545 58638])
            ("make-obsolete-variable" code nil nil [58884 58948])
            ("make-obsolete-variable" code nil nil [58950 59008])
            ("defvaralias" code nil nil [59010 59067])
            ("defalias" code nil nil [59140 59184])
            ("defalias" code nil nil [59185 59229])
            ("defalias" code nil nil [59230 59263])
            ("defalias" code nil nil [59264 59297])
            ("defalias" code nil nil [59298 59334])
            ("defalias" code nil nil [59335 59370])
            ("defalias" code nil nil [59371 59397])
            ("defalias" code nil nil [59398 59424])
            ("defalias" code nil nil [59425 59447])
            ("defalias" code nil nil [59473 59512])
            ("defalias" code nil nil [59513 59567])
            ("defalias" code nil nil [59568 59638])
            ("defalias" code nil nil [59639 59711])
            ("defalias" code nil nil [59712 59755])
            ("defalias" code nil nil [59756 59800])
            ("defalias" code nil nil [59801 59834])
            ("defalias" code nil nil [59835 59868])
            ("defalias" code nil nil [59900 59943])
            ("defalias" code nil nil [59944 59993])
            ("defalias" code nil nil [59995 60048])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60087 62216])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62218 63886])
            ("letrec" function (:arguments ("binders" "body")) nil [63888 64517])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [64519 65929])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [65931 67770])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [67772 71139])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71142 72461])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [72463 73771])
            ("delay-mode-hooks" variable nil nil [73793 73887])
            ("delayed-mode-hooks" variable nil nil [73888 73969])
            ("make-variable-buffer-local" code nil nil [73970 74018])
            ("put" code nil nil [74019 74061])
            ("delayed-after-hook-functions" variable nil nil [74063 74206])
            ("make-variable-buffer-local" code nil nil [74207 74265])
            ("change-major-mode-after-body-hook" variable nil nil [74267 74381])
            ("after-change-major-mode-hook" variable nil nil [74383 74485])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [74487 75840])
            ("delay-mode-hooks" function (:arguments ("body")) nil [75842 76241])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76302 76643])
            ("derived-mode-p" function (:arguments ("modes")) nil [76645 76876])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77067 77260])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77262 79947])
            ("autoloadp" function (:arguments ("object")) nil [79969 80071])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [80555 81318])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81320 82816])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [82818 84224])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84249 85574])
            ("process-lines" function (:arguments ("program" "args")) nil [85576 86181])
            ("process-live-p" function (:arguments ("process")) nil [86183 86496])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [86516 86986])
            ("process-kill-buffer-query-function" function nil nil [86988 87407])
            ("add-hook" code nil nil [87409 87484])
            ("process-get" function (:arguments ("process" "propname")) nil [87515 87727])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [87729 87968])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88008 88058])
            ("read-key-delay" variable (:default-value 0.01) nil [88060 88088])
            ("read-key" function (:arguments ("prompt")) nil [88137 91361])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91363 91700])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [91702 94438])
            ("read-number" function (:arguments ("prompt" "default")) nil [94440 95510])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [95512 97251])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97253 100587])
            ("declare-function" code nil nil [100627 100706])
            ("y-or-n-p" function (:arguments ("prompt")) nil [100708 104269])
            ("atomic-change-group" function (:arguments ("body")) nil [104300 105506])
            ("prepare-change-group" function (:arguments ("buffer")) nil [105508 106984])
            ("activate-change-group" function (:arguments ("handle")) nil [106986 107224])
            ("accept-change-group" function (:arguments ("handle")) nil [107226 107517])
            ("cancel-change-group" function (:arguments ("handle")) nil [107519 108910])
            ("define-obsolete-function-alias" code nil nil [108968 109050])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109052 110604])
            ("copy-overlay" function (:arguments ("o")) nil [110633 111207])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111209 112217])
            ("suspend-hook" variable nil nil [112239 112323])
            ("suspend-resume-hook" variable nil nil [112325 112423])
            ("temp-buffer-show-hook" variable nil nil [112425 112641])
            ("temp-buffer-setup-hook" variable nil nil [112643 112874])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [112876 113251])
            ("buffer-narrowed-p" function nil nil [113284 113418])
            ("find-tag-default-bounds" function nil nil [113420 113674])
            ("find-tag-default" function nil nil [113676 113942])
            ("find-tag-default-as-regexp" function nil nil [113944 114379])
            ("find-tag-default-as-symbol-regexp" function nil nil [114381 114940])
            ("play-sound" function (:arguments ("sound")) nil [114942 115761])
            ("declare-function" code nil nil [115763 115819])
            ("shell-quote-argument" function (:arguments ("argument")) nil [115821 118155])
            ("string-to-list" function (:arguments ("string")) nil [118157 118256])
            ("string-to-vector" function (:arguments ("string")) nil [118258 118358])
            ("string-or-null-p" function (:arguments ("object")) nil [118360 118497])
            ("booleanp" function (:arguments ("object")) nil [118499 118657])
            ("special-form-p" function (:arguments ("object")) nil [118659 118902])
            ("macrop" function (:arguments ("object")) nil [118904 119134])
            ("field-at-pos" function (:arguments ("pos")) nil [119136 119406])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119408 119771])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [119773 120583])
            ("yank-handled-properties" variable nil nil [120690 120722])
            ("yank-excluded-properties" variable nil nil [120723 120756])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [120758 121631])
            ("yank-undo-function" variable nil nil [121633 121660])
            ("insert-for-yank" function (:arguments ("string")) nil [121662 122143])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122145 123177])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123179 123664])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [123666 124352])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124354 124666])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [124795 125233])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125271 126255])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126257 126749])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [126751 128392])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128394 128943])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [128945 130135])
            ("track-mouse" function (:arguments ("body")) nil [130190 130496])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [130498 130886])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [130888 131408])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131410 131970])
            ("with-selected-window" function (:arguments ("window" "body")) nil [131972 133110])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133112 133853])
            ("save-window-excursion" function (:arguments ("body")) nil [133855 134674])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [134676 136071])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136124 138577])
            ("with-temp-file" function (:arguments ("file" "body")) nil [138579 139274])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139276 140203])
            ("with-temp-buffer" function (:arguments ("body")) nil [140205 140764])
            ("with-silent-modifications" function (:arguments ("body")) nil [140766 141756])
            ("with-output-to-string" function (:arguments ("body")) nil [141758 142203])
            ("with-local-quit" function (:arguments ("body")) nil [142205 142960])
            ("setq" code nil nil [143022 143154])
            ("while-no-input" function (:arguments ("body")) nil [143156 143656])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [143658 144211])
            ("define-obsolete-function-alias" code nil nil [144213 144308])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144310 145247])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145249 145944])
            ("with-case-table" function (:arguments ("table" "body")) nil [145946 146467])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [146469 146894])
            ("save-match-data-internal" variable nil nil [146928 146961])
            ("save-match-data" function (:arguments ("body")) nil [147219 147899])
            ("match-string" function (:arguments ("num" "string")) nil [147901 148546])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [148548 149272])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149275 149924])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [149927 151198])
            ("looking-at-p" function (:arguments ("regexp")) nil [151200 151378])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151380 151600])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [151602 153512])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [153534 153887])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154149 157265])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157267 157947])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [157949 158585])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [158619 159023])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159025 161706])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [161709 162104])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162106 162515])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [162517 163300])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163302 163537])
            ("load-history-regexp" function (:arguments ("file")) nil [163578 164214])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164216 164652])
            ("put" code nil nil [164654 164700])
            ("eval-after-load" function (:arguments ("file" "form")) nil [164701 168583])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [168585 168960])
            ("after-load-functions" variable nil nil [168962 169135])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169137 170704])
            ("eval-next-after-load" function (:arguments ("file")) nil [170706 171006])
            ("display-delayed-warnings" function nil nil [171010 171277])
            ("collapse-delayed-warnings" function nil nil [171279 171958])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172078 172418])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [172420 172675])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [172704 173047])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173049 173294])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173318 173954])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [173956 174276])
            ("syntax-after" function (:arguments ("pos")) nil [174278 174651])
            ("syntax-class" function (:arguments ("syntax")) nil [174653 175005])
            ("word-move-empty-char-table" variable nil nil [175036 175206])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175208 175946])
            ("backward-word-strictly" function (:arguments ("arg")) nil [175948 176530])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [176548 177131])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177146 177695])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177716 178198])
            ("text-clone--maintaining" variable nil nil [178220 178256])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178258 180324])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180326 182574])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [182682 184260])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184264 184660])
            ("backtrace" function nil nil [184662 184933])
            ("backtrace-frames" function (:arguments ("base")) nil [184935 185288])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185290 186090])
            ("called-interactively-p-functions" variable nil nil [186094 186511])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [186513 186598])
            ("called-interactively-p" function (:arguments ("kind")) nil [186600 190781])
            ("interactive-p" function nil nil [190783 191866])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [191868 192213])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192215 192523])
            ("define-obsolete-function-alias" code nil nil [192525 192612])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [192614 195390])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [195973 196740])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [196742 198481])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [198483 198982])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [198984 199101])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199103 200779])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [200781 200936])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [200938 202042])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202079 202238])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202241 203775])
            ("version-to-list" function (:arguments ("ver")) nil [203778 206561])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [206563 207394])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207397 208196])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208199 208984])
            ("version-list-not-zero" function (:arguments ("lst")) nil [208986 209296])
            ("version<" function (:arguments ("v1" "v2")) nil [209299 209803])
            ("version<=" function (:arguments ("v1" "v2")) nil [209805 210323])
            ("version=" function (:arguments ("v1" "v2")) nil [210325 210819])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [210821 211198])
            ("package--description-file" function (:arguments ("dir")) nil [211200 211531])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [211556 211906])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [211921 212622])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [212624 212846])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [212848 212910])
            ("when" code nil nil [213062 213187])
            ("unmsys--file-name" function (:arguments ("file")) nil [213320 213807]))          
      :file "subr.el"
      :pointmax 213832
      :fsize 213832
      :lastmodtime '(23525 29518 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("whitespace" customgroup (:user-visible-flag t) nil [9372 9561])
            ("whitespace-style" variable (:default-value (quote (face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))) nil [9564 16115])
            ("whitespace-space" variable (:default-value (quote whitespace-space)) nil [16117 16259])
            ("make-obsolete-variable" code nil nil [16260 16333])
            ("whitespace-space" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey20" :foreground "darkgray") (((class color) (background light)) :background "LightYellow" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [16336 16633])
            ("whitespace-hspace" variable (:default-value (quote whitespace-hspace)) nil [16636 16785])
            ("make-obsolete-variable" code nil nil [16786 16860])
            ("whitespace-hspace" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey24" :foreground "darkgray") (((class color) (background light)) :background "LemonChiffon3" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [16862 17187])
            ("whitespace-tab" variable (:default-value (quote whitespace-tab)) nil [17190 17324])
            ("make-obsolete-variable" code nil nil [17325 17443])
            ("whitespace-tab" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey22" :foreground "darkgray") (((class color) (background light)) :background "beige" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [17445 17728])
            ("whitespace-newline" variable (:default-value (quote whitespace-newline)) nil [17731 17948])
            ("make-obsolete-variable" code nil nil [17949 18024])
            ("whitespace-newline" variable
               (:default-value (quote ((default :weight normal) (((class color) (background dark)) :foreground "darkgray") (((class color) (min-colors 88) (background light)) :foreground "lightgray") (((class color) (background light)) :foreground "brown") (t :underline t)))
                :type "face")
                nil [18026 18549])
            ("whitespace-trailing" variable (:default-value (quote whitespace-trailing)) nil [18552 18712])
            ("make-obsolete-variable" code nil nil [18713 18789])
            ("whitespace-trailing" variable
               (:default-value (quote ((default :weight bold) (((class mono)) :inverse-video t :underline t) (t :background "red1" :foreground "yellow")))
                :type "face")
                nil [18791 19036])
            ("whitespace-line" variable (:default-value (quote whitespace-line)) nil [19039 19216])
            ("make-obsolete-variable" code nil nil [19217 19289])
            ("whitespace-line" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "gray20" :foreground "violet")))
                :type "face")
                nil [19291 19526])
            ("whitespace-space-before-tab" variable (:default-value (quote whitespace-space-before-tab)) nil [19529 19715])
            ("make-obsolete-variable" code nil nil [19716 19824])
            ("whitespace-space-before-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "DarkOrange" :foreground "firebrick")))
                :type "face")
                nil [19826 20052])
            ("whitespace-indentation" variable (:default-value (quote whitespace-indentation)) nil [20055 20257])
            ("make-obsolete-variable" code nil nil [20258 20337])
            ("whitespace-indentation" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [20339 20586])
            ("whitespace-big-indent" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "red" :foreground "firebrick")))
                :type "face")
                nil [20588 20799])
            ("whitespace-empty" variable (:default-value (quote whitespace-empty)) nil [20802 20983])
            ("make-obsolete-variable" code nil nil [20984 21057])
            ("whitespace-empty" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [21059 21298])
            ("whitespace-space-after-tab" variable (:default-value (quote whitespace-space-after-tab)) nil [21301 21503])
            ("make-obsolete-variable" code nil nil [21504 21611])
            ("whitespace-space-after-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [21613 21853])
            ("whitespace-hspace-regexp" variable (:default-value "\\(\302\240+\\)") nil [21856 22504])
            ("whitespace-space-regexp" variable (:default-value "\\( +\\)") nil [22507 23200])
            ("whitespace-tab-regexp" variable (:default-value "\\(	+\\)") nil [23203 23889])
            ("whitespace-trailing-regexp" variable (:default-value "\\([	 \302\240]+\\)$") nil [23892 24345])
            ("whitespace-space-before-tab-regexp" variable (:default-value "\\( +\\)\\(	+\\)") nil [24348 24630])
            ("whitespace-indentation-regexp" variable (:default-value (quote ("^	*\\(\\( \\{%d\\}\\)+\\)[^
	]" . "^ *\\(	+\\)[^
]"))) nil [24633 25140])
            ("whitespace-empty-at-bob-regexp" variable (:default-value "\\`\\(\\([ 	]*
\\)+\\)") nil [25143 25400])
            ("whitespace-empty-at-eob-regexp" variable (:default-value "^\\([ 	
]+\\)\\'") nil [25403 25642])
            ("whitespace-space-after-tab-regexp" variable (:default-value (quote ("	+\\(\\( \\{%d,\\}\\)+\\)" . "\\(	+\\) \\{%d,\\}"))) nil [25645 26123])
            ("whitespace-big-indent-regexp" variable (:default-value "^\\(\\(?:	\\{4,\\}\\| \\{32,\\}\\)[	 ]*\\)") nil [26125 26657])
            ("whitespace-line-column" variable (:default-value 80) nil [26660 27053])
            ("whitespace-display-mappings" variable (:default-value (quote ((space-mark 32 [183] [46]) (space-mark 160 [164] [95]) (newline-mark 10 [36 10]) (tab-mark 9 [187 9] [92 9])))) nil [27113 29233])
            ("whitespace-global-modes" variable (:default-value t) nil [29236 30143])
            ("whitespace-action" variable nil nil [30146 31386])
            ("define-minor-mode" code nil nil [31510 32214])
            ("define-minor-mode" code nil nil [32232 33105])
            ("define-minor-mode" code nil nil [33230 34526])
            ("whitespace-enable-predicate" variable (:default-value (lambda nil (and (cond ((eq whitespace-global-modes t)) ((listp whitespace-global-modes) (if (eq (car-safe whitespace-global-modes) (quote not)) (not (memq major-mode (cdr whitespace-global-modes))) (memq major-mode whitespace-global-modes))) (t nil)) (not noninteractive) (not (eq (aref (buffer-name) 0) 32)) (or (not (eq (aref (buffer-name) 0) 42)) (string= (buffer-name) "*scratch*"))))) nil [34528 35546])
            ("whitespace-turn-on-if-enabled" function nil nil [35548 35660])
            ("define-minor-mode" code nil nil [35677 36644])
            ("whitespace-style-value-list" variable
               (:constant-flag t
                :default-value (quote (face tabs spaces trailing lines lines-tail newline empty indentation indentation::tab indentation::space big-indent space-after-tab space-after-tab::tab space-after-tab::space space-before-tab space-before-tab::tab space-before-tab::space help-newline tab-mark space-mark newline-mark)))
                nil [36749 37265])
            ("whitespace-toggle-option-alist" variable
               (:constant-flag t
                :default-value (quote ((102 . face) (116 . tabs) (115 . spaces) (114 . trailing) (108 . lines) (76 . lines-tail) (110 . newline) (101 . empty) (9 . indentation) (73 . indentation::tab) (105 . indentation::space) (20 . big-indent) (1 . space-after-tab) (65 . space-after-tab::tab) (97 . space-after-tab::space) (2 . space-before-tab) (66 . space-before-tab::tab) (98 . space-before-tab::space) (84 . tab-mark) (83 . space-mark) (78 . newline-mark) (120 . whitespace-style))))
                nil [37268 38131])
            ("whitespace-active-style" variable nil nil [38134 38221])
            ("whitespace-point" variable (:default-value (point)) nil [38223 38361])
            ("defvar-local" code nil nil [38362 38464])
            ("whitespace-font-lock-refontify" variable nil nil [38466 38626])
            ("whitespace-bob-marker" variable nil nil [38628 38770])
            ("whitespace-eob-marker" variable nil nil [38772 38914])
            ("whitespace-buffer-changed" variable nil nil [38916 39096])
            ("whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39114 42084])
            ("whitespace-toggle-style" variable nil nil [42087 42179])
            ("global-whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [42197 45251])
            ("whitespace-cleanup" function (:user-visible-flag t) nil [45372 48830])
            ("whitespace-cleanup-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [48848 53934])
            ("whitespace-replace-action" function (:arguments ("action" "rstart" "rend" "regexp" "index")) nil [53964 54351])
            ("whitespace-regexp" function (:arguments ("regexp" "kind")) nil [54455 54737])
            ("whitespace-indentation-regexp" function (:arguments ("kind")) nil [54740 54918])
            ("whitespace-space-after-tab-regexp" function (:arguments ("kind")) nil [54921 55111])
            ("whitespace-report-list" variable
               (:constant-flag t
                :default-value (list (cons (quote empty) whitespace-empty-at-bob-regexp) (cons (quote empty) whitespace-empty-at-eob-regexp) (cons (quote trailing) whitespace-trailing-regexp) (cons (quote indentation) nil) (cons (quote indentation::tab) nil) (cons (quote indentation::space) nil) (cons (quote space-before-tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::space) whitespace-space-before-tab-regexp) (cons (quote space-after-tab) nil) (cons (quote space-after-tab::tab) nil) (cons (quote space-after-tab::space) nil)))
                nil [55114 55861])
            ("whitespace-report-text" variable
               (:constant-flag t
                :default-value (quote (" Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  >= `tab-width' SPACEs at beginning of line
 indentation::tab         []     []  >= `tab-width' SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  >= `tab-width' SPACEs after TAB
 space-after-tab::tab     []     []  >= `tab-width' SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  >= `tab-width' SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

" . " Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  TABs at beginning of line
 indentation::tab         []     []  >= `tab-width' SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  >= `tab-width' SPACEs after TAB
 space-after-tab::tab     []     []  >= `tab-width' SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  >= `tab-width' SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

")))
                nil [55864 58074])
            ("whitespace-report-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Report*")
                nil [58077 58188])
            ("whitespace-report" function
               (:user-visible-flag t
                :arguments ("force" "report-if-bogus"))
                nil [58206 58495])
            ("whitespace-report-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "force" "report-if-bogus"))
                nil [58513 63194])
            ("whitespace-font-lock-keywords" variable nil nil [63295 63416])
            ("whitespace-help-text" variable
               (:constant-flag t
                :default-value " Whitespace Toggle Options                  | scroll up  :  SPC   or > |
                                            | scroll down:  M-SPC or < |
 FACES                                      \\__________________________/
 []  f   - toggle face visualization
 []  t   - toggle TAB visualization
 []  s   - toggle SPACE and HARD SPACE visualization
 []  r   - toggle trailing blanks visualization
 []  l   - toggle \"long lines\" visualization
 []  L   - toggle \"long lines\" tail visualization
 []  n   - toggle NEWLINE visualization
 []  e   - toggle empty line at bob and/or eob visualization
 []  C-i - toggle indentation SPACEs visualization (via `indent-tabs-mode')
 []  I   - toggle indentation SPACEs visualization
 []  i   - toggle indentation TABs visualization
 []  C-t - toggle big indentation visualization
 []  C-a - toggle SPACEs after TAB visualization (via `indent-tabs-mode')
 []  A   - toggle SPACEs after TAB: SPACEs visualization
 []  a   - toggle SPACEs after TAB: TABs visualization
 []  C-b - toggle SPACEs before TAB visualization (via `indent-tabs-mode')
 []  B   - toggle SPACEs before TAB: SPACEs visualization
 []  b   - toggle SPACEs before TAB: TABs visualization

 DISPLAY TABLE
 []  T - toggle TAB visualization
 []  S - toggle SPACE and HARD SPACE visualization
 []  N - toggle NEWLINE visualization

      x - restore `whitespace-style' value

      ? - display this text

")
                nil [63419 64905])
            ("whitespace-help-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Toggle Options*")
                nil [64908 65027])
            ("whitespace-insert-value" function (:arguments ("value")) nil [65030 65187])
            ("whitespace-mark-x" function (:arguments ("nchars" "condition")) nil [65190 65362])
            ("whitespace-insert-option-mark" function (:arguments ("the-list" "the-value")) nil [65365 65683])
            ("whitespace-help-on" function (:arguments ("style")) nil [65686 66098])
            ("whitespace-display-window" function (:arguments ("buffer")) nil [66101 66525])
            ("whitespace-kill-buffer" function (:arguments ("buffer-name")) nil [66528 66751])
            ("whitespace-help-off" function nil nil [66754 66906])
            ("whitespace-help-scroll" function (:arguments ("up")) nil [66909 67323])
            ("whitespace-interactive-char" function (:arguments ("local-p")) nil [67326 69787])
            ("whitespace-toggle-list" function (:arguments ("local-p" "arg" "the-list")) nil [69824 70723])
            ("whitespace-display-table" variable nil nil [70726 70803])
            ("whitespace-display-table-was-local" variable nil nil [70805 70927])
            ("whitespace-turn-on" function nil nil [70929 71588])
            ("whitespace-turn-off" function nil nil [71591 71822])
            ("whitespace-style-face-p" function nil nil [71825 72986])
            ("whitespace-color-on" function nil nil [72989 78177])
            ("whitespace-color-off" function nil nil [78180 78583])
            ("whitespace-point--used" function (:arguments ("start" "end")) nil [78585 78911])
            ("whitespace-point--flush-used" function (:arguments ("limit")) nil [78913 79445])
            ("whitespace-trailing-regexp" function (:arguments ("limit")) nil [79447 79879])
            ("whitespace-empty-at-bob-regexp" function (:arguments ("limit")) nil [79882 81070])
            ("whitespace-looking-back" function (:arguments ("regexp" "limit")) nil [81073 81261])
            ("whitespace-empty-at-eob-regexp" function (:arguments ("limit")) nil [81264 82685])
            ("whitespace-buffer-changed" function (:arguments ("_beg" "_end")) nil [82688 82821])
            ("whitespace-post-command-hook" function nil nil [82824 85340])
            ("whitespace-style-mark-p" function nil nil [85473 85724])
            ("whitespace-char-valid-p" function (:arguments ("char")) nil [85727 85850])
            ("whitespace-display-vector-p" function (:arguments ("vec")) nil [85853 86107])
            ("whitespace-display-char-on" function nil nil [86110 87716])
            ("whitespace-display-char-off" function nil nil [87719 88013])
            ("whitespace-action-when-on" function nil nil [88100 88343])
            ("whitespace-write-file-hook" function nil nil [88346 88726])
            ("whitespace-warn-read-only" function (:arguments ("msg")) nil [88760 88945])
            ("whitespace-unload-function" function nil nil [89022 89290])
            ("whitespace" package nil nil [89327 89348])
            ("run-hooks" code nil nil [89351 89384]))          
      :file "whitespace.el"
      :pointmax 89415
      :fsize 89423
      :lastmodtime '(23525 29521 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1924 8904])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8906 9236])
            ("menu-bar-last-search-type" variable nil nil [9268 9376])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9378 9771])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9773 10170])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function (:user-visible-flag t) nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function (:user-visible-flag t) nil [28438 28737])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28739 30908])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31017 31171])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31173 31387])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31389 31596])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31598 31808])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31810 31926])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32210 34652])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34654 34834])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34836 35061])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35063 35274])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35276 35461])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35463 35645])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35647 35817])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35819 38231])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38233 38384])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38386 38572])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38574 38771])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38773 38968])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38970 39141])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39143 41167])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41169 41325])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41327 41480])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41482 41605])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote right)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote left)))))) (bindings--define-key menu [none] (quote (menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil)))) menu)) nil [41607 43159])
            ("menu-bar-frame-for-menubar" function nil nil [43161 43344])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [43346 43466])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43468 43616])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [43617 43769])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [43770 43931])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [43932 44096])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44097 44255])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44256 44423])
            ("when" code nil nil [44425 47199])
            ("display-line-numbers-type" variable nil nil [47201 47235])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47236 47438])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] (\` (menu-item "Visual Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote visual)) (message "Visual line numbers enabled"))) :help "Enable visual line numbers" :button (:radio eq display-line-numbers (quote visual)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [relative] (\` (menu-item "Relative Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote relative)) (message "Relative line numbers enabled"))) :help "Enable relative line numbers" :button (:radio eq display-line-numbers (quote relative)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [absolute] (\` (menu-item "Absolute Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled"))) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [none] (\` (menu-item "No Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled"))) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47440 49673])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] (\` (menu-item "Line Numbers for All Lines" (\, menu-bar-showhide-line-numbers-menu)))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll Bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool Bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [49675 53686])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [53688 55785])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55787 57733])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57735 63054])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [63085 65024])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [65026 67367])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [67369 67496])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Servers" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [67498 71560])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [71589 74429])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [74431 74554])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [74556 74692])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [74694 74833])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [74835 75006])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [75008 75189])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [75191 77412])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [77414 78688])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [78690 78838])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [78840 82588])
            ("bindings--define-key" code nil nil [82590 82677])
            ("bindings--define-key" code nil nil [82678 82772])
            ("bindings--define-key" code nil nil [82773 82866])
            ("bindings--define-key" code nil nil [82867 82951])
            ("bindings--define-key" code nil nil [82952 83036])
            ("bindings--define-key" code nil nil [83037 83137])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [83139 83443])
            ("menu-bar-non-minibuffer-window-p" function nil nil [83445 83891])
            ("kill-this-buffer" function (:user-visible-flag t) nil [83893 84437])
            ("kill-this-buffer-enabled-p" function nil nil [84439 84907])
            ("put" code nil nil [84909 84970])
            ("delete-frame-enabled-p" function nil nil [85045 85330])
            ("yank-menu-length" variable (:default-value 20) nil [85332 85443])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [85445 86436])
            ("put" code nil nil [86438 86484])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [86485 86717])
            ("buffers-menu-max-size" variable (:default-value 10) nil [86739 87083])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [87085 87434])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [87436 88180])
            ("buffers-menu-show-status" variable (:default-value t) nil [88182 88555])
            ("list-buffers-directory" variable nil nil [88557 88666])
            ("make-variable-buffer-local" code nil nil [88667 88719])
            ("menu-bar-select-buffer" function nil nil [88721 88810])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88812 88923])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88925 89795])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89864 89914])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [89916 90104])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [90106 90534])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90536 94422])
            ("add-hook" code nil nil [94424 94481])
            ("menu-bar-update-buffers" code nil nil [94483 94508])
            ("dolist" code nil nil [95131 95427])
            ("let" code nil nil [95429 95918])
            ("let" code nil nil [95920 96989])
            ("define-minor-mode" code nil nil [96992 98356])
            ("put" code nil nil [98800 98841])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98843 99249])
            ("declare-function" code nil nil [99251 99316])
            ("declare-function" code nil nil [99317 99386])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [99388 99602])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [99604 102614])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [102616 103364])
            ("tty-menu-open-use-tmm" variable nil nil [103366 103827])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [103829 103980])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [103982 105550])
            ("global-set-key" code nil nil [105552 105589])
            ("buffer-menu-open" function (:user-visible-flag t) nil [105591 105816])
            ("global-set-key" code nil nil [105818 105860])
            ("mouse-buffer-menu-keymap" function nil nil [105862 106189])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [106191 109736])
            ("menu-bar" package nil nil [109738 109757]))          
      :file "menu-bar.el"
      :pointmax 109785
      :fsize 109784
      :lastmodtime '(23525 29513 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6230])
            ("make-variable-buffer-local" code nil nil [6231 6278])
            ("put" code nil nil [6279 6322])
            ("find-file-existing-other-name" variable (:default-value t) nil [6324 6617])
            ("find-file-visit-truename" variable nil nil [6619 6991])
            ("put" code nil nil [6992 7054])
            ("revert-without-query" variable nil nil [7056 7421])
            ("buffer-file-number" variable nil nil [7423 7692])
            ("make-variable-buffer-local" code nil nil [7693 7741])
            ("put" code nil nil [7742 7786])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7788 7933])
            ("buffer-file-read-only" variable nil nil [7935 8025])
            ("make-variable-buffer-local" code nil nil [8026 8077])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8079 8523])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8591 8660])
            ("declare-function" code nil nil [8662 8712])
            ("declare-function" code nil nil [8713 8762])
            ("declare-function" code nil nil [8763 8849])
            ("declare-function" code nil nil [8850 8917])
            ("declare-function" code nil nil [8918 8990])
            ("declare-function" code nil nil [8991 9047])
            ("declare-function" code nil nil [9048 9107])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9109 9782])
            ("file-precious-flag" variable nil nil [9784 10624])
            ("break-hardlink-on-save" variable nil nil [10626 11381])
            ("version-control" variable nil nil [11383 11740])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11742 11886])
            ("put" code nil nil [11888 11967])
            ("dired-kept-versions" variable (:default-value 2) nil [11969 12109])
            ("delete-old-versions" variable nil nil [12111 12377])
            ("kept-old-versions" variable (:default-value 2) nil [12379 12518])
            ("put" code nil nil [12519 12574])
            ("kept-new-versions" variable (:default-value 2) nil [12576 12765])
            ("put" code nil nil [12766 12821])
            ("require-final-newline" variable nil nil [12823 13594])
            ("mode-require-final-newline" variable (:default-value t) nil [13596 14731])
            ("auto-save-default" variable (:default-value t) nil [14733 14875])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14877 16305])
            ("auto-save--timer" variable nil nil [16307 16374])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16376 16857])
            ("define-minor-mode" code nil nil [16859 17831])
            ("make-obsolete-variable" code nil nil [18026 18145])
            ("save-abbrevs" variable (:default-value t) nil [18147 18358])
            ("find-file-run-dired" variable (:default-value t) nil [18360 18557])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18559 18887])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [18948 19276])
            ("define-obsolete-variable-alias" code nil nil [19384 19485])
            ("find-file-not-found-functions" variable nil nil [19486 19787])
            ("define-obsolete-variable-alias" code nil nil [19885 19957])
            ("find-file-hook" variable nil nil [19958 20235])
            ("define-obsolete-variable-alias" code nil nil [20237 20316])
            ("write-file-functions" variable nil nil [20317 21121])
            ("put" code nil nil [21122 21168])
            ("local-write-file-hooks" variable nil nil [21170 21205])
            ("make-variable-buffer-local" code nil nil [21206 21258])
            ("put" code nil nil [21259 21307])
            ("make-obsolete-variable" code nil nil [21308 21385])
            ("define-obsolete-variable-alias" code nil nil [21387 21478])
            ("write-contents-functions" variable nil nil [21479 22366])
            ("make-variable-buffer-local" code nil nil [22367 22421])
            ("enable-local-variables" variable (:default-value t) nil [22423 23675])
            ("enable-dir-local-variables" variable (:default-value t) nil [23677 23898])
            ("local-enable-local-variables" variable (:default-value t) nil [25261 25738])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25740 26131])
            ("view-read-only" variable nil nil [26133 26483])
            ("file-name-history" variable nil nil [26485 26668])
            ("save-silently" variable nil nil [26670 26825])
            ("put" code nil nil [26829 26883])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [26884 27490])
            ("declare-function" code nil nil [27492 27564])
            ("declare-function" code nil nil [27565 27637])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27639 28795])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [28797 29918])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [29922 30190])
            ("cd-path" variable nil nil [30192 30322])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30324 30943])
            ("cd-absolute" function (:arguments ("dir")) nil [30945 31850])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [31852 33679])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [33681 35076])
            ("module-file-suffix" variable nil nil [35078 35105])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35107 35575])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [35577 36954])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [36956 39918])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [39920 40328])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40330 40934])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40936 42294])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42296 42498])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42500 44186])
            ("executable-find" function (:arguments ("command")) nil [44189 44497])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44499 45194])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45196 46948])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47247 47966])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [47968 49187])
            ("file-local-name" function (:arguments ("file")) nil [49189 49431])
            ("file-local-copy" function (:arguments ("file")) nil [49433 49822])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [49824 50105])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50107 50886])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [50888 55724])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [55726 57147])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57279 58396])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [58398 58829])
            ("temporary-file-directory" function nil nil [58831 59607])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [59609 60662])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [60664 61604])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [61606 62443])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [62445 64682])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [64685 65298])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65300 65741])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [65743 66986])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [66988 67102])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67104 68818])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68820 70202])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70204 71580])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [71582 72017])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72019 72444])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [72446 72827])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [72829 73280])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73282 73728])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73730 74679])
            ("kill-buffer-hook" variable nil nil [74740 74980])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74982 78035])
            ("create-file-buffer" function (:arguments ("filename")) nil [78160 78840])
            ("generate-new-buffer" function (:arguments ("name")) nil [78842 79047])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79049 79201])
            ("make-obsolete-variable" code nil nil [79202 79279])
            ("abbreviated-home-dir" variable nil nil [79281 79455])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [79457 83497])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [83499 85426])
            ("find-file-wildcards" variable (:default-value t) nil [85429 85676])
            ("find-file-suppress-same-file-warnings" variable nil nil [85678 86004])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86006 86285])
            ("out-of-memory-warning-percentage" variable nil nil [86287 86670])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [86672 87164])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87166 88004])
            ("files--message" function (:arguments ("format" "args")) nil [88006 88273])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88275 95343])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [95345 97839])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [97842 98863])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [98865 99557])
            ("insert-file-literally" function (:arguments ("filename")) nil [99559 100042])
            ("find-file-literally" variable nil nil [100044 100251])
            ("put" code nil nil [100252 100297])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100299 101628])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [101631 104971])
            ("define-obsolete-function-alias" code nil nil [104973 105048])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105050 107025])
            ("auto-mode-case-fold" variable (:default-value t) nil [107027 107465])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [107467 118991])
            ("put" code nil nil [118992 119038])
            ("conf-mode-maybe" function nil nil [119040 119290])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [119292 120687])
            ("define-obsolete-variable-alias" code nil nil [120689 120802])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121001 121861])
            ("define-obsolete-variable-alias" code nil nil [121863 121973])
            ("inhibit-local-variables-suffixes" variable nil nil [121975 122251])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [122323 122429])
            ("inhibit-local-variables-p" function nil nil [122431 123241])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123243 123761])
            ("magic-mode-alist" variable nil nil [123763 124297])
            ("put" code nil nil [124298 124345])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [124347 125890])
            ("put" code nil nil [125891 125947])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [125949 126091])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126093 133464])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [133717 134124])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134126 134392])
            ("set-auto-mode-1" function nil nil [134394 135899])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [135937 136143])
            ("put" code nil nil [136144 136198])
            ("hack-local-variables-hook" variable nil nil [136200 136433])
            ("safe-local-variable-values" variable nil nil [136435 136695])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [136697 137359])
            ("mapc" code nil nil [137387 138004])
            ("dolist" code nil nil [138646 139334])
            ("put" code nil nil [139336 139450])
            ("put" code nil nil [139452 139498])
            ("file-local-variables-alist" variable nil nil [139500 139855])
            ("make-variable-buffer-local" code nil nil [139856 139912])
            ("put" code nil nil [139913 139965])
            ("dir-local-variables-alist" variable nil nil [139967 140349])
            ("make-variable-buffer-local" code nil nil [140350 140405])
            ("before-hack-local-variables-hook" variable nil nil [140407 140825])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [140827 143697])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [143699 143786])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [143788 147066])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147068 149554])
            ("hack-local-variables--warned-lexical" variable nil nil [149615 149664])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [149666 156209])
            ("hack-local-variables-apply" function nil nil [156211 157012])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157014 157702])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [157704 158607])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [158609 158713])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [158715 158903])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [158905 160725])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [160727 161159])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [161161 162074])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [162140 162255])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [162257 162833])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [162835 162968])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [162970 163615])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [163617 165788])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [165790 166554])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [166556 167931])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [167933 168631])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [168633 169563])
            ("dir-locals-find-file" function (:arguments ("file")) nil [169565 172692])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [172694 173998])
            ("define-obsolete-function-alias" code nil nil [174000 174094])
            ("enable-remote-dir-locals" variable nil nil [174096 174262])
            ("hack-dir-local-variables--warned-coding" variable nil nil [174264 174316])
            ("hack-dir-local-variables" function nil nil [174318 175935])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [175937 176243])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [176247 176682])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [176684 181773])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [181775 183815])
            ("file-extended-attributes" function (:arguments ("filename")) nil [183818 184132])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [184134 184736])
            ("backup-buffer" function nil nil [184739 188362])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [188364 189465])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [189467 189760])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [189762 190461])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [190463 192270])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [192272 192997])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [192999 193928])
            ("file-name-base" function (:arguments ("filename")) nil [193930 194174])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [194176 194924])
            ("backup-directory-alist" variable nil nil [194926 195963])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [195965 197261])
            ("make-backup-file-name" function (:arguments ("file")) nil [197263 197576])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [197578 198328])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [198330 200930])
            ("backup-file-name-p" function (:arguments ("file")) nil [200932 201193])
            ("backup-extract-version-start" variable nil nil [201195 201232])
            ("backup-extract-version" function (:arguments ("fn")) nil [201407 201859])
            ("find-backup-file-name" function (:arguments ("fn")) nil [201861 204000])
            ("file-nlinks" function (:arguments ("filename")) nil [204002 204119])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [204121 206876])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206879 209697])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [209699 210270])
            ("auto-save-hook" variable nil nil [210272 210344])
            ("before-save-hook" variable nil nil [210346 210544])
            ("after-save-hook" variable nil nil [210546 210765])
            ("save-buffer-coding-system" variable nil nil [210767 211139])
            ("make-variable-buffer-local" code nil nil [211141 211196])
            ("put" code nil nil [211197 211248])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [211250 216094])
            ("basic-save-buffer-1" function nil nil [216376 216679])
            ("basic-save-buffer-2" function nil nil [216768 220929])
            ("declare-function" code nil nil [220931 221017])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [221019 222185])
            ("put" code nil nil [222186 222247])
            ("buffer-save-without-query" variable nil nil [222249 222365])
            ("make-variable-buffer-local" code nil nil [222366 222421])
            ("save-some-buffers-default-predicate" variable nil nil [222423 222835])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [222837 226576])
            ("clear-visited-file-modtime" function nil nil [226579 226760])
            ("not-modified" function (:arguments ("arg")) nil [226762 227285])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [227287 227573])
            ("insert-file" function (:arguments ("filename")) nil [227575 228023])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [228025 228683])
            ("file-newest-backup" function (:arguments ("filename")) nil [228685 229608])
            ("rename-uniquely" function (:user-visible-flag t) nil [229610 230626])
            ("files--ensure-directory" function (:arguments ("dir")) nil [230628 230879])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [230881 232428])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [232430 232576])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [232578 232926])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [232928 235691])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [235693 236253])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [236255 237373])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [237375 240495])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [240543 241105])
            ("put" code nil nil [241109 241157])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [241158 241610])
            ("put" code nil nil [241612 241681])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [241682 242154])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [242156 242718])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [242720 243635])
            ("before-revert-hook" variable nil nil [243637 243840])
            ("after-revert-hook" variable nil nil [243842 244197])
            ("revert-buffer-in-progress-p" variable nil nil [244199 244313])
            ("revert-buffer-internal-hook" variable nil nil [244315 244351])
            ("revert-buffer-preserve-modes" variable nil nil [244541 244578])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [244580 246792])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [246794 250149])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [250151 252351])
            ("recover-this-file" function (:user-visible-flag t) nil [252353 252584])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [252586 254669])
            ("recover-session" function (:user-visible-flag t) nil [254671 256403])
            ("recover-session-finish" function (:user-visible-flag t) nil [256405 258808])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [258810 259061])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [259063 259666])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [259668 260325])
            ("rename-auto-save-file" function nil nil [260329 260893])
            ("make-auto-save-file-name" function nil nil [260895 265066])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [265068 265296])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [265299 267482])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [267485 267646])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [267648 267814])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [267816 269422])
            ("files" package nil nil [269496 269532])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [269534 270880])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [270882 272720])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [272723 272850])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [272852 273389])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [273391 273578])
            ("get-free-disk-space" function (:arguments ("dir")) nil [273580 275350])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [275422 277811])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [277813 277858])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [277860 278675])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [278677 280688])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [281762 290518])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [290520 291086])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [291088 291572])
            ("kill-emacs-query-functions" variable nil nil [291574 291937])
            ("confirm-kill-emacs" variable nil nil [291939 292379])
            ("confirm-kill-processes" variable (:default-value t) nil [292381 292744])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [292746 295037])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295039 295559])
            ("setq" code nil nil [295669 295790])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [295991 299678])
            ("file-name-quoted-p" function (:arguments ("name")) nil [299680 299872])
            ("file-name-quote" function (:arguments ("name")) nil [299874 300195])
            ("file-name-unquote" function (:arguments ("name")) nil [300197 300577])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [300620 301087])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [301089 301938])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [301940 303094])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [303096 304179])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [304181 305248])
            ("define-obsolete-variable-alias" code nil nil [305250 305332])
            ("trash-directory" variable nil nil [305356 305759])
            ("trash--hexify-table" variable nil nil [305761 305789])
            ("declare-function" code nil nil [305791 305857])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [305859 310853])
            ("file-attribute-type" function (:arguments ("attributes")) nil [310855 311071])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [311073 311220])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [311222 311489])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [311491 311759])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [311761 311984])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [311986 312278])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [312280 312618])
            ("file-attribute-size" function (:arguments ("attributes")) nil [312620 312826])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [312828 313012])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [313014 313455])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [313457 313912])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [313914 314769])
            ("define-key" code nil nil [314772 314812])
            ("define-key" code nil nil [314813 314863])
            ("define-key" code nil nil [314864 314914])
            ("define-key" code nil nil [314915 314957])
            ("define-key" code nil nil [314958 315003])
            ("define-key" code nil nil [315004 315045])
            ("define-key" code nil nil [315046 315085])
            ("define-key" code nil nil [315086 315124])
            ("define-key" code nil nil [315125 315170])
            ("define-key" code nil nil [315171 315228])
            ("define-key" code nil nil [315229 315274])
            ("define-key" code nil nil [315276 315328])
            ("define-key" code nil nil [315329 315391])
            ("define-key" code nil nil [315392 315447])
            ("define-key" code nil nil [315448 315507])
            ("define-key" code nil nil [315508 315555])
            ("define-key" code nil nil [315557 315615])
            ("define-key" code nil nil [315616 315667])
            ("define-key" code nil nil [315668 315722])
            ("define-key" code nil nil [315723 315784])
            ("define-key" code nil nil [315785 315844]))          
      :file "files.el"
      :pointmax 315869
      :fsize 315868
      :lastmodtime '(23525 29508 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1239 2285])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2287 2983])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2985 3105])
            ("make-obsolete" code nil nil [3106 3168])
            ("copy-case-table" function (:arguments ("case-table")) nil [3170 3585])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3587 4421])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4423 5201])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5203 5804])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5806 6411])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6413 7061])
            ("case-table" package nil nil [7063 7084]))          
      :file "case-table.el"
      :pointmax 7114
      :fsize 7113
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("selection-coding-system" variable nil nil [1752 3132])
            ("next-selection-coding-system" variable nil nil [3134 3495])
            ("define-obsolete-function-alias" code nil nil [3532 3611])
            ("select-enable-clipboard" variable (:default-value t) nil [3613 3942])
            ("define-obsolete-variable-alias" code nil nil [3943 4036])
            ("select-enable-primary" variable nil nil [4038 4310])
            ("define-obsolete-variable-alias" code nil nil [4311 4400])
            ("gui--last-selected-text-clipboard" variable nil nil [4727 4825])
            ("gui--last-selected-text-primary" variable nil nil [4826 4920])
            ("gui-select-text" function (:arguments ("text")) nil [4922 5653])
            ("define-obsolete-function-alias" code nil nil [5654 5725])
            ("x-select-request-type" variable nil nil [5727 6437])
            ("gui--selection-value-internal" function (:arguments ("type")) nil [6693 7348])
            ("gui-selection-value" function nil nil [7350 9426])
            ("define-obsolete-function-alias" code nil nil [9428 9507])
            ("x-get-clipboard" function nil nil [9509 9673])
            ("gui-get-primary-selection" function nil nil [9675 10172])
            ("define-obsolete-function-alias" code nil nil [10173 10264])
            ("cl-defgeneric" code nil nil [10322 10634])
            ("cl-defgeneric" code nil nil [10636 11174])
            ("cl-defgeneric" code nil nil [11176 11507])
            ("cl-defgeneric" code nil nil [11509 11832])
            ("gui-get-selection" function (:arguments ("type" "data-type")) nil [11834 13584])
            ("define-obsolete-function-alias" code nil nil [13585 13660])
            ("gui-set-selection" function
               (:user-visible-flag t
                :arguments ("type" "data"))
                nil [13662 15392])
            ("define-obsolete-function-alias" code nil nil [15393 15468])
            ("gui--valid-simple-selection-p" function (:arguments ("data")) nil [15470 15920])
            ("xselect--selection-bounds" function (:arguments ("value")) nil [16116 16910])
            ("xselect--int-to-cons" function (:arguments ("n")) nil [16912 16982])
            ("xselect--encode-string" function (:arguments ("type" "str" "can-modify")) nil [16984 19567])
            ("xselect-convert-to-string" function (:arguments ("_selection" "type" "value")) nil [19569 19869])
            ("xselect-convert-to-length" function (:arguments ("_selection" "_type" "value")) nil [19871 20130])
            ("xselect-convert-to-targets" function (:arguments ("_selection" "_type" "_value")) nil [20132 20645])
            ("xselect-convert-to-delete" function (:arguments ("selection" "_type" "_value")) nil [20647 20991])
            ("xselect-convert-to-filename" function (:arguments ("_selection" "_type" "value")) nil [20993 21177])
            ("xselect-convert-to-charpos" function (:arguments ("_selection" "_type" "value")) nil [21179 21479])
            ("xselect-convert-to-lineno" function (:arguments ("_selection" "_type" "value")) nil [21481 21840])
            ("xselect-convert-to-colno" function (:arguments ("_selection" "_type" "value")) nil [21842 22232])
            ("xselect-convert-to-os" function (:arguments ("_selection" "_type" "_size")) nil [22234 22347])
            ("xselect-convert-to-host" function (:arguments ("_selection" "_type" "_size")) nil [22349 22452])
            ("xselect-convert-to-user" function (:arguments ("_selection" "_type" "_size")) nil [22454 22560])
            ("xselect-convert-to-class" function (:arguments ("_selection" "_type" "_size")) nil [22562 22705])
            ("xselect-convert-to-name" function (:arguments ("_selection" "_type" "_size")) nil [22841 22982])
            ("xselect-convert-to-integer" function (:arguments ("_selection" "_type" "value")) nil [22984 23104])
            ("xselect-convert-to-atom" function (:arguments ("_selection" "_type" "value")) nil [23106 23192])
            ("xselect-convert-to-identity" function (:arguments ("_selection" "_type" "value")) nil [23194 23289])
            ("xselect-convert-to-save-targets" function (:arguments ("selection" "_type" "_value")) nil [23409 23518])
            ("setq" code nil nil [23520 24371])
            ("select" package nil nil [24373 24390]))          
      :file "select.el"
      :pointmax 24416
      :fsize 24415
      :lastmodtime '(23525 29517 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1006 1052])
            ("make-display-table" function nil nil [1069 1176])
            ("or" code nil nil [1178 1260])
            ("put" code nil nil [1330 1369])
            ("put" code nil nil [1370 1403])
            ("put" code nil nil [1404 1439])
            ("put" code nil nil [1440 1476])
            ("put" code nil nil [1477 1523])
            ("put" code nil nil [1524 1568])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1585 2078])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2095 2609])
            ("describe-display-table" function (:arguments ("dt")) nil [2626 3545])
            ("display-table-print-array" function (:arguments ("desc")) nil [3547 3946])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3963 4285])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4302 5132])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5149 5462])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5657 5876])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5893 6386])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6403 6883])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6900 7252])
            ("create-glyph" function (:arguments ("string")) nil [7269 7698])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7715 8130])
            ("glyph-char" function (:arguments ("glyph")) nil [8147 8286])
            ("glyph-face" function (:arguments ("glyph")) nil [8303 8611])
            ("standard-display-european" function (:arguments ("arg")) nil [8628 10792])
            ("disp-table" package nil nil [10794 10815]))          
      :file "disp-table.el"
      :pointmax 10845
      :fsize 10844
      :lastmodtime '(23525 29505 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4783 4800])
            ("timer" include nil nil [4802 4818])
            ("filenotify" include nil nil [4819 4840])
            ("auto-revert" customgroup (:user-visible-flag t) nil [4956 5185])
            ("auto-revert-mode" variable nil nil [5319 5471])
            ("put" code nil nil [5472 5514])
            ("auto-revert-tail-mode" variable nil nil [5516 5683])
            ("put" code nil nil [5684 5731])
            ("auto-revert-timer" variable nil nil [5733 5799])
            ("auto-revert-interval" variable (:default-value 5) nil [5801 6536])
            ("auto-revert-stop-on-user-input" variable (:default-value t) nil [6538 7070])
            ("auto-revert-verbose" variable (:default-value t) nil [7072 7275])
            ("auto-revert-mode-text" variable (:default-value " ARev") nil [7277 7568])
            ("auto-revert-tail-mode-text" variable (:default-value " Tail") nil [7570 7822])
            ("auto-revert-mode-hook" variable nil nil [7824 8021])
            ("global-auto-revert-mode-text" variable nil nil [8023 8330])
            ("global-auto-revert-mode-hook" variable nil nil [8332 8471])
            ("global-auto-revert-non-file-buffers" variable nil nil [8473 9402])
            ("global-auto-revert-ignore-modes" variable nil nil [9404 9561])
            ("auto-revert-load-hook" variable nil nil [9563 9715])
            ("auto-revert-check-vc-info" variable nil nil [9717 10763])
            ("defvar-local" code nil nil [10765 10947])
            ("auto-revert-remote-files" variable nil nil [10949 11093])
            ("auto-revert-use-notify" variable (:default-value t) nil [11095 11604])
            ("auto-revert-notify-exclude-dir-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/"))) (unless auto-revert-remote-files "\\|^/[^/|:][^/|]+:"))) nil [11606 11980])
            ("auto-revert-buffer-list" variable nil nil [12006 12268])
            ("auto-revert-remaining-buffers" variable nil nil [12270 12370])
            ("auto-revert-tail-pos" variable nil nil [12372 12443])
            ("auto-revert-find-file-function" function nil nil [12445 12579])
            ("add-hook" code nil nil [12581 12643])
            ("auto-revert-notify-watch-descriptor-hash-list" variable (:default-value (make-hash-table :test (quote equal))) nil [12645 12934])
            ("defvar-local" code nil nil [12936 13051])
            ("put" code nil nil [13052 13113])
            ("defvar-local" code nil nil [13115 13276])
            ("auto-revert-remove-current-buffer" function nil nil [13293 13481])
            ("define-minor-mode" code nil nil [13498 14750])
            ("turn-on-auto-revert-mode" function nil nil [14768 14977])
            ("define-minor-mode" code nil nil [14995 17804])
            ("turn-on-auto-revert-tail-mode" function nil nil [17822 18060])
            ("define-minor-mode" code nil nil [18078 19356])
            ("auto-revert-set-timer" function (:user-visible-flag t) nil [19358 19972])
            ("auto-revert-notify-rm-watch" function nil nil [19974 20709])
            ("auto-revert-notify-add-watch" function nil nil [20711 22017])
            ("auto-revert-buffers-counter" variable (:default-value 1) nil [22549 22645])
            ("defvar-local" code nil nil [22646 23165])
            ("auto-revert-notify-handler" function (:arguments ("event")) nil [23167 26258])
            ("auto-revert-active-p" function nil nil [26260 26567])
            ("auto-revert-handler" function nil nil [26569 29462])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [29464 30125])
            ("auto-revert-buffers" function nil nil [30127 33100])
            ("autorevert" package nil nil [33115 33136])
            ("run-hooks" code nil nil [33138 33172]))          
      :file "autorevert.el"
      :pointmax 33202
      :fsize 33201
      :lastmodtime '(23525 29503 0 0)
      :unmatched-syntax '((close-paren 4800 . 4801) (symbol 4765 . 4782) (open-paren 4764 . 4765)))
    (semanticdb-table "semanticdb-table"
      :file "filenotify.el"
      :fsize 17949
      :lastmodtime '(23525 29508 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reveal" customgroup (:user-visible-flag t) nil [1865 1943])
            ("reveal-around-mark" variable (:default-value t) nil [1945 2055])
            ("reveal-open-spots" variable nil nil [2057 2181])
            ("make-variable-buffer-local" code nil nil [2182 2229])
            ("reveal-last-tick" variable nil nil [2231 2260])
            ("make-variable-buffer-local" code nil nil [2261 2307])
            ("reveal-post-command" function nil nil [2325 3722])
            ("reveal-open-new-overlays" function (:arguments ("old-ols")) nil [3724 5913])
            ("reveal-close-old-overlays" function (:arguments ("old-ols")) nil [5915 8234])
            ("reveal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line)) (define-key map [remap move-end-of-line] (quote end-of-line)) map)) nil [8236 8551])
            ("define-minor-mode" code nil nil [8568 9256])
            ("define-minor-mode" code nil nil [9273 9892])
            ("reveal" package nil nil [9894 9911]))          
      :file "reveal.el"
      :pointmax 9937
      :fsize 9936
      :lastmodtime '(23525 29516 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1546 1592])
            ("gpm-mouse-enable" function nil nil [1594 2153])
            ("gpm-mouse-disable" function nil nil [2155 2354])
            ("define-obsolete-function-alias" code nil nil [2371 2440])
            ("define-minor-mode" code nil nil [2456 3530])
            ("t-mouse" package nil nil [3532 3550]))          
      :file "t-mouse.el"
      :pointmax 3577
      :fsize 3576
      :lastmodtime '(23525 29519 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("display-line-numbers" customgroup (:user-visible-flag t) nil [1336 1451])
            ("display-line-numbers-type" variable (:default-value t) nil [1453 1851])
            ("display-line-numbers-grow-only" variable nil nil [1853 2014])
            ("display-line-numbers-width-start" variable nil nil [2016 2355])
            ("display-line-numbers-update-width" function nil nil [2357 2598])
            ("define-minor-mode" code nil nil [2615 3491])
            ("display-line-numbers--turn-on" function nil nil [3493 3740])
            ("define-globalized-minor-mode" code nil nil [3757 3878])
            ("display-line-numbers" package nil nil [3880 3911]))          
      :file "display-line-numbers.el"
      :pointmax 3951
      :fsize 3950
      :lastmodtime '(23525 29505 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1044 1060])
            ("cl-lib" include nil nil [1080 1097])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1119 1435])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1437 2118])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2120 2795])
            ("scroll-bar-lines" function nil nil [2797 3325])
            ("scroll-bar-mode" variable nil nil [3393 3417])
            ("horizontal-scroll-bar-mode" variable nil nil [3418 3453])
            ("previous-scroll-bar-mode" variable nil nil [3454 3491])
            ("scroll-bar-mode-explicit" variable nil nil [3493 3658])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3660 4072])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [4074 4764])
            ("setq" code nil nil [4865 4898])
            ("get-scroll-bar-mode" function nil nil [4900 4992])
            ("define-minor-mode" code nil nil [4994 5508])
            ("horizontal-scroll-bars-available-p" function nil nil [5510 5728])
            ("define-minor-mode" code nil nil [5730 6708])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6710 7335])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7337 7803])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7911 8441])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [8443 8698])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8700 9710])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9767 10231])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10233 11244])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11301 11801])
            ("scroll-bar-horizontal-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [11803 12860])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [12862 13610])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13612 14352])
            ("scroll-bar-toolkit-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14381 15581])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [15583 17168])
            ("cond" code nil nil [17239 17949])
            ("scroll-bar" package nil nil [17953 17974]))          
      :file "scroll-bar.el"
      :pointmax 18004
      :fsize 18003
      :lastmodtime '(23525 29517 0 0)
      :unmatched-syntax '((close-paren 1097 . 1098) (symbol 1062 . 1079) (open-paren 1061 . 1062)))
    (semanticdb-table "semanticdb-table"
      :file "mouse.el"
      :fsize 115609
      :lastmodtime '(23525 29514 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3640 3660])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3662 3837])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3839 4166])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4168 4623])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4625 4881])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4883 5439])
            ("put" code nil nil [5474 5533])
            ("hi-lock-auto-select-face" variable nil nil [5535 5772])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5774 5859])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5861 6179])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [6181 6346])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "light green" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "light green")) (t (:background "green"))))
                :type "face")
                nil [6348 6663])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6665 6842])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6844 6939])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6941 7113])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [7115 7290])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7292 7461])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7463 7596])
            ("defvar-local" code nil nil [7598 7702])
            ("put" code nil nil [7703 7750])
            ("defvar-local" code nil nil [7752 7865])
            ("put" code nil nil [7866 7920])
            ("define-obsolete-variable-alias" code nil nil [7922 8038])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [8039 8237])
            ("define-obsolete-variable-alias" code nil nil [8239 8382])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8384 8494])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8496 8836])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8838 9064])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [highlight-symbol-at-point] (quote (menu-item "Highlight Symbol at Point" highlight-symbol-at-point :help "Highlight symbol found near point without prompting."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [9066 10582])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "w." (quote highlight-symbol-at-point)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10584 11069])
            ("define-minor-mode" code nil nil [11108 15705])
            ("define-globalized-minor-mode" code nil nil [15722 15832])
            ("turn-on-hi-lock-if-enabled" function nil nil [15834 15993])
            ("defalias" code nil nil [16010 16079])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16095 16924])
            ("defalias" code nil nil [16942 16991])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17007 17636])
            ("defalias" code nil nil [17653 17709])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17725 18599])
            ("defalias" code nil nil [18616 18683])
            ("hi-lock-face-symbol-at-point" function (:user-visible-flag t) nil [18699 19386])
            ("hi-lock-keyword->face" function (:arguments ("keyword")) nil [19388 19458])
            ("declare-function" code nil nil [19508 19564])
            ("hi-lock--regexps-at-point" function nil nil [19566 21211])
            ("defvar-local" code nil nil [21213 21393])
            ("defalias" code nil nil [21410 21463])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [21479 24550])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [24567 25325])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [25356 26151])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [26153 26500])
            ("hi-lock-read-face-name" function nil nil [26502 27656])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [27658 29406])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [29408 29736])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [29738 31166])
            ("hi-lock-font-lock-hook" function nil nil [31168 31392])
            ("hi-lock--hashcons-hash" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [31394 31512])
            ("hi-lock--hashcons" function (:arguments ("string")) nil [31514 31690])
            ("hi-lock-unload-function" function nil nil [31692 31824])
            ("hi-lock" package nil nil [31826 31844]))          
      :file "hi-lock.el"
      :pointmax 31871
      :fsize 31870
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "font-lock.el"
      :fsize 102935
      :lastmodtime '(23525 29508 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1167 3375])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3393 4588])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4795 5461])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5796 6268])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6725 7035])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7037 9256])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9258 9630])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9632 10596])
            ("decompose-string" function (:arguments ("string")) nil [10598 10770])
            ("compose-chars" function (:arguments ("args")) nil [10772 11648])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11650 13632])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13636 15080])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15082 15993])
            ("global-set-key" code nil nil [15995 16052])
            ("lgstring-header" function (:arguments ("gstring")) nil [16173 16226])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16227 16298])
            ("lgstring-font" function (:arguments ("gstring")) nil [16299 16368])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16369 16445])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16446 16524])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16525 16580])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16581 16640])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16641 16701])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16702 16764])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16765 16841])
            ("lglyph-from" function (:arguments ("glyph")) nil [16843 16888])
            ("lglyph-to" function (:arguments ("glyph")) nil [16889 16932])
            ("lglyph-char" function (:arguments ("glyph")) nil [16933 16978])
            ("lglyph-code" function (:arguments ("glyph")) nil [16979 17024])
            ("lglyph-width" function (:arguments ("glyph")) nil [17025 17071])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17072 17121])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17122 17171])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17172 17219])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17220 17268])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17269 17320])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17322 17415])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17416 17475])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17476 17535])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17536 17598])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17599 17732])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17771 17823])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17870 18369])
            ("lgstring-remove-glyph" function (:arguments ("gstring" "idx")) nil [18408 18723])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18725 19298])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [19300 20514])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20516 26437])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [26439 28230])
            ("when" code nil nil [28277 28722])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [28724 30667])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [30670 31609])
            ("put" code nil nil [31611 31658])
            ("make-variable-buffer-local" code nil nil [31660 31715])
            ("setq-default" code nil nil [31716 31776])
            ("define-minor-mode" code nil nil [31793 32394])
            ("make-variable-buffer-local" code nil nil [32446 32497])
            ("define-minor-mode" code nil nil [32514 32894])
            ("defalias" code nil nil [32896 32954])
            ("composite" package nil nil [32956 32976]))          
      :file "composite.el"
      :pointmax 33008
      :fsize 33007
      :lastmodtime '(23525 29504 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable nil nil [1923 2370])
            ("display-format-alist" variable nil nil [2372 2624])
            ("initial-frame-alist" variable nil nil [2816 4049])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4051 4756])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5507 5803])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5805 6065])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6067 6317])
            ("frame-initial-frame" variable nil nil [6813 6845])
            ("frame-initial-frame-alist" variable nil nil [6924 6958])
            ("frame-initial-geometry-arguments" variable nil nil [6960 7005])
            ("frame-initialize" function nil nil [7194 8726])
            ("frame-notice-user-settings" variable (:default-value t) nil [8728 8837])
            ("declare-function" code nil nil [8839 8898])
            ("declare-function" code nil nil [8899 8971])
            ("defalias" code nil nil [8973 9023])
            ("frame-notice-user-settings" function nil nil [9220 20335])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [20337 20538])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20605 21780])
            ("get-other-frame" function nil nil [21782 22040])
            ("next-multiframe-window" function (:user-visible-flag t) nil [22042 22300])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [22302 22566])
            ("window-system-for-display" function (:arguments ("display")) nil [22568 23063])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [23065 23334])
            ("declare-function" code nil nil [23336 23393])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [23395 24747])
            ("make-frame-command" function (:user-visible-flag t) nil [24749 25012])
            ("before-make-frame-hook" variable nil nil [25014 25111])
            ("after-make-frame-functions" variable nil nil [25113 25279])
            ("after-setting-font-hook" variable nil nil [25281 25377])
            ("define-obsolete-function-alias" code nil nil [25407 25469])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [25471 25581])
            ("x-display-name" variable nil nil [25583 25606])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25608 29519])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29521 29820])
            ("minibuffer-frame-list" function nil nil [29822 30015])
            ("get-device-terminal" function (:arguments ("device")) nil [30067 30820])
            ("frames-on-display-list" function (:arguments ("device")) nil [30822 31264])
            ("framep-on-display" function (:arguments ("terminal")) nil [31266 31705])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31707 32568])
            ("declare-function" code nil nil [32570 32641])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32643 33753])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33755 34865])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34867 35097])
            ("suspend-frame" function (:user-visible-flag t) nil [35099 35576])
            ("make-frame-names-alist" function nil nil [35578 35984])
            ("frame-name-history" variable nil nil [35986 36017])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36018 36863])
            ("frame-background-mode" variable nil nil [36890 37566])
            ("declare-function" code nil nil [37568 37662])
            ("declare-function" code nil nil [37707 37777])
            ("inhibit-frame-set-background-mode" variable nil nil [37779 37825])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37827 40725])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [40727 41243])
            ("current-frame-configuration" function nil nil [41274 41870])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41872 43867])
            ("frame-height" function (:arguments ("frame")) nil [43962 44628])
            ("frame-width" function (:arguments ("frame")) nil [44630 44835])
            ("defalias" code nil nil [44837 44896])
            ("defalias" code nil nil [44897 44946])
            ("defalias" code nil nil [44947 44998])
            ("frame-inner-width" function (:arguments ("frame")) nil [45000 45250])
            ("frame-inner-height" function (:arguments ("frame")) nil [45252 45505])
            ("frame-outer-width" function (:arguments ("frame")) nil [45507 45764])
            ("frame-outer-height" function (:arguments ("frame")) nil [45766 46025])
            ("declare-function" code nil nil [46027 46132])
            ("define-obsolete-function-alias" code nil nil [46134 46207])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [46209 49525])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [49527 49778])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49780 50525])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50527 51272])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51274 51760])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51762 52228])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [52230 52612])
            ("define-minor-mode" code nil nil [52614 53494])
            ("define-minor-mode" code nil nil [53496 54337])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54339 54715])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [54717 55439])
            ("declare-function" code nil nil [55441 55503])
            ("declare-function" code nil nil [55504 55570])
            ("declare-function" code nil nil [55571 55635])
            ("frame-geometry" function (:arguments ("frame")) nil [55637 58116])
            ("frame--size-history" function (:arguments ("frame")) nil [58118 58946])
            ("declare-function" code nil nil [58948 59012])
            ("declare-function" code nil nil [59013 59081])
            ("declare-function" code nil nil [59082 59148])
            ("frame-edges" function (:arguments ("frame" "type")) nil [59150 60136])
            ("declare-function" code nil nil [60138 60201])
            ("declare-function" code nil nil [60202 60261])
            ("declare-function" code nil nil [60262 60323])
            ("mouse-absolute-pixel-position" function nil nil [60325 60875])
            ("declare-function" code nil nil [60877 60948])
            ("declare-function" code nil nil [60949 61022])
            ("declare-function" code nil nil [61023 61092])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [61094 61595])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [61597 62287])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [62289 63631])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [63633 64444])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [64446 65251])
            ("declare-function" code nil nil [65253 65321])
            ("declare-function" code nil nil [65322 65394])
            ("declare-function" code nil nil [65395 65465])
            ("frame-list-z-order" function (:arguments ("display")) nil [65467 66259])
            ("declare-function" code nil nil [66261 66336])
            ("declare-function" code nil nil [66337 66416])
            ("declare-function" code nil nil [66417 66494])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [66496 67857])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [67859 69021])
            ("declare-function" code nil nil [69058 69101])
            ("display-mouse-p" function (:arguments ("display")) nil [69103 69894])
            ("display-popup-menus-p" function (:arguments ("display")) nil [69896 70182])
            ("display-graphic-p" function (:arguments ("display")) nil [70184 70641])
            ("display-images-p" function (:arguments ("display")) nil [70643 70921])
            ("defalias" code nil nil [70923 70975])
            ("defalias" code nil nil [70976 71027])
            ("display-selections-p" function (:arguments ("display")) nil [71029 71657])
            ("declare-function" code nil nil [71659 71725])
            ("display-screens" function (:arguments ("display")) nil [71727 72116])
            ("declare-function" code nil nil [72118 72189])
            ("display-pixel-height" function (:arguments ("display")) nil [72191 72924])
            ("declare-function" code nil nil [72926 72996])
            ("display-pixel-width" function (:arguments ("display")) nil [72998 73726])
            ("display-mm-dimensions-alist" variable nil nil [73728 74346])
            ("declare-function" code nil nil [74348 74416])
            ("display-mm-height" function (:arguments ("display")) nil [74418 75297])
            ("declare-function" code nil nil [75299 75366])
            ("display-mm-width" function (:arguments ("display")) nil [75368 76243])
            ("declare-function" code nil nil [76245 76317])
            ("display-backing-store" function (:arguments ("display")) nil [76422 76940])
            ("declare-function" code nil nil [76942 77011])
            ("display-save-under" function (:arguments ("display")) nil [77013 77410])
            ("declare-function" code nil nil [77412 77477])
            ("display-planes" function (:arguments ("display")) nil [77479 77920])
            ("declare-function" code nil nil [77922 77992])
            ("display-color-cells" function (:arguments ("display")) nil [77994 78439])
            ("declare-function" code nil nil [78441 78512])
            ("display-visual-class" function (:arguments ("display")) nil [78514 79104])
            ("declare-function" code nil nil [79106 79192])
            ("declare-function" code nil nil [79193 79282])
            ("declare-function" code nil nil [79283 79371])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [79373 81898])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [81930 83800])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [83802 85058])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [85061 86690])
            ("define-obsolete-variable-alias" code nil nil [86735 86821])
            ("window-divider" customgroup (:user-visible-flag t) nil [86846 86949])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [86951 87815])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [87817 87947])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [87949 88599])
            ("window-divider-default-right-width" variable (:default-value 6) nil [88601 89242])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [89244 90536])
            ("define-minor-mode" code nil nil [90538 91118])
            ("blink-cursor-idle-timer" variable nil nil [91141 91316])
            ("blink-cursor-timer" variable nil nil [91318 91480])
            ("cursor" customgroup (:user-visible-flag t) nil [91482 91567])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [91569 91891])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [91893 92141])
            ("blink-cursor-blinks" variable (:default-value 10) nil [92143 92353])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [92355 92468])
            ("blink-cursor--start-idle-timer" function nil nil [92470 93018])
            ("blink-cursor--start-timer" function nil nil [93020 93305])
            ("blink-cursor-start" function nil nil [93307 93910])
            ("blink-cursor-timer-function" function nil nil [93912 94568])
            ("blink-cursor-end" function nil nil [94571 94966])
            ("blink-cursor-suspend" function nil nil [94968 95323])
            ("blink-cursor-check" function nil nil [95325 95660])
            ("define-obsolete-variable-alias" code nil nil [95662 95734])
            ("define-minor-mode" code nil nil [95736 96852])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [96891 97893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [97895 99330])
            ("define-key" code nil nil [99352 99400])
            ("define-key" code nil nil [99401 99450])
            ("define-key" code nil nil [99451 99493])
            ("define-key" code nil nil [99494 99535])
            ("define-key" code nil nil [99536 99590])
            ("define-key" code nil nil [99591 99651])
            ("define-key" code nil nil [99652 99712])
            ("define-obsolete-variable-alias" code nil nil [99762 99844])
            ("make-variable-buffer-local" code nil nil [99846 99900])
            ("make-obsolete-variable" code nil nil [99927 100021])
            ("mapc" code nil nil [100422 100837])
            ("frame" package nil nil [100839 100855]))          
      :file "frame.el"
      :pointmax 100880
      :fsize 100879
      :lastmodtime '(23525 29509 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1442 1479])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1481 2283])
            ("setenv-history" variable nil nil [2331 2358])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2360 2462])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2464 4018])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4020 4402])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4404 5396])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5466 7869])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7871 8921])
            ("env" package nil nil [8923 8937]))          
      :file "env.el"
      :pointmax 8960
      :fsize 8959
      :lastmodtime '(23525 29506 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1228 1245])
            ("cl-defstruct" code nil nil [1296 1628])
            ("cl-defun" code nil nil [1630 2251])
            ("register-alist" variable nil nil [2253 2966])
            ("register" customgroup (:user-visible-flag t) nil [2968 3054])
            ("register-separator" variable nil nil [3056 3452])
            ("register-preview-delay" variable (:default-value 1) nil [3454 3780])
            ("get-register" function (:arguments ("register")) nil [3782 3921])
            ("set-register" function (:arguments ("register" "value")) nil [3923 4163])
            ("register-describe-oneline" function (:arguments ("c")) nil [4165 4484])
            ("register-preview-default" function (:arguments ("r")) nil [4486 4686])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4688 4892])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4894 5536])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5538 6973])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6975 7662])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7664 8308])
            ("set-advertised-calling-convention" code nil nil [8370 8465])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8467 9099])
            ("set-advertised-calling-convention" code nil nil [9161 9255])
            ("make-obsolete" code nil nil [9257 9334])
            ("defalias" code nil nil [9336 9383])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9384 11427])
            ("register-swap-out" function nil nil [11429 11782])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11784 12485])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12487 13345])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13347 13826])
            ("list-registers" function (:user-visible-flag t) nil [13828 14205])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14207 16408])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16410 17617])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17619 18590])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18592 19598])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19600 20610])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20612 21548])
            ("register" package nil nil [21550 21569]))          
      :file "register.el"
      :pointmax 21596
      :fsize 21595
      :lastmodtime '(23525 29516 0 0)
      :unmatched-syntax '((close-paren 1245 . 1246) (symbol 1210 . 1227) (open-paren 1209 . 1210)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6710 6729])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6795 6889])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7284 7509])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7588 7847])
            ("define-obsolete-variable-alias" code nil nil [7912 8036])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8038 8821])
            ("define-obsolete-variable-alias" code nil nil [8922 9040])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9042 9418])
            ("define-obsolete-variable-alias" code nil nil [9554 9662])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9664 9965])
            ("define-obsolete-variable-alias" code nil nil [9967 10078])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10080 10382])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10384 11501])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11503 12023])
            ("hilit-chg-list" variable nil nil [12057 12084])
            ("hilit-chg-string" variable (:default-value " ??") nil [12085 12116])
            ("make-variable-buffer-local" code nil nil [12118 12164])
            ("define-minor-mode" code nil nil [12201 13979])
            ("define-minor-mode" code nil nil [13997 14681])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14684 16295])
            ("highlight-changes-face-list" variable nil nil [16298 16957])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [16960 17598])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17601 17940])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [17943 18778])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18780 19278])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19281 19601])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [19618 19944])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [19946 22668])
            ("hilit-chg-update" function nil nil [22670 23101])
            ("hilit-chg-set" function nil nil [23103 23513])
            ("hilit-chg-clear" function nil nil [23515 24222])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24240 24803])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [24821 25650])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [25729 27047])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27049 27450])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [27467 29599])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [29749 32141])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32158 33026])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33043 34428])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34431 34854])
            ("hilit-chg-get-diff-list-hk" function nil nil [34857 36320])
            ("define-globalized-minor-mode" code nil nil [36410 36526])
            ("define-obsolete-function-alias" code nil nil [36528 36627])
            ("highlight-changes-mode-turn-on" function nil nil [36629 37394])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37494 37647])
            ("add-to-list" code nil nil [37649 37758])
            ("add-to-list" code nil nil [37760 37821])
            ("hilit-chg-unload-function" function nil nil [38203 38347])
            ("hilit-chg" package nil nil [38349 38369]))          
      :file "hilit-chg.el"
      :pointmax 38398
      :fsize 38397
      :lastmodtime '(23525 29510 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "wid-edit.el"
      :fsize 126879
      :lastmodtime '(23525 29521 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1050 1067])
            ("obarray" include nil nil [1069 1087])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1089 1203])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1205 1395])
            ("only-global-abbrevs" variable nil nil [1397 1648])
            ("define-minor-mode" code nil nil [1650 2078])
            ("put" code nil nil [2080 2129])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2133 2413])
            ("define-obsolete-variable-alias" code nil nil [2414 2496])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2498 2669])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2671 3009])
            ("insert-abbrevs" function (:user-visible-flag t) nil [3011 3297])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3299 3597])
            ("abbrev-table-name" function (:arguments ("table")) nil [3599 3885])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3887 4773])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4775 5718])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5720 5915])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5917 6915])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6917 7434])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7436 7761])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7763 9522])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9524 9844])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9846 10079])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10083 10623])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10625 11115])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11117 11710])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11712 12143])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12145 12488])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12490 13101])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13103 13764])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13766 14461])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14487 14640])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14642 14872])
            ("defalias" code nil nil [14874 14963])
            ("defalias" code nil nil [14965 15135])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15191 15332])
            ("make-abbrev-table" function (:arguments ("props")) nil [15334 16073])
            ("abbrev-table-p" function (:arguments ("object")) nil [16075 16245])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16247 16827])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16829 17076])
            ("abbrev-minor-mode-table-alist" variable nil nil [17078 17333])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17335 17610])
            ("abbrevs-changed" variable nil nil [17612 17760])
            ("abbrev-all-caps" variable nil nil [17762 17903])
            ("abbrev-start-location" variable nil nil [17905 18107])
            ("abbrev-start-location-buffer" variable nil nil [18109 18287])
            ("last-abbrev" variable nil nil [18289 18386])
            ("last-abbrev-text" variable nil nil [18388 18518])
            ("last-abbrev-location" variable nil nil [18520 18610])
            ("pre-abbrev-expand-hook" variable nil nil [18787 19062])
            ("make-obsolete-variable" code nil nil [19063 19142])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19144 19771])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19773 22914])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22916 23659])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23661 24019])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [24021 24443])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24445 25492])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25495 26443])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26445 27139])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27142 27402])
            ("abbrev--before-point" function nil nil [27405 30023])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [30025 33069])
            ("abbrev-expand-functions" variable nil nil [33071 33157])
            ("make-obsolete-variable" code nil nil [33158 33238])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33240 33443])
            ("expand-abbrev" function (:user-visible-flag t) nil [33445 33936])
            ("abbrev--default-expand" function nil nil [33938 35457])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35459 36357])
            ("abbrev--write" function (:arguments ("sym")) nil [36359 36814])
            ("abbrev--describe" function (:arguments ("sym")) nil [36816 37210])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [37212 38253])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38255 40544])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40546 41397])
            ("define-derived-mode" code nil nil [41492 41622])
            ("abbrev" package nil nil [41624 41641]))          
      :file "abbrev.el"
      :pointmax 41667
      :fsize 41666
      :lastmodtime '(23525 29502 0 0)
      :unmatched-syntax '((close-paren 1067 . 1068) (symbol 1032 . 1049) (open-paren 1031 . 1032)))
    (semanticdb-table "semanticdb-table"
      :file "obarray.el"
      :fsize 2183
      :lastmodtime '(23525 29514 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el"
      :pointmax 59422
      :fsize 59421
      :lastmodtime '(23525 29504 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "widget.el"
      :fsize 3916
      :lastmodtime '(23525 29521 0 0)))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
