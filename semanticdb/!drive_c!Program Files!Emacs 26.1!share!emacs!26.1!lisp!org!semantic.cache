;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1926 1943])
            ("org" include nil nil [1944 1958])
            ("org-macs" include nil nil [1959 1978])
            ("declare-function" code nil nil [1980 2105])
            ("declare-function" code nil nil [2106 2174])
            ("declare-function" code nil nil [2175 2253])
            ("declare-function" code nil nil [2254 2332])
            ("declare-function" code nil nil [2333 2411])
            ("declare-function" code nil nil [2412 2490])
            ("declare-function" code nil nil [2491 2569])
            ("declare-function" code nil nil [2570 2648])
            ("declare-function" code nil nil [2649 2717])
            ("declare-function" code nil nil [2718 2796])
            ("declare-function" code nil nil [2797 2875])
            ("declare-function" code nil nil [2876 2954])
            ("declare-function" code nil nil [2955 3023])
            ("declare-function" code nil nil [3024 3102])
            ("declare-function" code nil nil [3103 3181])
            ("declare-function" code nil nil [3182 3260])
            ("declare-function" code nil nil [3261 3327])
            ("declare-function" code nil nil [3329 3392])
            ("declare-function" code nil nil [3393 3494])
            ("declare-function" code nil nil [3495 3560])
            ("declare-function" code nil nil [3561 3639])
            ("declare-function" code nil nil [3640 3713])
            ("declare-function" code nil nil [3714 3801])
            ("declare-function" code nil nil [3802 3863])
            ("declare-function" code nil nil [3864 3931])
            ("declare-function" code nil nil [3932 4010])
            ("declare-function" code nil nil [4011 4065])
            ("declare-function" code nil nil [4066 4128])
            ("declare-function" code nil nil [4129 4195])
            ("calendar-mode-map" variable nil nil [4197 4223])
            ("org-clock-current-task" variable nil nil [4224 4255])
            ("org-current-tag-alist" variable nil nil [4256 4286])
            ("org-mobile-force-id-on-agenda-items" variable nil nil [4287 4331])
            ("org-habit-show-habits" variable nil nil [4332 4362])
            ("org-habit-show-habits-only-for-today" variable nil nil [4363 4408])
            ("org-habit-show-all-today" variable nil nil [4409 4442])
            ("org-agenda-buffer-name" variable (:default-value "*Org Agenda*") nil [4507 4553])
            ("org-agenda-overriding-header" variable nil nil [4554 4595])
            ("org-agenda-title-append" variable nil nil [4596 4632])
            ("with-no-warnings" code nil nil [4633 4666])
            ("with-no-warnings" code nil nil [4699 4731])
            ("original-date" variable nil nil [4765 4787])
            ("org-agenda-undo-list" variable nil nil [4839 4938])
            ("org-agenda-pending-undo-list" variable nil nil [4939 5056])
            ("org-agenda-confirm-kill" variable (:default-value 1) nil [5058 5456])
            ("org-agenda-compact-blocks" variable nil nil [5458 5700])
            ("org-agenda-block-separator" variable (:default-value 61) nil [5702 6173])
            ("org-agenda-export" customgroup (:user-visible-flag t) nil [6175 6314])
            ("org-agenda-with-colors" variable (:default-value t) nil [6316 6443])
            ("org-agenda-exporter-settings" variable nil nil [6445 6991])
            ("org-agenda-before-write-hook" variable (:default-value (quote (org-agenda-add-entry-text))) nil [6993 7288])
            ("org-agenda-add-entry-text-maxlines" variable nil nil [7290 7924])
            ("org-agenda-add-entry-text-descriptive-links" variable (:default-value t) nil [7926 8267])
            ("org-agenda-export-html-style" variable nil nil [8269 9627])
            ("org-agenda-persistent-filter" variable nil nil [9629 9772])
            ("org-agenda-custom-commands" customgroup (:user-visible-flag t) nil [9774 9921])
            ("org-sorting-choice" variable
               (:constant-flag t
                :default-value (quote (choice (const time-up) (const time-down) (const timestamp-up) (const timestamp-down) (const scheduled-up) (const scheduled-down) (const deadline-up) (const deadline-down) (const ts-up) (const ts-down) (const tsia-up) (const tsia-down) (const category-keep) (const category-up) (const category-down) (const tag-down) (const tag-up) (const priority-up) (const priority-down) (const todo-state-up) (const todo-state-down) (const effort-up) (const effort-down) (const habit-up) (const habit-down) (const alpha-up) (const alpha-down) (const user-defined-up) (const user-defined-down))))
                nil [9923 10614])
            ("defvaralias" code nil nil [10737 10806])
            ("defvaralias" code nil nil [10807 10862])
            ("org-agenda-entry-types" variable (:default-value (quote (:deadline :scheduled :timestamp :sexp))) nil [10864 12560])
            ("org-agenda-custom-commands-local-options" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "Local settings for this command.  Remember to quote values" (choice :tag "Setting" (list :tag "Heading for this block" (const org-agenda-overriding-header) (string :tag "Headline")) (list :tag "Files to be searched" (const org-agenda-files) (list (const :format "" quote) (repeat (file)))) (list :tag "Sorting strategy" (const org-agenda-sorting-strategy) (list (const :format "" quote) (repeat (\, org-sorting-choice)))) (list :tag "Prefix format" (const org-agenda-prefix-format :value "  %-12:c%?-12t% s") (string)) (list :tag "Number of days in agenda" (const org-agenda-span) (list (const :format "" quote) (choice (const :tag "Day" day) (const :tag "Week" week) (const :tag "Fortnight" fortnight) (const :tag "Month" month) (const :tag "Year" year) (integer :tag "Custom")))) (list :tag "Fixed starting date" (const org-agenda-start-day) (string :value "2007-11-01")) (list :tag "Start on day of week" (const org-agenda-start-on-weekday) (choice :value 1 (const :tag "Today" nil) (integer :tag "Weekday No."))) (list :tag "Include data from diary" (const org-agenda-include-diary) (boolean)) (list :tag "Deadline Warning days" (const org-deadline-warning-days) (integer :value 1)) (list :tag "Category filter preset" (const org-agenda-category-filter-preset) (list (const :format "" quote) (repeat (string :tag "+category or -category")))) (list :tag "Tags filter preset" (const org-agenda-tag-filter-preset) (list (const :format "" quote) (repeat (string :tag "+tag or -tag")))) (list :tag "Effort filter preset" (const org-agenda-effort-filter-preset) (list (const :format "" quote) (repeat (string :tag "+=10 or -=10 or +<10 or ->10")))) (list :tag "Regexp filter preset" (const org-agenda-regexp-filter-preset) (list (const :format "" quote) (repeat (string :tag "+regexp or -regexp")))) (list :tag "Set daily/weekly entry types" (const org-agenda-entry-types) (list (const :format "" quote) (set :greedy t :value (\, org-agenda-entry-types) (const :deadline) (const :scheduled) (const :deadline*) (const :scheduled*) (const :timestamp) (const :sexp)))) (list :tag "Standard skipping condition" :value (org-agenda-skip-function (quote (org-agenda-skip-entry-if))) (const org-agenda-skip-function) (list (const :format "" quote) (list (choice :tag "Skipping range" (const :tag "Skip entry" org-agenda-skip-entry-if) (const :tag "Skip subtree" org-agenda-skip-subtree-if)) (repeat :inline t :tag "Conditions for skipping" (choice :tag "Condition type" (list :tag "Regexp matches" :inline t (const :format "" regexp) (regexp)) (list :tag "Regexp does not match" :inline t (const :format "" notregexp) (regexp)) (list :tag "TODO state is" :inline t (const todo) (choice (const :tag "Any not-done state" todo) (const :tag "Any done state" done) (const :tag "Any state" any) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (list :tag "TODO state is not" :inline t (const nottodo) (choice (const :tag "Any not-done state" todo) (const :tag "Any done state" done) (const :tag "Any state" any) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (const :tag "scheduled" scheduled) (const :tag "not scheduled" notscheduled) (const :tag "deadline" deadline) (const :tag "no deadline" notdeadline) (const :tag "timestamp" timestamp) (const :tag "no timestamp" nottimestamp)))))) (list :tag "Non-standard skipping condition" :value (org-agenda-skip-function) (const org-agenda-skip-function) (sexp :tag "Function or form (quoted!)")) (list :tag "Any variable" (variable :tag "Variable") (sexp :tag "Value (sexp)"))))))
                nil [12562 17062])
            ("org-agenda-custom-commands" variable (:default-value (quote (("n" "Agenda and all TODOs" ((agenda "") (alltodo "")))))) nil [17065 23181])
            ("org-agenda-query-register" variable (:default-value 111) nil [23183 23453])
            ("org-stuck-projects" variable (:default-value (quote ("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil ""))) nil [23455 25412])
            ("org-agenda-skip" customgroup (:user-visible-flag t) nil [25414 25545])
            ("org-agenda-skip-function-global" variable nil nil [25547 26317])
            ("org-agenda-daily/weekly" customgroup (:user-visible-flag t) nil [26319 26459])
            ("org-agenda-todo-list" customgroup (:user-visible-flag t) nil [26460 26603])
            ("org-agenda-match-view" customgroup (:user-visible-flag t) nil [26604 26765])
            ("org-agenda-search-view" customgroup (:user-visible-flag t) nil [26766 26903])
            ("org-agenda-archives-mode" variable nil nil [26905 27240])
            ("org-agenda-restriction-lock-highlight-subtree" variable (:default-value t) nil [27242 27550])
            ("org-agenda-skip-comment-trees" variable (:default-value t) nil [27552 27763])
            ("org-agenda-todo-list-sublevels" variable (:default-value t) nil [27765 28067])
            ("org-agenda-todo-ignore-with-date" variable nil nil [28069 28630])
            ("org-agenda-todo-ignore-timestamp" variable nil nil [28632 30281])
            ("org-agenda-todo-ignore-scheduled" variable nil nil [30283 31649])
            ("org-agenda-todo-ignore-deadlines" variable nil nil [31651 33402])
            ("org-agenda-todo-ignore-time-comparison-use-seconds" variable nil nil [33404 34086])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [34088 34745])
            ("org-agenda-skip-scheduled-if-done" variable nil nil [34747 35170])
            ("org-agenda-skip-scheduled-if-deadline-is-shown" variable nil nil [35172 36140])
            ("org-agenda-skip-timestamp-if-deadline-is-shown" variable nil nil [36142 36764])
            ("org-agenda-skip-deadline-if-done" variable nil nil [36766 37237])
            ("org-agenda-skip-deadline-prewarning-if-scheduled" variable nil nil [37239 38378])
            ("org-agenda-skip-scheduled-delay-if-deadline" variable nil nil [38380 39165])
            ("org-agenda-skip-additional-timestamps-same-entry" variable nil nil [39167 39474])
            ("org-agenda-skip-timestamp-if-done" variable nil nil [39476 39676])
            ("org-agenda-dim-blocked-tasks" variable (:default-value t) nil [39678 40747])
            ("org-agenda-startup" customgroup (:user-visible-flag t) nil [40749 40898])
            ("org-agenda-menu-show-matcher" variable (:default-value t) nil [40900 41345])
            ("org-agenda-menu-two-columns" variable nil nil [41347 41605])
            ("org-agenda-finalize-hook" variable nil nil [41607 41980])
            ("org-agenda-mouse-1-follows-link" variable nil nil [41982 42232])
            ("org-agenda-start-with-follow-mode" variable nil nil [42234 42400])
            ("org-agenda-follow-indirect" variable nil nil [42402 42605])
            ("org-agenda-show-outline-path" variable (:default-value t) nil [42607 42763])
            ("org-agenda-start-with-entry-text-mode" variable nil nil [42765 42939])
            ("org-agenda-entry-text-maxlines" variable (:default-value 5) nil [42941 43260])
            ("org-agenda-entry-text-exclude-regexps" variable nil nil [43262 43546])
            ("org-agenda-entry-text-leaders" variable (:default-value "    > ") nil [43548 43743])
            ("org-agenda-entry-text-cleanup-hook" variable nil nil [43745 44181])
            ("org-agenda-include-inactive-timestamps" variable nil nil [44183 44312])
            ("org-agenda-windows" customgroup (:user-visible-flag t) nil [44314 44463])
            ("org-agenda-window-setup" variable (:default-value (quote reorganize-frame)) nil [44465 45302])
            ("org-agenda-window-frame-fractions" variable (:default-value (quote (0.5 . 0.75))) nil [45304 45678])
            ("org-agenda-restore-windows-after-quit" variable nil nil [45680 46133])
            ("org-agenda-span" variable (:default-value (quote week)) nil [46135 46561])
            ("org-agenda-start-on-weekday" variable (:default-value 1) nil [46563 46929])
            ("org-agenda-show-all-dates" variable (:default-value t) nil [46931 47154])
            ("org-agenda-format-date" variable (:default-value (quote org-agenda-format-date-aligned)) nil [47156 47641])
            ("org-agenda-format-date-aligned" function (:arguments ("date")) nil [47643 48416])
            ("org-agenda-time-leading-zero" variable nil nil [48418 48654])
            ("org-agenda-timegrid-use-ampm" variable nil nil [48656 48815])
            ("org-agenda-time-of-day-to-ampm" function (:arguments ("time")) nil [48817 49376])
            ("org-agenda-time-of-day-to-ampm-maybe" function (:arguments ("time")) nil [49378 49606])
            ("org-agenda-weekend-days" variable (:default-value (quote (6 0))) nil [49608 50035])
            ("org-agenda-move-date-from-past-immediately-to-today" variable (:default-value t) nil [50037 50468])
            ("org-agenda-include-diary" variable nil nil [50470 50702])
            ("org-agenda-include-deadlines" variable (:default-value t) nil [50704 50947])
            ("org-agenda-show-future-repeats" variable (:default-value t) nil [50949 51398])
            ("org-agenda-prefer-last-repeat" variable nil nil [51400 52421])
            ("org-scheduled-past-days" variable (:default-value 10000) nil [52423 52761])
            ("org-deadline-past-days" variable (:default-value 10000) nil [52763 53142])
            ("org-agenda-log-mode-items" variable (:default-value (quote (closed clock))) nil [53144 53779])
            ("org-agenda-clock-consistency-checks" variable (:default-value (quote (:max-duration "10:00" :min-duration 0 :max-gap "0:05" :gap-ok-around ("4:00") :default-face ((:background "DarkRed") (:foreground "white")) :overlap-face nil :gap-face nil :no-end-time-face nil :long-face nil :short-face nil))) nil [53781 55832])
            ("org-agenda-log-mode-add-notes" variable (:default-value t) nil [55834 56159])
            ("org-agenda-start-with-log-mode" variable nil nil [56161 56845])
            ("org-agenda-start-with-clockreport-mode" variable nil nil [56847 57057])
            ("org-agenda-clockreport-parameter-plist" variable (:default-value (quote (:link t :maxlevel 2))) nil [57059 57622])
            ("org-agenda-search-view-always-boolean" variable nil nil [57624 58878])
            ("defvaralias" code nil nil [58880 58976])
            ("org-agenda-search-view-force-full-words" variable nil nil [58978 59214])
            ("org-agenda-search-view-max-outline-level" variable nil nil [59216 59583])
            ("org-agenda-time-grid" customgroup (:user-visible-flag t) nil [59585 59727])
            ("org-agenda-search-headline-for-time" variable (:default-value t) nil [59729 60249])
            ("org-agenda-use-time-grid" variable (:default-value t) nil [60251 60692])
            ("org-agenda-time-grid" variable (:default-value (quote ((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) "......" "----------------"))) nil [60694 62208])
            ("org-agenda-show-current-time-in-grid" variable (:default-value t) nil [62210 62384])
            ("org-agenda-current-time-string" variable (:default-value "now - - - - - - - - - - - - - - - - - - - - - - - - -") nil [62386 62609])
            ("org-agenda-sorting" customgroup (:user-visible-flag t) nil [62611 62743])
            ("org-agenda-sorting-strategy" variable (:default-value (quote ((agenda habit-down time-up priority-down category-keep) (todo priority-down category-keep) (tags priority-down category-keep) (search category-keep)))) nil [62745 66475])
            ("org-agenda-cmp-user-defined" variable nil nil [66477 66900])
            ("org-sort-agenda-notime-is-late" variable (:default-value t) nil [66902 67374])
            ("org-sort-agenda-noeffort-is-high" variable (:default-value t) nil [67376 67767])
            ("org-agenda-line-format" customgroup (:user-visible-flag t) nil [67769 67926])
            ("org-agenda-prefix-format" variable (:default-value (quote ((agenda . " %i %-12:c%?-12t% s") (todo . " %i %-12:c") (tags . " %i %-12:c") (search . " %i %-12:c")))) nil [67928 70993])
            ("org-prefix-format-compiled" variable nil nil [70995 71258])
            ("org-agenda-todo-keyword-format" variable (:default-value "%-1s") nil [71260 71521])
            ("org-agenda-diary-sexp-prefix" variable nil nil [71523 71892])
            ("org-agenda-timerange-leaders" variable (:default-value (quote ("" "(%d/%d): "))) nil [71894 72491])
            ("org-agenda-scheduled-leaders" variable (:default-value (quote ("Scheduled: " "Sched.%2dx: "))) nil [72493 73221])
            ("org-agenda-inactive-leader" variable (:default-value "[") nil [73223 73463])
            ("org-agenda-deadline-leaders" variable (:default-value (quote ("Deadline:  " "In %3d d.: " "%2d d. ago: "))) nil [73465 74095])
            ("org-agenda-remove-times-when-in-prefix" variable (:default-value t) nil [74097 74932])
            ("org-agenda-remove-timeranges-from-blocks" variable nil nil [74934 75153])
            ("org-agenda-default-appointment-duration" variable nil nil [75155 75519])
            ("org-agenda-show-inherited-tags" variable (:default-value t) nil [75521 76475])
            ("org-agenda-use-tag-inheritance" variable (:default-value (quote (todo search agenda))) nil [76477 77464])
            ("org-agenda-hide-tags-regexp" variable nil nil [77466 77865])
            ("org-agenda-remove-tags" variable nil nil [77867 78249])
            ("defvaralias" code nil nil [78251 78329])
            ("org-agenda-tags-column" variable (:default-value (quote auto)) nil [78331 78922])
            ("defvaralias" code nil nil [78924 78994])
            ("org-agenda-fontify-priorities" variable (:default-value (quote cookies)) nil [78996 80080])
            ("org-agenda-day-face-function" variable nil nil [80082 80449])
            ("org-agenda-category-icon-alist" variable nil nil [80451 81748])
            ("org-agenda-column-view" customgroup (:user-visible-flag t) nil [81750 81890])
            ("org-agenda-view-columns-initially" variable nil nil [81892 82136])
            ("org-agenda-columns-show-summaries" variable (:default-value t) nil [82138 82310])
            ("org-agenda-columns-compute-summary-properties" variable (:default-value t) nil [82312 82835])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [82837 83334])
            ("org-agenda-auto-exclude-function" variable nil nil [83336 83985])
            ("org-agenda-bulk-custom-functions" variable nil nil [83987 84488])
            ("org-agenda-with-point-at-orig-entry" function (:arguments ("string" "body")) nil [84490 85041])
            ("def-edebug-spec" code nil nil [85042 85107])
            ("org-add-agenda-custom-command" function (:arguments ("entry")) nil [85109 85511])
            ("org-agenda-mode-map" variable (:default-value (make-sparse-keymap)) nil [85545 85628])
            ("defvaralias" code nil nil [85629 85682])
            ("org-agenda-menu" variable nil nil [85684 85708])
            ("org-agenda-restrict" variable nil nil [85739 85771])
            ("org-agenda-follow-mode" variable nil nil [85802 85837])
            ("org-agenda-entry-text-mode" variable nil nil [85838 85877])
            ("org-agenda-clockreport-mode" variable nil nil [85878 85918])
            ("org-agenda-show-log" variable nil nil [85919 86080])
            ("org-agenda-redo-command" variable nil nil [86081 86117])
            ("org-agenda-query-string" variable nil nil [86118 86154])
            ("org-agenda-mode-hook" variable nil nil [86155 86294])
            ("org-agenda-type" variable nil nil [86295 86323])
            ("org-agenda-force-single-file" variable nil nil [86324 86365])
            ("org-agenda-bulk-marked-entries" variable nil nil [86366 86473])
            ("org-agenda-current-date" variable nil nil [86474 86552])
            ("org-agenda-sticky" variable nil nil [86591 86866])
            ("org-toggle-sticky-agenda" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86885 87495])
            ("org-agenda-buffer" variable nil nil [87497 87572])
            ("org-agenda-last-prefix-arg" variable nil nil [87574 87613])
            ("org-agenda-this-buffer-name" variable nil nil [87614 87654])
            ("org-agenda-doing-sticky-redo" variable nil nil [87655 87696])
            ("org-agenda-this-buffer-is-sticky" variable nil nil [87697 87742])
            ("org-agenda-last-indirect-buffer" variable nil nil [87743 87851])
            ("org-agenda-local-vars" variable
               (:constant-flag t
                :default-value (quote (org-agenda-this-buffer-name org-agenda-undo-list org-agenda-pending-undo-list org-agenda-follow-mode org-agenda-entry-text-mode org-agenda-clockreport-mode org-agenda-show-log org-agenda-redo-command org-agenda-query-string org-agenda-type org-agenda-bulk-marked-entries org-agenda-undo-has-started-in org-agenda-info org-agenda-pre-window-conf org-agenda-columns-active org-agenda-tag-filter org-agenda-category-filter org-agenda-top-headline-filter org-agenda-regexp-filter org-agenda-effort-filter org-agenda-markers org-agenda-last-search-view-search-was-boolean org-agenda-last-indirect-buffer org-agenda-filtered-by-category org-agenda-filter-form org-agenda-cycle-counter org-agenda-last-prefix-arg)))
                nil [87853 88778])
            ("org-agenda-mode" function (:user-visible-flag t) nil [88780 91511])
            ("substitute-key-definition" code nil nil [91513 91600])
            ("org-defkey" code nil nil [91601 91661])
            ("org-defkey" code nil nil [91662 91722])
            ("org-defkey" code nil nil [91723 91788])
            ("org-defkey" code nil nil [91789 91849])
            ("org-defkey" code nil nil [91850 91912])
            ("org-defkey" code nil nil [91913 91989])
            ("org-defkey" code nil nil [91990 92065])
            ("org-defkey" code nil nil [92066 92131])
            ("org-defkey" code nil nil [92132 92199])
            ("org-defkey" code nil nil [92200 92269])
            ("org-defkey" code nil nil [92270 92341])
            ("org-defkey" code nil nil [92342 92415])
            ("org-defkey" code nil nil [92416 92488])
            ("org-defkey" code nil nil [92489 92556])
            ("org-defkey" code nil nil [92557 92628])
            ("org-defkey" code nil nil [92629 92696])
            ("org-defkey" code nil nil [92697 92760])
            ("org-defkey" code nil nil [92761 92830])
            ("org-defkey" code nil nil [92831 92887])
            ("org-defkey" code nil nil [92888 92963])
            ("org-defkey" code nil nil [92964 93042])
            ("org-defkey" code nil nil [93043 93129])
            ("org-defkey" code nil nil [93130 93197])
            ("org-defkey" code nil nil [93198 93265])
            ("org-defkey" code nil nil [93266 93329])
            ("org-defkey" code nil nil [93330 93395])
            ("org-defkey" code nil nil [93396 93470])
            ("org-defkey" code nil nil [93471 93544])
            ("org-defkey" code nil nil [93545 93611])
            ("org-defkey" code nil nil [93612 93693])
            ("org-defkey" code nil nil [93694 93779])
            ("org-defkey" code nil nil [93780 93860])
            ("org-defkey" code nil nil [93861 93926])
            ("org-defkey" code nil nil [93927 93991])
            ("org-defkey" code nil nil [93992 94052])
            ("org-defkey" code nil nil [94053 94113])
            ("org-defkey" code nil nil [94114 94203])
            ("org-defkey" code nil nil [94204 94268])
            ("org-defkey" code nil nil [94269 94333])
            ("org-defkey" code nil nil [94334 94400])
            ("org-defkey" code nil nil [94401 94466])
            ("org-defkey" code nil nil [94467 94531])
            ("org-defkey" code nil nil [94532 94597])
            ("org-defkey" code nil nil [94598 94663])
            ("org-defkey" code nil nil [94664 94728])
            ("org-defkey" code nil nil [94729 94793])
            ("org-defkey" code nil nil [94794 94868])
            ("org-defkey" code nil nil [94869 94944])
            ("org-defkey" code nil nil [94945 95025])
            ("org-defkey" code nil nil [95026 95107])
            ("org-defkey" code nil nil [95109 95169])
            ("org-defkey" code nil nil [95170 95234])
            ("org-defkey" code nil nil [95235 95299])
            ("let" code nil nil [95300 95428])
            ("org-defkey" code nil nil [95430 95490])
            ("org-defkey" code nil nil [95491 95556])
            ("org-defkey" code nil nil [95557 95621])
            ("org-defkey" code nil nil [95622 95679])
            ("org-defkey" code nil nil [95680 95747])
            ("org-defkey" code nil nil [95748 95809])
            ("org-defkey" code nil nil [95810 95875])
            ("org-defkey" code nil nil [95876 95941])
            ("org-defkey" code nil nil [95942 95995])
            ("org-defkey" code nil nil [95996 96053])
            ("org-defkey" code nil nil [96054 96113])
            ("org-defkey" code nil nil [96114 96181])
            ("org-defkey" code nil nil [96182 96268])
            ("org-defkey" code nil nil [96269 96338])
            ("org-defkey" code nil nil [96339 96392])
            ("org-defkey" code nil nil [96393 96446])
            ("org-defkey" code nil nil [96447 96500])
            ("org-defkey" code nil nil [96501 96562])
            ("org-defkey" code nil nil [96563 96632])
            ("org-defkey" code nil nil [96633 96695])
            ("org-defkey" code nil nil [96696 96754])
            ("org-defkey" code nil nil [96755 96813])
            ("org-defkey" code nil nil [96814 96876])
            ("org-defkey" code nil nil [96877 96935])
            ("org-defkey" code nil nil [96936 96998])
            ("substitute-key-definition" code nil nil [96999 97096])
            ("substitute-key-definition" code nil nil [97097 97202])
            ("org-defkey" code nil nil [97203 97258])
            ("org-defkey" code nil nil [97259 97329])
            ("org-defkey" code nil nil [97330 97404])
            ("org-defkey" code nil nil [97405 97466])
            ("org-defkey" code nil nil [97467 97524])
            ("org-defkey" code nil nil [97525 97585])
            ("org-defkey" code nil nil [97586 97648])
            ("org-defkey" code nil nil [97649 97710])
            ("org-defkey" code nil nil [97711 97774])
            ("org-defkey" code nil nil [97775 97838])
            ("org-defkey" code nil nil [97839 97896])
            ("org-defkey" code nil nil [97897 97954])
            ("org-defkey" code nil nil [97955 98023])
            ("org-defkey" code nil nil [98024 98081])
            ("org-defkey" code nil nil [98082 98151])
            ("org-defkey" code nil nil [98152 98210])
            ("org-defkey" code nil nil [98211 98283])
            ("org-defkey" code nil nil [98284 98345])
            ("org-defkey" code nil nil [98346 98409])
            ("org-defkey" code nil nil [98410 98469])
            ("org-defkey" code nil nil [98470 98530])
            ("org-defkey" code nil nil [98531 98593])
            ("org-defkey" code nil nil [98594 98663])
            ("org-defkey" code nil nil [98664 98737])
            ("org-defkey" code nil nil [98738 98813])
            ("org-defkey" code nil nil [98814 98893])
            ("org-defkey" code nil nil [98894 98948])
            ("org-defkey" code nil nil [98949 99005])
            ("org-defkey" code nil nil [99006 99073])
            ("org-defkey" code nil nil [99074 99154])
            ("org-defkey" code nil nil [99155 99244])
            ("org-defkey" code nil nil [99246 99315])
            ("org-defkey" code nil nil [99316 99390])
            ("org-defkey" code nil nil [99391 99463])
            ("org-defkey" code nil nil [99464 99541])
            ("org-defkey" code nil nil [99542 99604])
            ("org-defkey" code nil nil [99605 99670])
            ("org-defkey" code nil nil [99671 99736])
            ("org-defkey" code nil nil [99737 99803])
            ("org-defkey" code nil nil [99804 99872])
            ("org-defkey" code nil nil [99873 99940])
            ("org-defkey" code nil nil [99941 100012])
            ("org-defkey" code nil nil [100013 100070])
            ("org-defkey" code nil nil [100071 100131])
            ("define-key" code nil nil [100132 100203])
            ("org-defkey" code nil nil [100204 100272])
            ("org-defkey" code nil nil [100273 100341])
            ("org-defkey" code nil nil [100343 100408])
            ("org-defkey" code nil nil [100409 100474])
            ("define-key" code nil nil [100476 100560])
            ("define-key" code nil nil [100561 100647])
            ("when" code nil nil [100649 100748])
            ("easy-menu-define" code nil nil [100749 107864])
            ("org-agenda-allow-remote-undo" variable (:default-value t) nil [107883 107982])
            ("org-agenda-undo-has-started-in" variable nil nil [107983 108104])
            ("org-agenda-undo" function (:user-visible-flag t) nil [108106 109425])
            ("org-verify-change-for-undo" function (:arguments ("l1" "l2")) nil [109427 109671])
            ("org-agenda-restrict-begin" variable (:default-value (make-marker)) nil [109694 109742])
            ("org-agenda-restrict-end" variable (:default-value (make-marker)) nil [109743 109789])
            ("org-agenda-last-dispatch-buffer" variable nil nil [109790 109834])
            ("org-agenda-overriding-restriction" variable nil nil [109835 109881])
            ("org-agenda-custom-commands-contexts" variable nil nil [109883 111685])
            ("org-agenda-max-entries" variable nil nil [111687 112254])
            ("org-agenda-max-todos" variable nil nil [112256 112815])
            ("org-agenda-max-tags" variable nil nil [112817 113402])
            ("org-agenda-max-effort" variable nil nil [113404 114003])
            ("org-agenda-keep-restricted-file-list" variable nil nil [114005 114054])
            ("org-keys" variable nil nil [114055 114076])
            ("org-match" variable nil nil [114077 114099])
            ("org-agenda" function
               (:user-visible-flag t
                :arguments ("arg" "org-keys" "restriction"))
                nil [114115 121968])
            ("org-agenda-multi" variable nil nil [121970 121995])
            ("org-agenda-append-agenda" function (:user-visible-flag t) nil [121997 122479])
            ("org-agenda-normalize-custom-commands" function (:arguments ("cmds")) nil [122481 122770])
            ("org-agenda-get-restriction-and-command" function (:arguments ("prefix-descriptions")) nil [122772 129359])
            ("org-agenda-fit-window-to-buffer" function nil nil [129361 129859])
            ("org-cmd" variable nil nil [129861 129881])
            ("org-agenda-overriding-cmd" variable nil nil [129882 129920])
            ("org-agenda-overriding-arguments" variable nil nil [129921 129965])
            ("org-agenda-overriding-cmd-arguments" variable nil nil [129966 130014])
            ("org-agenda-run-series" function (:arguments ("name" "series")) nil [130015 132068])
            ("org-batch-agenda" function (:arguments ("cmd-key" "parameters")) nil [132085 132749])
            ("org-agenda-info" variable nil nil [132751 132779])
            ("org-batch-agenda-csv" function (:arguments ("cmd-key" "parameters")) nil [132796 135246])
            ("org-fix-agenda-info" function (:arguments ("props")) nil [135248 136692])
            ("org-agenda-export-csv-mapper" function (:arguments ("prop")) nil [136694 136944])
            ("org-store-agenda-views" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [136961 137096])
            ("org-batch-store-agenda-views" function (:arguments ("parameters")) nil [137113 138404])
            ("org-agenda-current-span" variable nil nil [138406 138488])
            ("org-agenda-mark-header-line" function (:arguments ("pos")) nil [138527 138902])
            ("org-mobile-creating-agendas" variable nil nil [138904 138940])
            ("org-agenda-write-buffer-name" variable (:default-value "Agenda View") nil [138968 139019])
            ("org-agenda-write" function
               (:user-visible-flag t
                :arguments ("file" "open" "nosettings" "agenda-bufname"))
                nil [139020 143056])
            ("org-agenda-remove-marked-text" function (:arguments ("property" "value")) nil [143058 143426])
            ("org-agenda-add-entry-text" function nil nil [143428 144181])
            ("org-agenda-get-some-entry-text" function (:arguments ("marker" "n-lines" "indent" "keep")) nil [144183 147252])
            ("org-check-for-org-mode" function nil nil [147254 147464])
            ("org-agenda-multi" variable nil nil [147499 147528])
            ("org-agenda-pre-window-conf" variable nil nil [147551 147590])
            ("org-agenda-columns-active" variable nil nil [147591 147629])
            ("org-agenda-name" variable nil nil [147630 147658])
            ("org-agenda-tag-filter" variable nil nil [147659 147693])
            ("org-agenda-category-filter" variable nil nil [147694 147733])
            ("org-agenda-regexp-filter" variable nil nil [147734 147771])
            ("org-agenda-effort-filter" variable nil nil [147772 147809])
            ("org-agenda-top-headline-filter" variable nil nil [147810 147853])
            ("org-agenda-tag-filter-preset" variable nil nil [147854 148418])
            ("org-agenda-category-filter-preset" variable nil nil [148420 148998])
            ("org-agenda-regexp-filter-preset" variable nil nil [149000 149572])
            ("org-agenda-effort-filter-preset" variable nil nil [149574 150149])
            ("org-agenda-use-sticky-p" function nil nil [150151 150892])
            ("org-agenda-prepare-window" function (:arguments ("abuf" "filter-alist")) nil [150894 152374])
            ("org-agenda-prepare" function (:arguments ("name")) nil [152376 154978])
            ("org-agenda-overriding-columns-format" variable nil nil [154980 155025])
            ("org-agenda-finalize" function nil nil [155049 158330])
            ("org-agenda-mark-clocking-task" function nil nil [158332 159210])
            ("org-agenda-unmark-clocking-task" function nil nil [159212 159435])
            ("org-agenda-fontify-priorities" function (:user-visible-flag t) nil [159437 160699])
            ("org-depend-tag-blocked" variable nil nil [160701 160732])
            ("org-agenda-dim-blocked-tasks" function
               (:user-visible-flag t
                :arguments ("invisible"))
                nil [160734 161870])
            ("org-agenda--mark-blocked-entry" function (:arguments ("entry")) nil [161872 162975])
            ("org-agenda-skip-function" variable nil nil [162977 163709])
            ("org-agenda-skip" function nil nil [163711 164437])
            ("org-agenda-skip-eval" function (:arguments ("form")) nil [164439 164888])
            ("org-agenda-markers" variable nil nil [164890 164987])
            ("org-agenda-last-marker-time" variable (:default-value (float-time)) nil [164988 165082])
            ("org-agenda-new-marker" function (:arguments ("pos")) nil [165084 165528])
            ("org-agenda-reset-markers" function nil nil [165530 165684])
            ("org-agenda-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [165686 166057])
            ("org-agenda-entry-text-show-here" function nil nil [166080 166733])
            ("org-agenda-entry-text-show" function (:user-visible-flag t) nil [166735 167038])
            ("org-agenda-entry-text-hide" function nil nil [167040 167301])
            ("org-agenda-get-day-face" function (:arguments ("date")) nil [167303 167664])
            ("org-agenda-show-log-scoped" variable nil nil [167666 167701])
            ("org-agenda-start-day" variable nil nil [167728 168067])
            ("org-starting-day" variable nil nil [168068 168097])
            ("org-arg-loc" variable nil nil [168136 168160])
            ("org-agenda-buffer-tmp-name" variable nil nil [168179 168218])
            ("org-agenda-list" function
               (:user-visible-flag t
                :arguments ("arg" "start-day" "span" "with-hour"))
                nil [168234 176183])
            ("org-agenda-ndays-to-span" function (:arguments ("n")) nil [176185 176378])
            ("org-agenda-span-to-ndays" function (:arguments ("span" "start-day")) nil [176380 176914])
            ("org-agenda-span-name" function (:arguments ("span")) nil [176916 177090])
            ("org-agenda-search-history" variable nil nil [177116 177154])
            ("org-search-syntax-table" variable nil nil [177156 177374])
            ("org-mode-syntax-table" variable nil nil [177376 177406])
            ("org-search-syntax-table" function nil nil [177421 177707])
            ("org-agenda-last-search-view-search-was-boolean" variable nil nil [177709 177768])
            ("org-search-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "string" "edit-at"))
                nil [177785 189554])
            ("org-agenda-propertize-selected-todo-keywords" function (:arguments ("keywords")) nil [189578 189955])
            ("org-select-this-todo-keyword" variable nil nil [189957 189998])
            ("org-last-arg" variable nil nil [189999 190024])
            ("org-todo-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [190041 193391])
            ("org-tags-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [193431 197006])
            ("org-agenda-skip-regexp" variable nil nil [197043 197280])
            ("org-agenda-overriding-header" variable nil nil [197282 197496])
            ("org-agenda-skip-entry-if" function (:arguments ("conditions")) nil [197498 197670])
            ("org-agenda-skip-subtree-if" function (:arguments ("conditions")) nil [197672 197846])
            ("org-agenda-skip-if" function (:arguments ("subtree" "conditions")) nil [197848 200948])
            ("org-agenda-skip-if-todo" function (:arguments ("args" "end")) nil [200950 202337])
            ("org-agenda-list-stuck-projects" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [202354 204463])
            ("org-disable-agenda-to-diary" variable nil nil [204488 204528])
            ("diary-list-entries-hook" variable nil nil [204565 204597])
            ("diary-time-regexp" variable nil nil [204598 204624])
            ("org-get-entries-from-diary" function (:arguments ("date")) nil [204625 206539])
            ("org-agenda-cleanup-fancy-diary-hook" variable nil nil [206541 206645])
            ("org-agenda-cleanup-fancy-diary" function nil nil [206647 207519])
            ("eval-after-load" code nil nil [207589 208076])
            ("org-modify-diary-entry-string" function (:arguments ("string")) nil [208078 208468])
            ("org-diary-default-entry" function nil nil [208470 208868])
            ("org-add-to-diary-list" function (:arguments ("args")) nil [208870 209022])
            ("org-diary-last-run-time" variable nil nil [209024 209060])
            ("org-diary" function (:arguments ("args")) nil [209077 211439])
            ("org-agenda--timestamp-to-absolute" function (:arguments ("args")) nil [211467 211837])
            ("org-agenda-get-day-entries" function (:arguments ("file" "date" "args")) nil [211839 214424])
            ("org-em" function (:arguments ("x" "y" "list")) nil [214426 214521])
            ("org-heading-keyword-regexp-format" variable nil nil [214523 214565])
            ("org-agenda-sorting-strategy-selected" variable nil nil [214586 214635])
            ("org-agenda-entry-get-agenda-timestamp" function (:arguments ("pom")) nil [214637 216024])
            ("org-agenda-get-todos" function nil nil [216026 218864])
            ("org-agenda-todo-custom-ignore-p" function (:arguments ("time" "n")) nil [218866 219294])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:arguments ("end")) nil [219311 222304])
            ("org-agenda-get-timestamps" function (:arguments ("deadlines")) nil [222306 227780])
            ("org-agenda-get-sexps" function nil nil [227782 229915])
            ("org-anniversary" function (:arguments ("year" "month" "day" "mark")) nil [230009 230241])
            ("org-cyclic" function (:arguments ("N" "year" "month" "day" "mark")) nil [230242 230463])
            ("org-block" function (:arguments ("Y1" "M1" "D1" "Y2" "M2" "D2" "mark")) nil [230464 230684])
            ("org-date" function (:arguments ("year" "month" "day" "mark")) nil [230685 230896])
            ("org-class" function (:arguments ("y1" "m1" "d1" "y2" "m2" "d2" "dayname" "skip-weeks")) nil [230933 232034])
            ("defalias" code nil nil [232036 232087])
            ("org-agenda-get-progress" function nil nil [232088 236237])
            ("org-agenda-show-clocking-issues" function (:user-visible-flag t) nil [236239 239330])
            ("org-agenda-check-clock-gap" function (:arguments ("t1" "t2" "ok-list")) nil [239332 240565])
            ("org-agenda-get-deadlines" function (:arguments ("with-hour")) nil [240567 246667])
            ("org-agenda-deadline-face" function (:arguments ("fraction")) nil [246669 246884])
            ("org-agenda-get-scheduled" function (:arguments ("deadlines" "with-hour")) nil [246886 254223])
            ("org-agenda-get-blocks" function nil nil [254225 257614])
            ("org-prefix-has-time" variable nil nil [257653 257799])
            ("org-prefix-has-tag" variable nil nil [257800 257945])
            ("org-prefix-has-effort" variable nil nil [257946 258094])
            ("org-prefix-has-breadcrumbs" variable nil nil [258095 258248])
            ("org-prefix-category-length" variable nil nil [258249 258366])
            ("org-prefix-category-max-length" variable nil nil [258367 258488])
            ("org-agenda-get-category-icon" function (:arguments ("category")) nil [258490 258827])
            ("org-agenda-format-item" function (:arguments ("extra" "txt" "level" "category" "tags" "dotime" "remove-re" "habitp")) nil [258829 265696])
            ("org-agenda-fix-displayed-tags" function (:arguments ("txt" "tags" "add-inherited" "hide-re")) nil [265698 266689])
            ("org-downcase-keep-props" function (:arguments ("s")) nil [266691 266848])
            ("org-agenda-sorting-strategy" variable nil nil [266850 266886])
            ("org-agenda-add-time-grid-maybe" function (:arguments ("list" "ndays" "todayp")) nil [266924 268622])
            ("org-compile-prefix-format" function (:arguments ("key")) nil [268624 271191])
            ("org-set-sorting-strategy" function (:arguments ("key")) nil [271193 271587])
            ("org-get-time-of-day" function (:arguments ("s" "string" "mod24")) nil [271589 272818])
            ("org-agenda-before-sorting-filter-function" variable nil nil [272820 273763])
            ("org-agenda-finalize-entries" function (:arguments ("list" "type")) nil [273765 275334])
            ("org-agenda-limit-entries" function (:arguments ("list" "prop" "limit" "fn")) nil [275336 275838])
            ("org-agenda-limit-interactively" function
               (:user-visible-flag t
                :arguments ("remove"))
                nil [275840 276880])
            ("org-agenda-highlight-todo" function (:arguments ("x")) nil [276882 278804])
            ("org-cmp-values" function (:arguments ("a" "b" "property")) nil [278806 279086])
            ("org-cmp-effort" function (:arguments ("a" "b")) nil [279088 279575])
            ("org-cmp-category" function (:arguments ("a" "b")) nil [279577 279881])
            ("org-cmp-todo-state" function (:arguments ("a" "b")) nil [279883 280764])
            ("org-cmp-alpha" function (:arguments ("a" "b")) nil [280766 281609])
            ("org-cmp-tag" function (:arguments ("a" "b")) nil [281611 281906])
            ("org-cmp-time" function (:arguments ("a" "b")) nil [281908 282203])
            ("org-cmp-ts" function (:arguments ("a" "b" "type")) nil [282205 282858])
            ("org-cmp-habit-p" function (:arguments ("a" "b")) nil [282860 283095])
            ("org-entries-lessp" function (:arguments ("a" "b")) nil [283097 285999])
            ("org-agenda-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [286030 286167])
            ("overlay-put" code nil nil [286168 286258])
            ("overlay-put" code nil nil [286259 286374])
            ("delete-overlay" code nil nil [286375 286427])
            ("org-agenda-set-restriction-lock-from-agenda" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286429 287089])
            ("org-agenda-set-restriction-lock" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [287106 288745])
            ("org-agenda-remove-restriction-lock" function
               (:user-visible-flag t
                :arguments ("noupdate"))
                nil [288747 289314])
            ("org-agenda-maybe-redo" function nil nil [289316 289814])
            ("org-agenda-check-type" function (:arguments ("error" "types")) nil [289837 290245])
            ("org-agenda-Quit" function (:user-visible-flag t) nil [290247 290444])
            ("org-agenda-quit" function (:user-visible-flag t) nil [290446 290804])
            ("org-agenda--quit" function (:arguments ("bury")) nil [290806 292076])
            ("org-agenda-exit" function (:user-visible-flag t) nil [292078 292538])
            ("org-agenda-kill-all-agenda-buffers" function (:user-visible-flag t) nil [292540 292856])
            ("org-agenda-execute" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [292858 293128])
            ("org-agenda-redo" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [293130 296213])
            ("org-agenda-redo-all" function
               (:user-visible-flag t
                :arguments ("exhaustive"))
                nil [296215 296590])
            ("org-global-tags-completion-table" variable nil nil [296592 296637])
            ("org-agenda-filter-form" variable nil nil [296638 296673])
            ("org-agenda-filtered-by-category" variable nil nil [296674 296718])
            ("org-agenda-filter-by-category" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [296720 297522])
            ("org-find-top-headline" function (:arguments ("pos")) nil [297524 297962])
            ("org-agenda-filtered-by-top-headline" variable nil nil [297964 298012])
            ("org-agenda-filter-by-top-headline" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [298013 298595])
            ("org-agenda-regexp-filter" variable nil nil [298597 298634])
            ("org-agenda-filter-by-regexp" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [298635 299373])
            ("org-agenda-effort-filter" variable nil nil [299375 299412])
            ("org-agenda-filter-by-effort" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [299413 300995])
            ("org-agenda-filter-remove-all" function (:user-visible-flag t) nil [300997 301500])
            ("org-agenda-filter-by-tag" function
               (:user-visible-flag t
                :arguments ("arg" "char" "exclude"))
                nil [301502 304597])
            ("org-agenda-get-represented-tags" function nil nil [304599 304948])
            ("org-agenda-filter-make-matcher" function (:arguments ("filter" "type" "expand")) nil [304951 306592])
            ("org-agenda-filter-make-matcher-tag-exp" function (:arguments ("tags" "op")) nil [306594 307367])
            ("org-agenda-filter-effort-form" function (:arguments ("e")) nil [307369 307796])
            ("org-agenda-compare-effort" function (:arguments ("op" "value")) nil [307798 308258])
            ("org-agenda-filter-expand-tags" function (:arguments ("filter" "no-operator")) nil [308260 308854])
            ("org-agenda-filter-apply" function (:arguments ("filter" "type" "expand")) nil [308856 310084])
            ("org-agenda-filter-top-headline-apply" function (:arguments ("hl" "negative")) nil [310086 310730])
            ("org-agenda-filter-hide-line" function (:arguments ("type")) nil [310732 311016])
            ("org-agenda-remove-filter" function (:arguments ("type")) nil [311018 311627])
            ("org-agenda-filter-show-all-tag" function nil nil [311629 311705])
            ("org-agenda-filter-show-all-re" function nil nil [311706 311784])
            ("org-agenda-filter-show-all-effort" function nil nil [311785 311867])
            ("org-agenda-filter-show-all-cat" function nil nil [311868 311949])
            ("org-agenda-filter-show-all-top-filter" function nil nil [311950 312042])
            ("org-agenda-manipulate-query-add" function (:user-visible-flag t) nil [312044 312289])
            ("org-agenda-manipulate-query-subtract" function (:user-visible-flag t) nil [312290 312540])
            ("org-agenda-manipulate-query-add-re" function (:user-visible-flag t) nil [312541 312788])
            ("org-agenda-manipulate-query-subtract-re" function (:user-visible-flag t) nil [312789 313041])
            ("org-agenda-manipulate-query" function (:arguments ("char")) nil [313042 314022])
            ("org-add-to-string" function (:arguments ("var" "string")) nil [314024 314109])
            ("org-agenda-goto-date" function
               (:user-visible-flag t
                :arguments ("span"))
                nil [314111 315374])
            ("org-agenda-goto-today" function (:user-visible-flag t) nil [315376 316026])
            ("org-agenda-find-same-or-today-or-agenda" function (:arguments ("cnt")) nil [316028 316452])
            ("org-agenda-backward-block" function (:user-visible-flag t) nil [316454 316584])
            ("org-agenda-forward-block" function
               (:user-visible-flag t
                :arguments ("backward"))
                nil [316586 317630])
            ("org-agenda-later" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [317632 319188])
            ("org-agenda-earlier" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [319190 319379])
            ("org-agenda-view-mode-dispatch" function (:user-visible-flag t) nil [319381 320930])
            ("org-agenda-reset-view" function (:user-visible-flag t) nil [320932 321067])
            ("org-agenda-day-view" function
               (:user-visible-flag t
                :arguments ("day-of-month"))
                nil [321069 321289])
            ("org-agenda-week-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [321291 321753])
            ("org-agenda-fortnight-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [321755 322232])
            ("org-agenda-month-view" function
               (:user-visible-flag t
                :arguments ("month"))
                nil [322234 322670])
            ("org-agenda-year-view" function
               (:user-visible-flag t
                :arguments ("year"))
                nil [322672 323125])
            ("org-agenda-change-time-span" function (:arguments ("span" "n")) nil [323127 323966])
            ("org-agenda-compute-starting-span" function (:arguments ("sd" "span" "n")) nil [323968 325313])
            ("org-agenda-next-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [325315 325799])
            ("org-agenda-previous-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [325801 326117])
            ("org-hl" variable (:default-value (make-overlay 1 1)) nil [326147 326181])
            ("overlay-put" code nil nil [326182 326219])
            ("org-highlight" function (:arguments ("begin" "end" "buffer")) nil [326221 326371])
            ("org-unhighlight" function nil nil [326373 326451])
            ("org-unhighlight-once" function nil nil [326453 326637])
            ("org-agenda-pre-follow-window-conf" variable nil nil [326639 326685])
            ("org-agenda-follow-mode" function (:user-visible-flag t) nil [326686 327189])
            ("org-agenda-entry-text-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [327191 328079])
            ("org-agenda-clockreport-mode" function (:user-visible-flag t) nil [328081 328423])
            ("org-agenda-log-mode" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [328425 329132])
            ("org-agenda-archives-mode" function
               (:user-visible-flag t
                :arguments ("with-files"))
                nil [329134 329833])
            ("org-agenda-toggle-diary" function (:user-visible-flag t) nil [329835 330168])
            ("org-agenda-toggle-deadlines" function (:user-visible-flag t) nil [330170 330544])
            ("org-agenda-toggle-time-grid" function (:user-visible-flag t) nil [330546 330871])
            ("org-agenda-set-mode-name" function nil nil [330873 333533])
            ("org-agenda-update-agenda-type" function nil nil [333535 333771])
            ("org-agenda-next-line" function (:user-visible-flag t) nil [333773 333956])
            ("org-agenda-previous-line" function (:user-visible-flag t) nil [333958 334153])
            ("org-agenda-next-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [334155 334514])
            ("org-agenda-previous-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [334516 334869])
            ("org-agenda-do-context-action" function nil nil [334871 335294])
            ("org-agenda-show-tags" function (:user-visible-flag t) nil [335296 335581])
            ("org-agenda-goto" function
               (:user-visible-flag t
                :arguments ("highlight"))
                nil [335583 336325])
            ("org-agenda-after-show-hook" variable nil nil [336327 336482])
            ("org-agenda-kill" function (:user-visible-flag t) nil [336484 337832])
            ("org-archive-default-command" variable nil nil [337834 337870])
            ("org-agenda-archive-default" function (:user-visible-flag t) nil [337899 338105])
            ("org-agenda-archive-default-with-confirmation" function (:user-visible-flag t) nil [338107 338340])
            ("org-agenda-archive" function (:user-visible-flag t) nil [338342 338508])
            ("org-agenda-archive-to-archive-sibling" function (:user-visible-flag t) nil [338510 338677])
            ("org-agenda-archive-with" function
               (:user-visible-flag t
                :arguments ("cmd" "confirm"))
                nil [338679 339468])
            ("org-remove-subtree-entries-from-agenda" function (:arguments ("buf" "beg" "end")) nil [339470 340368])
            ("org-agenda-refile" function
               (:user-visible-flag t
                :arguments ("goto" "rfloc" "no-update"))
                nil [340370 341570])
            ("org-agenda-open-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [341572 343101])
            ("org-agenda-copy-local-variable" function (:arguments ("var")) nil [343103 343415])
            ("org-agenda-switch-to" function
               (:user-visible-flag t
                :arguments ("delete-other-windows"))
                nil [343417 344298])
            ("org-agenda-goto-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [344300 344464])
            ("org-agenda-show" function
               (:user-visible-flag t
                :arguments ("full-entry"))
                nil [344466 344808])
            ("org-agenda-show-window" variable nil nil [344810 344845])
            ("org-agenda-show-and-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [344846 345579])
            ("org-agenda-show-scroll-down" function (:user-visible-flag t) nil [345581 345873])
            ("org-agenda-show-1" function
               (:user-visible-flag t
                :arguments ("more"))
                nil [345875 347483])
            ("org-agenda-cycle-counter" variable nil nil [347485 347522])
            ("org-agenda-cycle-show" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [347523 348431])
            ("org-agenda-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [348433 348659])
            ("org-agenda-show-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [348661 348827])
            ("org-agenda-check-no-diary" function nil nil [348829 348994])
            ("org-agenda-error" function nil nil [348996 349137])
            ("org-agenda-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [349139 350501])
            ("org-agenda-do-tree-to-indirect-buffer" function (:arguments ("arg")) nil [350503 350920])
            ("org-last-heading-marker" variable (:default-value (make-marker)) nil [350922 351074])
            ("org-agenda-todo-nextset" function (:user-visible-flag t) nil [351076 351195])
            ("org-agenda-todo-previousset" function (:user-visible-flag t) nil [351197 351328])
            ("org-agenda-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [351330 352952])
            ("org-agenda-add-note" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [352954 353437])
            ("org-agenda-change-all-lines" function (:arguments ("newhead" "hdmarker" "fixface" "just-this")) nil [353439 356218])
            ("org-agenda-align-tags" function (:arguments ("line")) nil [356220 357445])
            ("org-agenda-priority-up" function (:user-visible-flag t) nil [357447 357586])
            ("org-agenda-priority-down" function (:user-visible-flag t) nil [357588 357731])
            ("org-agenda-priority" function
               (:user-visible-flag t
                :arguments ("force-direction"))
                nil [357733 358840])
            ("org-agenda-set-tags" function
               (:user-visible-flag t
                :arguments ("tag" "onoff"))
                nil [358901 359688])
            ("org-agenda-set-property" function (:user-visible-flag t) nil [359690 360170])
            ("org-agenda-set-effort" function (:user-visible-flag t) nil [360172 360761])
            ("org-agenda-toggle-archive-tag" function (:user-visible-flag t) nil [360763 361406])
            ("org-agenda-do-date-later" function (:arguments ("arg")) nil [361408 361956])
            ("org-agenda-do-date-earlier" function (:arguments ("arg")) nil [361958 362518])
            ("org-agenda-date-later" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [362520 363944])
            ("org-agenda-date-earlier" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [363946 364113])
            ("org-agenda-date-later-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364115 364357])
            ("org-agenda-date-earlier-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364359 364605])
            ("org-agenda-date-later-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364607 364753])
            ("org-agenda-date-earlier-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364755 364905])
            ("org-agenda-show-new-time" function (:arguments ("marker" "stamp" "prefix")) nil [364907 365609])
            ("org-agenda-date-prompt" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365611 366455])
            ("org-agenda-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [366457 367117])
            ("org-agenda-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [367119 367698])
            ("org-agenda-clock-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367700 368451])
            ("org-agenda-clock-out" function (:user-visible-flag t) nil [368453 369108])
            ("org-agenda-clock-cancel" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369110 369378])
            ("org-agenda-clock-goto" function (:user-visible-flag t) nil [369380 370082])
            ("org-agenda-diary-entry-in-org-file" function nil nil [370084 371997])
            ("org-agenda-insert-diary-strategy" variable (:default-value (quote date-tree)) nil [371999 372520])
            ("org-agenda-insert-diary-extract-time" variable nil nil [372522 372701])
            ("org-agenda-bulk-mark-char" variable (:default-value ">") nil [372703 372858])
            ("org-agenda-add-entry-to-org-agenda-diary-file" function (:arguments ("type" "text" "d1" "d2")) nil [372860 375815])
            ("org-agenda-insert-diary-as-top-level" function (:arguments ("text")) nil [375817 376261])
            ("org-agenda-insert-diary-make-new-entry" function (:arguments ("text")) nil [376263 377139])
            ("org-agenda-diary-entry" function (:user-visible-flag t) nil [377141 379035])
            ("org-agenda-execute-calendar-command" function (:arguments ("cmd")) nil [379037 379880])
            ("org-agenda-phases-of-moon" function (:user-visible-flag t) nil [379882 380073])
            ("org-agenda-holidays" function (:user-visible-flag t) nil [380075 380251])
            ("calendar-longitude" variable nil nil [380253 380280])
            ("calendar-latitude" variable nil nil [380311 380337])
            ("calendar-location-name" variable nil nil [380369 380400])
            ("org-agenda-sunrise-sunset" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [380428 381010])
            ("org-agenda-goto-calendar" function (:user-visible-flag t) nil [381012 381504])
            ("org-calendar-goto-agenda" function (:user-visible-flag t) nil [381521 381991])
            ("org-agenda-convert-date" function nil nil [381993 383357])
            ("org-agenda-bulk-marked-p" function nil nil [383378 383551])
            ("org-agenda-bulk-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [383553 384504])
            ("org-agenda-bulk-mark-all" function (:user-visible-flag t) nil [384506 384645])
            ("org-agenda-bulk-mark-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [384647 385366])
            ("org-agenda-bulk-unmark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [385368 386149])
            ("org-agenda-bulk-toggle-all" function (:user-visible-flag t) nil [386151 386419])
            ("org-agenda-bulk-toggle" function (:user-visible-flag t) nil [386421 386608])
            ("org-agenda-bulk-remove-overlays" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [386610 387084])
            ("org-agenda-bulk-unmark-all" function (:user-visible-flag t) nil [387086 387419])
            ("org-agenda-persistent-marks" variable nil nil [387421 387670])
            ("org-agenda-bulk-action" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [387672 394100])
            ("org-agenda-capture" function
               (:user-visible-flag t
                :arguments ("with-time"))
                nil [394102 394543])
            ("org-agenda-reapply-filters" function nil nil [394589 395150])
            ("org-agenda-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg" "backward"))
                nil [395152 395983])
            ("org-agenda-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [395985 396134])
            ("org-agenda-show-the-flagging-note" function (:user-visible-flag t) nil [396156 397385])
            ("org-agenda-remove-flag" function (:arguments ("marker")) nil [397387 397743])
            ("org-agenda-get-any-marker" function (:arguments ("pos")) nil [397745 397922])
            ("appt-time-msg-list" variable nil nil [397951 397978])
            ("org-agenda-to-appt" function
               (:user-visible-flag t
                :arguments ("refresh" "filter" "args"))
                nil [398016 402148])
            ("org-agenda-today-p" function (:arguments ("date")) nil [402150 402514])
            ("org-agenda-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [402516 402821])
            ("org-agenda" package nil nil [402823 402844]))          
      :file "org-agenda.el"
      :pointmax 402874
      :fsize 402877
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-inhibit-highlight-removal" variable nil nil [2832 2874])
            ("defvar-local" code nil nil [2902 3006])
            ("cl-lib" include nil nil [3037 3054])
            ("gnus-sum" include nil nil [3075 3094])
            ("calendar" include nil nil [3097 3116])
            ("find-func" include nil nil [3117 3137])
            ("format-spec" include nil nil [3138 3160])
            ("or" code nil nil [3162 3557])
            ("org-macs" include nil nil [3559 3578])
            ("org-compat" include nil nil [3579 3600])
            ("org-outline-regexp" variable (:default-value "\\*+ ") nil [3975 4045])
            ("org-outline-regexp-bol" variable (:default-value "^\\*+ ") nil [4047 4232])
            ("org-heading-regexp" variable (:default-value "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$") nil [4234 4420])
            ("declare-function" code nil nil [4422 4482])
            ("declare-function" code nil nil [4483 4554])
            ("declare-function" code nil nil [4555 4628])
            ("declare-function" code nil nil [4629 4691])
            ("declare-function" code nil nil [4692 4767])
            ("declare-function" code nil nil [4768 4856])
            ("declare-function" code nil nil [4857 4920])
            ("declare-function" code nil nil [4921 4992])
            ("declare-function" code nil nil [4993 5079])
            ("declare-function" code nil nil [5080 5147])
            ("declare-function" code nil nil [5148 5215])
            ("declare-function" code nil nil [5216 5309])
            ("declare-function" code nil nil [5310 5395])
            ("declare-function" code nil nil [5396 5489])
            ("declare-function" code nil nil [5490 5566])
            ("declare-function" code nil nil [5567 5637])
            ("declare-function" code nil nil [5638 5706])
            ("declare-function" code nil nil [5707 5768])
            ("declare-function" code nil nil [5769 5822])
            ("declare-function" code nil nil [5823 5882])
            ("declare-function" code nil nil [5883 5977])
            ("declare-function" code nil nil [5978 6034])
            ("declare-function" code nil nil [6035 6099])
            ("declare-function" code nil nil [6100 6172])
            ("declare-function" code nil nil [6173 6236])
            ("declare-function" code nil nil [6237 6309])
            ("declare-function" code nil nil [6310 6367])
            ("declare-function" code nil nil [6368 6434])
            ("declare-function" code nil nil [6435 6520])
            ("declare-function" code nil nil [6521 6580])
            ("declare-function" code nil nil [6581 6650])
            ("declare-function" code nil nil [6651 6745])
            ("declare-function" code nil nil [6746 6818])
            ("declare-function" code nil nil [6819 6901])
            ("declare-function" code nil nil [6902 6971])
            ("declare-function" code nil nil [6972 7031])
            ("declare-function" code nil nil [7032 7093])
            ("declare-function" code nil nil [7094 7146])
            ("declare-function" code nil nil [7147 7210])
            ("declare-function" code nil nil [7211 7274])
            ("declare-function" code nil nil [7275 7343])
            ("declare-function" code nil nil [7344 7415])
            ("declare-function" code nil nil [7416 7481])
            ("declare-function" code nil nil [7482 7531])
            ("declare-function" code nil nil [7532 7601])
            ("declare-function" code nil nil [7602 7675])
            ("declare-function" code nil nil [7676 7731])
            ("declare-function" code nil nil [7732 7807])
            ("declare-function" code nil nil [7808 7884])
            ("declare-function" code nil nil [7885 7946])
            ("declare-function" code nil nil [7947 8004])
            ("declare-function" code nil nil [8005 8072])
            ("declare-function" code nil nil [8073 8140])
            ("declare-function" code nil nil [8141 8208])
            ("declare-function" code nil nil [8209 8285])
            ("declare-function" code nil nil [8286 8348])
            ("declare-function" code nil nil [8349 8415])
            ("declare-function" code nil nil [8416 8468])
            ("declare-function" code nil nil [8469 8528])
            ("declare-function" code nil nil [8529 8605])
            ("declare-function" code nil nil [8606 8732])
            ("declare-function" code nil nil [8733 8791])
            ("declare-function" code nil nil [8792 8865])
            ("declare-function" code nil nil [8866 8930])
            ("declare-function" code nil nil [8931 8989])
            ("declare-function" code nil nil [8990 9043])
            ("declare-function" code nil nil [9044 9133])
            ("declare-function" code nil nil [9134 9222])
            ("ffap-url-regexp" variable nil nil [9224 9248])
            ("org-element-paragraph-separate" variable nil nil [9249 9288])
            ("org-uniquify" function (:arguments ("list")) nil [9290 9434])
            ("org-get-at-bol" function (:arguments ("property")) nil [9436 9575])
            ("org-trim" function (:arguments ("s" "keep-lead")) nil [9577 9956])
            ("org-babel-load-languages" variable nil nil [10021 10054])
            ("org-babel-do-load-languages" function (:arguments ("sym" "value")) nil [10071 10519])
            ("declare-function" code nil nil [10521 10607])
            ("org-babel-load-file" function
               (:user-visible-flag t
                :arguments ("file" "compile"))
                nil [10623 11829])
            ("org-babel-load-languages" variable (:default-value (quote ((emacs-lisp . t)))) nil [11831 14040])
            ("org-clone-delete-id" variable nil nil [14071 14339])
            ("org-check-version" code nil nil [14353 14372])
            ("org-version" function
               (:user-visible-flag t
                :arguments ("here" "full" "message"))
                nil [14389 15689])
            ("org-version" variable
               (:constant-flag t
                :default-value (org-version))
                nil [15691 15727])
            ("org-block-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+begin_?\\([^ 
]+\\)\\(\\([^
]+\\)\\)?
\\([^ ]+?\\)#\\+end_?\\1[ 	]*$")
                nil [15765 15925])
            ("org-dblock-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:BEGIN\\|begin\\):[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?")
                nil [15927 16097])
            ("org-dblock-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:END\\|end\\)\\([: 	
]\\|$\\)")
                nil [16099 16218])
            ("org-clock-string" variable
               (:constant-flag t
                :default-value "CLOCK:")
                nil [16245 16354])
            ("org-closed-string" variable (:default-value "CLOSED:") nil [16356 16467])
            ("org-deadline-string" variable (:default-value "DEADLINE:") nil [16469 16735])
            ("org-scheduled-string" variable (:default-value "SCHEDULED:") nil [16737 17011])
            ("org-ds-keyword-length" variable
               (:constant-flag t
                :default-value (+ 2 (apply (function max) (mapcar (function length) (list org-deadline-string org-scheduled-string org-clock-string org-closed-string)))))
                nil [17013 17248])
            ("org-planning-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" (regexp-opt (list org-closed-string org-deadline-string org-scheduled-string) t)))
                nil [17250 17464])
            ("org-clock-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" org-clock-string))
                nil [17466 17568])
            ("org-deadline-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string))
                nil [17570 17669])
            ("org-deadline-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+\\)>"))
                nil [17671 17822])
            ("org-deadline-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [17824 18037])
            ("org-deadline-line-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<\\(" org-deadline-string "\\).*"))
                nil [18039 18181])
            ("org-scheduled-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string))
                nil [18183 18285])
            ("org-scheduled-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+\\)>"))
                nil [18287 18441])
            ("org-scheduled-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [18443 18659])
            ("org-closed-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-closed-string " *\\[\\([^]]+\\)\\]"))
                nil [18661 18810])
            ("org-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18812 19068])
            ("org-keyword-time-not-clock-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [19070 19315])
            ("org-maybe-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) "\\)?" " *\\([[<][0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?[]>]" "\\|" "<%%([^
>]*>\\)"))
                nil [19317 19658])
            ("org-all-time-keywords" variable
               (:constant-flag t
                :default-value (mapcar (lambda (w) (substring w 0 -1)) (list org-scheduled-string org-deadline-string org-clock-string org-closed-string)))
                nil [19660 19850])
            ("org-drawer-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*:\\(\\(?:\\w\\|[-_]\\)+\\):[ 	]*$")
                nil [19865 20030])
            ("org-property-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:PROPERTIES:[ 	]*$")
                nil [20032 20162])
            ("org-property-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [20164 20284])
            ("org-clock-drawer-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:CLOCK:[ 	]*$")
                nil [20286 20412])
            ("org-clock-drawer-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [20414 20535])
            ("org-property-drawer-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*:PROPERTIES:[ 	]*
" "\\(?:[ 	]*:\\S-+:\\(?: .*\\)?[ 	]*
\\)*?" "[ 	]*:END:[ 	]*$"))
                nil [20537 20723])
            ("org-clock-drawer-re" variable
               (:constant-flag t
                :default-value (concat "\\(" org-clock-drawer-start-re "\\)[^ ]*?\\(" org-clock-drawer-end-re "\\)
?"))
                nil [20725 20888])
            ("org-heading-keyword-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20905 21255])
            ("org-heading-keyword-maybe-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)?\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [21257 21604])
            ("org-archive-tag" variable
               (:constant-flag t
                :default-value "ARCHIVE")
                nil [21606 21797])
            ("org-comment-string" variable
               (:constant-flag t
                :default-value "COMMENT")
                nil [21819 22022])
            ("org-latex-regexps" variable
               (:constant-flag t
                :default-value (quote (("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$1" "\\([^$]\\|^\\)\\(\\$[^ 	
,;.$]\\$\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("$" "\\([^$]\\|^\\)\\(\\(\\$\\([^ 	
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^ 	
,.$]\\)\\$\\)\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 nil) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 nil))))
                nil [22065 22858])
            ("org-effort-property" variable
               (:constant-flag t
                :default-value "Effort")
                nil [22880 23060])
            ("org-table-any-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(|\\|\\+-[-+]\\)")
                nil [23074 23182])
            ("org-table-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|")
                nil [23184 23262])
            ("org-table-dataline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|[^-]")
                nil [23264 23350])
            ("org-table-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|-")
                nil [23352 23433])
            ("org-table1-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\+-[-+]")
                nil [23435 23524])
            ("org-table-any-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^|+ 	]")
                nil [23526 23688])
            ("org-TBLFM-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+TBLFM: ")
                nil [23690 23765])
            ("org-ts-regexp" variable
               (:constant-flag t
                :default-value "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)>")
                nil [23783 23921])
            ("org-ts-regexp-inactive" variable
               (:constant-flag t
                :default-value "\\[\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)\\]")
                nil [23923 24085])
            ("org-ts-regexp-both" variable
               (:constant-flag t
                :default-value "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?\\)[]>]")
                nil [24087 24237])
            ("org-ts-regexp0" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\( +[^]+0-9>
 -]+\\)?\\( +\\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [24239 24589])
            ("org-ts-regexp1" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>
 -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [24591 24811])
            ("org-ts-regexp2" variable
               (:constant-flag t
                :default-value (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>"))
                nil [24813 24944])
            ("org-ts-regexp3" variable
               (:constant-flag t
                :default-value (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]"))
                nil [24946 25096])
            ("org-tr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "--?-?" org-ts-regexp))
                nil [25098 25219])
            ("org-tr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "--?-?" org-ts-regexp-both))
                nil [25221 25359])
            ("org-tsr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?"))
                nil [25361 25512])
            ("org-tsr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?"))
                nil [25514 25730])
            ("org-repeat-re" variable
               (:constant-flag t
                :default-value "<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*?\\([.+]?\\+[0-9]+[hdwmy]\\(/[0-9]+[hdwmy]\\)?\\)")
                nil [25732 25963])
            ("org-time-stamp-formats" variable
               (:constant-flag t
                :default-value (quote ("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
                nil [25965 26110])
            ("org" customgroup (:user-visible-flag t) nil [26140 26259])
            ("org-mode-hook" variable nil nil [26261 26380])
            ("org-load-hook" variable nil nil [26382 26490])
            ("org-log-buffer-setup-hook" variable nil nil [26492 26636])
            ("org-modules" variable nil nil [26638 26658])
            ("org-modules-loaded" variable nil nil [26676 26749])
            ("org-load-modules-maybe" function (:arguments ("force")) nil [26751 27065])
            ("org-set-modules" function (:arguments ("var" "value")) nil [27067 27292])
            ("org-modules" variable (:default-value (quote (org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail))) nil [27294 32693])
            ("org-export-registered-backends" variable nil nil [32695 32734])
            ("declare-function" code nil nil [32749 32826])
            ("declare-function" code nil nil [32827 32886])
            ("org-export-backends" variable (:default-value (quote (ascii html icalendar latex odt))) nil [32887 37127])
            ("eval-after-load" code nil nil [37129 37357])
            ("org-support-shift-select" variable nil nil [37359 39485])
            ("org-loop-over-headlines-in-active-region" variable nil nil [39487 40576])
            ("org-startup" customgroup (:user-visible-flag t) nil [40578 40683])
            ("org-startup-folded" variable (:default-value t) nil [40685 41436])
            ("org-startup-truncated" variable (:default-value t) nil [41438 42208])
            ("org-startup-indented" variable nil nil [42210 42586])
            ("org-use-sub-superscripts" variable (:default-value t) nil [42588 44020])
            ("org-startup-with-beamer-mode" variable nil nil [44022 44310])
            ("org-startup-align-all-tables" variable nil nil [44312 44756])
            ("org-startup-with-inline-images" variable nil nil [44758 45092])
            ("org-startup-with-latex-preview" variable nil nil [45094 45468])
            ("org-insert-mode-line-in-empty-file" variable nil nil [45470 45938])
            ("org-replace-disputed-keys" variable nil nil [45940 46666])
            ("org-use-extra-keys" variable nil nil [46668 46953])
            ("defvaralias" code nil nil [46955 47015])
            ("org-disputed-keys" variable (:default-value (quote (([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)])))) nil [47017 47701])
            ("org-key" function (:arguments ("key")) nil [47703 48060])
            ("org-defkey" function (:arguments ("keymap" "key" "def")) nil [48062 48202])
            ("org-ellipsis" variable nil nil [48204 48711])
            ("org-display-table" variable nil nil [48713 48814])
            ("org-keywords" customgroup (:user-visible-flag t) nil [48816 48905])
            ("org-closed-keep-when-no-todo" variable nil nil [48907 49133])
            ("org-structure" customgroup (:user-visible-flag t) nil [49135 49259])
            ("org-reveal-location" customgroup (:user-visible-flag t) nil [49261 49409])
            ("org-show-context-detail" variable (:default-value (quote ((agenda . local) (bookmark-jump . lineage) (isearch . lineage) (default . ancestors)))) nil [49411 52266])
            ("org-indirect-buffer-display" variable (:default-value (quote other-window)) nil [52268 53162])
            ("org-use-speed-commands" variable nil nil [53164 53752])
            ("org-speed-commands-user" variable nil nil [53754 54715])
            ("org-bookmark-names-plist" variable (:default-value (quote (:last-capture "org-capture-last-stored" :last-refile "org-refile-last-stored" :last-capture-marker "org-capture-last-stored-marker"))) nil [54717 55275])
            ("org-cycle" customgroup (:user-visible-flag t) nil [55277 55399])
            ("org-cycle-skip-children-state-if-no-children" variable (:default-value t) nil [55401 55566])
            ("org-cycle-max-level" variable nil nil [55568 56224])
            ("org-hide-block-startup" variable nil nil [56226 56475])
            ("org-cycle-global-at-bob" variable nil nil [56477 57075])
            ("org-cycle-level-after-item/entry-creation" variable (:default-value t) nil [57077 57796])
            ("org-cycle-emulate-tab" variable (:default-value t) nil [57798 58504])
            ("org-cycle-separator-lines" variable (:default-value 2) nil [58506 59268])
            ("put" code nil nil [59269 59332])
            ("org-pre-cycle-hook" variable nil nil [59334 59803])
            ("org-cycle-hook" variable (:default-value (quote (org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-show-empty-lines org-optimize-window-after-visibility-change))) nil [59805 60486])
            ("org-edit-structure" customgroup (:user-visible-flag t) nil [60488 60627])
            ("org-odd-levels-only" variable nil nil [60629 61223])
            ("org-adapt-indentation" variable (:default-value t) nil [61225 62307])
            ("org-special-ctrl-a/e" variable nil nil [62309 63929])
            ("defvaralias" code nil nil [63930 63985])
            ("org-special-ctrl-k" variable nil nil [63987 64506])
            ("org-ctrl-k-protect-subtree" variable nil nil [64508 65121])
            ("org-special-ctrl-o" variable (:default-value t) nil [65123 65255])
            ("org-catch-invisible-edits" variable nil nil [65257 66422])
            ("org-yank-folded-subtrees" variable (:default-value t) nil [66424 66846])
            ("org-yank-adjusted-subtrees" variable nil nil [66848 67096])
            ("org-M-RET-may-split-line" variable (:default-value (quote ((default . t)))) nil [67098 67873])
            ("org-insert-heading-respect-content" variable nil nil [67876 68280])
            ("org-blank-before-new-entry" variable (:default-value (quote ((heading . auto) (plain-list-item . auto)))) nil [68282 69009])
            ("org-insert-heading-hook" variable nil nil [69011 69143])
            ("org-enable-fixed-width-editor" variable (:default-value t) nil [69145 69419])
            ("org-goto-auto-isearch" variable (:default-value t) nil [69421 69873])
            ("org-sparse-trees" customgroup (:user-visible-flag t) nil [69875 70005])
            ("org-highlight-sparse-tree-matches" variable (:default-value t) nil [70007 70265])
            ("org-remove-highlights-with-change" variable (:default-value t) nil [70267 70736])
            ("org-occur-case-fold-search" variable (:default-value t) nil [70738 71150])
            ("org-occur-hook" variable (:default-value (quote (org-first-headline-recenter))) nil [71152 71406])
            ("org-imenu-and-speedbar" customgroup (:user-visible-flag t) nil [71408 71556])
            ("org-imenu-depth" variable (:default-value 2) nil [71558 71733])
            ("org-table" customgroup (:user-visible-flag t) nil [71735 71835])
            ("org-self-insert-cluster-for-undo" variable nil nil [71837 72172])
            ("org-table-tab-recognizes-table.el" variable (:default-value t) nil [72174 72434])
            ("org-link" customgroup (:user-visible-flag t) nil [72436 72533])
            ("defvar-local" code nil nil [72535 72695])
            ("org-link-parameters" variable (:default-value (quote (("doi" :follow org--open-doi-link) ("elisp" :follow org--open-elisp-link) ("file" :complete org-file-complete-link) ("ftp" :follow (lambda (path) (browse-url (concat "ftp:" path)))) ("help" :follow org--open-help-link) ("http" :follow (lambda (path) (browse-url (concat "http:" path)))) ("https" :follow (lambda (path) (browse-url (concat "https:" path)))) ("mailto" :follow (lambda (path) (browse-url (concat "mailto:" path)))) ("news" :follow (lambda (path) (browse-url (concat "news:" path)))) ("shell" :follow org--open-shell-link)))) nil [72697 74725])
            ("org-link-get-parameter" function (:arguments ("type" "key")) nil [74727 74912])
            ("org-link-set-parameters" function (:arguments ("type" "parameters")) nil [74914 75293])
            ("org-link-types" function nil nil [75295 75396])
            ("org-link-abbrev-alist" variable nil nil [75398 76617])
            ("org-descriptive-links" variable (:default-value t) nil [76619 77074])
            ("org-link-file-path-type" variable (:default-value (quote adaptive)) nil [77076 77701])
            ("defvaralias" code nil nil [77703 77757])
            ("org-highlight-links" variable (:default-value (quote (bracket angle plain radio tag date footnote))) nil [77758 79161])
            ("org-make-link-description-function" variable nil nil [79163 79523])
            ("org-link-store" customgroup (:user-visible-flag t) nil [79525 79647])
            ("org-url-hexify-p" variable (:default-value t) nil [79649 79790])
            ("org-email-link-description-format" variable (:default-value "Email %c: %.30s") nil [79792 80593])
            ("org-from-is-user-regexp" variable (:default-value (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2)))) nil [80595 81155])
            ("org-context-in-file-links" variable (:default-value t) nil [81157 81838])
            ("org-keep-stored-link-after-insertion" variable nil nil [81840 82443])
            ("org-link-follow" customgroup (:user-visible-flag t) nil [82445 82571])
            ("org-link-translation-function" variable nil nil [82573 83281])
            ("org-follow-link-hook" variable nil nil [83283 83412])
            ("org-tab-follows-link" variable nil nil [83414 83674])
            ("org-return-follows-link" variable nil nil [83676 83866])
            ("org-mouse-1-follows-link" variable (:default-value (if (boundp (quote mouse-1-click-follows-link)) mouse-1-click-follows-link t)) nil [83868 84421])
            ("org-mark-ring-length" variable (:default-value 4) nil [84423 84623])
            ("org-link-search-must-match-exact-headline" variable (:default-value (quote query-to-create)) nil [84625 85266])
            ("org-link-frame-setup" variable (:default-value (quote ((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame)))) nil [85268 86841])
            ("org-display-internal-link-with-indirect-buffer" variable nil nil [86843 87434])
            ("org-open-non-existing-files" variable nil nil [87436 87805])
            ("org-open-directory-means-index-dot-org" variable nil nil [87807 88075])
            ("org-confirm-shell-link-function" variable (:default-value (quote yes-or-no-p)) nil [88077 88786])
            ("put" code nil nil [88787 88904])
            ("org-confirm-shell-link-not-regexp" variable nil nil [88906 89065])
            ("org-confirm-elisp-link-function" variable (:default-value (quote yes-or-no-p)) nil [89067 89801])
            ("put" code nil nil [89802 89919])
            ("org-confirm-elisp-link-not-regexp" variable nil nil [89921 90080])
            ("org-file-apps-defaults-gnu" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . mailcap) (t . mailcap))))
                nil [90082 90264])
            ("org-file-apps-defaults-macosx" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . "open %s") ("ps.gz" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s") (t . "open %s"))))
                nil [90266 90680])
            ("org-file-apps-defaults-windowsnt" variable
               (:constant-flag t
                :default-value (list (quote (remote . emacs)) (cons (quote system) (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file)))) (cons t (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file))))))
                nil [90682 91050])
            ("org-file-apps" variable (:default-value (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . default)))) nil [91052 95976])
            ("org-doi-server-url" variable (:default-value "http://dx.doi.org/") nil [95978 96120])
            ("org-refile" customgroup (:user-visible-flag t) nil [96122 96234])
            ("org-directory" variable (:default-value "~/org") nil [96236 96823])
            ("org-default-notes-file" variable (:default-value (convert-standard-filename "~/.notes")) nil [96825 97087])
            ("org-goto-interface" variable (:default-value (quote outline)) nil [97089 97762])
            ("org-goto-max-level" variable (:default-value 5) nil [97764 97906])
            ("org-reverse-note-order" variable nil nil [97908 98391])
            ("org-log-refile" variable nil nil [98393 99204])
            ("org-refile-targets" variable nil nil [99206 101530])
            ("org-refile-target-verify-function" variable nil nil [101532 102218])
            ("org-refile-use-cache" variable nil nil [102220 102849])
            ("org-refile-use-outline-path" variable nil nil [102851 103557])
            ("org-outline-path-complete-in-steps" variable (:default-value t) nil [103559 104152])
            ("org-refile-allow-creating-parent-nodes" variable nil nil [104154 104875])
            ("org-refile-active-region-within-subtree" variable nil nil [104877 105281])
            ("org-todo" customgroup (:user-visible-flag t) nil [105283 105385])
            ("org-progress" customgroup (:user-visible-flag t) nil [105387 105508])
            ("org-todo-interpretation-widgets" variable (:default-value (quote ((:tag "Sequence (cycling hits every state)" sequence) (:tag "Type     (cycling directly to DONE)" type)))) nil [105510 105787])
            ("org-todo-keywords" variable (:default-value (quote ((sequence "TODO" "DONE")))) nil [105789 108603])
            ("defvar-local" code nil nil [108605 108694])
            ("org-todo-keywords-for-agenda" variable nil nil [108695 108736])
            ("org-done-keywords-for-agenda" variable nil nil [108737 108778])
            ("org-todo-keyword-alist-for-agenda" variable nil nil [108779 108825])
            ("org-tag-alist-for-agenda" variable nil nil [108826 108908])
            ("org-tag-groups-alist-for-agenda" variable nil nil [108909 109013])
            ("defvar-local" code nil nil [109014 109053])
            ("org-agenda-contributing-files" variable nil nil [109054 109096])
            ("defvar-local" code nil nil [109097 109300])
            ("defvar-local" code nil nil [109301 109341])
            ("defvar-local" code nil nil [109342 109378])
            ("defvar-local" code nil nil [109379 109412])
            ("defvar-local" code nil nil [109413 109445])
            ("defvar-local" code nil nil [109446 109484])
            ("defvar-local" code nil nil [109485 109522])
            ("defvar-local" code nil nil [109523 109560])
            ("defvar-local" code nil nil [109561 109600])
            ("org-todo-interpretation" variable (:default-value (quote sequence)) nil [109602 109997])
            ("org-use-fast-todo-selection" variable (:default-value t) nil [109999 110982])
            ("org-provide-todo-statistics" variable (:default-value t) nil [110984 111976])
            ("org-hierarchical-todo-statistics" variable (:default-value t) nil [111978 112365])
            ("org-after-todo-state-change-hook" variable nil nil [112367 112614])
            ("org-blocker-hook" variable nil nil [112616 112964])
            ("org-trigger-hook" variable nil nil [112966 113566])
            ("org-enforce-todo-dependencies" variable nil nil [113568 114200])
            ("org-enforce-todo-checkbox-dependencies" variable nil nil [114202 114961])
            ("org-treat-insert-todo-heading-as-state-change" variable nil nil [114963 115326])
            ("org-treat-S-cursor-todo-selection-as-state-change" variable (:default-value t) nil [115328 115657])
            ("org-todo-state-tags-triggers" variable nil nil [115659 116375])
            ("org-log-done" variable nil nil [116377 117102])
            ("cond" code nil nil [117143 117282])
            ("org-log-reschedule" variable nil nil [117284 117911])
            ("org-log-redeadline" variable nil nil [117913 118655])
            ("org-log-note-clock-out" variable nil nil [118657 118990])
            ("org-log-done-with-time" variable (:default-value t) nil [118992 119178])
            ("org-log-note-headings" variable (:default-value (quote ((done . "CLOSING NOTE %t") (state . "State %-12s from %-12S %t") (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t") (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t") (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))) nil [119180 121075])
            ("unless" code nil nil [121077 121166])
            ("org-log-into-drawer" variable nil nil [121168 122203])
            ("defvaralias" code nil nil [122205 122272])
            ("org-log-into-drawer" function nil nil [122274 122769])
            ("org-log-state-notes-insert-after-drawers" variable nil nil [122771 123232])
            ("org-log-states-order-reversed" variable (:default-value t) nil [123234 123602])
            ("org-todo-repeat-to-state" variable nil nil [123604 124041])
            ("org-log-repeat" variable (:default-value (quote time)) nil [124043 125089])
            ("org-priorities" customgroup (:user-visible-flag t) nil [125092 125192])
            ("org-enable-priority-commands" variable (:default-value t) nil [125194 125416])
            ("org-highest-priority" variable (:default-value 65) nil [125418 125628])
            ("org-lowest-priority" variable (:default-value 67) nil [125630 125838])
            ("org-default-priority" variable (:default-value 66) nil [125840 126519])
            ("org-priority-start-cycle-with-default" variable (:default-value t) nil [126521 126850])
            ("org-get-priority-function" variable nil nil [126852 127353])
            ("org-time" customgroup (:user-visible-flag t) nil [127355 127472])
            ("org-time-stamp-rounding-minutes" variable (:default-value (quote (0 5))) nil [127474 128533])
            ("when" code nil nil [128585 128754])
            ("org-display-custom-times" variable nil nil [128756 129081])
            ("make-variable-buffer-local" code nil nil [129082 129136])
            ("org-time-stamp-custom-formats" variable (:default-value (quote ("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))) nil [129138 129620])
            ("org-time-stamp-format" function (:arguments ("long" "inactive")) nil [129622 129872])
            ("org-deadline-warning-days" variable (:default-value 14) nil [129874 130332])
            ("org-scheduled-delay-days" variable nil nil [130334 130888])
            ("org-read-date-prefer-future" variable (:default-value t) nil [130890 131971])
            ("org-agenda-jump-prefer-future" variable (:default-value (quote org-read-date-prefer-future)) nil [131973 132517])
            ("org-read-date-force-compatible-dates" variable (:default-value t) nil [132519 133935])
            ("org-read-date-display-live" variable (:default-value t) nil [133937 134138])
            ("org-read-date-popup-calendar" variable (:default-value t) nil [134140 134475])
            ("defvaralias" code nil nil [134476 134557])
            ("org-extend-today-until" variable nil nil [134559 135298])
            ("org-use-effective-time" variable nil nil [135300 135635])
            ("org-use-last-clock-out-time-as-effective-time" variable nil nil [135637 135965])
            ("org-edit-timestamp-down-means-later" variable nil nil [135967 136149])
            ("org-calendar-follow-timestamp-change" variable (:default-value t) nil [136151 136405])
            ("org-tags" customgroup (:user-visible-flag t) nil [136407 136503])
            ("org-tag-alist" variable nil nil [136505 137762])
            ("org-tag-persistent-alist" variable nil nil [137764 138993])
            ("org-complete-tags-always-offer-all-agenda-tags" variable nil nil [138995 139514])
            ("org-file-tags" variable nil nil [139516 139749])
            ("org-use-fast-tag-selection" variable (:default-value (quote auto)) nil [139751 140410])
            ("org-fast-tag-selection-single-key" variable nil nil [140412 140895])
            ("org-fast-tag-selection-include-todo" variable nil nil [140897 141082])
            ("org-tags-column" variable (:default-value -77) nil [141084 141491])
            ("org-auto-align-tags" variable (:default-value t) nil [141493 141824])
            ("org-use-tag-inheritance" variable (:default-value t) nil [141826 142811])
            ("org-tags-exclude-from-inheritance" variable nil nil [142813 143144])
            ("org-tag-inherit-p" function (:arguments ("tag")) nil [143146 143595])
            ("org-tags-match-list-sublevels" variable (:default-value t) nil [143597 144580])
            ("org-tags-sort-function" variable nil nil [144582 144884])
            ("org-tags-history" variable nil nil [144886 144957])
            ("org-last-tags-completion-table" variable nil nil [144958 145046])
            ("org-after-tags-change-hook" variable nil nil [145047 145146])
            ("org-properties" customgroup (:user-visible-flag t) nil [145148 145262])
            ("org-property-format" variable (:default-value "%-10s %s") nil [145264 145592])
            ("org-properties-postprocess-alist" variable nil nil [145594 146563])
            ("org-use-property-inheritance" variable nil nil [146565 147871])
            ("org-property-inherit-p" function (:arguments ("property")) nil [147873 148343])
            ("org-columns-default-format" variable (:default-value "%25ITEM %TODO %3PRIORITY %TAGS") nil [148345 148618])
            ("org-columns-ellipses" variable (:default-value "..") nil [148620 149128])
            ("org-global-properties-fixed" variable
               (:constant-flag t
                :default-value (quote (("VISIBILITY_ALL" . "folded children content all") ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto"))))
                nil [149130 149703])
            ("org-global-properties" variable nil nil [149705 150242])
            ("defvar-local" code nil nil [150244 150431])
            ("org-agenda" customgroup (:user-visible-flag t) nil [150433 150541])
            ("defvar-local" code nil nil [150543 150875])
            ("put" code nil nil [150876 150958])
            ("org-agenda-files" variable nil nil [150960 151743])
            ("org-agenda-file-regexp" variable (:default-value "\\`[^.].*\\.org\\'") nil [151745 152080])
            ("org-agenda-text-search-extra-files" variable nil nil [152082 152906])
            ("defvaralias" code nil nil [152908 152995])
            ("org-agenda-skip-unavailable-files" variable nil nil [152997 153222])
            ("org-calendar-to-agenda-key" variable (:default-value [99]) nil [153224 153565])
            ("org-calendar-insert-diary-entry-key" variable (:default-value [105]) nil [153567 154091])
            ("org-agenda-diary-file" variable (:default-value (quote diary-file)) nil [154093 154569])
            ("eval-after-load" code nil nil [154571 154919])
            ("org-latex" customgroup (:user-visible-flag t) nil [154921 155030])
            ("org-format-latex-options" variable (:default-value (quote (:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))) nil [155032 156481])
            ("org-format-latex-signal-error" variable (:default-value t) nil [156483 156695])
            ("org-latex-to-mathml-jar-file" variable nil nil [156697 157078])
            ("org-latex-to-mathml-convert-command" variable nil nil [157080 157873])
            ("org-preview-latex-default-process" variable (:default-value (quote dvipng)) nil [157875 158190])
            ("org-preview-latex-process-alist" variable (:default-value (quote ((dvipng :programs ("latex" "dvipng") :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f")) (dvisvgm :programs ("latex" "dvisvgm") :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "dvi" :image-output-type "svg" :image-size-adjust (1.7 . 1.5) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvisvgm %f -n -b min -c %S -o %O")) (imagemagick :programs ("latex" "convert") :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("pdflatex -interaction nonstopmode -output-directory %o %f") :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))) nil [158192 162677])
            ("org-preview-latex-image-directory" variable (:default-value "ltximg/") nil [162679 163012])
            ("org-format-latex-mathml-available-p" function nil nil [163014 163515])
            ("org-format-latex-header" variable (:default-value "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}") nil [163517 164579])
            ("org-set-packages-alist" function (:arguments ("var" "val")) nil [164581 164821])
            ("org-get-packages-alist" function (:arguments ("var")) nil [164823 165057])
            ("org-latex-default-packages-alist" variable (:default-value (quote (("AUTO" "inputenc" t ("pdflatex")) ("T1" "fontenc" t ("pdflatex")) ("" "graphicx" t) ("" "grffile" t) ("" "longtable" nil) ("" "wrapfig" nil) ("" "rotating" nil) ("normalem" "ulem" t) ("" "amsmath" t) ("" "textcomp" t) ("" "amssymb" t) ("" "capt-of" nil) ("" "hyperref" nil)))) nil [165059 167584])
            ("org-latex-packages-alist" variable nil nil [167586 168608])
            ("org-appearance" customgroup (:user-visible-flag t) nil [168610 168715])
            ("org-level-color-stars-only" variable nil nil [168717 169008])
            ("org-hide-leading-stars" variable nil nil [169010 169595])
            ("org-hidden-keywords" variable nil nil [169597 170039])
            ("org-custom-properties" variable nil nil [170041 170374])
            ("org-fontify-done-headline" variable nil nil [170376 170717])
            ("org-fontify-emphasized-text" variable (:default-value t) nil [170719 170935])
            ("org-fontify-whole-heading-line" variable nil nil [170937 171154])
            ("org-highlight-latex-and-related" variable nil nil [171156 171815])
            ("org-hide-emphasis-markers" variable nil nil [171817 171971])
            ("org-hide-macro-markers" variable nil nil [171973 172126])
            ("org-pretty-entities" variable nil nil [172128 172324])
            ("org-pretty-entities-include-sub-superscripts" variable (:default-value t) nil [172326 172523])
            ("org-emph-re" variable nil nil [172525 173094])
            ("org-verbatim-re" variable nil nil [173096 173175])
            ("org-emphasis-regexp-components" variable nil nil [173177 173216])
            ("org-emphasis-alist" variable nil nil [173238 173265])
            ("org-set-emph-re" function (:arguments ("var" "val")) nil [173287 174014])
            ("org-emphasis-regexp-components" variable (:default-value (quote ("- 	('\"{" "- 	.,:!?;'\")}\\[" " 	
" "." 1))) nil [174202 175188])
            ("org-emphasis-alist" variable (:default-value (quote (("*" bold) ("/" italic) ("_" underline) ("=" org-verbatim verbatim) ("~" org-code verbatim) ("+" (:strike-through t))))) nil [175190 175995])
            ("org-protecting-blocks" variable (:default-value (quote ("src" "example" "export"))) nil [175997 176170])
            ("mark-active" variable nil nil [176265 176285])
            ("declare-function" code nil nil [176307 176379])
            ("declare-function" code nil nil [176380 176436])
            ("declare-function" code nil nil [176437 176492])
            ("declare-function" code nil nil [176493 176545])
            ("declare-function" code nil nil [176546 176608])
            ("declare-function" code nil nil [176609 176669])
            ("declare-function" code nil nil [176670 176728])
            ("declare-function" code nil nil [176729 176776])
            ("declare-function" code nil nil [176777 176871])
            ("declare-function" code nil nil [176872 177005])
            ("declare-function" code nil nil [177006 177120])
            ("declare-function" code nil nil [177121 177237])
            ("declare-function" code nil nil [177238 177306])
            ("declare-function" code nil nil [177307 177439])
            ("declare-function" code nil nil [177440 177496])
            ("declare-function" code nil nil [177497 177566])
            ("declare-function" code nil nil [177567 177658])
            ("declare-function" code nil nil [177659 177739])
            ("declare-function" code nil nil [177740 177790])
            ("declare-function" code nil nil [177791 177862])
            ("declare-function" code nil nil [177863 177939])
            ("declare-function" code nil nil [177940 178003])
            ("declare-function" code nil nil [178004 178072])
            ("declare-function" code nil nil [178073 178135])
            ("declare-function" code nil nil [178136 178199])
            ("declare-function" code nil nil [178200 178270])
            ("declare-function" code nil nil [178271 178337])
            ("declare-function" code nil nil [178338 178396])
            ("declare-function" code nil nil [178397 178468])
            ("align-mode-rules-list" variable nil nil [178470 178500])
            ("calc-embedded-close-formula" variable nil nil [178501 178537])
            ("calc-embedded-open-formula" variable nil nil [178538 178573])
            ("calc-embedded-open-mode" variable nil nil [178574 178606])
            ("font-lock-unfontify-region-function" variable nil nil [178607 178651])
            ("iswitchb-temp-buflist" variable nil nil [178652 178682])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [178683 178733])
            ("remember-data-file" variable nil nil [178734 178761])
            ("texmathp-why" variable nil nil [178762 178783])
            ("turn-on-orgtbl" function nil nil [178800 178909])
            ("org-at-table-p" function (:arguments ("table-type")) nil [178911 179324])
            ("org-at-table.el-p" function nil nil [179326 179593])
            ("org-at-table-hline-p" function nil nil [179595 179757])
            ("org-table-map-tables" function (:arguments ("function" "quietly")) nil [179759 180528])
            ("declare-function" code nil nil [180530 180611])
            ("declare-function" code nil nil [180612 180672])
            ("declare-function" code nil nil [180673 180776])
            ("org-at-TBLFM-p" function (:arguments ("pos")) nil [180778 181069])
            ("org-clock-start-time" variable nil nil [181071 181100])
            ("org-clock-marker" variable (:default-value (make-marker)) nil [181101 181180])
            ("org-clock-hd-marker" variable (:default-value (make-marker)) nil [181181 181290])
            ("org-clock-heading" variable nil nil [181291 181364])
            ("org-clock-is-active" function nil nil [181365 181525])
            ("org-check-running-clock" function nil nil [181527 181940])
            ("org-clocktable-try-shift" function (:arguments ("dir" "n")) nil [181942 182155])
            ("org-clock-persistence-insinuate" function nil nil [182172 182367])
            ("org-archive" customgroup (:user-visible-flag t) nil [182369 182486])
            ("org-archive-location" variable (:default-value "%s_archive::") nil [182488 184897])
            ("org-agenda-skip-archived-trees" variable (:default-value t) nil [184899 185295])
            ("org-columns-skip-archived-trees" variable (:default-value t) nil [185297 185473])
            ("org-cycle-open-archived-trees" variable nil nil [185475 185840])
            ("org-sparse-tree-open-archived-trees" variable nil nil [185842 186128])
            ("org-sparse-tree-default-date-type" variable nil nil [186130 186960])
            ("org-cycle-hide-archived-subtrees" function (:arguments ("state")) nil [186962 187712])
            ("org-force-cycle-archived" function (:user-visible-flag t) nil [187714 187920])
            ("org-hide-archived-subtrees" function (:arguments ("beg" "end")) nil [187922 188417])
            ("declare-function" code nil nil [188419 188473])
            ("declare-function" code nil nil [188474 188537])
            ("org-flag-subtree" function (:arguments ("flag")) nil [188538 188731])
            ("defalias" code nil nil [188733 188796])
            ("declare-function" code nil nil [188827 188899])
            ("declare-function" code nil nil [188900 188963])
            ("declare-function" code nil nil [188985 189030])
            ("declare-function" code nil nil [189031 189080])
            ("declare-function" code nil nil [189081 189130])
            ("org-id-track-globally" variable nil nil [189131 189161])
            ("defvar-local" code nil nil [189233 189436])
            ("defvar-local" code nil nil [189438 189665])
            ("defvar-local" code nil nil [189667 189884])
            ("defvar-local" code nil nil [189886 190118])
            ("defvar-local" code nil nil [190120 190458])
            ("defvar-local" code nil nil [190460 190732])
            ("defvar-local" code nil nil [190734 190894])
            ("org-plain-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?"))
                nil [190896 191428])
            ("org-plain-time-extension-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?"))
                nil [191430 191878])
            ("org-stamp-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?"))
                nil [191880 192427])
            ("org-startup-options" variable
               (:constant-flag t
                :default-value (quote (("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("showeverything" org-startup-folded showeverything) ("content" org-startup-folded content) ("indent" org-startup-indented t) ("noindent" org-startup-indented nil) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("inlineimages" org-startup-with-inline-images t) ("noinlineimages" org-startup-with-inline-images nil) ("latexpreview" org-startup-with-latex-preview t) ("nolatexpreview" org-startup-with-latex-preview nil) ("customtime" org-display-custom-times t) ("logdone" org-log-done time) ("lognotedone" org-log-done note) ("nologdone" org-log-done nil) ("lognoteclock-out" org-log-note-clock-out t) ("nolognoteclock-out" org-log-note-clock-out nil) ("logrepeat" org-log-repeat state) ("lognoterepeat" org-log-repeat note) ("logdrawer" org-log-into-drawer t) ("nologdrawer" org-log-into-drawer nil) ("logstatesreversed" org-log-states-order-reversed t) ("nologstatesreversed" org-log-states-order-reversed nil) ("nologrepeat" org-log-repeat nil) ("logreschedule" org-log-reschedule time) ("lognotereschedule" org-log-reschedule note) ("nologreschedule" org-log-reschedule nil) ("logredeadline" org-log-redeadline time) ("lognoteredeadline" org-log-redeadline note) ("nologredeadline" org-log-redeadline nil) ("logrefile" org-log-refile time) ("lognoterefile" org-log-refile note) ("nologrefile" org-log-refile nil) ("fninline" org-footnote-define-inline t) ("nofninline" org-footnote-define-inline nil) ("fnlocal" org-footnote-section nil) ("fnauto" org-footnote-auto-label t) ("fnprompt" org-footnote-auto-label nil) ("fnconfirm" org-footnote-auto-label confirm) ("fnplain" org-footnote-auto-label plain) ("fnadjust" org-footnote-auto-adjust t) ("nofnadjust" org-footnote-auto-adjust nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI) ("noptag" org-tag-persistent-alist nil) ("hideblocks" org-hide-block-startup t) ("nohideblocks" org-hide-block-startup nil) ("beamer" org-startup-with-beamer-mode t) ("entitiespretty" org-pretty-entities t) ("entitiesplain" org-pretty-entities nil))))
                nil [192429 195350])
            ("org-group-tags" variable (:default-value t) nil [195352 195546])
            ("org-inhibit-startup" variable nil nil [195548 195580])
            ("org-toggle-tags-groups" function (:user-visible-flag t) nil [195617 196100])
            ("org-tag-add-to-alist" function (:arguments ("alist1" "alist2")) nil [196102 196466])
            ("org-set-regexps-and-options" function (:arguments ("tags-only")) nil [196468 202890])
            ("org--setup-collect-keywords" function (:arguments ("regexp" "files" "alist")) nil [202892 207169])
            ("org-tag-string-to-alist" function (:arguments ("s")) nil [207171 208521])
            ("org-tag-alist-to-string" function (:arguments ("alist" "skip-key")) nil [208523 209342])
            ("org-tag-alist-to-groups" function (:arguments ("alist")) nil [209344 210210])
            ("org--file-cache" variable (:default-value (make-hash-table :test (function equal))) nil [210212 210395])
            ("org-reset-file-cache" function nil nil [210397 210520])
            ("org-file-url-p" function (:arguments ("file")) nil [210522 210639])
            ("org-file-contents" function (:arguments ("file" "noerror" "nocache")) nil [210641 212176])
            ("org-extract-log-state-settings" function (:arguments ("x")) nil [212178 212706])
            ("org-remove-keyword-keys" function (:arguments ("list")) nil [212708 212928])
            ("org-assign-fast-keys" function (:arguments ("alist")) nil [212930 213575])
            ("org-window-configuration" variable nil nil [213620 213717])
            ("org-selected-window" variable nil nil [213718 213810])
            ("org-finish-function" variable nil nil [213811 213950])
            ("org-last-state" variable nil nil [213951 213974])
            ("org-entities" variable nil nil [214039 214060])
            ("org-struct-menu" variable nil nil [214095 214119])
            ("org-org-menu" variable nil nil [214120 214141])
            ("org-tbl-menu" variable nil nil [214142 214163])
            ("org-table-may-need-update" variable (:default-value t) nil [214271 214449])
            ("org-before-change-function" function (:arguments ("_beg" "_end")) nil [214450 214595])
            ("org-mode-map" variable nil nil [214596 214617])
            ("org-inhibit-startup-visibility-stuff" variable nil nil [214618 214667])
            ("org-agenda-keep-modes" variable nil nil [214696 214730])
            ("org-inhibit-logging" variable nil nil [214764 214796])
            ("org-inhibit-blocking" variable nil nil [214832 214865])
            ("org-table-buffer-is-an" variable nil nil [214900 214935])
            ("bidi-paragraph-direction" variable nil nil [214937 214970])
            ("buffer-face-mode-face" variable nil nil [214971 215001])
            ("outline" include nil nil [215003 215021])
            ("time-date" include nil nil [215047 215067])
            ("unless" code nil nil [215068 215142])
            ("easymenu" include nil nil [215143 215162])
            ("easy-menu-add" function (:prototype-flag t) nil [215163 215199])
            ("overlay" include nil nil [215200 215218])
            ("org-entities" include nil nil [215295 215318])
            ("org-faces" include nil nil [215396 215416])
            ("org-list" include nil nil [215417 215436])
            ("org-pcomplete" include nil nil [215437 215461])
            ("org-src" include nil nil [215462 215480])
            ("org-footnote" include nil nil [215481 215504])
            ("org-macro" include nil nil [215505 215525])
            ("ob" include nil nil [215536 215549])
            ("define-derived-mode" code nil nil [215566 221455])
            ("add-to-list" code nil nil [221507 221723])
            ("org-mode-transpose-word-syntax-table" variable (:default-value (let ((st (make-syntax-table text-mode-syntax-table))) (dolist (c org-emphasis-alist st) (modify-syntax-entry (string-to-char (car c)) "w p" st)))) nil [221725 221929])
            ("when" code nil nil [221931 222053])
            ("org-find-invisible-foreground" function nil nil [222055 222536])
            ("org-current-time" function (:arguments ("rounding-minutes" "past")) nil [222538 223259])
            ("org-today" function nil nil [223261 223440])
            ("org-mouse-map" variable (:default-value (make-sparse-keymap)) nil [223490 223533])
            ("org-defkey" code nil nil [223534 223589])
            ("org-defkey" code nil nil [223590 223650])
            ("when" code nil nil [223651 223737])
            ("when" code nil nil [223738 223876])
            ("font-lock" include nil nil [223878 223898])
            ("org-non-link-chars" variable
               (:constant-flag t
                :default-value "]	
<>")
                nil [223900 223941])
            ("org-link-types-re" variable nil nil [223942 224033])
            ("org-link-re-with-space" variable nil nil [224034 224138])
            ("org-link-re-with-space2" variable nil nil [224139 224244])
            ("org-link-re-with-space3" variable nil nil [224245 224354])
            ("org-angle-link-re" variable nil nil [224355 224445])
            ("org-plain-link-re" variable nil nil [224446 224516])
            ("org-bracket-link-regexp" variable nil nil [224517 224592])
            ("org-bracket-link-analytic-regexp" variable nil nil [224593 224780])
            ("org-bracket-link-analytic-regexp++" variable nil nil [224781 224908])
            ("org-any-link-re" variable nil nil [224909 224979])
            ("org-match-sexp-depth" variable
               (:constant-flag t
                :default-value 3)
                nil [224981 225073])
            ("org-create-multibrace-regexp" function (:arguments ("left" "right" "n")) nil [225075 225876])
            ("org-match-substring-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(?:" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(?:" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(?:\\*\\|[+-]?[[:alnum:].,\\]*[[:alnum:]]\\)\\)"))
                nil [225878 226241])
            ("org-match-substring-with-braces-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)"))
                nil [226243 226479])
            ("org-make-link-regexps" function nil nil [226481 228042])
            ("org-make-link-regexps" code nil nil [228044 228067])
            ("org-emph-face" variable nil nil [228069 228095])
            ("org-do-emphasis-faces" function (:arguments ("limit")) nil [228097 229961])
            ("org-emphasize" function
               (:user-visible-flag t
                :arguments ("char"))
                nil [229963 231645])
            ("org-nonsticky-props" variable
               (:constant-flag t
                :default-value (quote (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)))
                nil [231647 231770])
            ("org-rear-nonsticky-at" function (:arguments ("pos")) nil [231772 231890])
            ("org-activate-links" function (:arguments ("limit")) nil [231892 234567])
            ("org-activate-code" function (:arguments ("limit")) nil [234569 234860])
            ("org-src-fontify-natively" variable (:default-value t) nil [234862 235092])
            ("org-allow-promoting-top-level-subtree" variable nil nil [235094 235330])
            ("org-fontify-meta-lines-and-blocks" function (:arguments ("limit")) nil [235332 235569])
            ("org-fontify-meta-lines-and-blocks-1" function (:arguments ("limit")) nil [235571 239811])
            ("org-fontify-drawers" function (:arguments ("limit")) nil [239813 240122])
            ("org-fontify-macros" function (:arguments ("limit")) nil [240124 240800])
            ("org-activate-footnote-links" function (:arguments ("limit")) nil [240802 241546])
            ("org-activate-dates" function (:arguments ("limit")) nil [241548 242242])
            ("defvar-local" code nil nil [242244 242346])
            ("org-target-regexp" variable
               (:constant-flag t
                :default-value (let ((border "[^<>
 	]")) (format "<<\\(%s\\|%s[^<>
]*%s\\)>>" border border border)))
                nil [242348 242536])
            ("org-radio-target-regexp" variable
               (:constant-flag t
                :default-value (format "<%s>" org-target-regexp))
                nil [242538 242654])
            ("org-any-target-regexp" variable
               (:constant-flag t
                :default-value (format "%s\\|%s" org-radio-target-regexp org-target-regexp))
                nil [242656 242795])
            ("org-activate-target-links" function (:arguments ("limit")) nil [242797 243310])
            ("org-update-radio-target-regexp" function (:user-visible-flag t) nil [243312 244909])
            ("org-hide-wide-columns" function (:arguments ("limit")) nil [244911 245206])
            ("org-latex-and-related-regexp" variable nil nil [245208 245326])
            ("org-compute-latex-and-related-regexp" function nil nil [245328 246313])
            ("org-do-latex-and-related" function (:arguments ("limit")) nil [246315 247298])
            ("org-restart-font-lock" function nil nil [247300 247490])
            ("org-activate-tags" function (:arguments ("limit")) nil [247492 247857])
            ("org-outline-level" function nil nil [247859 248325])
            ("org-font-lock-keywords" variable nil nil [248327 248362])
            ("org-re-property" function (:arguments ("property" "literal" "allow-null" "value")) nil [248364 249308])
            ("org-property-re" variable
               (:constant-flag t
                :default-value (org-re-property "\\S-+" (quote literal) t))
                nil [249310 249673])
            ("org-font-lock-hook" variable nil nil [249675 249762])
            ("org-font-lock-extra-keywords" variable nil nil [249764 249805])
            ("org-font-lock-set-keywords-hook" variable nil nil [249828 250158])
            ("org-font-lock-hook" function (:arguments ("limit")) nil [250160 250286])
            ("org-set-font-lock-defaults" function nil nil [250288 254310])
            ("org-toggle-pretty-entities" function (:user-visible-flag t) nil [254312 254755])
            ("defvar-local" code nil nil [254757 254855])
            ("org-toggle-custom-properties-visibility" function (:user-visible-flag t) nil [254857 256099])
            ("org-fontify-entities" function (:arguments ("limit")) nil [256101 256985])
            ("org-fontify-like-in-org-mode" function (:arguments ("s" "odd-levels")) nil [256987 257236])
            ("org-m" variable nil nil [257238 257256])
            ("org-l" variable nil nil [257257 257275])
            ("org-f" variable nil nil [257276 257294])
            ("org-get-level-face" function (:arguments ("n")) nil [257295 257823])
            ("org-face-from-face-or-color" function (:arguments ("context" "inherit" "face-or-color")) nil [257825 258172])
            ("org-get-todo-face" function (:arguments ("kwd")) nil [258174 258530])
            ("org-get-priority-face" function (:arguments ("priority")) nil [258532 258763])
            ("org-get-tag-face" function (:arguments ("tag")) nil [258765 259039])
            ("org-font-lock-add-priority-faces" function (:arguments ("limit")) nil [259041 259363])
            ("org-font-lock-add-tag-faces" function (:arguments ("limit")) nil [259365 259714])
            ("org-unfontify-region" function (:arguments ("beg" "end" "_maybe_loudly")) nil [259716 260286])
            ("org-script-display" variable
               (:constant-flag t
                :default-value (quote (((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)) ((raise -0.5)) ((raise 0.5)))))
                nil [260288 260482])
            ("org-remove-font-lock-display-properties" function (:arguments ("beg" "end")) nil [260484 260970])
            ("org-raise-scripts" function (:arguments ("limit")) nil [260972 262440])
            ("defvar-local" code nil nil [262520 262562])
            ("put" code nil nil [262563 262606])
            ("defvar-local" code nil nil [262607 262650])
            ("put" code nil nil [262651 262695])
            ("org-inlinetask-min-level" variable nil nil [262697 262730])
            ("org-unlogged-message" function (:arguments ("args")) nil [262732 262901])
            ("org-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262918 269285])
            ("org-cycle-internal-global" function nil nil [269287 270666])
            ("org-called-with-limited-levels" variable nil nil [270668 270775])
            ("org-invisible-p" function (:arguments ("pos")) nil [270777 270955])
            ("org-cycle-internal-local" function nil nil [270957 275206])
            ("org-global-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [275223 275898])
            ("org-set-startup-visibility" function nil nil [275900 276499])
            ("org-set-visibility-according-to-property" function
               (:user-visible-flag t
                :arguments ("no-cleanup"))
                nil [276501 277498])
            ("org-overview" function (:user-visible-flag t) nil [277681 278285])
            ("org-content" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [278287 278923])
            ("org-optimize-window-after-visibility-change" function (:arguments ("state")) nil [278925 279410])
            ("org-remove-empty-overlays-at" function (:arguments ("pos")) nil [279412 279718])
            ("org-clean-visibility-after-subtree-move" function nil nil [279720 280712])
            ("org-cycle-show-empty-lines" function (:arguments ("state")) nil [280714 282353])
            ("org-show-empty-lines-in-parent" function nil nil [282355 282600])
            ("org-files-list" function nil nil [282602 283066])
            ("org-entry-beginning-position" function nil nil [283068 283217])
            ("org-entry-end-position" function nil nil [283219 283355])
            ("org-cycle-hide-drawers" function (:arguments ("state" "exceptions")) nil [283357 284511])
            ("org-flag-drawer" function (:arguments ("flag" "element")) nil [284513 285445])
            ("org-subtree-end-visible-p" function nil nil [285447 285609])
            ("org-first-headline-recenter" function nil nil [285611 285934])
            ("org-outline-overlay-data" function (:arguments ("use-markers")) nil [285973 286694])
            ("org-set-outline-overlay-data" function (:arguments ("data")) nil [286696 286963])
            ("defvar-local" code nil nil [286988 287058])
            ("org-block-map" function (:arguments ("function" "start" "end")) nil [287060 287565])
            ("org-hide-block-toggle-all" function nil nil [287567 287707])
            ("org-hide-block-all" function (:user-visible-flag t) nil [287709 287867])
            ("org-show-block-all" function (:user-visible-flag t) nil [287869 288046])
            ("org-hide-block-toggle-maybe" function (:user-visible-flag t) nil [288048 288312])
            ("org-hide-block-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [288314 290481])
            ("add-hook" code nil nil [290527 290647])
            ("org-goto-window-configuration" variable nil nil [290663 290705])
            ("org-goto-marker" variable nil nil [290706 290734])
            ("org-goto-map" variable nil nil [290735 290756])
            ("org-goto-map" function nil nil [290757 292331])
            ("org-goto-help" variable
               (:constant-flag t
                :default-value "Browse buffer copy, to find location or copy text.%s
RET=jump to location             C-g=quit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur")
                nil [292333 292559])
            ("org-goto-start-pos" variable nil nil [292561 292588])
            ("org-goto" function
               (:user-visible-flag t
                :arguments ("alternative-interface"))
                nil [292621 294404])
            ("org-goto-selected-point" variable nil nil [294406 294442])
            ("org-goto-exit-command" variable nil nil [294474 294508])
            ("org-goto-local-auto-isearch-map" variable nil nil [294540 294580])
            ("org-get-location" function (:arguments ("_buf" "help")) nil [294598 296246])
            ("org-goto-local-auto-isearch-map" variable (:default-value (make-sparse-keymap)) nil [296248 296309])
            ("set-keymap-parent" code nil nil [296310 296378])
            ("if" code nil nil [296438 296840])
            ("org-goto-local-search-headings" function (:arguments ("string" "bound" "noerror")) nil [296842 297356])
            ("org-goto-local-auto-isearch" function (:user-visible-flag t) nil [297358 297649])
            ("org-goto-ret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [297651 297860])
            ("org-goto-left" function (:user-visible-flag t) nil [297862 298147])
            ("org-goto-right" function (:user-visible-flag t) nil [298149 298413])
            ("org-goto-quit" function (:user-visible-flag t) nil [298415 298594])
            ("org-indirect-dedicated-frame" variable nil nil [298637 298738])
            ("org-last-indirect-buffer" variable nil nil [298739 298776])
            ("org-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [298778 301453])
            ("org-get-indirect-buffer" function (:arguments ("buffer" "heading")) nil [301455 301934])
            ("org-set-frame-title" function (:arguments ("title")) nil [301936 302102])
            ("org--line-empty-p" function (:arguments ("n")) nil [302153 302425])
            ("org-previous-line-empty-p" function nil nil [302427 302577])
            ("org-next-line-empty-p" function nil nil [302579 302725])
            ("org--blank-before-heading-p" function (:arguments ("parent")) nil [302727 303568])
            ("org-insert-heading" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok" "top"))
                nil [303570 307474])
            ("org-N-empty-lines-before-current" function (:arguments ("n")) nil [307476 307912])
            ("org-get-heading" function (:arguments ("no-tags" "no-todo" "no-priority" "no-comment")) nil [307914 308855])
            ("orgstruct-mode" variable nil nil [308857 308880])
            ("org-heading-components" function nil nil [308900 309889])
            ("org-get-entry" function nil nil [309891 310080])
            ("org-edit-headline" function
               (:user-visible-flag t
                :arguments ("heading"))
                nil [310082 310723])
            ("org-insert-heading-after-current" function (:user-visible-flag t) nil [310725 310951])
            ("org-insert-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("invisible-ok"))
                nil [310953 311148])
            ("org-insert-todo-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("force-state"))
                nil [311150 311358])
            ("org-insert-todo-heading" function
               (:user-visible-flag t
                :arguments ("arg" "force-heading"))
                nil [311360 312712])
            ("org-insert-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [312714 312981])
            ("org-insert-todo-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [312983 313290])
            ("org-after-demote-entry-hook" variable nil nil [313320 313528])
            ("org-after-promote-entry-hook" variable nil nil [313530 313741])
            ("org-promote-subtree" function (:user-visible-flag t) nil [313743 313957])
            ("org-demote-subtree" function (:user-visible-flag t) nil [313959 314182])
            ("org-do-promote" function (:user-visible-flag t) nil [314184 314531])
            ("org-do-demote" function (:user-visible-flag t) nil [314533 314876])
            ("org-fix-position-after-promote" function nil nil [314878 315299])
            ("org-current-level" function nil nil [315301 315702])
            ("org-get-previous-line-level" function nil nil [315704 316059])
            ("org-reduced-level" function (:arguments ("l")) nil [316061 316279])
            ("org-level-increment" function nil nil [316281 316495])
            ("org-get-valid-level" function (:arguments ("level" "change")) nil [316497 317119])
            ("org-promote" function nil nil [317121 317983])
            ("org-demote" function nil nil [317985 318602])
            ("org-cycle-level" function (:user-visible-flag t) nil [318604 320120])
            ("org-map-tree" function (:arguments ("fun")) nil [320122 320445])
            ("org-map-region" function (:arguments ("fun" "beg" "end")) nil [320447 320858])
            ("org-fixup-indentation" function (:arguments ("diff")) nil [320860 324857])
            ("org-convert-to-odd-levels" function (:user-visible-flag t) nil [324859 325436])
            ("org-convert-to-oddeven-levels" function (:user-visible-flag t) nil [325438 326427])
            ("org-tr-level" function (:arguments ("n")) nil [326429 326523])
            ("org-move-subtree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [326584 326774])
            ("org-move-subtree-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [326776 329511])
            ("org-subtree-clip" variable nil nil [329513 329733])
            ("org-subtree-clip-folded" variable nil nil [329735 329861])
            ("org-cut-subtree" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [329863 330116])
            ("org-copy-subtree" function
               (:user-visible-flag t
                :arguments ("n" "cut" "force-store-markers" "nosubtrees"))
                nil [330118 331730])
            ("org-paste-subtree" function
               (:user-visible-flag t
                :arguments ("level" "tree" "for-yank" "remove"))
                nil [331732 335953])
            ("org-kill-is-subtree-p" function (:arguments ("txt")) nil [335955 336963])
            ("org-markers-to-move" variable nil nil [336965 337154])
            ("org-save-markers-in-region" function (:arguments ("beg" "end")) nil [337156 337799])
            ("org-check-and-save-marker" function (:arguments ("marker" "beg" "end")) nil [337801 338137])
            ("org-reinstall-markers-in-region" function (:arguments ("beg")) nil [338139 338361])
            ("org-narrow-to-subtree" function (:user-visible-flag t) nil [338363 338714])
            ("org-narrow-to-block" function (:user-visible-flag t) nil [338716 339014])
            ("org-clone-subtree-with-time-shift" function
               (:user-visible-flag t
                :arguments ("n" "shift"))
                nil [339016 343308])
            ("org-sort" function
               (:user-visible-flag t
                :arguments ("with-case"))
                nil [343331 343666])
            ("org-sort-remove-invisible" function (:arguments ("s")) nil [343668 344064])
            ("org-priority-regexp" variable nil nil [344066 344094])
            ("org-after-sorting-entries-or-items-hook" variable nil nil [344124 344443])
            ("org-sort-entries" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "property" "interactive?"))
                nil [344445 353106])
            ("orgstruct-heading-prefix-regexp" variable nil nil [354089 354299])
            ("orgstruct-setup-hook" variable nil nil [354384 354549])
            ("orgstruct-initialized" variable nil nil [354551 354585])
            ("org-local-vars" variable nil nil [354587 354672])
            ("define-minor-mode" code nil nil [354689 355287])
            ("turn-on-orgstruct" function nil nil [355304 355399])
            ("defvar-local" code nil nil [355401 355496])
            ("defvar-local" code nil nil [355497 355527])
            ("orgstruct++-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [355528 356665])
            ("turn-on-orgstruct++" function nil nil [356682 356783])
            ("orgstruct-error" function (:user-visible-flag t) nil [356785 357021])
            ("orgstruct-setup" function nil nil [357023 359038])
            ("orgstruct-make-binding" function (:arguments ("fun" "key" "disable-when-heading-prefix")) nil [359040 361908])
            ("org-contextualize-keys" function (:arguments ("alist" "contexts")) nil [361910 363377])
            ("org-contextualize-validate-key" function (:arguments ("key" "contexts")) nil [363379 364293])
            ("org-context-p" function (:arguments ("contexts")) nil [364295 364840])
            ("org-run-like-in-org-mode" function (:arguments ("cmd")) nil [364857 365494])
            ("org-get-category" function (:arguments ("pos" "force-refresh")) nil [365496 365846])
            ("org-refresh-properties" function (:arguments ("dprop" "tprop")) nil [365872 366867])
            ("org-refresh-property" function (:arguments ("tprop" "p" "inherit")) nil [366869 367610])
            ("org-refresh-category-properties" function nil nil [367612 369096])
            ("org-refresh-stats-properties" function nil nil [369098 369769])
            ("org-refresh-effort-properties" function nil nil [369771 369965])
            ("org-link-expand-abbrev" function (:arguments ("link")) nil [370008 370811])
            ("org-insert-link-history" variable nil nil [370846 370948])
            ("org-stored-links" variable nil nil [370950 371032])
            ("org-store-link-plist" variable nil nil [371034 371147])
            ("org-store-link-functions" function nil nil [371149 372356])
            ("org-agenda-buffer-name" variable nil nil [372358 372389])
            ("org-id-link-to-org-use-id" variable nil nil [372417 372451])
            ("org-store-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [372491 381290])
            ("org-store-link-props" function (:arguments ("plist")) nil [381292 382501])
            ("org-add-link-props" function (:arguments ("plist")) nil [382503 382762])
            ("org-email-link-description" function (:arguments ("fmt")) nil [382764 383880])
            ("org-make-org-heading-search-string" function (:arguments ("string")) nil [383882 384675])
            ("org-link-escape-chars" variable
               (:constant-flag t
                :default-value (quote (32 91 93 37)))
                nil [384677 384878])
            ("org-make-link-string" function (:arguments ("link" "description")) nil [384880 385790])
            ("org-link-escape" function (:arguments ("text" "table" "merge")) nil [385792 386611])
            ("org-link-unescape" function (:arguments ("str")) nil [386613 386935])
            ("org-link-unescape-compound" function (:arguments ("hex")) nil [386937 388012])
            ("org-link-unescape-single-byte-sequence" function (:arguments ("hex")) nil [388014 388244])
            ("org-xor" function (:arguments ("a" "b")) nil [388246 388304])
            ("org-fixup-message-id-for-http" function (:arguments ("s")) nil [388306 388791])
            ("org-link-prettify" function (:arguments ("link")) nil [388793 389120])
            ("org-insert-link-global" function (:user-visible-flag t) nil [389137 389368])
            ("org-insert-all-links" function
               (:user-visible-flag t
                :arguments ("arg" "pre" "post"))
                nil [389370 390162])
            ("org-insert-last-stored-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [390164 390317])
            ("org-link-fontify-links-to-this-file" function nil nil [390319 391079])
            ("org--links-history" variable nil nil [391081 391112])
            ("org-insert-link" function
               (:user-visible-flag t
                :arguments ("complete-file" "link-location" "default-description"))
                nil [391113 399305])
            ("org-link-try-special-completion" function (:arguments ("type")) nil [399307 399585])
            ("org-file-complete-link" function (:arguments ("arg")) nil [399587 400276])
            ("org-completing-read" function (:arguments ("args")) nil [400278 400774])
            ("org-link-search-failed" variable nil nil [400806 400841])
            ("org-open-link-functions" variable nil nil [400843 401656])
            ("org-next-link" function
               (:user-visible-flag t
                :arguments ("search-backward"))
                nil [401658 402579])
            ("org-previous-link" function (:user-visible-flag t) nil [402581 402736])
            ("org-translate-link" function (:arguments ("s")) nil [402738 402953])
            ("org-translate-link-from-planner" function (:arguments ("type" "path")) nil [402955 403896])
            ("org-find-file-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [403898 404044])
            ("org-open-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [404046 404335])
            ("org-window-config-before-follow-link" variable nil nil [404337 404493])
            ("org-open-at-point-global" function (:user-visible-flag t) nil [404510 405114])
            ("org-open-link-from-string" function
               (:user-visible-flag t
                :arguments ("s" "arg" "reference-buffer"))
                nil [405131 405664])
            ("org-open-at-point-functions" variable nil nil [405666 405915])
            ("org-link-search-inhibit-query" variable nil nil [405917 405959])
            ("clean-buffer-list-kill-buffer-names" variable nil nil [405960 406004])
            ("org--open-doi-link" function (:arguments ("path")) nil [406029 406204])
            ("org--open-elisp-link" function (:arguments ("path")) nil [406206 406809])
            ("org--open-help-link" function (:arguments ("path")) nil [406811 407129])
            ("org--open-shell-link" function (:arguments ("path")) nil [407131 407887])
            ("org-open-at-point" function
               (:user-visible-flag t
                :arguments ("arg" "reference-buffer"))
                nil [407889 414555])
            ("org-offer-links-in-entry" function (:arguments ("buffer" "marker" "nth" "zero")) nil [414557 416714])
            ("org-open-file-with-system" function (:arguments ("path")) nil [416844 416973])
            ("org-open-file-with-emacs" function (:arguments ("path")) nil [416974 417075])
            ("org-create-file-search-functions" variable nil nil [417095 418182])
            ("org-execute-file-search-functions" variable nil nil [418184 419236])
            ("org-search-radio-target" function (:arguments ("target")) nil [419238 419939])
            ("org-link-search" function (:arguments ("s" "avoid-pos" "stealth")) nil [419941 426451])
            ("org-get-buffer-for-internal-link" function (:arguments ("buffer")) nil [426453 427103])
            ("org-do-occur" function (:arguments ("regexp" "cleanup")) nil [427105 427828])
            ("org-mark-ring" variable nil nil [427865 427945])
            ("org-mark-ring-last-goto" variable nil nil [427946 428034])
            ("setq" code nil nil [428062 428114])
            ("dotimes" code nil nil [428143 428214])
            ("setcdr" code nil nil [428215 428287])
            ("org-mark-ring-push" function
               (:user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [428289 428748])
            ("org-mark-ring-goto" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [428750 429493])
            ("org-add-angle-brackets" function (:arguments ("s")) nil [429495 429662])
            ("org-agenda-buffer-tmp-name" variable nil nil [429694 429729])
            ("org-agenda-start-on-weekday" variable nil nil [429730 429766])
            ("org-follow-timestamp-link" function nil nil [429767 430602])
            ("declare-function" code nil nil [430630 430704])
            ("declare-function" code nil nil [430705 430766])
            ("declare-function" code nil nil [430767 430854])
            ("org-wait" variable nil nil [430855 430876])
            ("org-open-file" function (:arguments ("path" "in-emacs" "line" "search")) nil [430877 437081])
            ("org-file-apps-entry-match-against-dlink-p" function (:arguments ("entry")) nil [437083 437747])
            ("org-default-apps" function nil nil [437749 438017])
            ("org-apps-regexp-alist" function (:arguments ("list" "add-auto-mode")) nil [438019 438674])
            ("ange-ftp-name-format" variable nil nil [438676 438705])
            ("org-file-remote-p" function (:arguments ("file")) nil [438706 439225])
            ("org-get-org-file" function nil nil [439243 439514])
            ("org-notes-order-reversed-p" function nil nil [439516 439914])
            ("org-refile-target-table" variable nil nil [439916 440009])
            ("org-agenda-new-buffers" variable nil nil [440011 440089])
            ("org-refile-cache" variable nil nil [440091 440150])
            ("org-refile-markers" variable nil nil [440152 440238])
            ("org-refile-marker" function (:arguments ("pos")) nil [440240 440473])
            ("org-refile-cache-clear" function nil nil [440475 440724])
            ("org-refile-cache-check-set" function (:arguments ("set")) nil [440726 441153])
            ("org-refile-cache-put" function (:arguments ("set" "identifiers")) nil [441155 441447])
            ("org-refile-cache-get" function (:arguments ("identifiers")) nil [441449 441822])
            ("org-outline-path-cache" variable nil nil [441824 442111])
            ("org-refile-get-targets" function (:arguments ("default-buffer")) nil [442113 445819])
            ("org--get-outline-path-1" function (:arguments ("use-cache")) nil [445821 447011])
            ("org-get-outline-path" function (:arguments ("with-self" "use-cache")) nil [447013 447976])
            ("org-format-outline-path" function (:arguments ("path" "width" "prefix" "separator")) nil [447978 449107])
            ("org-display-outline-path" function
               (:user-visible-flag t
                :arguments ("file" "current" "separator" "just-return-string"))
                nil [449109 450187])
            ("org-refile-history" variable nil nil [450189 450257])
            ("org-after-refile-insert-hook" variable nil nil [450259 450460])
            ("org-capture-last-stored-marker" variable nil nil [450462 450501])
            ("org-refile-keep" variable nil nil [450502 450590])
            ("org-copy" function (:user-visible-flag t) nil [450592 450735])
            ("org-refile" function
               (:user-visible-flag t
                :arguments ("arg" "default-buffer" "rfloc" "msg"))
                nil [450737 457223])
            ("org-refile-goto-last-stored" function (:user-visible-flag t) nil [457225 457458])
            ("org-refile--get-location" function (:arguments ("refloc" "tbl")) nil [457460 457826])
            ("org-refile-get-location" function (:arguments ("prompt" "default-buffer" "new-nodes")) nil [457828 460520])
            ("declare-function" code nil nil [460522 460571])
            ("org-refile-check-position" function (:arguments ("refile-pointer")) nil [460572 461320])
            ("org-refile-new-child" function (:arguments ("parent-target" "child")) nil [461322 462147])
            ("org-olpath-completing-read" function (:arguments ("prompt" "collection" "args")) nil [462149 462872])
            ("org-find-dblock" function (:arguments ("name")) nil [462895 463314])
            ("org-create-dblock" function (:arguments ("plist")) nil [463316 463906])
            ("org-prepare-dblock" function nil nil [463908 464846])
            ("org-map-dblocks" function (:arguments ("command")) nil [464848 465445])
            ("org-dblock-update" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [465447 465783])
            ("org-update-dblock" function (:user-visible-flag t) nil [465785 466818])
            ("org-beginning-of-dblock" function nil nil [466820 467254])
            ("org-update-all-dblocks" function (:user-visible-flag t) nil [467256 467464])
            ("declare-function" code nil nil [467484 467543])
            ("org-get-export-keywords" function nil nil [467544 468139])
            ("org-options-keywords" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE:" "AUTHOR:" "BIND:" "CATEGORY:" "COLUMNS:" "CREATOR:" "DATE:" "DESCRIPTION:" "DRAWERS:" "EMAIL:" "EXCLUDE_TAGS:" "FILETAGS:" "INCLUDE:" "INDEX:" "KEYWORDS:" "LANGUAGE:" "MACRO:" "OPTIONS:" "PROPERTY:" "PRIORITIES:" "SELECT_TAGS:" "SEQ_TODO:" "SETUPFILE:" "STARTUP:" "TAGS:" "TITLE:" "TODO:" "TYP_TODO:" "SELECT_TAGS:" "EXCLUDE_TAGS:")))
                nil [468141 468536])
            ("org-structure-template-alist" variable (:default-value (quote (("s" "#+BEGIN_SRC ?

#+END_SRC") ("e" "#+BEGIN_EXAMPLE
?
#+END_EXAMPLE") ("q" "#+BEGIN_QUOTE
?
#+END_QUOTE") ("v" "#+BEGIN_VERSE
?
#+END_VERSE") ("V" "#+BEGIN_VERBATIM
?
#+END_VERBATIM") ("c" "#+BEGIN_CENTER
?
#+END_CENTER") ("C" "#+BEGIN_COMMENT
?
#+END_COMMENT") ("l" "#+BEGIN_EXPORT latex
?
#+END_EXPORT") ("L" "#+LaTeX: ") ("h" "#+BEGIN_EXPORT html
?
#+END_EXPORT") ("H" "#+HTML: ") ("a" "#+BEGIN_EXPORT ascii
?
#+END_EXPORT") ("A" "#+ASCII: ") ("i" "#+INDEX: ?") ("I" "#+INCLUDE: %file ?")))) nil [468538 469937])
            ("org-try-structure-completion" function nil nil [469939 470443])
            ("org-complete-expand-structure-template" function (:arguments ("start" "cell")) nil [470445 471223])
            ("org-toggle-comment" function (:user-visible-flag t) nil [471256 471872])
            ("org-last-todo-state-is-todo" variable nil nil [471874 472066])
            ("org-setting-tags" variable nil nil [472068 472097])
            ("org-todo-setup-filter-hook" variable nil nil [472121 472312])
            ("org-todo-get-default-hook" variable nil nil [472314 472525])
            ("org-agenda-headline-snapshot-before-repeat" variable nil nil [472527 472578])
            ("org-current-effective-time" function nil nil [472580 473029])
            ("org-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [473031 473401])
            ("org-block-entry-blocking" variable nil nil [473403 473489])
            ("org-cancel-repeater" function (:user-visible-flag t) nil [473491 474028])
            ("org-state" variable nil nil [474030 474048])
            ("org-blocked-by-checkboxes" variable nil nil [474049 474083])
            ("org-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [474084 484140])
            ("org-block-todo-from-children-or-siblings-or-parent" function (:arguments ("change-plist")) nil [484142 487092])
            ("org-track-ordered-property-with-tag" variable nil nil [487127 487968])
            ("org-toggle-ordered-property" function (:user-visible-flag t) nil [487970 488670])
            ("org-block-todo-from-checkboxes" function (:arguments ("change-plist")) nil [488672 489926])
            ("org-entry-blocked-p" function nil nil [489943 490292])
            ("org-update-statistics-cookies" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [490294 491718])
            ("org-entry-property-inherited-from" variable nil nil [491720 491762])
            ("org-update-parent-todo-statistics" function nil nil [491780 495537])
            ("org-after-todo-statistics-hook" variable nil nil [495539 496270])
            ("org-todo-statistics-hook" variable nil nil [496272 496509])
            ("org-todo-trigger-tag-changes" function (:arguments ("state")) nil [496511 497176])
            ("org-local-logging" function (:arguments ("value")) nil [497178 497761])
            ("org-get-todo-sequence-head" function (:arguments ("kwd")) nil [497763 498331])
            ("org-fast-todo-selection" function nil nil [498333 500371])
            ("org-entry-is-todo-p" function nil nil [500373 500457])
            ("org-entry-is-done-p" function nil nil [500459 500539])
            ("org-get-todo-state" function nil nil [500541 500779])
            ("org-at-date-range-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [500781 501559])
            ("org-get-repeat" function (:arguments ("timestamp")) nil [501561 502332])
            ("org-last-changed-timestamp" variable nil nil [502334 502369])
            ("org-last-inserted-timestamp" variable nil nil [502370 502406])
            ("org-log-post-message" variable nil nil [502407 502436])
            ("org-log-note-purpose" variable nil nil [502437 502466])
            ("org-log-note-how" variable nil nil [502467 502496])
            ("org-log-note-extra" variable nil nil [502497 502524])
            ("org-auto-repeat-maybe" function (:arguments ("done-word")) nil [502525 507236])
            ("org-show-todo-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [507238 508253])
            ("org--deadline-or-schedule" function (:arguments ("arg" "type" "time")) nil [508255 511211])
            ("org-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [511213 512028])
            ("org-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [512030 512848])
            ("org-get-scheduled-time" function (:arguments ("pom" "inherit")) nil [512850 513172])
            ("org-get-deadline-time" function (:arguments ("pom" "inherit")) nil [513174 513488])
            ("org-remove-timestamp-with-keyword" function (:arguments ("keyword")) nil [513490 514157])
            ("org-time-was-given" variable nil nil [514159 514186])
            ("org-end-time-was-given" variable nil nil [514218 514249])
            ("org-at-planning-p" function nil nil [514282 514799])
            ("org-add-planning-info" function (:arguments ("what" "time" "remove")) nil [514801 518384])
            ("org-log-note-marker" variable (:default-value (make-marker)) nil [518386 518495])
            ("org-log-note-purpose" variable nil nil [518496 518529])
            ("org-log-note-state" variable nil nil [518530 518561])
            ("org-log-note-previous-state" variable nil nil [518562 518602])
            ("org-log-note-extra" variable nil nil [518603 518634])
            ("org-log-note-window-configuration" variable nil nil [518635 518681])
            ("org-log-note-return-to" variable (:default-value (make-marker)) nil [518682 518727])
            ("org-log-note-effective-time" variable nil nil [518728 518887])
            ("org-log-post-message" variable nil nil [518889 519013])
            ("org-add-note" function (:user-visible-flag t) nil [519015 519179])
            ("org-log-beginning" function (:arguments ("create")) nil [519181 520672])
            ("org-add-log-setup" function (:arguments ("purpose" "state" "prev-state" "how" "extra")) nil [520674 521309])
            ("org-skip-over-state-notes" function nil nil [521311 522082])
            ("org-add-log-note" function (:arguments ("_purpose")) nil [522084 523714])
            ("org-note-abort" variable nil nil [523716 523743])
            ("org-store-log-note" function nil nil [523765 527477])
            ("org-remove-empty-drawer-at" function (:arguments ("pos")) nil [527479 528095])
            ("org-ts-type" variable nil nil [528097 528121])
            ("org-sparse-tree" function
               (:user-visible-flag t
                :arguments ("arg" "type"))
                nil [528122 530496])
            ("defvar-local" code nil nil [530498 530582])
            ("defvar-local" code nil nil [530583 531142])
            ("org-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "keep-previous" "callback"))
                nil [531144 533103])
            ("org-occur-next-match" function (:arguments ("n" "_reset")) nil [533105 533943])
            ("org-show-context" function (:arguments ("key")) nil [533945 534354])
            ("org-show-set-visibility" function (:arguments ("detail")) nil [534356 535644])
            ("org-reveal-start-hook" variable nil nil [535646 535722])
            ("org-reveal" function
               (:user-visible-flag t
                :arguments ("siblings"))
                nil [535724 536569])
            ("org-highlight-new-match" function (:arguments ("beg" "end")) nil [536571 536850])
            ("org-remove-occur-highlights" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [536852 537378])
            ("org-priority-regexp" variable (:default-value ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)") nil [537397 537516])
            ("org-remove-priority-next-time" variable nil nil [537518 537560])
            ("org-priority-up" function (:user-visible-flag t) nil [537562 537672])
            ("org-priority-down" function (:user-visible-flag t) nil [537674 537788])
            ("org-priority" function
               (:user-visible-flag t
                :arguments ("action" "_show"))
                nil [537790 540745])
            ("org-show-priority" function (:user-visible-flag t) nil [540747 541268])
            ("org-get-priority" function (:arguments ("s")) nil [541270 541634])
            ("org-agenda-archives-mode" variable nil nil [541647 541680])
            ("org-map-continue-from" variable nil nil [541681 541840])
            ("org-scanner-tags" variable nil nil [541842 541931])
            ("org-trust-scanner-tags" variable nil nil [541933 542511])
            ("org--matcher-tags-todo-only" variable nil nil [542513 542553])
            ("org-scan-tags" function (:arguments ("action" "matcher" "todo-only" "start-level")) nil [542555 548699])
            ("org-remove-uninherited-tags" function (:arguments ("tags")) nil [548701 549366])
            ("org-match-sparse-tree" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [549368 550023])
            ("defalias" code nil nil [550025 550080])
            ("org-cached-props" variable nil nil [550082 550111])
            ("org-cached-entry-get" function (:arguments ("pom" "property")) nil [550112 550756])
            ("org-global-tags-completion-table" function (:arguments ("files")) nil [550758 551363])
            ("org-make-tags-matcher" function (:arguments ("match")) nil [551365 557063])
            ("org-tags-expand" function (:arguments ("match" "single-as-list" "downcased" "tags-already-expanded")) nil [557065 562083])
            ("org-op-to-function" function (:arguments ("op" "stringp")) nil [562085 562629])
            ("org<>" function (:arguments ("a" "b")) nil [562631 562664])
            ("org-string<=" function (:arguments ("a" "b")) nil [562665 562724])
            ("org-string>=" function (:arguments ("a" "b")) nil [562725 562771])
            ("org-string>" function (:arguments ("a" "b")) nil [562772 562844])
            ("org-string<>" function (:arguments ("a" "b")) nil [562845 562891])
            ("org-time=" function (:arguments ("a" "b")) nil [562892 562985])
            ("org-time<" function (:arguments ("a" "b")) nil [562986 563079])
            ("org-time<=" function (:arguments ("a" "b")) nil [563080 563173])
            ("org-time>" function (:arguments ("a" "b")) nil [563174 563267])
            ("org-time>=" function (:arguments ("a" "b")) nil [563268 563361])
            ("org-time<>" function (:arguments ("a" "b")) nil [563362 563455])
            ("org-2ft" function (:arguments ("s")) nil [563456 563821])
            ("org-time-today" function nil nil [563823 564073])
            ("org-matcher-time" function (:arguments ("s")) nil [564075 564658])
            ("org-match-any-p" function (:arguments ("re" "list")) nil [564660 564811])
            ("org-add-colon-after-tag-completion" variable nil nil [564813 564860])
            ("org-tags-overlay" variable (:default-value (make-overlay 1 1)) nil [564890 564934])
            ("delete-overlay" code nil nil [564935 564968])
            ("org-get-local-tags-at" function (:arguments ("pos")) nil [564970 565102])
            ("org-get-local-tags" function nil nil [565104 565220])
            ("org-get-tags-at" function
               (:user-visible-flag t
                :arguments ("pos" "local"))
                nil [565222 566703])
            ("org-add-prop-inherited" function (:arguments ("s")) nil [566705 566797])
            ("org-toggle-tag" function (:arguments ("tag" "onoff")) nil [566799 567807])
            ("org--align-tags-here" function (:arguments ("to-col")) nil [567809 568513])
            ("org-set-tags-command" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [568515 568920])
            ("org-set-tags-to" function
               (:user-visible-flag t
                :arguments ("data"))
                nil [568922 569873])
            ("org-align-all-tags" function (:user-visible-flag t) nil [569875 570124])
            ("org-indent-indentation-per-level" variable nil nil [570126 570167])
            ("org-set-tags" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [570168 574167])
            ("org-change-tag-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "tag" "off"))
                nil [574169 575702])
            ("org-tags-completion-function" function (:arguments ("string" "_predicate" "flag")) nil [575704 576519])
            ("org-fast-tag-insert" function (:arguments ("kwd" "tags" "face" "end")) nil [576521 576777])
            ("org-fast-tag-show-exit" function (:arguments ("flag")) nil [576779 577120])
            ("org-set-current-tags-overlay" function (:arguments ("current" "prefix")) nil [577122 577424])
            ("org-last-tag-selection-key" variable nil nil [577426 577465])
            ("org-fast-tag-selection" function (:arguments ("current" "inherited" "table" "todo-table")) nil [577466 584535])
            ("org-get-tags-string" function nil nil [584537 584834])
            ("org-get-tags" function nil nil [584836 584966])
            ("org-get-buffer-tags" function nil nil [584968 585433])
            ("org-agenda-skip-comment-trees" variable nil nil [585457 585495])
            ("org-agenda-skip-function" variable nil nil [585496 585529])
            ("org-map-entries" function (:arguments ("func" "match" "scope" "skip")) nil [585530 591024])
            ("org-special-properties" variable
               (:constant-flag t
                :default-value (quote ("ALLTAGS" "BLOCKED" "CLOCKSUM" "CLOCKSUM_T" "CLOSED" "DEADLINE" "FILE" "ITEM" "PRIORITY" "SCHEDULED" "TAGS" "TIMESTAMP" "TIMESTAMP_IA" "TODO")))
                nil [591046 591365])
            ("org-default-properties" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "CUSTOM_ID" "LOCATION" "LOGGING" "COLUMNS" "VISIBILITY" "TABLE_EXPORT_FORMAT" "TABLE_EXPORT_FILE" "EXPORT_OPTIONS" "EXPORT_TEXT" "EXPORT_FILE_NAME" "EXPORT_TITLE" "EXPORT_AUTHOR" "EXPORT_DATE" "UNNUMBERED" "ORDERED" "NOBLOCKING" "COOKIE_DATA" "LOG_INTO_DRAWER" "REPEAT_TO_STATE" "CLOCK_MODELINE_TOTAL" "STYLE" "HTML_CONTAINER_CLASS")))
                nil [591367 591943])
            ("org--valid-property-p" function (:arguments ("property")) nil [591945 592120])
            ("org--update-property-plist" function (:arguments ("key" "val" "props")) nil [592122 592534])
            ("org-get-property-block" function (:arguments ("beg" "force")) nil [592536 593598])
            ("org-at-property-p" function nil nil [593600 593985])
            ("org-property-action" function (:user-visible-flag t) nil [593987 594489])
            ("org-inc-effort" function (:user-visible-flag t) nil [594491 594626])
            ("org-clock-effort" variable nil nil [594628 594653])
            ("org-clock-current-task" variable nil nil [594687 594718])
            ("org-set-effort" function
               (:user-visible-flag t
                :arguments ("value" "increment"))
                nil [594746 596606])
            ("org-entry-properties" function (:arguments ("pom" "which")) nil [596608 604593])
            ("org--property-local-values" function (:arguments ("property" "literal-nil")) nil [604595 605575])
            ("org--property-global-value" function (:arguments ("property" "literal-nil")) nil [605577 606072])
            ("org-entry-get" function (:arguments ("pom" "property" "inherit" "literal-nil")) nil [606074 607556])
            ("org-property-or-variable-value" function (:arguments ("var" "inherit")) nil [607558 607919])
            ("org-entry-delete" function (:arguments ("pom" "property")) nil [607921 608720])
            ("org-entry-add-to-multivalued-property" function (:arguments ("pom" "property" "value")) nil [608866 609296])
            ("org-entry-remove-from-multivalued-property" function (:arguments ("pom" "property" "value")) nil [609298 609725])
            ("org-entry-member-in-multivalued-property" function (:arguments ("pom" "property" "value")) nil [609727 610036])
            ("org-entry-get-multivalued-property" function (:arguments ("pom" "property")) nil [610038 610288])
            ("org-entry-put-multivalued-property" function (:arguments ("pom" "property" "values")) nil [610290 610704])
            ("org-entry-protect-space" function (:arguments ("s")) nil [610706 610934])
            ("org-entry-restore-space" function (:arguments ("s")) nil [610936 611164])
            ("org-entry-property-inherited-from" variable (:default-value (make-marker)) nil [611166 611561])
            ("org-entry-get-with-inheritance" function (:arguments ("property" "literal-nil")) nil [611563 612754])
            ("org-property-changed-functions" variable nil nil [612756 612949])
            ("org-entry-put" function (:arguments ("pom" "property" "value")) nil [612951 616006])
            ("org-buffer-property-keys" function (:arguments ("specials" "defaults" "columns" "ignore-malformed")) nil [616008 618783])
            ("org-property-values" function (:arguments ("key")) nil [618785 619120])
            ("org-insert-property-drawer" function nil nil [619122 619909])
            ("org-insert-drawer" function
               (:user-visible-flag t
                :arguments ("arg" "drawer"))
                nil [619911 621965])
            ("org-property-set-functions-alist" variable nil nil [621967 622202])
            ("org-set-property-function" function (:arguments ("property")) nil [622204 622462])
            ("org-read-property-value" function (:arguments ("property")) nil [622464 623124])
            ("org-last-set-property" variable nil nil [623126 623160])
            ("org-last-set-property-value" variable nil nil [623161 623201])
            ("org-read-property-name" function nil nil [623202 623623])
            ("org-set-property-and-value" function
               (:user-visible-flag t
                :arguments ("use-last"))
                nil [623625 624254])
            ("org-set-property" function
               (:user-visible-flag t
                :arguments ("property" "value"))
                nil [624256 625545])
            ("org-find-property" function (:arguments ("property" "value")) nil [625547 626319])
            ("org-delete-property" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [626321 626914])
            ("org-delete-property-globally" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [626916 627552])
            ("org-columns-current-fmt-compiled" variable nil nil [627554 627595])
            ("org-compute-property-at-point" function (:user-visible-flag t) nil [627625 628175])
            ("org-property-allowed-value-functions" variable nil nil [628177 628637])
            ("org-property-get-allowed-values" function (:arguments ("pom" "property" "table")) nil [628639 629861])
            ("org-property-previous-allowed-value" function
               (:user-visible-flag t
                :arguments ("_previous"))
                nil [629863 630038])
            ("org-property-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous"))
                nil [630040 631443])
            ("org-find-olp" function (:arguments ("path" "this-buffer")) nil [631445 633079])
            ("org-find-exact-headline-in-buffer" function (:arguments ("heading" "buffer" "pos-only")) nil [633081 633796])
            ("org-find-exact-heading-in-directory" function (:arguments ("heading" "dir")) nil [633798 634507])
            ("org-find-entry-with-id" function
               (:user-visible-flag t
                :arguments ("ident"))
                nil [634509 635103])
            ("org-last-changed-timestamp" variable nil nil [635122 635161])
            ("org-last-inserted-timestamp" variable nil nil [635162 635265])
            ("org-time-stamp" function
               (:user-visible-flag t
                :arguments ("arg" "inactive"))
                nil [635267 637927])
            ("org-get-compact-tod" function (:arguments ("s")) nil [638008 638642])
            ("org-time-stamp-inactive" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [638644 639378])
            ("org-date-ovl" variable (:default-value (make-overlay 1 1)) nil [639380 639420])
            ("overlay-put" code nil nil [639421 639472])
            ("delete-overlay" code nil nil [639473 639502])
            ("org-ans1" variable nil nil [639504 639521])
            ("org-ans2" variable nil nil [639553 639570])
            ("org-plain-time-of-day-regexp" variable nil nil [639603 639640])
            ("org-overriding-default-time" variable nil nil [639658 639698])
            ("org-read-date-overlay" variable nil nil [639720 639754])
            ("org-dcst" variable nil nil [639755 639776])
            ("org-read-date-history" variable nil nil [639798 639832])
            ("org-read-date-final-answer" variable nil nil [639833 639872])
            ("org-read-date-analyze-futurep" variable nil nil [639873 639915])
            ("org-read-date-analyze-forced-year" variable nil nil [639916 639962])
            ("org-read-date-inactive" variable nil nil [639963 639994])
            ("org-read-date-minibuffer-local-map" variable (:default-value (let* ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (org-defkey map (kbd ".") (lambda nil (interactive) (if (looking-back "^[^:]+: " (let ((inhibit-field-text-motion t)) (line-beginning-position))) (org-eval-in-calendar (quote (calendar-goto-today))) (insert ".")))) (org-defkey map (kbd "C-.") (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-goto-today))))) (org-defkey map [(meta shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [(meta shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [(meta shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [(meta shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [27 (shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [27 (shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [27 (shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [27 (shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [(shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-week 1))))) (org-defkey map [(shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-week 1))))) (org-defkey map [(shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-day 1))))) (org-defkey map [(shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-day 1))))) (org-defkey map "!" (lambda nil (interactive) (org-eval-in-calendar (quote (diary-view-entries))) (message ""))) (org-defkey map ">" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left 1))))) (org-defkey map "<" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right 1))))) (org-defkey map "" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left-three-months 1))))) (org-defkey map "\366" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right-three-months 1))))) map)) nil [639996 643193])
            ("org-def" variable nil nil [643195 643211])
            ("org-defdecode" variable nil nil [643212 643234])
            ("org-with-time" variable nil nil [643235 643257])
            ("calendar-setup" variable nil nil [643259 643282])
            ("org-read-date" function (:arguments ("with-time" "to-time" "from-string" "prompt" "default-time" "default-input" "inactive")) nil [643307 649940])
            ("org-read-date-display" function nil nil [649942 651408])
            ("org-read-date-analyze" function (:arguments ("ans" "def" "defdecode")) nil [651410 660513])
            ("parse-time-weekdays" variable nil nil [660515 660543])
            ("org-read-date-get-relative" function (:arguments ("s" "today" "default")) nil [660544 662084])
            ("org-order-calendar-date-args" function (:arguments ("arg1" "arg2" "arg3")) nil [662086 662551])
            ("org-eval-in-calendar" function (:arguments ("form" "keepdate")) nil [662553 663235])
            ("org-calendar-select" function (:user-visible-flag t) nil [663237 663692])
            ("org-insert-time-stamp" function (:arguments ("time" "with-hm" "inactive" "pre" "post" "extra")) nil [663694 664929])
            ("org-toggle-time-stamp-overlays" function (:user-visible-flag t) nil [664931 665685])
            ("org-display-custom-time" function (:arguments ("beg" "end")) nil [665687 666456])
            ("org-fix-decoded-time" function (:arguments ("time")) nil [666458 666659])
            ("org-time-stamp-to-now" function (:arguments ("timestamp-string" "seconds")) nil [666661 667005])
            ("org-deadline-close-p" function (:arguments ("timestamp-string" "ndays")) nil [667007 667287])
            ("org-get-wdays" function (:arguments ("ts" "delay" "zero-delay")) nil [667289 668237])
            ("org-calendar-select-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [668239 668729])
            ("org-check-deadlines" function
               (:user-visible-flag t
                :arguments ("ndays"))
                nil [668731 669594])
            ("org-re-timestamp" function (:arguments ("type")) nil [669596 670392])
            ("org-check-before-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [670394 671087])
            ("org-check-after-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [671089 671781])
            ("org-check-dates-range" function
               (:user-visible-flag t
                :arguments ("start-date" "end-date"))
                nil [671783 672688])
            ("org-evaluate-time-range" function
               (:user-visible-flag t
                :arguments ("to-buffer"))
                nil [672690 674988])
            ("org-make-tdiff-string" function (:arguments ("y" "d" "h" "m")) nil [674990 675496])
            ("org-time-string-to-time" function (:arguments ("s")) nil [675498 675634])
            ("org-time-string-to-seconds" function (:arguments ("s")) nil [675636 675776])
            ("org-define-error" code nil nil [675778 675850])
            ("org-time-string-to-absolute" function (:arguments ("s" "daynr" "prefer" "buffer" "pos")) nil [675852 677104])
            ("org-days-to-iso-week" function (:arguments ("days")) nil [677106 677236])
            ("org-small-year-to-year" function (:arguments ("year")) nil [677238 677772])
            ("org-time-from-absolute" function (:arguments ("d")) nil [677774 678045])
            ("org-agenda-current-date" variable nil nil [678047 678079])
            ("org-calendar-holiday" function nil nil [678080 678295])
            ("org-diary-sexp-entry" function (:arguments ("sexp" "entry" "d")) nil [678297 679073])
            ("org-diary-to-ical-string" function (:arguments ("frombuf")) nil [679075 679865])
            ("org-closest-date" function (:arguments ("start" "current" "prefer")) nil [679867 683213])
            ("org-date-to-gregorian" function (:arguments ("d")) nil [683215 683570])
            ("org-parse-time-string" function (:arguments ("s" "nodefault")) nil [683572 684631])
            ("org-timestamp-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [684633 684955])
            ("org-timestamp-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [684957 685285])
            ("org-timestamp-up-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [685287 685599])
            ("org-timestamp-down-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [685601 685921])
            ("org-at-timestamp-p" function (:arguments ("extended")) nil [685923 688432])
            ("org-toggle-timestamp-type" function (:user-visible-flag t) nil [688434 688954])
            ("org-at-clock-log-p" function nil nil [688956 689152])
            ("org-clock-history" variable nil nil [689154 689180])
            ("org-clock-adjust-closest" variable nil nil [689227 689264])
            ("org-timestamp-change" function (:arguments ("n" "what" "updown" "suppress-tmp-delay")) nil [689300 695368])
            ("org-modify-ts-extra" function (:arguments ("s" "pos" "n" "dm")) nil [695370 696892])
            ("org-recenter-calendar" function (:arguments ("d")) nil [696894 697200])
            ("org-goto-calendar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [697202 697891])
            ("org-get-date-from-calendar" function nil nil [697893 698086])
            ("org-date-from-calendar" function (:user-visible-flag t) nil [698088 698510])
            ("org-effort-durations" variable (:default-value (\` (("min" . 1) ("h" . 60) ("d" \, (* 60 8)) ("w" \, (* 60 8 5)) ("m" \, (* 60 8 5 4)) ("y" \, (* 60 8 5 40))))) nil [698512 699205])
            ("org-image-actual-width" variable (:default-value t) nil [699207 700115])
            ("org-agenda-inhibit-startup" variable nil nil [700117 700424])
            ("org-agenda-ignore-properties" variable nil nil [700426 701037])
            ("org-save-all-org-buffers" function (:user-visible-flag t) nil [701051 701354])
            ("org-revert-all-org-buffers" function (:user-visible-flag t) nil [701356 702342])
            ("org-switchb" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [702378 702894])
            ("org-buffer-list" function (:arguments ("predicate" "exclude-tmp")) nil [702896 704130])
            ("org-agenda-files" function (:arguments ("unrestricted" "archives")) nil [704132 705260])
            ("org-agenda-file-p" function (:arguments ("file")) nil [705262 705586])
            ("org-edit-agenda-file-list" function (:user-visible-flag t) nil [705588 706510])
            ("org-store-new-agenda-file-list" function (:arguments ("list")) nil [706512 707173])
            ("org-read-agenda-file-list" function (:arguments ("pair-with-expansion")) nil [707175 707893])
            ("org-cycle-agenda-files" function (:user-visible-flag t) nil [707910 708541])
            ("org-agenda-file-to-front" function
               (:user-visible-flag t
                :arguments ("to-end"))
                nil [708543 709567])
            ("org-remove-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [709569 710469])
            ("org-file-menu-entry" function (:arguments ("file")) nil [710471 710546])
            ("org-check-agenda-file" function (:arguments ("file")) nil [710548 710945])
            ("org-get-agenda-file-buffer" function (:arguments ("file")) nil [710947 711359])
            ("org-release-buffers" function (:arguments ("blist")) nil [711361 711832])
            ("org-agenda-prepare-buffers" function
               (:user-visible-flag t
                :arguments ("files"))
                nil [711834 714592])
            ("org-cdlatex-mode-map" variable (:default-value (make-sparse-keymap)) nil [714621 714716])
            ("org-defkey" code nil nil [714718 714785])
            ("org-defkey" code nil nil [714786 714853])
            ("org-defkey" code nil nil [714854 714912])
            ("org-defkey" code nil nil [714913 714975])
            ("org-defkey" code nil nil [714976 715049])
            ("org-cdlatex-texmathp-advice-is-done" variable nil nil [715051 715171])
            ("define-minor-mode" code nil nil [715173 716379])
            ("turn-on-org-cdlatex" function nil nil [716381 716482])
            ("org-try-cdlatex-tab" function nil nil [716484 717276])
            ("org-cdlatex-underscore-caret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [717278 717654])
            ("org-cdlatex-math-modify" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [717656 718019])
            ("org-cdlatex-environment-indent" function
               (:user-visible-flag t
                :arguments ("environment" "item"))
                nil [718021 720039])
            ("org-inside-LaTeX-fragment-p" function nil nil [720065 721989])
            ("org-inside-latex-macro-p" function nil nil [721991 722191])
            ("org--format-latex-make-overlay" function (:arguments ("beg" "end" "image" "imagetype")) nil [722193 722809])
            ("org--list-latex-overlays" function (:arguments ("beg" "end")) nil [722811 723131])
            ("org-remove-latex-fragment-image-overlays" function (:arguments ("beg" "end")) nil [723133 723540])
            ("org-toggle-latex-fragment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [723542 726218])
            ("org-format-latex" function (:arguments ("prefix" "beg" "end" "dir" "overlays" "msg" "forbuffer" "processing-type")) nil [726220 730803])
            ("org-create-math-formula" function
               (:user-visible-flag t
                :arguments ("latex-frag" "mathml-file"))
                nil [730805 733273])
            ("org-format-latex-as-mathml" function (:arguments ("latex-frag" "latex-frag-type" "prefix" "dir")) nil [733275 734410])
            ("org--get-display-dpi" function nil nil [734412 734748])
            ("org-create-formula-image" function (:arguments ("string" "tofile" "options" "buffer" "processing-type")) nil [734750 738982])
            ("org-splice-latex-header" function (:arguments ("tpl" "def-pkg" "pkg" "snippets-p" "extra")) nil [738984 740804])
            ("org-latex-packages-to-string" function (:arguments ("pkg" "snippets-p" "newline")) nil [740806 741330])
            ("org-dvipng-color" function (:arguments ("attr")) nil [741332 741475])
            ("org-dvipng-color-format" function (:arguments ("color-name")) nil [741477 741672])
            ("org-latex-color" function (:arguments ("attr")) nil [741674 741818])
            ("org-latex-color-format" function (:arguments ("color-name")) nil [741820 741999])
            ("org-normalize-color" function (:arguments ("value")) nil [742001 742136])
            ("defvar-local" code nil nil [742159 742203])
            ("org-toggle-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked"))
                nil [742205 742810])
            ("org-redisplay-inline-images" function (:user-visible-flag t) nil [742812 743042])
            ("org-display-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked" "refresh" "beg" "end"))
                nil [743044 747014])
            ("org-display-inline-remove-overlay" function (:arguments ("ov" "after" "_beg" "_end" "_len")) nil [747016 747303])
            ("org-remove-inline-images" function (:user-visible-flag t) nil [747305 747484])
            ("org-remap" function (:arguments ("map" "commands")) nil [747505 747794])
            ("define-key" code nil nil [747880 747952])
            ("define-key" code nil nil [747953 748025])
            ("define-key" code nil nil [748026 748120])
            ("define-key" code nil nil [748121 748217])
            ("define-key" code nil nil [748218 748307])
            ("define-key" code nil nil [748308 748378])
            ("define-key" code nil nil [748379 748447])
            ("define-key" code nil nil [748448 748520])
            ("define-key" code nil nil [748521 748611])
            ("define-key" code nil nil [748612 748710])
            ("define-key" code nil nil [748711 748777])
            ("org-defkey" code nil nil [750453 750510])
            ("org-defkey" code nil nil [750538 750587])
            ("org-defkey" code nil nil [750588 750637])
            ("org-defkey" code nil nil [750638 750705])
            ("org-defkey" code nil nil [750706 750751])
            ("org-defkey" code nil nil [750809 750865])
            ("org-defkey" code nil nil [750866 750922])
            ("define-key" code nil nil [750923 750972])
            ("org-defkey" code nil nil [750974 751039])
            ("org-defkey" code nil nil [751040 751112])
            ("org-defkey" code nil nil [751113 751170])
            ("org-defkey" code nil nil [751202 751256])
            ("org-defkey" code nil nil [751257 751312])
            ("org-defkey" code nil nil [751313 751365])
            ("org-defkey" code nil nil [751366 751420])
            ("org-defkey" code nil nil [751422 751506])
            ("org-defkey" code nil nil [751507 751590])
            ("org-defkey" code nil nil [751591 751657])
            ("org-defkey" code nil nil [751658 751725])
            ("org-defkey" code nil nil [751726 751790])
            ("org-defkey" code nil nil [751791 751857])
            ("org-defkey" code nil nil [751859 751919])
            ("org-defkey" code nil nil [751920 751982])
            ("org-defkey" code nil nil [751983 752045])
            ("org-defkey" code nil nil [752046 752109])
            ("org-defkey" code nil nil [752111 752183])
            ("org-defkey" code nil nil [752184 752255])
            ("org-defkey" code nil nil [752256 752322])
            ("org-defkey" code nil nil [752323 752394])
            ("define-key" code nil nil [752410 752470])
            ("dolist" code nil nil [752471 752560])
            ("when" code nil nil [752693 754472])
            ("org-remap" code nil nil [754496 754656])
            ("org-defkey" code nil nil [754657 754709])
            ("org-defkey" code nil nil [754711 754765])
            ("org-defkey" code nil nil [754794 754842])
            ("if" code nil nil [754843 754983])
            ("if" code nil nil [754984 755120])
            ("if" code nil nil [755121 755261])
            ("org-defkey" code nil nil [755262 755321])
            ("org-defkey" code nil nil [755322 755379])
            ("org-defkey" code nil nil [755380 755438])
            ("org-defkey" code nil nil [755439 755491])
            ("org-defkey" code nil nil [755492 755546])
            ("org-defkey" code nil nil [755547 755615])
            ("org-defkey" code nil nil [755616 755685])
            ("org-defkey" code nil nil [755686 755738])
            ("org-defkey" code nil nil [755739 755795])
            ("org-defkey" code nil nil [755796 755853])
            ("org-defkey" code nil nil [755854 755915])
            ("org-defkey" code nil nil [755916 755985])
            ("org-defkey" code nil nil [755986 756042])
            ("org-defkey" code nil nil [756043 756104])
            ("org-defkey" code nil nil [756105 756174])
            ("org-defkey" code nil nil [756175 756241])
            ("org-defkey" code nil nil [756242 756303])
            ("org-defkey" code nil nil [756304 756350])
            ("org-defkey" code nil nil [756351 756397])
            ("org-defkey" code nil nil [756398 756456])
            ("org-defkey" code nil nil [756457 756507])
            ("org-defkey" code nil nil [756508 756558])
            ("org-defkey" code nil nil [756559 756615])
            ("org-defkey" code nil nil [756616 756664])
            ("org-defkey" code nil nil [756665 756711])
            ("org-defkey" code nil nil [756712 756765])
            ("org-defkey" code nil nil [756790 756849])
            ("org-defkey" code nil nil [756868 756920])
            ("org-defkey" code nil nil [756921 756993])
            ("org-defkey" code nil nil [756994 757049])
            ("org-defkey" code nil nil [757050 757130])
            ("org-defkey" code nil nil [757131 757222])
            ("org-defkey" code nil nil [757223 757278])
            ("org-defkey" code nil nil [757279 757338])
            ("org-defkey" code nil nil [757339 757392])
            ("org-defkey" code nil nil [757393 757458])
            ("org-defkey" code nil nil [757459 757520])
            ("org-defkey" code nil nil [757521 757576])
            ("org-defkey" code nil nil [757577 757633])
            ("org-defkey" code nil nil [757634 757690])
            ("org-defkey" code nil nil [757691 757741])
            ("org-defkey" code nil nil [757765 757817])
            ("org-defkey" code nil nil [757841 757902])
            ("org-defkey" code nil nil [757919 757969])
            ("org-defkey" code nil nil [757995 758056])
            ("org-defkey" code nil nil [758057 758112])
            ("org-defkey" code nil nil [758113 758173])
            ("org-defkey" code nil nil [758174 758242])
            ("org-defkey" code nil nil [758243 758312])
            ("org-defkey" code nil nil [758313 758375])
            ("org-defkey" code nil nil [758376 758429])
            ("org-defkey" code nil nil [758430 758500])
            ("org-defkey" code nil nil [758501 758574])
            ("org-defkey" code nil nil [758575 758629])
            ("org-defkey" code nil nil [758630 758683])
            ("org-defkey" code nil nil [758684 758730])
            ("org-defkey" code nil nil [758731 758786])
            ("org-defkey" code nil nil [758787 758855])
            ("org-defkey" code nil nil [758856 758923])
            ("org-defkey" code nil nil [758924 758982])
            ("org-defkey" code nil nil [758983 759047])
            ("org-defkey" code nil nil [759048 759122])
            ("org-defkey" code nil nil [759123 759199])
            ("org-defkey" code nil nil [759200 759260])
            ("org-defkey" code nil nil [759261 759309])
            ("org-defkey" code nil nil [759310 759365])
            ("org-defkey" code nil nil [759366 759424])
            ("org-defkey" code nil nil [759425 759484])
            ("org-defkey" code nil nil [759485 759536])
            ("org-defkey" code nil nil [759537 759597])
            ("org-defkey" code nil nil [759598 759652])
            ("org-defkey" code nil nil [759653 759711])
            ("org-defkey" code nil nil [759712 759767])
            ("org-defkey" code nil nil [759768 759822])
            ("org-defkey" code nil nil [759823 759900])
            ("org-defkey" code nil nil [759901 759972])
            ("org-defkey" code nil nil [759973 760041])
            ("org-defkey" code nil nil [760042 760090])
            ("org-defkey" code nil nil [760091 760165])
            ("org-defkey" code nil nil [760166 760237])
            ("org-defkey" code nil nil [760238 760295])
            ("org-defkey" code nil nil [760296 760356])
            ("org-defkey" code nil nil [760357 760412])
            ("org-defkey" code nil nil [760413 760474])
            ("org-defkey" code nil nil [760475 760536])
            ("org-defkey" code nil nil [760537 760598])
            ("org-defkey" code nil nil [760599 760650])
            ("org-defkey" code nil nil [760651 760701])
            ("org-defkey" code nil nil [760702 760771])
            ("org-defkey" code nil nil [760855 760912])
            ("org-defkey" code nil nil [760913 760971])
            ("org-defkey" code nil nil [760972 761031])
            ("org-defkey" code nil nil [761033 761105])
            ("org-defkey" code nil nil [761106 761160])
            ("org-defkey" code nil nil [761161 761220])
            ("org-defkey" code nil nil [761221 761281])
            ("org-defkey" code nil nil [761282 761337])
            ("org-defkey" code nil nil [761338 761394])
            ("org-defkey" code nil nil [761395 761453])
            ("org-defkey" code nil nil [761454 761513])
            ("org-defkey" code nil nil [761514 761572])
            ("org-defkey" code nil nil [761573 761632])
            ("org-defkey" code nil nil [761633 761700])
            ("org-defkey" code nil nil [761701 761767])
            ("org-defkey" code nil nil [761768 761840])
            ("org-defkey" code nil nil [761841 761909])
            ("org-defkey" code nil nil [761910 761971])
            ("org-defkey" code nil nil [761972 762030])
            ("org-defkey" code nil nil [762031 762099])
            ("org-defkey" code nil nil [762100 762156])
            ("org-defkey" code nil nil [762157 762213])
            ("org-defkey" code nil nil [762214 762283])
            ("org-defkey" code nil nil [762284 762351])
            ("org-defkey" code nil nil [762352 762430])
            ("org-defkey" code nil nil [762432 762483])
            ("org-defkey" code nil nil [762484 762540])
            ("org-defkey" code nil nil [762541 762598])
            ("org-defkey" code nil nil [762599 762655])
            ("org-defkey" code nil nil [762656 762725])
            ("define-key" code nil nil [762727 762780])
            ("define-key" code nil nil [762782 762831])
            ("define-key" code nil nil [762833 762891])
            ("define-key" code nil nil [762892 762950])
            ("define-key" code nil nil [762952 763010])
            ("org-speed-commands-default" variable
               (:constant-flag t
                :default-value (quote (("Outline Navigation") ("n" org-speed-move-safe (quote org-next-visible-heading)) ("p" org-speed-move-safe (quote org-previous-visible-heading)) ("f" org-speed-move-safe (quote org-forward-heading-same-level)) ("b" org-speed-move-safe (quote org-backward-heading-same-level)) ("F" . org-next-block) ("B" . org-previous-block) ("u" org-speed-move-safe (quote outline-up-heading)) ("j" . org-goto) ("g" org-refile t) ("Outline Visibility") ("c" . org-cycle) ("C" . org-shifttab) (" " . org-display-outline-path) ("s" . org-narrow-to-subtree) ("=" . org-columns) ("Outline Structure Editing") ("U" . org-metaup) ("D" . org-metadown) ("r" . org-metaright) ("l" . org-metaleft) ("R" . org-shiftmetaright) ("L" . org-shiftmetaleft) ("i" progn (forward-char 1) (call-interactively (quote org-insert-heading-respect-content))) ("^" . org-sort) ("w" . org-refile) ("a" . org-archive-subtree-default-with-confirmation) ("@" . org-mark-subtree) ("#" . org-toggle-comment) ("Clock Commands") ("I" . org-clock-in) ("O" . org-clock-out) ("Meta Data Editing") ("t" . org-todo) ("," org-priority) ("0" org-priority 32) ("1" org-priority 65) ("2" org-priority 66) ("3" org-priority 67) (":" . org-set-tags-command) ("e" . org-set-effort) ("E" . org-inc-effort) ("W" lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)) ("Agenda Views etc") ("v" . org-agenda) ("/" . org-sparse-tree) ("Misc") ("o" . org-open-at-point) ("?" . org-speed-command-help) ("<" org-agenda-set-restriction-lock (quote subtree)) (">" org-agenda-remove-restriction-lock))))
                nil [763013 764892])
            ("org-print-speed-command" function (:arguments ("e")) nil [764894 765210])
            ("org-speed-command-help" function (:user-visible-flag t) nil [765212 765823])
            ("org-speed-move-safe" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [765825 766187])
            ("org-self-insert-command-undo-counter" variable nil nil [766189 766236])
            ("org-table-auto-blank-field" variable nil nil [766238 766273])
            ("org-speed-command" variable nil nil [766300 766330])
            ("org-speed-command-activate" function (:arguments ("keys")) nil [766332 766778])
            ("org-babel-speed-command-activate" function (:arguments ("keys")) nil [766780 766994])
            ("org-speed-command-hook" variable (:default-value (quote (org-speed-command-activate org-babel-speed-command-activate))) nil [766996 767716])
            ("org-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [767718 770108])
            ("org-check-before-invisible-edit" function (:arguments ("kind")) nil [770110 773156])
            ("org-fix-tags-on-the-fly" function nil nil [773158 773481])
            ("org-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [773483 774614])
            ("org-delete-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [774616 775673])
            ("put" code nil nil [775742 775903])
            ("put" code nil nil [775904 776068])
            ("put" code nil nil [776069 776120])
            ("put" code nil nil [776121 776181])
            ("put" code nil nil [776182 776221])
            ("put" code nil nil [776273 776323])
            ("put" code nil nil [776324 776377])
            ("put" code nil nil [776378 776420])
            ("put" code nil nil [776421 776472])
            ("put" code nil nil [776526 776588])
            ("put" code nil nil [776589 776654])
            ("org-transpose-words" function (:user-visible-flag t) nil [776656 776973])
            ("org-remap" code nil nil [776974 777036])
            ("org-ctrl-c-ctrl-c-hook" variable nil nil [777038 777591])
            ("org-ctrl-c-ctrl-c-final-hook" variable nil nil [777593 778147])
            ("org-tab-first-hook" variable nil nil [778149 778618])
            ("org-tab-after-check-for-table-hook" variable nil nil [778620 779034])
            ("org-tab-after-check-for-cycling-hook" variable nil nil [779036 779396])
            ("org-tab-before-tab-emulation-hook" variable nil nil [779398 779670])
            ("org-metaleft-hook" variable nil nil [779672 779810])
            ("org-metaright-hook" variable nil nil [779811 779951])
            ("org-metaup-hook" variable nil nil [779952 780086])
            ("org-metadown-hook" variable nil nil [780087 780225])
            ("org-shiftmetaleft-hook" variable nil nil [780226 780371])
            ("org-shiftmetaright-hook" variable nil nil [780372 780519])
            ("org-shiftmetaup-hook" variable nil nil [780520 780661])
            ("org-shiftmetadown-hook" variable nil nil [780662 780807])
            ("org-metareturn-hook" variable nil nil [780808 780947])
            ("org-shiftup-hook" variable nil nil [780948 781083])
            ("org-shiftup-final-hook" variable nil nil [781084 781303])
            ("org-shiftdown-hook" variable nil nil [781304 781443])
            ("org-shiftdown-final-hook" variable nil nil [781444 781667])
            ("org-shiftleft-hook" variable nil nil [781668 781807])
            ("org-shiftleft-final-hook" variable nil nil [781808 782031])
            ("org-shiftright-hook" variable nil nil [782032 782173])
            ("org-shiftright-final-hook" variable nil nil [782174 782399])
            ("org-modifier-cursor-error" function nil nil [782401 782604])
            ("org-shiftselect-error" function nil nil [782606 782962])
            ("org-call-for-shift-select" function (:arguments ("cmd")) nil [782964 783081])
            ("org-shifttab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [783083 783755])
            ("org-shiftmetaleft" function (:user-visible-flag t) nil [783757 784424])
            ("org-shiftmetaright" function (:user-visible-flag t) nil [784426 785090])
            ("org-shiftmetaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [785092 785689])
            ("org-shiftmetadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [785691 786320])
            ("org-hidden-tree-error" function nil nil [786322 786449])
            ("org-metaleft" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [786451 787697])
            ("org-metaright" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [787699 789161])
            ("org-check-for-hidden" function (:arguments ("what")) nil [789163 790117])
            ("org-metaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [790119 790996])
            ("org-metadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [790998 791887])
            ("org-shiftup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [791889 792938])
            ("org-shiftdown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [792940 793986])
            ("org-shiftright" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [793988 795583])
            ("org-shiftleft" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [795585 797197])
            ("org-shiftcontrolright" function (:user-visible-flag t) nil [797199 797615])
            ("org-shiftcontrolleft" function (:user-visible-flag t) nil [797617 798042])
            ("org-shiftcontrolup" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [798044 798385])
            ("org-shiftcontroldown" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [798387 798734])
            ("org-increase-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [798736 799426])
            ("org-decrease-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [799428 799665])
            ("org-ctrl-c-ret" function (:user-visible-flag t) nil [799667 799911])
            ("org-find-visible" function nil nil [799913 800076])
            ("org-find-invisible" function nil nil [800077 800248])
            ("org-copy-visible" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [800250 800688])
            ("org-copy-special" function (:user-visible-flag t) nil [800690 801000])
            ("org-cut-special" function (:user-visible-flag t) nil [801002 801305])
            ("org-paste-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [801307 801650])
            ("org-edit-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [801652 804544])
            ("org-table-coordinate-overlays" variable nil nil [804546 804584])
            ("org-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [804611 814180])
            ("org-mode-restart" function nil nil [814182 814502])
            ("org-kill-note-or-show-branches" function (:user-visible-flag t) nil [814504 814923])
            ("org-delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [814925 816099])
            ("org-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [816101 816495])
            ("org-return" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [816497 819611])
            ("org-return-indent" function (:user-visible-flag t) nil [819613 819855])
            ("org-ctrl-c-star" function (:user-visible-flag t) nil [819857 820210])
            ("org-ctrl-c-minus" function (:user-visible-flag t) nil [820212 820753])
            ("org-toggle-heading" function
               (:user-visible-flag t
                :arguments ("nstars"))
                nil [820755 824430])
            ("org-meta-return" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [824432 824999])
            ("org-in-subtree-not-table-p" function nil nil [825019 825176])
            ("easy-menu-define" code nil nil [825207 828175])
            ("easy-menu-define" code nil nil [828177 836730])
            ("org-info" function
               (:user-visible-flag t
                :arguments ("node"))
                nil [836732 836919])
            ("org-submit-bug-report" function (:user-visible-flag t) nil [836936 839360])
            ("org-install-agenda-files-menu" function nil nil [839363 840089])
            ("org-require-autoloaded-modules" function nil nil [840111 840281])
            ("org-reload" function
               (:user-visible-flag t
                :arguments ("uncompiled"))
                nil [840298 842154])
            ("org-customize" function (:user-visible-flag t) nil [842171 842353])
            ("org-create-customize-menu" function (:user-visible-flag t) nil [842355 843060])
            ("org-get-at-eol" function (:arguments ("property" "n")) nil [843120 843276])
            ("org-find-text-property-in-string" function (:arguments ("prop" "s")) nil [843278 843511])
            ("org-display-warning" function (:arguments ("message")) nil [843513 843636])
            ("org-eval" function (:arguments ("form")) nil [843638 843781])
            ("org-in-clocktable-p" function nil nil [843783 844129])
            ("org-in-verbatim-emphasis" function nil nil [844131 844294])
            ("org-overlay-display" function (:arguments ("ovl" "text" "face" "evap")) nil [844296 844522])
            ("org-overlay-before-string" function (:arguments ("ovl" "text" "face" "evap")) nil [844524 844769])
            ("org-find-overlays" function (:arguments ("prop" "pos" "delete")) nil [844771 845101])
            ("org-goto-marker-or-bmk" function (:arguments ("marker" "bookmark")) nil [845103 845592])
            ("org-quote-csv-field" function (:arguments ("s")) nil [845594 845786])
            ("org-force-self-insert" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [845788 845918])
            ("org-shorten-string" function (:arguments ("s" "maxlength")) nil [845920 846738])
            ("org-get-indentation" function (:arguments ("line")) nil [846740 847114])
            ("org-get-string-indentation" function (:arguments ("s")) nil [847116 847474])
            ("org-remove-tabs" function (:arguments ("s" "width")) nil [847476 847836])
            ("org-fix-indentation" function (:arguments ("line" "ind")) nil [847838 848299])
            ("org-remove-indentation" function (:arguments ("code" "n")) nil [848301 848608])
            ("org-do-remove-indentation" function (:arguments ("n")) nil [848610 849603])
            ("org-fill-template" function (:arguments ("template" "alist")) nil [849605 850016])
            ("org-base-buffer" function (:arguments ("buffer")) nil [850018 850206])
            ("org-wrap" function (:arguments ("string" "width" "lines")) nil [850208 851144])
            ("org-do-wrap" function (:arguments ("words" "width")) nil [851146 851502])
            ("org-quote-vert" function (:arguments ("s")) nil [851504 851644])
            ("org-uuidgen-p" function (:arguments ("s")) nil [851646 851825])
            ("org-in-src-block-p" function (:arguments ("inside")) nil [851827 852255])
            ("org-context" function nil nil [852257 856803])
            ("org-in-regexp" function (:arguments ("regexp" "nlines" "visually")) nil [856805 857688])
            ("org-between-regexps-p" function (:arguments ("start-re" "end-re" "lim-up" "lim-down")) nil [857690 858923])
            ("org-in-block-p" function (:arguments ("names")) nil [858925 859634])
            ("org-occur-in-agenda-files" function
               (:user-visible-flag t
                :arguments ("regexp" "_nlines"))
                nil [859636 860522])
            ("add-hook" code nil nil [860524 860629])
            ("org-occur-link-in-agenda-files" function (:user-visible-flag t) nil [860631 860988])
            ("org-reverse-string" function (:arguments ("string")) nil [860990 861111])
            ("org-uniquify-alist" function (:arguments ("alist")) nil [861172 861665])
            ("org-delete-all" function (:arguments ("elts" "list")) nil [861667 861928])
            ("org-back-over-empty-lines" function nil nil [861930 862332])
            ("org-skip-whitespace" function nil nil [862334 862397])
            ("org-point-in-group" function (:arguments ("point" "group" "context")) nil [862399 862853])
            ("org-switch-to-buffer-other-window" function (:arguments ("args")) nil [862855 863113])
            ("org-combine-plists" function (:arguments ("plists")) nil [863115 863600])
            ("org-replace-escapes" function (:arguments ("string" "table")) nil [863602 864880])
            ("org-find-base-buffer-visiting" function (:arguments ("file")) nil [864882 865153])
            ("org-file-image-p" function (:arguments ("file")) nil [865265 865405])
            ("org-get-cursor-date" function (:arguments ("with-time")) nil [865407 866555])
            ("org-mark-subtree" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [866557 867197])
            ("org-file-newer-than-p" function (:arguments ("file" "time")) nil [867199 867733])
            ("org-compile-file" function (:arguments ("source" "process" "ext" "err-msg" "log-buf" "spec")) nil [867735 870174])
            ("org-element-greater-elements" variable nil nil [870193 870230])
            ("org--get-expected-indentation" function (:arguments ("element" "contentsp")) nil [870231 874415])
            ("org--align-node-property" function nil nil [874417 874779])
            ("org-indent-line" function (:user-visible-flag t) nil [874781 878069])
            ("org-indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [878071 882890])
            ("org-indent-drawer" function (:user-visible-flag t) nil [882892 883415])
            ("org-indent-block" function (:user-visible-flag t) nil [883417 884093])
            ("org-setup-filling" function nil nil [884679 885545])
            ("org-fill-line-break-nobreak-p" function nil nil [885547 885787])
            ("org-fill-paragraph-with-timestamp-nobreak-p" function nil nil [885789 885984])
            ("org-fill-n-macro-as-item-nobreak-p" function nil nil [885986 886285])
            ("declare-function" code nil nil [886287 886336])
            ("orgtbl-line-start-regexp" variable nil nil [886337 886370])
            ("org-adaptive-fill-function" function nil nil [886391 888949])
            ("declare-function" code nil nil [888951 889000])
            ("message-cite-prefix-regexp" variable nil nil [889001 889036])
            ("org-fill-element" function (:arguments ("justify")) nil [889056 893690])
            ("org-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "region"))
                nil [893692 895625])
            ("org-remap" code nil nil [895626 895686])
            ("org-auto-fill-function" function nil nil [895688 896114])
            ("org-comment-line-break-function" function (:arguments ("soft")) nil [896116 896577])
            ("org-toggle-fixed-width" function (:user-visible-flag t) nil [896603 901687])
            ("org-setup-comments-handling" function nil nil [902444 902840])
            ("org-insert-comment" function nil nil [902842 903660])
            ("comment-empty-lines" variable nil nil [903662 903690])
            ("org-comment-or-uncomment-region" function (:arguments ("beg" "end" "_")) nil [903714 906382])
            ("org-comment-dwim" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [906384 906637])
            ("org-timestamp--to-internal-time" function (:arguments ("timestamp" "end")) nil [906772 907204])
            ("org-timestamp-has-time-p" function (:arguments ("timestamp")) nil [907206 907346])
            ("org-timestamp-format" function (:arguments ("timestamp" "format" "end" "utc")) nil [907348 907794])
            ("org-timestamp-split-range" function (:arguments ("timestamp" "end")) nil [907796 908987])
            ("org-timestamp-translate" function (:arguments ("timestamp" "boundary")) nil [908989 909999])
            ("reftex-docstruct-symbol" variable nil nil [910021 910053])
            ("org--rds" variable nil nil [910054 910071])
            ("org-reftex-citation" function (:user-visible-flag t) nil [910073 911061])
            ("org-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [911111 913576])
            ("org-end-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [913578 915556])
            ("define-key" code nil nil [915558 915613])
            ("define-key" code nil nil [915614 915663])
            ("org-backward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [915665 916464])
            ("org-forward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [916466 917745])
            ("define-key" code nil nil [917747 917802])
            ("define-key" code nil nil [917803 917857])
            ("org-kill-line" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [917859 918618])
            ("define-key" code nil nil [918620 918667])
            ("org-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [918669 919951])
            ("org-yank-generic" function (:arguments ("command" "arg")) nil [919953 921707])
            ("org-yank-folding-would-swallow-text" function (:arguments ("beg" "end")) nil [921709 922226])
            ("define-key" code nil nil [922228 922270])
            ("org-truely-invisible-p" function nil nil [922272 922512])
            ("org-invisible-p2" function nil nil [922514 922821])
            ("org-back-to-heading" function (:arguments ("invisible-ok")) nil [922823 923116])
            ("org-before-first-heading-p" function nil nil [923118 923279])
            ("org-at-heading-p" function (:arguments ("ignored")) nil [923281 923352])
            ("org-in-commented-heading-p" function (:arguments ("no-inheritance")) nil [923354 923936])
            ("org-at-comment-p" function nil nil [923938 924099])
            ("org-at-drawer-p" function nil nil [924101 924248])
            ("org-at-block-p" function nil nil [924250 924394])
            ("org-point-at-end-of-empty-headline" function nil nil [924396 924795])
            ("org-at-heading-or-item-p" function nil nil [924797 924874])
            ("org-at-target-p" function nil nil [924876 924989])
            ("defalias" code nil nil [925040 925084])
            ("org-up-heading-all" function (:arguments ("arg")) nil [925086 925320])
            ("org-up-heading-safe" function nil nil [925322 925978])
            ("org-first-sibling-p" function (:user-visible-flag t) nil [925980 926358])
            ("org-goto-sibling" function (:arguments ("previous")) nil [926360 927090])
            ("org-show-siblings" function nil nil [927092 927329])
            ("org-goto-first-child" function nil nil [927331 927795])
            ("org-show-hidden-entry" function nil nil [927797 927921])
            ("org-flag-heading" function (:arguments ("flag" "entry")) nil [927923 928427])
            ("org-get-next-sibling" function nil nil [928429 928865])
            ("org-get-last-sibling" function nil nil [928867 929322])
            ("org-end-of-subtree" function (:arguments ("invisible-ok" "to-heading")) nil [929324 930779])
            ("org-end-of-meta-data" function (:arguments ("full")) nil [930781 931624])
            ("org-forward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [931626 932792])
            ("org-backward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [932794 933082])
            ("org-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [933084 933416])
            ("org-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [933418 933766])
            ("org-next-block" function
               (:user-visible-flag t
                :arguments ("arg" "backward" "block-regexp"))
                nil [933768 935212])
            ("org-previous-block" function
               (:user-visible-flag t
                :arguments ("arg" "block-regexp"))
                nil [935214 935487])
            ("org-forward-paragraph" function (:user-visible-flag t) nil [935489 939018])
            ("org-backward-paragraph" function (:user-visible-flag t) nil [939020 941908])
            ("org-forward-element" function (:user-visible-flag t) nil [941910 942702])
            ("org-backward-element" function (:user-visible-flag t) nil [942704 943984])
            ("org-up-element" function (:user-visible-flag t) nil [943986 944495])
            ("org-down-element" function (:user-visible-flag t) nil [944497 945116])
            ("org-drag-element-backward" function (:user-visible-flag t) nil [945118 946357])
            ("org-drag-element-forward" function (:user-visible-flag t) nil [946359 947795])
            ("org-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [947797 948142])
            ("org-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [948144 948281])
            ("org-mark-element" function (:user-visible-flag t) nil [948283 948991])
            ("org-narrow-to-element" function (:user-visible-flag t) nil [948993 949565])
            ("org-transpose-element" function (:user-visible-flag t) nil [949567 949868])
            ("org-unindent-buffer" function (:user-visible-flag t) nil [949870 950679])
            ("org-show-children" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [950681 952195])
            ("org-show-subtree" function (:user-visible-flag t) nil [952197 952389])
            ("org-show-entry" function (:user-visible-flag t) nil [952391 952874])
            ("org-make-options-regexp" function (:arguments ("kwds" "extra")) nil [952876 953216])
            ("defvar-local" code nil nil [953289 953366])
            ("org-imenu-new-marker" function (:arguments ("pos")) nil [953368 953581])
            ("org-imenu-get-tree" function nil nil [953583 954581])
            ("eval-after-load" code nil nil [954583 954749])
            ("org-link-display-format" function (:arguments ("s")) nil [954751 955103])
            ("org-toggle-link-display" function (:user-visible-flag t) nil [955105 955485])
            ("org-speedbar-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [955508 955634])
            ("overlay-put" code nil nil [955635 955727])
            ("overlay-put" code nil nil [955728 955842])
            ("delete-overlay" code nil nil [955843 955897])
            ("org-speedbar-set-agenda-restriction" function (:user-visible-flag t) nil [955899 957265])
            ("speedbar-file-key-map" variable nil nil [957267 957297])
            ("declare-function" code nil nil [957298 957372])
            ("eval-after-load" code nil nil [957373 957923])
            ("org--flyspell-object-check-p" function (:arguments ("element")) nil [957979 958823])
            ("org-mode-flyspell-verify" function nil nil [958825 961207])
            ("put" code nil nil [961208 961274])
            ("org-remove-flyspell-overlays-in" function (:arguments ("beg" "end")) nil [961276 961505])
            ("flyspell-delayed-commands" variable nil nil [961507 961541])
            ("eval-after-load" code nil nil [961542 961639])
            ("eval-after-load" code nil nil [961707 962052])
            ("eval-after-load" code nil nil [962113 962283])
            ("eval-after-load" code nil nil [962338 962577])
            ("org-bookmark-jump-unhide" function nil nil [962579 962872])
            ("org-mark-jump-unhide" function nil nil [962874 963083])
            ("eval-after-load" code nil nil [963085 963263])
            ("eval-after-load" code nil nil [963265 963447])
            ("eval-after-load" code nil nil [963449 963623])
            ("session-globals-exclude" variable nil nil [963673 963705])
            ("eval-after-load" code nil nil [963706 963790])
            ("org" package nil nil [963808 963822])
            ("run-hooks" code nil nil [963824 963850]))          
      :file "org.el"
      :pointmax 963873
      :fsize 963872
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax '((close-paren 22022 . 22023) (symbol 21800 . 21816) (open-paren 21799 . 21800) (close-paren 3094 . 3095) (symbol 3057 . 3074) (open-paren 3056 . 3057)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-with-gensyms" function (:arguments ("symbols" "body")) nil [1299 1516])
            ("org-string-nw-p" function (:arguments ("s")) nil [1518 1700])
            ("org-split-string" function (:arguments ("string" "separators")) nil [1702 2299])
            ("org-string-display" function (:arguments ("string")) nil [2301 4672])
            ("org-string-width" function (:arguments ("string")) nil [4674 4922])
            ("org-not-nil" function (:arguments ("v")) nil [4924 5069])
            ("org-preserve-lc" function (:arguments ("body")) nil [5071 5332])
            ("org-unmodified" function (:arguments ("body")) nil [5458 5829])
            ("org-without-partial-completion" function (:arguments ("body")) nil [5831 6155])
            ("org-with-point-at" function (:arguments ("pom" "body")) nil [6157 6528])
            ("org-with-remote-undo" function (:arguments ("buffer" "body")) nil [6530 7515])
            ("org-no-read-only" function (:arguments ("body")) nil [7517 7656])
            ("org-rm-props" variable
               (:constant-flag t
                :default-value (quote (invisible t face t keymap t intangible t mouse-face t rear-nonsticky t mouse-map t fontified t org-emphasis t)))
                nil [7658 7877])
            ("org-no-properties" function (:arguments ("s" "restricted")) nil [7879 8179])
            ("org-get-alist-option" function (:arguments ("option" "key")) nil [8181 8397])
            ("org-check-external-command" function (:arguments ("cmd" "use" "no-error")) nil [8399 8912])
            ("org-last" function (:arguments ("list")) nil [8914 8997])
            ("org-let" function (:arguments ("list" "body")) nil [8999 9070])
            ("put" code nil nil [9071 9109])
            ("org-let2" function (:arguments ("list1" "list2" "body")) nil [9111 9223])
            ("put" code nil nil [9224 9263])
            ("org-call-with-arg" function (:arguments ("command" "arg")) nil [9265 9435])
            ("org-current-line" function (:arguments ("pos")) nil [9437 9652])
            ("org-goto-line" function (:arguments ("N")) nil [9654 9769])
            ("org-current-line-string" function (:arguments ("to-here")) nil [9771 9897])
            ("org-pos-in-match-range" function (:arguments ("pos" "n")) nil [9899 10034])
            ("org-match-line" function (:arguments ("regexp")) nil [10036 10189])
            ("org-plist-delete" function (:arguments ("plist" "property")) nil [10191 10474])
            ("org-save-outline-visibility" function (:arguments ("use-markers" "body")) nil [10476 11223])
            ("org-with-wide-buffer" function (:arguments ("body")) nil [11225 11425])
            ("org-with-limited-levels" function (:arguments ("body")) nil [11427 11958])
            ("org-outline-regexp" variable nil nil [11960 11987])
            ("org-odd-levels-only" variable nil nil [12008 12036])
            ("org-inlinetask-min-level" variable nil nil [12057 12090])
            ("org-get-limited-outline-regexp" function nil nil [12122 12583])
            ("org-eval-in-environment" function (:arguments ("environment" "form")) nil [12585 12723])
            ("org-make-parameter-alist" function (:arguments ("flat")) nil [12725 13039])
            ("org-load-noerror-mustsuffix" function (:arguments ("file")) nil [13056 13208])
            ("org-unbracket-string" function (:arguments ("pre" "post" "string")) nil [13210 13527])
            ("org-read-function" function (:arguments ("prompt" "allow-empty?")) nil [13529 13897])
            ("org-unique-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [13899 14169])
            ("org-get-local-variables" function nil nil [14171 14741])
            ("org-clone-local-variables" function (:arguments ("from-buffer" "regexp")) nil [14743 15217])
            ("org-macs" package nil nil [15220 15239]))          
      :file "org-macs.el"
      :pointmax 15267
      :fsize 15266
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1159 1176])
            ("org-macs" include nil nil [1177 1196])
            ("declare-function" code nil nil [1198 1243])
            ("declare-function" code nil nil [1244 1300])
            ("declare-function" code nil nil [1301 1360])
            ("declare-function" code nil nil [1361 1440])
            ("declare-function" code nil nil [1441 1507])
            ("declare-function" code nil nil [1508 1575])
            ("declare-function" code nil nil [1576 1628])
            ("declare-function" code nil nil [1629 1710])
            ("org-table-any-border-regexp" variable nil nil [1712 1748])
            ("org-table-dataline-regexp" variable nil nil [1749 1783])
            ("org-table-tab-recognizes-table.el" variable nil nil [1784 1826])
            ("org-table1-hline-regexp" variable nil nil [1827 1859])
            ("when" code nil nil [1893 2442])
            ("unless" code nil nil [2444 2785])
            ("define-obsolete-function-alias" code nil nil [2895 2961])
            ("define-obsolete-function-alias" code nil nil [2962 3028])
            ("define-obsolete-function-alias" code nil nil [3029 3111])
            ("define-obsolete-function-alias" code nil nil [3112 3194])
            ("define-obsolete-function-alias" code nil nil [3195 3267])
            ("define-obsolete-function-alias" code nil nil [3268 3346])
            ("define-obsolete-function-alias" code nil nil [3347 3421])
            ("define-obsolete-function-alias" code nil nil [3422 3492])
            ("define-obsolete-function-alias" code nil nil [3493 3571])
            ("define-obsolete-function-alias" code nil nil [3572 3654])
            ("define-obsolete-function-alias" code nil nil [3655 3729])
            ("define-obsolete-function-alias" code nil nil [3730 3804])
            ("define-obsolete-function-alias" code nil nil [3805 3907])
            ("define-obsolete-function-alias" code nil nil [3908 3978])
            ("define-obsolete-function-alias" code nil nil [3979 4085])
            ("org-re" function (:arguments ("s")) nil [4087 4250])
            ("define-obsolete-function-alias" code nil nil [4328 4391])
            ("define-obsolete-function-alias" code nil nil [4392 4455])
            ("define-obsolete-function-alias" code nil nil [4456 4523])
            ("define-obsolete-function-alias" code nil nil [4524 4589])
            ("define-obsolete-function-alias" code nil nil [4590 4661])
            ("define-obsolete-function-alias" code nil nil [4662 4741])
            ("define-obsolete-function-alias" code nil nil [4742 4803])
            ("define-obsolete-function-alias" code nil nil [4804 4868])
            ("org-sublist" function (:arguments ("list" "start" "end")) nil [4870 5011])
            ("make-obsolete" code nil nil [5012 5125])
            ("define-obsolete-function-alias" code nil nil [5170 5254])
            ("define-obsolete-function-alias" code nil nil [5255 5349])
            ("define-obsolete-function-alias" code nil nil [5350 5428])
            ("define-obsolete-function-alias" code nil nil [5429 5511])
            ("define-obsolete-function-alias" code nil nil [5512 5590])
            ("define-obsolete-function-alias" code nil nil [5591 5674])
            ("define-obsolete-function-alias" code nil nil [5675 5752])
            ("define-obsolete-function-alias" code nil nil [5753 5833])
            ("define-obsolete-function-alias" code nil nil [5834 5934])
            ("define-obsolete-function-alias" code nil nil [5935 6013])
            ("define-obsolete-function-alias" code nil nil [6081 6181])
            ("define-obsolete-variable-alias" code nil nil [6182 6301])
            ("define-obsolete-variable-alias" code nil nil [6302 6417])
            ("define-obsolete-function-alias" code nil nil [6418 6489])
            ("define-obsolete-function-alias" code nil nil [6490 6568])
            ("define-obsolete-function-alias" code nil nil [6569 6643])
            ("define-obsolete-function-alias" code nil nil [6644 6740])
            ("define-obsolete-function-alias" code nil nil [6741 6828])
            ("define-obsolete-function-alias" code nil nil [6829 6912])
            ("define-obsolete-function-alias" code nil nil [6913 6992])
            ("define-obsolete-function-alias" code nil nil [6993 7078])
            ("define-obsolete-variable-alias" code nil nil [7079 7190])
            ("define-obsolete-function-alias" code nil nil [7191 7290])
            ("define-obsolete-function-alias" code nil nil [7291 7382])
            ("define-obsolete-variable-alias" code nil nil [7383 7481])
            ("define-obsolete-variable-alias" code nil nil [7482 7562])
            ("define-obsolete-variable-alias" code nil nil [7563 7666])
            ("define-obsolete-function-alias" code nil nil [7667 7748])
            ("define-obsolete-function-alias" code nil nil [7749 7832])
            ("define-obsolete-function-alias" code nil nil [7833 7933])
            ("define-obsolete-variable-alias" code nil nil [7934 8060])
            ("define-obsolete-function-alias" code nil nil [8062 8130])
            ("define-obsolete-variable-alias" code nil nil [8131 8201])
            ("define-obsolete-function-alias" code nil nil [8202 8300])
            ("define-obsolete-variable-alias" code nil nil [8301 8394])
            ("define-obsolete-function-alias" code nil nil [8395 8487])
            ("define-obsolete-function-alias" code nil nil [8488 8564])
            ("define-obsolete-function-alias" code nil nil [8565 8641])
            ("org-in-fixed-width-region-p" function nil nil [8643 8811])
            ("make-obsolete" code nil nil [8812 8924])
            ("org-compatible-face" function (:arguments ("inherits" "specs")) nil [8926 9272])
            ("make-obsolete" code nil nil [9273 9340])
            ("org-add-link-type" function (:arguments ("type" "follow" "export")) nil [9342 10665])
            ("make-obsolete" code nil nil [10667 10752])
            ("org-table-recognize-table.el" function nil nil [10754 11502])
            ("make-obsolete" code nil nil [11561 11709])
            ("org-remove-angle-brackets" function (:arguments ("s")) nil [11711 11783])
            ("make-obsolete" code nil nil [11784 11858])
            ("org-remove-double-quotes" function (:arguments ("s")) nil [11860 11933])
            ("make-obsolete" code nil nil [11934 12007])
            ("org-publish-sitemap-file-entry-format" variable (:default-value "%t") nil [12009 12318])
            ("make-obsolete-variable" code nil nil [12319 12465])
            ("org-agenda-skip-regexp" variable nil nil [12467 12498])
            ("org-agenda-skip-entry-when-regexp-matches" function nil nil [12499 13099])
            ("org-agenda-skip-subtree-when-regexp-matches" function nil nil [13101 13666])
            ("org-agenda-skip-entry-when-regexp-matches-in-subtree" function nil nil [13668 14441])
            ("define-obsolete-function-alias" code nil nil [14443 14546])
            ("define-obsolete-function-alias" code nil nil [14548 14646])
            ("define-obsolete-function-alias" code nil nil [14648 14749])
            ("make-obsolete-variable" code nil nil [14751 14850])
            ("make-obsolete-variable" code nil nil [14852 14959])
            ("make-obsolete-variable" code nil nil [14961 15071])
            ("make-obsolete-variable" code nil nil [15073 15185])
            ("define-obsolete-function-alias" code nil nil [15187 15280])
            ("define-obsolete-variable-alias" code nil nil [15282 15385])
            ("define-obsolete-variable-alias" code nil nil [15387 15495])
            ("make-obsolete" code nil nil [15618 15750])
            ("eval-after-load" code nil nil [15779 15913])
            ("org-version-check" function (:arguments ("version" "feature" "level")) nil [15962 16832])
            ("org-get-x-clipboard" function (:arguments ("value")) nil [16834 17398])
            ("org-add-props" function (:arguments ("string" "plist" "props")) nil [17400 17758])
            ("put" code nil nil [17759 17803])
            ("org-fit-window-to-buffer" function (:arguments ("window" "max-height" "min-height" "shrink-only")) nil [17805 18711])
            ("defalias" code nil nil [18761 18886])
            ("org-ignore-region" variable nil nil [18914 19001])
            ("org-region-active-p" function nil nil [19003 19189])
            ("org-cursor-to-region-beginning" function nil nil [19191 19343])
            ("org-remove-from-invisibility-spec" function (:arguments ("arg")) nil [19377 19701])
            ("org-in-invisibility-spec-p" function (:arguments ("arg")) nil [19703 19878])
            ("org-move-to-column" function (:arguments ("column" "force" "_buffer")) nil [19880 20226])
            ("org-find-library-dir" function (:arguments ("library")) nil [20228 20328])
            ("org-count-lines" function (:arguments ("s")) nil [20330 20592])
            ("org-kill-new" function (:arguments ("string" "args")) nil [20594 20775])
            ("defalias" code nil nil [20833 21012])
            ("defalias" code nil nil [21060 21271])
            ("org-no-popups" function (:arguments ("body")) nil [21273 21701])
            ("org-check-version" function nil nil [21718 22502])
            ("org-with-silent-modifications" function (:arguments ("body")) nil [22504 22672])
            ("def-edebug-spec" code nil nil [22673 22727])
            ("org-define-error" function (:arguments ("name" "message")) nil [22773 23186])
            ("unless" code nil nil [23188 23670])
            ("org-compat" package nil nil [23672 23693]))          
      :file "org-compat.el"
      :pointmax 23723
      :fsize 23722
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1102 1162])
            ("declare-function" code nil nil [1163 1223])
            ("org-entities" customgroup (:user-visible-flag t) nil [1225 1333])
            ("org-entities--user-safe-p" function (:arguments ("v")) nil [1335 1675])
            ("org-entities-user" variable nil nil [1677 3031])
            ("org-entities" variable
               (:constant-flag t
                :default-value (append (quote ("* Letters" "** Latin" ("Agrave" "\\`{A}" nil "&Agrave;" "A" "À" "À") ("agrave" "\\`{a}" nil "&agrave;" "a" "à" "à") ("Aacute" "\\'{A}" nil "&Aacute;" "A" "Á" "Á") ("aacute" "\\'{a}" nil "&aacute;" "a" "á" "á") ("Acirc" "\\^{A}" nil "&Acirc;" "A" "Â" "Â") ("acirc" "\\^{a}" nil "&acirc;" "a" "â" "â") ("Amacr" "\\bar{A}" nil "&Amacr;" "A" "Ã" "Ã") ("amacr" "\\bar{a}" nil "&amacr;" "a" "ã" "ã") ("Atilde" "\\~{A}" nil "&Atilde;" "A" "Ã" "Ã") ("atilde" "\\~{a}" nil "&atilde;" "a" "ã" "ã") ("Auml" "\\\"{A}" nil "&Auml;" "Ae" "Ä" "Ä") ("auml" "\\\"{a}" nil "&auml;" "ae" "ä" "ä") ("Aring" "\\AA{}" nil "&Aring;" "A" "Å" "Å") ("AA" "\\AA{}" nil "&Aring;" "A" "Å" "Å") ("aring" "\\aa{}" nil "&aring;" "a" "å" "å") ("AElig" "\\AE{}" nil "&AElig;" "AE" "Æ" "Æ") ("aelig" "\\ae{}" nil "&aelig;" "ae" "æ" "æ") ("Ccedil" "\\c{C}" nil "&Ccedil;" "C" "Ç" "Ç") ("ccedil" "\\c{c}" nil "&ccedil;" "c" "ç" "ç") ("Egrave" "\\`{E}" nil "&Egrave;" "E" "È" "È") ("egrave" "\\`{e}" nil "&egrave;" "e" "è" "è") ("Eacute" "\\'{E}" nil "&Eacute;" "E" "É" "É") ("eacute" "\\'{e}" nil "&eacute;" "e" "é" "é") ("Ecirc" "\\^{E}" nil "&Ecirc;" "E" "Ê" "Ê") ("ecirc" "\\^{e}" nil "&ecirc;" "e" "ê" "ê") ("Euml" "\\\"{E}" nil "&Euml;" "E" "Ë" "Ë") ("euml" "\\\"{e}" nil "&euml;" "e" "ë" "ë") ("Igrave" "\\`{I}" nil "&Igrave;" "I" "Ì" "Ì") ("igrave" "\\`{i}" nil "&igrave;" "i" "ì" "ì") ("Iacute" "\\'{I}" nil "&Iacute;" "I" "Í" "Í") ("iacute" "\\'{i}" nil "&iacute;" "i" "í" "í") ("Icirc" "\\^{I}" nil "&Icirc;" "I" "Î" "Î") ("icirc" "\\^{i}" nil "&icirc;" "i" "î" "î") ("Iuml" "\\\"{I}" nil "&Iuml;" "I" "Ï" "Ï") ("iuml" "\\\"{i}" nil "&iuml;" "i" "ï" "ï") ("Ntilde" "\\~{N}" nil "&Ntilde;" "N" "Ñ" "Ñ") ("ntilde" "\\~{n}" nil "&ntilde;" "n" "ñ" "ñ") ("Ograve" "\\`{O}" nil "&Ograve;" "O" "Ò" "Ò") ("ograve" "\\`{o}" nil "&ograve;" "o" "ò" "ò") ("Oacute" "\\'{O}" nil "&Oacute;" "O" "Ó" "Ó") ("oacute" "\\'{o}" nil "&oacute;" "o" "ó" "ó") ("Ocirc" "\\^{O}" nil "&Ocirc;" "O" "Ô" "Ô") ("ocirc" "\\^{o}" nil "&ocirc;" "o" "ô" "ô") ("Otilde" "\\~{O}" nil "&Otilde;" "O" "Õ" "Õ") ("otilde" "\\~{o}" nil "&otilde;" "o" "õ" "õ") ("Ouml" "\\\"{O}" nil "&Ouml;" "Oe" "Ö" "Ö") ("ouml" "\\\"{o}" nil "&ouml;" "oe" "ö" "ö") ("Oslash" "\\O" nil "&Oslash;" "O" "Ø" "Ø") ("oslash" "\\o{}" nil "&oslash;" "o" "ø" "ø") ("OElig" "\\OE{}" nil "&OElig;" "OE" "OE" "Œ") ("oelig" "\\oe{}" nil "&oelig;" "oe" "oe" "œ") ("Scaron" "\\v{S}" nil "&Scaron;" "S" "S" "Š") ("scaron" "\\v{s}" nil "&scaron;" "s" "s" "š") ("szlig" "\\ss{}" nil "&szlig;" "ss" "ß" "ß") ("Ugrave" "\\`{U}" nil "&Ugrave;" "U" "Ù" "Ù") ("ugrave" "\\`{u}" nil "&ugrave;" "u" "ù" "ù") ("Uacute" "\\'{U}" nil "&Uacute;" "U" "Ú" "Ú") ("uacute" "\\'{u}" nil "&uacute;" "u" "ú" "ú") ("Ucirc" "\\^{U}" nil "&Ucirc;" "U" "Û" "Û") ("ucirc" "\\^{u}" nil "&ucirc;" "u" "û" "û") ("Uuml" "\\\"{U}" nil "&Uuml;" "Ue" "Ü" "Ü") ("uuml" "\\\"{u}" nil "&uuml;" "ue" "ü" "ü") ("Yacute" "\\'{Y}" nil "&Yacute;" "Y" "Ý" "Ý") ("yacute" "\\'{y}" nil "&yacute;" "y" "ý" "ý") ("Yuml" "\\\"{Y}" nil "&Yuml;" "Y" "Y" "Ÿ") ("yuml" "\\\"{y}" nil "&yuml;" "y" "ÿ" "ÿ") "** Latin (special face)" ("fnof" "\\textit{f}" nil "&fnof;" "f" "f" "ƒ") ("real" "\\Re" t "&real;" "R" "R" "ℜ") ("image" "\\Im" t "&image;" "I" "I" "ℑ") ("weierp" "\\wp" t "&weierp;" "P" "P" "℘") ("ell" "\\ell" t "&ell;" "ell" "ell" "ℓ") ("imath" "\\imath" t "&imath;" "[dotless i]" "dotless i" "ı") ("jmath" "\\jmath" t "&jmath;" "[dotless j]" "dotless j" "ȷ") "** Greek" ("Alpha" "A" nil "&Alpha;" "Alpha" "Alpha" "Α") ("alpha" "\\alpha" t "&alpha;" "alpha" "alpha" "α") ("Beta" "B" nil "&Beta;" "Beta" "Beta" "Β") ("beta" "\\beta" t "&beta;" "beta" "beta" "β") ("Gamma" "\\Gamma" t "&Gamma;" "Gamma" "Gamma" "Γ") ("gamma" "\\gamma" t "&gamma;" "gamma" "gamma" "γ") ("Delta" "\\Delta" t "&Delta;" "Delta" "Delta" "Δ") ("delta" "\\delta" t "&delta;" "delta" "delta" "δ") ("Epsilon" "E" nil "&Epsilon;" "Epsilon" "Epsilon" "Ε") ("epsilon" "\\epsilon" t "&epsilon;" "epsilon" "epsilon" "ε") ("varepsilon" "\\varepsilon" t "&epsilon;" "varepsilon" "varepsilon" "ε") ("Zeta" "Z" nil "&Zeta;" "Zeta" "Zeta" "Ζ") ("zeta" "\\zeta" t "&zeta;" "zeta" "zeta" "ζ") ("Eta" "H" nil "&Eta;" "Eta" "Eta" "Η") ("eta" "\\eta" t "&eta;" "eta" "eta" "η") ("Theta" "\\Theta" t "&Theta;" "Theta" "Theta" "Θ") ("theta" "\\theta" t "&theta;" "theta" "theta" "θ") ("thetasym" "\\vartheta" t "&thetasym;" "theta" "theta" "ϑ") ("vartheta" "\\vartheta" t "&thetasym;" "theta" "theta" "ϑ") ("Iota" "I" nil "&Iota;" "Iota" "Iota" "Ι") ("iota" "\\iota" t "&iota;" "iota" "iota" "ι") ("Kappa" "K" nil "&Kappa;" "Kappa" "Kappa" "Κ") ("kappa" "\\kappa" t "&kappa;" "kappa" "kappa" "κ") ("Lambda" "\\Lambda" t "&Lambda;" "Lambda" "Lambda" "Λ") ("lambda" "\\lambda" t "&lambda;" "lambda" "lambda" "λ") ("Mu" "M" nil "&Mu;" "Mu" "Mu" "Μ") ("mu" "\\mu" t "&mu;" "mu" "mu" "μ") ("nu" "\\nu" t "&nu;" "nu" "nu" "ν") ("Nu" "N" nil "&Nu;" "Nu" "Nu" "Ν") ("Xi" "\\Xi" t "&Xi;" "Xi" "Xi" "Ξ") ("xi" "\\xi" t "&xi;" "xi" "xi" "ξ") ("Omicron" "O" nil "&Omicron;" "Omicron" "Omicron" "Ο") ("omicron" "\\textit{o}" nil "&omicron;" "omicron" "omicron" "ο") ("Pi" "\\Pi" t "&Pi;" "Pi" "Pi" "Π") ("pi" "\\pi" t "&pi;" "pi" "pi" "π") ("Rho" "P" nil "&Rho;" "Rho" "Rho" "Ρ") ("rho" "\\rho" t "&rho;" "rho" "rho" "ρ") ("Sigma" "\\Sigma" t "&Sigma;" "Sigma" "Sigma" "Σ") ("sigma" "\\sigma" t "&sigma;" "sigma" "sigma" "σ") ("sigmaf" "\\varsigma" t "&sigmaf;" "sigmaf" "sigmaf" "ς") ("varsigma" "\\varsigma" t "&sigmaf;" "varsigma" "varsigma" "ς") ("Tau" "T" nil "&Tau;" "Tau" "Tau" "Τ") ("Upsilon" "\\Upsilon" t "&Upsilon;" "Upsilon" "Upsilon" "Υ") ("upsih" "\\Upsilon" t "&upsih;" "upsilon" "upsilon" "ϒ") ("upsilon" "\\upsilon" t "&upsilon;" "upsilon" "upsilon" "υ") ("Phi" "\\Phi" t "&Phi;" "Phi" "Phi" "Φ") ("phi" "\\phi" t "&phi;" "phi" "phi" "ɸ") ("varphi" "\\varphi" t "&varphi;" "varphi" "varphi" "φ") ("Chi" "X" nil "&Chi;" "Chi" "Chi" "Χ") ("chi" "\\chi" t "&chi;" "chi" "chi" "χ") ("acutex" "\\acute x" t "&acute;x" "'x" "'x" "𝑥́") ("Psi" "\\Psi" t "&Psi;" "Psi" "Psi" "Ψ") ("psi" "\\psi" t "&psi;" "psi" "psi" "ψ") ("tau" "\\tau" t "&tau;" "tau" "tau" "τ") ("Omega" "\\Omega" t "&Omega;" "Omega" "Omega" "Ω") ("omega" "\\omega" t "&omega;" "omega" "omega" "ω") ("piv" "\\varpi" t "&piv;" "omega-pi" "omega-pi" "ϖ") ("varpi" "\\varpi" t "&piv;" "omega-pi" "omega-pi" "ϖ") ("partial" "\\partial" t "&part;" "[partial differential]" "[partial differential]" "∂") "** Hebrew" ("alefsym" "\\aleph" t "&alefsym;" "aleph" "aleph" "ℵ") ("aleph" "\\aleph" t "&aleph;" "aleph" "aleph" "ℵ") ("gimel" "\\gimel" t "&gimel;" "gimel" "gimel" "ℷ") ("beth" "\\beth" t "&beth;" "beth" "beth" "ב") ("dalet" "\\daleth" t "&daleth;" "dalet" "dalet" "ד") "** Dead languages" ("ETH" "\\DH{}" nil "&ETH;" "D" "Ð" "Ð") ("eth" "\\dh{}" nil "&eth;" "dh" "ð" "ð") ("THORN" "\\TH{}" nil "&THORN;" "TH" "Þ" "Þ") ("thorn" "\\th{}" nil "&thorn;" "th" "þ" "þ") "* Punctuation" "** Dots and Marks" ("dots" "\\dots{}" nil "&hellip;" "..." "..." "…") ("cdots" "\\cdots{}" t "&ctdot;" "..." "..." "⋯") ("hellip" "\\dots{}" nil "&hellip;" "..." "..." "…") ("middot" "\\textperiodcentered{}" nil "&middot;" "." "·" "·") ("iexcl" "!`" nil "&iexcl;" "!" "¡" "¡") ("iquest" "?`" nil "&iquest;" "?" "¿" "¿") "** Dash-like" ("shy" "\\-" nil "&shy;" "" "" "") ("ndash" "--" nil "&ndash;" "-" "-" "–") ("mdash" "---" nil "&mdash;" "--" "--" "—") "** Quotations" ("quot" "\\textquotedbl{}" nil "&quot;" "\"" "\"" "\"") ("acute" "\\textasciiacute{}" nil "&acute;" "'" "´" "´") ("ldquo" "\\textquotedblleft{}" nil "&ldquo;" "\"" "\"" "“") ("rdquo" "\\textquotedblright{}" nil "&rdquo;" "\"" "\"" "”") ("bdquo" "\\quotedblbase{}" nil "&bdquo;" "\"" "\"" "„") ("lsquo" "\\textquoteleft{}" nil "&lsquo;" "`" "`" "‘") ("rsquo" "\\textquoteright{}" nil "&rsquo;" "'" "'" "’") ("sbquo" "\\quotesinglbase{}" nil "&sbquo;" "," "," "‚") ("laquo" "\\guillemotleft{}" nil "&laquo;" "<<" "«" "«") ("raquo" "\\guillemotright{}" nil "&raquo;" ">>" "»" "»") ("lsaquo" "\\guilsinglleft{}" nil "&lsaquo;" "<" "<" "‹") ("rsaquo" "\\guilsinglright{}" nil "&rsaquo;" ">" ">" "›") "* Other" "** Misc. (often used)" ("circ" "\\^{}" nil "&circ;" "^" "^" "∘") ("vert" "\\vert{}" t "&vert;" "|" "|" "|") ("vbar" "|" nil "|" "|" "|" "|") ("brvbar" "\\textbrokenbar{}" nil "&brvbar;" "|" "¦" "¦") ("S" "\\S" nil "&sect;" "paragraph" "§" "§") ("sect" "\\S" nil "&sect;" "paragraph" "§" "§") ("amp" "\\&" nil "&amp;" "&" "&" "&") ("lt" "\\textless{}" nil "&lt;" "<" "<" "<") ("gt" "\\textgreater{}" nil "&gt;" ">" ">" ">") ("tilde" "\\textasciitilde{}" nil "~" "~" "~" "~") ("slash" "/" nil "/" "/" "/" "/") ("plus" "+" nil "+" "+" "+" "+") ("under" "\\_" nil "_" "_" "_" "_") ("equal" "=" nil "=" "=" "=" "=") ("asciicirc" "\\textasciicircum{}" nil "^" "^" "^" "^") ("dagger" "\\textdagger{}" nil "&dagger;" "[dagger]" "[dagger]" "†") ("dag" "\\dag{}" nil "&dagger;" "[dagger]" "[dagger]" "†") ("Dagger" "\\textdaggerdbl{}" nil "&Dagger;" "[doubledagger]" "[doubledagger]" "‡") ("ddag" "\\ddag{}" nil "&Dagger;" "[doubledagger]" "[doubledagger]" "‡") "** Whitespace" ("nbsp" "~" nil "&nbsp;" " " " " " ") ("ensp" "\\hspace*{.5em}" nil "&ensp;" " " " " " ") ("emsp" "\\hspace*{1em}" nil "&emsp;" " " " " " ") ("thinsp" "\\hspace*{.2em}" nil "&thinsp;" " " " " " ") "** Currency" ("curren" "\\textcurrency{}" nil "&curren;" "curr." "¤" "¤") ("cent" "\\textcent{}" nil "&cent;" "cent" "¢" "¢") ("pound" "\\pounds{}" nil "&pound;" "pound" "£" "£") ("yen" "\\textyen{}" nil "&yen;" "yen" "¥" "¥") ("euro" "\\texteuro{}" nil "&euro;" "EUR" "EUR" "€") ("EUR" "\\texteuro{}" nil "&euro;" "EUR" "EUR" "€") ("dollar" "\\$" nil "$" "$" "$" "$") ("USD" "\\$" nil "$" "$" "$" "$") "** Property Marks" ("copy" "\\textcopyright{}" nil "&copy;" "(c)" "©" "©") ("reg" "\\textregistered{}" nil "&reg;" "(r)" "®" "®") ("trade" "\\texttrademark{}" nil "&trade;" "TM" "TM" "™") "** Science et al." ("minus" "\\minus" t "&minus;" "-" "-" "−") ("pm" "\\textpm{}" nil "&plusmn;" "+-" "±" "±") ("plusmn" "\\textpm{}" nil "&plusmn;" "+-" "±" "±") ("times" "\\texttimes{}" nil "&times;" "*" "×" "×") ("frasl" "/" nil "&frasl;" "/" "/" "⁄") ("colon" "\\colon" t ":" ":" ":" ":") ("div" "\\textdiv{}" nil "&divide;" "/" "÷" "÷") ("frac12" "\\textonehalf{}" nil "&frac12;" "1/2" "½" "½") ("frac14" "\\textonequarter{}" nil "&frac14;" "1/4" "¼" "¼") ("frac34" "\\textthreequarters{}" nil "&frac34;" "3/4" "¾" "¾") ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰") ("sup1" "\\textonesuperior{}" nil "&sup1;" "^1" "¹" "¹") ("sup2" "\\texttwosuperior{}" nil "&sup2;" "^2" "²" "²") ("sup3" "\\textthreesuperior{}" nil "&sup3;" "^3" "³" "³") ("radic" "\\sqrt{\\,}" t "&radic;" "[square root]" "[square root]" "√") ("sum" "\\sum" t "&sum;" "[sum]" "[sum]" "∑") ("prod" "\\prod" t "&prod;" "[product]" "[n-ary product]" "∏") ("micro" "\\textmu{}" nil "&micro;" "micro" "µ" "µ") ("macr" "\\textasciimacron{}" nil "&macr;" "[macron]" "¯" "¯") ("deg" "\\textdegree{}" nil "&deg;" "degree" "°" "°") ("prime" "\\prime" t "&prime;" "'" "'" "′") ("Prime" "\\prime{}\\prime" t "&Prime;" "''" "''" "″") ("infin" "\\infty" t "&infin;" "[infinity]" "[infinity]" "∞") ("infty" "\\infty" t "&infin;" "[infinity]" "[infinity]" "∞") ("prop" "\\propto" t "&prop;" "[proportional to]" "[proportional to]" "∝") ("propto" "\\propto" t "&prop;" "[proportional to]" "[proportional to]" "∝") ("not" "\\textlnot{}" nil "&not;" "[angled dash]" "¬" "¬") ("neg" "\\neg{}" t "&not;" "[angled dash]" "¬" "¬") ("land" "\\land" t "&and;" "[logical and]" "[logical and]" "∧") ("wedge" "\\wedge" t "&and;" "[logical and]" "[logical and]" "∧") ("lor" "\\lor" t "&or;" "[logical or]" "[logical or]" "∨") ("vee" "\\vee" t "&or;" "[logical or]" "[logical or]" "∨") ("cap" "\\cap" t "&cap;" "[intersection]" "[intersection]" "∩") ("cup" "\\cup" t "&cup;" "[union]" "[union]" "∪") ("smile" "\\smile" t "&smile;" "[cup product]" "[cup product]" "⌣") ("frown" "\\frown" t "&frown;" "[Cap product]" "[cap product]" "⌢") ("int" "\\int" t "&int;" "[integral]" "[integral]" "∫") ("therefore" "\\therefore" t "&there4;" "[therefore]" "[therefore]" "∴") ("there4" "\\therefore" t "&there4;" "[therefore]" "[therefore]" "∴") ("because" "\\because" t "&because;" "[because]" "[because]" "∵") ("sim" "\\sim" t "&sim;" "~" "~" "∼") ("cong" "\\cong" t "&cong;" "[approx. equal to]" "[approx. equal to]" "≅") ("simeq" "\\simeq" t "&cong;" "[approx. equal to]" "[approx. equal to]" "≅") ("asymp" "\\asymp" t "&asymp;" "[almost equal to]" "[almost equal to]" "≈") ("approx" "\\approx" t "&asymp;" "[almost equal to]" "[almost equal to]" "≈") ("ne" "\\ne" t "&ne;" "[not equal to]" "[not equal to]" "≠") ("neq" "\\neq" t "&ne;" "[not equal to]" "[not equal to]" "≠") ("equiv" "\\equiv" t "&equiv;" "[identical to]" "[identical to]" "≡") ("triangleq" "\\triangleq" t "&triangleq;" "[defined to]" "[defined to]" "≜") ("le" "\\le" t "&le;" "<=" "<=" "≤") ("leq" "\\le" t "&le;" "<=" "<=" "≤") ("ge" "\\ge" t "&ge;" ">=" ">=" "≥") ("geq" "\\ge" t "&ge;" ">=" ">=" "≥") ("lessgtr" "\\lessgtr" t "&lessgtr;" "[less than or greater than]" "[less than or greater than]" "≶") ("lesseqgtr" "\\lesseqgtr" t "&lesseqgtr;" "[less than or equal or greater than or equal]" "[less than or equal or greater than or equal]" "⋚") ("ll" "\\ll" t "&Lt;" "<<" "<<" "≪") ("Ll" "\\lll" t "&Ll;" "<<<" "<<<" "⋘") ("lll" "\\lll" t "&Ll;" "<<<" "<<<" "⋘") ("gg" "\\gg" t "&Gt;" ">>" ">>" "≫") ("Gg" "\\ggg" t "&Gg;" ">>>" ">>>" "⋙") ("ggg" "\\ggg" t "&Gg;" ">>>" ">>>" "⋙") ("prec" "\\prec" t "&pr;" "[precedes]" "[precedes]" "≺") ("preceq" "\\preceq" t "&prcue;" "[precedes or equal]" "[precedes or equal]" "≼") ("preccurlyeq" "\\preccurlyeq" t "&prcue;" "[precedes or equal]" "[precedes or equal]" "≼") ("succ" "\\succ" t "&sc;" "[succeeds]" "[succeeds]" "≻") ("succeq" "\\succeq" t "&sccue;" "[succeeds or equal]" "[succeeds or equal]" "≽") ("succcurlyeq" "\\succcurlyeq" t "&sccue;" "[succeeds or equal]" "[succeeds or equal]" "≽") ("sub" "\\subset" t "&sub;" "[subset of]" "[subset of]" "⊂") ("subset" "\\subset" t "&sub;" "[subset of]" "[subset of]" "⊂") ("sup" "\\supset" t "&sup;" "[superset of]" "[superset of]" "⊃") ("supset" "\\supset" t "&sup;" "[superset of]" "[superset of]" "⊃") ("nsub" "\\not\\subset" t "&nsub;" "[not a subset of]" "[not a subset of" "⊄") ("sube" "\\subseteq" t "&sube;" "[subset of or equal to]" "[subset of or equal to]" "⊆") ("nsup" "\\not\\supset" t "&nsup;" "[not a superset of]" "[not a superset of]" "⊅") ("supe" "\\supseteq" t "&supe;" "[superset of or equal to]" "[superset of or equal to]" "⊇") ("setminus" "\\setminus" t "&setminus;" "\" " \" "⧵") ("forall" "\\forall" t "&forall;" "[for all]" "[for all]" "∀") ("exist" "\\exists" t "&exist;" "[there exists]" "[there exists]" "∃") ("exists" "\\exists" t "&exist;" "[there exists]" "[there exists]" "∃") ("nexist" "\\nexists" t "&exist;" "[there does not exists]" "[there does not  exists]" "∄") ("nexists" "\\nexists" t "&exist;" "[there does not exists]" "[there does not  exists]" "∄") ("empty" "\\empty" t "&empty;" "[empty set]" "[empty set]" "∅") ("emptyset" "\\emptyset" t "&empty;" "[empty set]" "[empty set]" "∅") ("isin" "\\in" t "&isin;" "[element of]" "[element of]" "∈") ("in" "\\in" t "&isin;" "[element of]" "[element of]" "∈") ("notin" "\\notin" t "&notin;" "[not an element of]" "[not an element of]" "∉") ("ni" "\\ni" t "&ni;" "[contains as member]" "[contains as member]" "∋") ("nabla" "\\nabla" t "&nabla;" "[nabla]" "[nabla]" "∇") ("ang" "\\angle" t "&ang;" "[angle]" "[angle]" "∠") ("angle" "\\angle" t "&ang;" "[angle]" "[angle]" "∠") ("perp" "\\perp" t "&perp;" "[up tack]" "[up tack]" "⊥") ("parallel" "\\parallel" t "&parallel;" "||" "||" "∥") ("sdot" "\\cdot" t "&sdot;" "[dot]" "[dot]" "⋅") ("cdot" "\\cdot" t "&sdot;" "[dot]" "[dot]" "⋅") ("lceil" "\\lceil" t "&lceil;" "[left ceiling]" "[left ceiling]" "⌈") ("rceil" "\\rceil" t "&rceil;" "[right ceiling]" "[right ceiling]" "⌉") ("lfloor" "\\lfloor" t "&lfloor;" "[left floor]" "[left floor]" "⌊") ("rfloor" "\\rfloor" t "&rfloor;" "[right floor]" "[right floor]" "⌋") ("lang" "\\langle" t "&lang;" "<" "<" "⟨") ("rang" "\\rangle" t "&rang;" ">" ">" "⟩") ("langle" "\\langle" t "&lang;" "<" "<" "⟨") ("rangle" "\\rangle" t "&rang;" ">" ">" "⟩") ("hbar" "\\hbar" t "&hbar;" "hbar" "hbar" "ℏ") ("mho" "\\mho" t "&mho;" "mho" "mho" "℧") "** Arrows" ("larr" "\\leftarrow" t "&larr;" "<-" "<-" "←") ("leftarrow" "\\leftarrow" t "&larr;" "<-" "<-" "←") ("gets" "\\gets" t "&larr;" "<-" "<-" "←") ("lArr" "\\Leftarrow" t "&lArr;" "<=" "<=" "⇐") ("Leftarrow" "\\Leftarrow" t "&lArr;" "<=" "<=" "⇐") ("uarr" "\\uparrow" t "&uarr;" "[uparrow]" "[uparrow]" "↑") ("uparrow" "\\uparrow" t "&uarr;" "[uparrow]" "[uparrow]" "↑") ("uArr" "\\Uparrow" t "&uArr;" "[dbluparrow]" "[dbluparrow]" "⇑") ("Uparrow" "\\Uparrow" t "&uArr;" "[dbluparrow]" "[dbluparrow]" "⇑") ("rarr" "\\rightarrow" t "&rarr;" "->" "->" "→") ("to" "\\to" t "&rarr;" "->" "->" "→") ("rightarrow" "\\rightarrow" t "&rarr;" "->" "->" "→") ("rArr" "\\Rightarrow" t "&rArr;" "=>" "=>" "⇒") ("Rightarrow" "\\Rightarrow" t "&rArr;" "=>" "=>" "⇒") ("darr" "\\downarrow" t "&darr;" "[downarrow]" "[downarrow]" "↓") ("downarrow" "\\downarrow" t "&darr;" "[downarrow]" "[downarrow]" "↓") ("dArr" "\\Downarrow" t "&dArr;" "[dbldownarrow]" "[dbldownarrow]" "⇓") ("Downarrow" "\\Downarrow" t "&dArr;" "[dbldownarrow]" "[dbldownarrow]" "⇓") ("harr" "\\leftrightarrow" t "&harr;" "<->" "<->" "↔") ("leftrightarrow" "\\leftrightarrow" t "&harr;" "<->" "<->" "↔") ("hArr" "\\Leftrightarrow" t "&hArr;" "<=>" "<=>" "⇔") ("Leftrightarrow" "\\Leftrightarrow" t "&hArr;" "<=>" "<=>" "⇔") ("crarr" "\\hookleftarrow" t "&crarr;" "<-'" "<-'" "↵") ("hookleftarrow" "\\hookleftarrow" t "&crarr;" "<-'" "<-'" "↵") "** Function names" ("arccos" "\\arccos" t "arccos" "arccos" "arccos" "arccos") ("arcsin" "\\arcsin" t "arcsin" "arcsin" "arcsin" "arcsin") ("arctan" "\\arctan" t "arctan" "arctan" "arctan" "arctan") ("arg" "\\arg" t "arg" "arg" "arg" "arg") ("cos" "\\cos" t "cos" "cos" "cos" "cos") ("cosh" "\\cosh" t "cosh" "cosh" "cosh" "cosh") ("cot" "\\cot" t "cot" "cot" "cot" "cot") ("coth" "\\coth" t "coth" "coth" "coth" "coth") ("csc" "\\csc" t "csc" "csc" "csc" "csc") ("deg" "\\deg" t "&deg;" "deg" "deg" "deg") ("det" "\\det" t "det" "det" "det" "det") ("dim" "\\dim" t "dim" "dim" "dim" "dim") ("exp" "\\exp" t "exp" "exp" "exp" "exp") ("gcd" "\\gcd" t "gcd" "gcd" "gcd" "gcd") ("hom" "\\hom" t "hom" "hom" "hom" "hom") ("inf" "\\inf" t "inf" "inf" "inf" "inf") ("ker" "\\ker" t "ker" "ker" "ker" "ker") ("lg" "\\lg" t "lg" "lg" "lg" "lg") ("lim" "\\lim" t "lim" "lim" "lim" "lim") ("liminf" "\\liminf" t "liminf" "liminf" "liminf" "liminf") ("limsup" "\\limsup" t "limsup" "limsup" "limsup" "limsup") ("ln" "\\ln" t "ln" "ln" "ln" "ln") ("log" "\\log" t "log" "log" "log" "log") ("max" "\\max" t "max" "max" "max" "max") ("min" "\\min" t "min" "min" "min" "min") ("Pr" "\\Pr" t "Pr" "Pr" "Pr" "Pr") ("sec" "\\sec" t "sec" "sec" "sec" "sec") ("sin" "\\sin" t "sin" "sin" "sin" "sin") ("sinh" "\\sinh" t "sinh" "sinh" "sinh" "sinh") ("sup" "\\sup" t "&sup;" "sup" "sup" "sup") ("tan" "\\tan" t "tan" "tan" "tan" "tan") ("tanh" "\\tanh" t "tanh" "tanh" "tanh" "tanh") "** Signs & Symbols" ("bull" "\\textbullet{}" nil "&bull;" "*" "*" "•") ("bullet" "\\textbullet{}" nil "&bull;" "*" "*" "•") ("star" "\\star" t "*" "*" "*" "⋆") ("lowast" "\\ast" t "&lowast;" "*" "*" "∗") ("ast" "\\ast" t "&lowast;" "*" "*" "*") ("odot" "\\odot" t "o" "[circled dot]" "[circled dot]" "ʘ") ("oplus" "\\oplus" t "&oplus;" "[circled plus]" "[circled plus]" "⊕") ("otimes" "\\otimes" t "&otimes;" "[circled times]" "[circled times]" "⊗") ("check" "\\checkmark" t "&checkmark;" "[checkmark]" "[checkmark]" "✓") ("checkmark" "\\checkmark" t "&check;" "[checkmark]" "[checkmark]" "✓") "** Miscellaneous (seldom used)" ("para" "\\P{}" nil "&para;" "[pilcrow]" "¶" "¶") ("ordf" "\\textordfeminine{}" nil "&ordf;" "_a_" "ª" "ª") ("ordm" "\\textordmasculine{}" nil "&ordm;" "_o_" "º" "º") ("cedil" "\\c{}" nil "&cedil;" "[cedilla]" "¸" "¸") ("oline" "\\overline{~}" t "&oline;" "[overline]" "¯" "‾") ("uml" "\\textasciidieresis{}" nil "&uml;" "[diaeresis]" "¨" "¨") ("zwnj" "\\/{}" nil "&zwnj;" "" "" "‌") ("zwj" "" nil "&zwj;" "" "" "‍") ("lrm" "" nil "&lrm;" "" "" "‎") ("rlm" "" nil "&rlm;" "" "" "‏") "** Smilies" ("smiley" "\\ddot\\smile" t "&#9786;" ":-)" ":-)" "☺") ("blacksmile" "\\ddot\\smile" t "&#9787;" ":-)" ":-)" "☻") ("sad" "\\ddot\\frown" t "&#9785;" ":-(" ":-(" "☹") ("frowny" "\\ddot\\frown" t "&#9785;" ":-(" ":-(" "☹") "** Suits" ("clubs" "\\clubsuit" t "&clubs;" "[clubs]" "[clubs]" "♣") ("clubsuit" "\\clubsuit" t "&clubs;" "[clubs]" "[clubs]" "♣") ("spades" "\\spadesuit" t "&spades;" "[spades]" "[spades]" "♠") ("spadesuit" "\\spadesuit" t "&spades;" "[spades]" "[spades]" "♠") ("hearts" "\\heartsuit" t "&hearts;" "[hearts]" "[hearts]" "♥") ("heartsuit" "\\heartsuit" t "&heartsuit;" "[hearts]" "[hearts]" "♥") ("diams" "\\diamondsuit" t "&diams;" "[diamonds]" "[diamonds]" "◆") ("diamondsuit" "\\diamondsuit" t "&diams;" "[diamonds]" "[diamonds]" "◆") ("diamond" "\\diamondsuit" t "&diamond;" "[diamond]" "[diamond]" "◆") ("Diamond" "\\diamondsuit" t "&diamond;" "[diamond]" "[diamond]" "◆") ("loz" "\\lozenge" t "&loz;" "[lozenge]" "[lozenge]" "⧫"))) (let (space-entities html-spaces (entity "_")) (dolist (n (number-sequence 1 20) (nreverse space-entities)) (let ((spaces (make-string n 32))) (push (list (setq entity (concat entity " ")) (format "\\hspace*{%sem}" (* n 0.5)) nil (setq html-spaces (concat "&ensp;" html-spaces)) spaces spaces (make-string n 8194)) space-entities))))))
                nil [3033 26939])
            ("org-entity-get" function (:arguments ("name")) nil [26941 27163])
            ("org-entities-create-table" function (:user-visible-flag t) nil [27238 27994])
            ("org-pretty-entities" variable nil nil [27996 28024])
            ("org-entities-help" function (:user-visible-flag t) nil [28055 29069])
            ("org-entities" package nil nil [29072 29095]))          
      :file "org-entities.el"
      :pointmax 29173
      :fsize 29789
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-faces" customgroup (:user-visible-flag t) nil [1101 1192])
            ("org-default" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [1194 1291])
            ("org-hide" variable
               (:default-value (quote ((((background light)) (:foreground "white")) (((background dark)) (:foreground "black"))))
                :type "face")
                nil [1293 1567])
            ("org-level-1" variable
               (:default-value (quote ((t :inherit outline-1)))
                :type "face")
                nil [1569 1673])
            ("org-level-2" variable
               (:default-value (quote ((t :inherit outline-2)))
                :type "face")
                nil [1675 1779])
            ("org-level-3" variable
               (:default-value (quote ((t :inherit outline-3)))
                :type "face")
                nil [1781 1885])
            ("org-level-4" variable
               (:default-value (quote ((t :inherit outline-4)))
                :type "face")
                nil [1887 1991])
            ("org-level-5" variable
               (:default-value (quote ((t :inherit outline-5)))
                :type "face")
                nil [1993 2097])
            ("org-level-6" variable
               (:default-value (quote ((t :inherit outline-6)))
                :type "face")
                nil [2099 2203])
            ("org-level-7" variable
               (:default-value (quote ((t :inherit outline-7)))
                :type "face")
                nil [2205 2309])
            ("org-level-8" variable
               (:default-value (quote ((t :inherit outline-8)))
                :type "face")
                nil [2311 2415])
            ("org-special-keyword" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [2417 2541])
            ("org-drawer" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [2543 3069])
            ("org-property-value" variable (:type "face") nil [3071 3166])
            ("org-column" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :weight normal :slant normal :strike-through nil :underline nil)) (t (:inverse-video t))))
                :type "face")
                nil [3168 4715])
            ("org-column-title" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :underline t :weight bold)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :underline t :weight bold)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :underline t :weight bold)) (t (:inverse-video t))))
                :type "face")
                nil [4717 5170])
            ("org-agenda-column-dateline" variable
               (:default-value (quote ((t :inherit org-column)))
                :type "face")
                nil [5172 5321])
            ("org-warning" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [5323 5445])
            ("org-archived" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [5447 5556])
            ("org-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [5558 5637])
            ("org-footnote" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [5639 5880])
            ("org-ellipsis" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "DarkGoldenrod" :underline t)) (((class color) (background dark)) (:foreground "LightGoldenrod" :underline t)) (t (:strike-through t))))
                :type "face")
                nil [5882 6163])
            ("org-target" variable
               (:default-value (quote ((((class color) (background light)) (:underline t)) (((class color) (background dark)) (:underline t)) (t (:underline t))))
                :type "face")
                nil [6165 6367])
            ("org-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [6369 6613])
            ("org-date-selected" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :inverse-video t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :inverse-video t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :inverse-video t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :inverse-video t)) (t (:inverse-video t))))
                :type "face")
                nil [6615 7221])
            ("org-sexp-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:underline t))))
                :type "face")
                nil [7223 7465])
            ("org-tag" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7467 7640])
            ("org-list-dt" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7642 7748])
            ("org-todo" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:inverse-video t :bold t))))
                :type "face")
                nil [7750 8236])
            ("org-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen" :bold t)) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t))))
                :type "face")
                nil [8238 8635])
            ("org-agenda-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold nil))))
                :type "face")
                nil [8637 9352])
            ("org-headline-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8) (background light)) (:bold nil))))
                :type "face")
                nil [9354 9854])
            ("org-faces-easy-properties" variable (:default-value (quote ((todo . :foreground) (tag . :foreground) (priority . :foreground)))) nil [9856 10402])
            ("org-todo-keyword-faces" variable nil nil [10404 11061])
            ("org-priority" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [11063 11180])
            ("org-priority-faces" variable nil nil [11182 11789])
            ("org-tags-special-faces-re" variable nil nil [11791 11829])
            ("org-set-tag-faces" function (:arguments ("var" "value")) nil [11830 12039])
            ("org-checkbox" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [12041 12129])
            ("org-checkbox-statistics-todo" variable
               (:default-value (quote ((t (:inherit org-todo))))
                :type "face")
                nil [12131 12266])
            ("org-checkbox-statistics-done" variable
               (:default-value (quote ((t (:inherit org-done))))
                :type "face")
                nil [12268 12401])
            ("org-tag-faces" variable nil nil [12403 13131])
            ("org-table" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8) (background light)) (:foreground "blue")) (((class color) (min-colors 8) (background dark)))))
                :type "face")
                nil [13133 13707])
            ("org-formula" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red")) (t (:bold t :italic t))))
                :type "face")
                nil [13709 14121])
            ("org-code" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [14123 14252])
            ("org-meta-line" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [14254 14400])
            ("org-document-title" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue" :weight bold)) (((class color) (background dark)) (:foreground "pale turquoise" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [14402 14717])
            ("org-document-info" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue")) (((class color) (background dark)) (:foreground "pale turquoise")) (t nil)))
                :type "face")
                nil [14719 15033])
            ("org-document-info-keyword" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15035 15178])
            ("org-block" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15180 15408])
            ("org-block-begin-line" variable
               (:default-value (quote ((t (:inherit org-meta-line))))
                :type "face")
                nil [15410 15558])
            ("org-block-end-line" variable
               (:default-value (quote ((t (:inherit org-block-begin-line))))
                :type "face")
                nil [15560 15711])
            ("org-verbatim" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15713 15846])
            ("org-quote" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15848 15966])
            ("org-verse" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15968 16086])
            ("org-fontify-quote-and-verse-blocks" variable nil nil [16088 16406])
            ("org-clock-overlay" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "LightGray" :foreground "black")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 16) (background light)) (:background "gray" :foreground "black")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [16408 17083])
            ("org-agenda-structure" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [17085 17639])
            ("org-agenda-date" variable
               (:default-value (quote ((t (:inherit org-agenda-structure))))
                :type "face")
                nil [17641 17766])
            ("org-agenda-date-today" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold :italic t))))
                :type "face")
                nil [17768 17913])
            ("org-agenda-clocking" variable
               (:default-value (quote ((t (:inherit secondary-selection))))
                :type "face")
                nil [17915 18057])
            ("org-agenda-date-weekend" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold))))
                :type "face")
                nil [18059 18299])
            ("org-scheduled" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18301 18645])
            ("org-scheduled-today" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18647 18997])
            ("org-agenda-dimmed-todo-face" variable
               (:default-value (quote ((((background light)) (:foreground "grey50")) (((background dark)) (:foreground "grey50"))))
                :type "face")
                nil [18999 19206])
            ("org-scheduled-previously" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19208 19667])
            ("org-upcoming-deadline" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19669 20125])
            ("org-agenda-deadline-faces" variable (:default-value (quote ((1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . default)))) nil [20127 21122])
            ("org-agenda-restriction-lock" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "#eeeeee")) (((class color) (min-colors 88) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 16) (background light)) (:background "#eeeeee")) (((class color) (min-colors 16) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [21124 21661])
            ("org-agenda-filter-tags" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21663 21805])
            ("org-agenda-filter-regexp" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21807 21954])
            ("org-agenda-filter-category" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21956 22106])
            ("org-agenda-filter-effort" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [22108 22252])
            ("org-time-grid" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8)) (:foreground "yellow" :weight light))))
                :type "face")
                nil [22254 22623])
            ("org-agenda-current-time" variable
               (:default-value (quote ((t (:inherit org-time-grid))))
                :type "face")
                nil [22625 22767])
            ("org-agenda-diary" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22769 22904])
            ("org-agenda-calendar-event" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22906 23046])
            ("org-agenda-calendar-sexp" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [23048 23185])
            ("org-level-faces" variable
               (:constant-flag t
                :default-value (quote (org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6 org-level-7 org-level-8)))
                nil [23187 23316])
            ("org-n-level-faces" variable (:default-value (length org-level-faces)) nil [23318 23611])
            ("org-cycle-level-faces" variable (:default-value t) nil [23613 23940])
            ("org-latex-and-related" variable
               (:default-value (let ((font (cond ((assq :inherit custom-face-attributes) (quote (:inherit underline))) (t (quote (:underline t)))))) (\` ((((class grayscale) (background light)) (:foreground "DimGray" (\,@ font))) (((class grayscale) (background dark)) (:foreground "LightGray" (\,@ font))) (((class color) (background light)) (:foreground "SaddleBrown")) (((class color) (background dark)) (:foreground "burlywood")) (t ((\,@ font))))))
                :type "face")
                nil [23942 24578])
            ("org-macro" variable
               (:default-value (quote ((t :inherit org-latex-and-related)))
                :type "face")
                nil [24580 24730])
            ("org-tag-group" variable
               (:default-value (quote ((t :inherit org-tag)))
                :type "face")
                nil [24732 24876])
            ("org-mode-line-clock" variable
               (:default-value (quote ((t (:inherit mode-line))))
                :type "face")
                nil [24878 25001])
            ("org-mode-line-clock-overrun" variable
               (:default-value (quote ((t (:inherit mode-line :background "red"))))
                :type "face")
                nil [25003 25172])
            ("org-faces" package nil nil [25174 25194]))          
      :file "org-faces.el"
      :pointmax 25223
      :fsize 25222
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3192 3209])
            ("org-macs" include nil nil [3210 3229])
            ("org-compat" include nil nil [3230 3251])
            ("org-M-RET-may-split-line" variable nil nil [3253 3286])
            ("org-auto-align-tags" variable nil nil [3287 3315])
            ("org-blank-before-new-entry" variable nil nil [3316 3351])
            ("org-clock-string" variable nil nil [3352 3377])
            ("org-closed-string" variable nil nil [3378 3404])
            ("org-deadline-string" variable nil nil [3405 3433])
            ("org-description-max-indent" variable nil nil [3434 3469])
            ("org-done-keywords" variable nil nil [3470 3496])
            ("org-drawer-regexp" variable nil nil [3497 3523])
            ("org-element-all-objects" variable nil nil [3524 3556])
            ("org-inhibit-startup" variable nil nil [3557 3585])
            ("org-odd-levels-only" variable nil nil [3586 3614])
            ("org-outline-regexp-bol" variable nil nil [3615 3646])
            ("org-scheduled-string" variable nil nil [3647 3676])
            ("org-todo-line-regexp" variable nil nil [3677 3706])
            ("org-ts-regexp" variable nil nil [3707 3729])
            ("org-ts-regexp-both" variable nil nil [3730 3757])
            ("declare-function" code nil nil [3759 3825])
            ("declare-function" code nil nil [3826 3895])
            ("declare-function" code nil nil [3896 3950])
            ("declare-function" code nil nil [3951 4009])
            ("declare-function" code nil nil [4010 4055])
            ("declare-function" code nil nil [4056 4112])
            ("declare-function" code nil nil [4113 4185])
            ("declare-function" code nil nil [4186 4252])
            ("declare-function" code nil nil [4253 4339])
            ("declare-function" code nil nil [4340 4413])
            ("declare-function" code nil nil [4414 4537])
            ("declare-function" code nil nil [4538 4603])
            ("declare-function" code nil nil [4604 4702])
            ("declare-function" code nil nil [4703 4775])
            ("declare-function" code nil nil [4776 4862])
            ("declare-function" code nil nil [4863 4929])
            ("declare-function" code nil nil [4930 4989])
            ("declare-function" code nil nil [4990 5051])
            ("declare-function" code nil nil [5052 5114])
            ("declare-function" code nil nil [5115 5202])
            ("declare-function" code nil nil [5203 5267])
            ("declare-function" code nil nil [5268 5340])
            ("declare-function" code nil nil [5341 5394])
            ("declare-function" code nil nil [5395 5488])
            ("declare-function" code nil nil [5489 5568])
            ("declare-function" code nil nil [5569 5659])
            ("declare-function" code nil nil [5660 5711])
            ("declare-function" code nil nil [5712 5773])
            ("declare-function" code nil nil [5774 5820])
            ("declare-function" code nil nil [5821 5868])
            ("declare-function" code nil nil [5869 5938])
            ("declare-function" code nil nil [5939 6007])
            ("declare-function" code nil nil [6008 6070])
            ("declare-function" code nil nil [6071 6134])
            ("declare-function" code nil nil [6135 6203])
            ("declare-function" code nil nil [6204 6251])
            ("declare-function" code nil nil [6252 6301])
            ("declare-function" code nil nil [6302 6347])
            ("declare-function" code nil nil [6348 6401])
            ("declare-function" code nil nil [6402 6448])
            ("declare-function" code nil nil [6449 6515])
            ("declare-function" code nil nil [6516 6560])
            ("declare-function" code nil nil [6561 6615])
            ("declare-function" code nil nil [6616 6671])
            ("declare-function" code nil nil [6672 6730])
            ("declare-function" code nil nil [6731 6792])
            ("declare-function" code nil nil [6793 6850])
            ("declare-function" code nil nil [6851 6895])
            ("declare-function" code nil nil [6896 6952])
            ("declare-function" code nil nil [6953 7016])
            ("declare-function" code nil nil [7017 7069])
            ("declare-function" code nil nil [7070 7126])
            ("org-plain-lists" customgroup (:user-visible-flag t) nil [7160 7287])
            ("org-cycle-include-plain-lists" variable (:default-value t) nil [7289 8303])
            ("org-list-demote-modify-bullet" variable nil nil [8305 9245])
            ("org-plain-list-ordered-item-terminator" variable (:default-value t) nil [9247 9907])
            ("org-list-allow-alphabetical" variable nil nil [9909 10569])
            ("org-list-two-spaces-after-bullet-regexp" variable nil nil [10571 11100])
            ("org-list-automatic-rules" variable (:default-value (quote ((checkbox . t) (indent . t)))) nil [11102 12177])
            ("org-list-use-circular-motion" variable nil nil [12179 12625])
            ("org-checkbox-statistics-hook" variable nil nil [12627 12917])
            ("org-checkbox-hierarchical-statistics" variable (:default-value t) nil [12919 13256])
            ("org-list-description-max-indent" variable (:default-value 20) nil [13258 13499])
            ("org-list-indent-offset" variable nil nil [13501 13755])
            ("org-list-radio-list-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGLST %n
% END RECEIVE ORGLST %n
\\begin{comment}
#+ORGLST: SEND %n org-list-to-latex
-
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGLST %n
@c END RECEIVE ORGLST %n
@ignore
#+ORGLST: SEND %n org-list-to-texinfo
-
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGLST %n -->
<!-- END RECEIVE ORGLST %n -->
<!--
#+ORGLST: SEND %n org-list-to-html
-
-->
")))) nil [13757 14479])
            ("org-list-forbidden-blocks" variable (:default-value (quote ("example" "verse" "src" "export"))) nil [14481 14629])
            ("org-list-export-context" variable (:default-value (quote (block inlinetask))) nil [14631 14893])
            ("org-list-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*
[ 	]*
")
                nil [14926 15016])
            ("org-list-full-item-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(\\(?:[-+*]\\|\\(?:[0-9]+\\|[A-Za-z]\\)[.)]\\)\\(?:[ 	]+\\|$\\)\\)" "\\(?:\\[@\\(?:start:\\)?\\([0-9]+\\|[A-Za-z]\\)\\][ 	]*\\)?" "\\(?:\\(\\[[ X-]\\]\\)\\(?:[ 	]+\\|$\\)\\)?" "\\(?:\\(.*\\)[ 	]+::\\(?:[ 	]+\\|$\\)\\)?"))
                nil [15018 15438])
            ("org-item-re" function nil nil [15440 15918])
            ("org-item-beginning-re" function nil nil [15920 16040])
            ("org-list-at-regexp-after-bullet-p" function (:arguments ("regexp")) nil [16042 16510])
            ("org-list-in-valid-context-p" function nil nil [16512 16652])
            ("org-in-item-p" function nil nil [16654 19153])
            ("org-at-item-p" function nil nil [19155 19344])
            ("org-at-item-bullet-p" function nil nil [19346 19529])
            ("org-at-item-timer-p" function nil nil [19531 19709])
            ("org-at-item-description-p" function nil nil [19711 19865])
            ("org-at-item-checkbox-p" function nil nil [19867 20031])
            ("org-at-item-counter-p" function nil nil [20033 20221])
            ("org-list-context" function nil nil [20263 22797])
            ("org-list-struct" function nil nil [22799 29562])
            ("org-list-struct-assoc-end" function (:arguments ("struct" "end-list")) nil [29564 30239])
            ("org-list-prevs-alist" function (:arguments ("struct")) nil [30241 30541])
            ("org-list-parents-alist" function (:arguments ("struct")) nil [30543 32146])
            ("org-list-get-nth" function (:arguments ("n" "key" "struct")) nil [32166 32279])
            ("org-list-set-nth" function (:arguments ("n" "key" "struct" "new")) nil [32281 32448])
            ("org-list-get-ind" function (:arguments ("item" "struct")) nil [32450 32568])
            ("org-list-set-ind" function (:arguments ("item" "struct" "ind")) nil [32570 32730])
            ("org-list-get-bullet" function (:arguments ("item" "struct")) nil [32732 32848])
            ("org-list-set-bullet" function (:arguments ("item" "struct" "bullet")) nil [32850 33017])
            ("org-list-get-counter" function (:arguments ("item" "struct")) nil [33019 33137])
            ("org-list-get-checkbox" function (:arguments ("item" "struct")) nil [33139 33266])
            ("org-list-set-checkbox" function (:arguments ("item" "struct" "checkbox")) nil [33268 33445])
            ("org-list-get-tag" function (:arguments ("item" "struct")) nil [33447 33566])
            ("org-list-get-item-end" function (:arguments ("item" "struct")) nil [33568 33689])
            ("org-list-get-item-end-before-blank" function (:arguments ("item" "struct")) nil [33691 33973])
            ("org-list-get-parent" function (:arguments ("item" "struct" "parents")) nil [33975 34258])
            ("org-list-has-child-p" function (:arguments ("item" "struct")) nil [34260 34638])
            ("org-list-get-next-item" function (:arguments ("item" "_struct" "prevs")) nil [34640 34881])
            ("org-list-get-prev-item" function (:arguments ("item" "_struct" "prevs")) nil [34883 35127])
            ("org-list-get-subtree" function (:arguments ("item" "struct")) nil [35129 35559])
            ("org-list-get-all-items" function (:arguments ("item" "struct" "prevs")) nil [35561 36119])
            ("org-list-get-children" function (:arguments ("item" "_struct" "parents")) nil [36121 36496])
            ("org-list-get-top-point" function (:arguments ("struct")) nil [36498 36622])
            ("org-list-get-bottom-point" function (:arguments ("struct")) nil [36624 36818])
            ("org-list-get-list-begin" function (:arguments ("item" "struct" "prevs")) nil [36820 37200])
            ("defalias" code nil nil [37202 37262])
            ("org-list-get-last-item" function (:arguments ("item" "struct" "prevs")) nil [37264 37639])
            ("org-list-get-list-end" function (:arguments ("item" "struct" "prevs")) nil [37641 37924])
            ("org-list-get-list-type" function (:arguments ("item" "struct" "prevs")) nil [37926 38491])
            ("org-list-get-item-number" function (:arguments ("item" "struct" "prevs" "parents")) nil [38493 39871])
            ("org-list-search-generic" function (:arguments ("search" "re" "bound" "noerr")) nil [39891 40475])
            ("org-list-search-backward" function (:arguments ("regexp" "bound" "noerror")) nil [40477 40794])
            ("org-list-search-forward" function (:arguments ("regexp" "bound" "noerror")) nil [40796 41109])
            ("org-list-bullet-string" function (:arguments ("bullet")) nil [41141 41642])
            ("org-list-swap-items" function (:arguments ("beg-A" "beg-B" "struct")) nil [41644 45028])
            ("org-list-separating-blank-lines-number" function (:arguments ("pos" "struct" "prevs")) nil [45030 47037])
            ("org-list-insert-item" function (:arguments ("pos" "struct" "prevs" "checkbox" "after-bullet")) nil [47039 52173])
            ("org-list-delete-item" function (:arguments ("item" "struct")) nil [52175 53289])
            ("org-list-send-item" function (:arguments ("item" "dest" "struct")) nil [53291 57536])
            ("org-list-struct-outdent" function (:arguments ("start" "end" "struct" "parents")) nil [57538 58616])
            ("org-list-struct-indent" function (:arguments ("start" "end" "struct" "parents" "prevs")) nil [58618 60757])
            ("org-list-use-alpha-bul-p" function (:arguments ("first" "struct" "prevs")) nil [60788 61740])
            ("org-list-inc-bullet-maybe" function (:arguments ("bullet")) nil [61742 62296])
            ("org-list-struct-fix-bul" function (:arguments ("struct" "prevs")) nil [62298 64936])
            ("org-list-struct-fix-ind" function (:arguments ("struct" "parents" "bullet-size")) nil [64938 65982])
            ("org-list-struct-fix-box" function (:arguments ("struct" "parents" "prevs" "ordered")) nil [65984 68484])
            ("org-list-struct-fix-item-end" function (:arguments ("struct")) nil [68486 69468])
            ("org-list-struct-apply-struct" function (:arguments ("struct" "old-struct")) nil [69470 74968])
            ("org-list-write-struct" function (:arguments ("struct" "parents" "old-struct")) nil [74970 76327])
            ("org-apply-on-list" function (:arguments ("function" "init-value" "args")) nil [76348 77252])
            ("org-list-set-item-visibility" function (:arguments ("item" "struct" "view")) nil [77254 78174])
            ("org-list-item-body-column" function (:arguments ("item")) nil [78176 79003])
            ("defalias" code nil nil [79035 79085])
            ("org-beginning-of-item" function (:user-visible-flag t) nil [79087 79307])
            ("org-beginning-of-item-list" function (:user-visible-flag t) nil [79309 79707])
            ("org-end-of-item-list" function (:user-visible-flag t) nil [79709 80088])
            ("org-end-of-item" function (:user-visible-flag t) nil [80090 80402])
            ("org-previous-item" function (:user-visible-flag t) nil [80404 81024])
            ("org-next-item" function (:user-visible-flag t) nil [81026 81637])
            ("org-move-item-down" function (:user-visible-flag t) nil [81639 82547])
            ("org-move-item-up" function (:user-visible-flag t) nil [82549 83356])
            ("org-insert-item" function
               (:user-visible-flag t
                :arguments ("checkbox"))
                nil [83358 84824])
            ("org-list-repair" function (:user-visible-flag t) nil [84826 85115])
            ("org-cycle-list-bullet" function
               (:user-visible-flag t
                :arguments ("which"))
                nil [85117 87784])
            ("org-toggle-checkbox" function
               (:user-visible-flag t
                :arguments ("toggle-presence"))
                nil [87786 91663])
            ("org-reset-checkbox-state-subtree" function (:user-visible-flag t) nil [91665 92157])
            ("org-update-checkbox-count" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [92159 96826])
            ("org-get-checkbox-statistics-face" function nil nil [96828 97310])
            ("org-update-checkbox-count-maybe" function (:arguments ("all")) nil [97312 97626])
            ("org-last-indent-begin-marker" variable (:default-value (make-marker)) nil [97628 97679])
            ("org-last-indent-end-marker" variable (:default-value (make-marker)) nil [97680 97729])
            ("org-list-indent-item-generic" function (:arguments ("arg" "no-subtree" "struct")) nil [97730 101175])
            ("org-outdent-item" function (:user-visible-flag t) nil [101177 101786])
            ("org-indent-item" function (:user-visible-flag t) nil [101788 102394])
            ("org-outdent-item-tree" function (:user-visible-flag t) nil [102396 103013])
            ("org-indent-item-tree" function (:user-visible-flag t) nil [103015 103629])
            ("org-tab-ind-state" variable nil nil [103631 103657])
            ("org-adapt-indentation" variable nil nil [103658 103688])
            ("org-cycle-item-indentation" function nil nil [103689 105613])
            ("org-sort-list" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "interactive?"))
                nil [105615 110052])
            ("org-toggle-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [110054 115488])
            ("org-list-to-lisp" function (:arguments ("delete")) nil [115520 118307])
            ("org-list-make-subtree" function (:user-visible-flag t) nil [118309 118595])
            ("org-list-insert-radio-list" function (:user-visible-flag t) nil [118597 119108])
            ("org-list-send-list" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [119110 121158])
            ("org-list-to-generic" function (:arguments ("list" "params")) nil [121160 125666])
            ("org-list--depth" function (:arguments ("element")) nil [125668 125928])
            ("org-list--trailing-newlines" function (:arguments ("string")) nil [125930 126161])
            ("org-list--generic-eval" function (:arguments ("value" "args")) nil [126163 126484])
            ("org-list--to-generic-plain-list" function (:arguments ("params")) nil [126486 127803])
            ("org-list--to-generic-item" function (:arguments ("params")) nil [127805 130469])
            ("org-list-to-latex" function (:arguments ("list" "params")) nil [130471 130833])
            ("org-list-to-html" function (:arguments ("list" "params")) nil [130835 131193])
            ("org-list-to-texinfo" function (:arguments ("list" "params")) nil [131195 131565])
            ("org-list-to-org" function (:arguments ("list" "params")) nil [131567 132213])
            ("org-list-to-subtree" function (:arguments ("list" "params")) nil [132215 133284])
            ("org-list" package nil nil [133286 133305]))          
      :file "org-list.el"
      :pointmax 133333
      :fsize 133332
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1122 1141])
            ("org-compat" include nil nil [1142 1163])
            ("pcomplete" include nil nil [1164 1184])
            ("declare-function" code nil nil [1186 1264])
            ("declare-function" code nil nil [1265 1312])
            ("declare-function" code nil nil [1313 1353])
            ("declare-function" code nil nil [1354 1462])
            ("declare-function" code nil nil [1463 1530])
            ("declare-function" code nil nil [1531 1606])
            ("org-drawer-regexp" variable nil nil [1638 1664])
            ("org-property-re" variable nil nil [1665 1689])
            ("org-current-tag-alist" variable nil nil [1690 1720])
            ("org-thing-at-point" function nil nil [1722 3619])
            ("org-command-at-point" function nil nil [3621 4112])
            ("org-parse-arguments" function nil nil [4114 4660])
            ("org-pcomplete-initial" function nil nil [4662 4902])
            ("org-options-keywords" variable nil nil [4904 4933])
            ("org-element-affiliated-keywords" variable nil nil [4950 4990])
            ("declare-function" code nil nil [5013 5064])
            ("pcomplete/org-mode/file-option" function nil nil [5065 5985])
            ("pcomplete/org-mode/file-option/author" function nil nil [5987 6129])
            ("org-time-stamp-formats" variable nil nil [6131 6162])
            ("pcomplete/org-mode/file-option/date" function nil nil [6163 6336])
            ("pcomplete/org-mode/file-option/email" function nil nil [6338 6481])
            ("org-export-exclude-tags" variable nil nil [6483 6515])
            ("pcomplete/org-mode/file-option/exclude_tags" function nil nil [6516 6755])
            ("org-file-tags" variable nil nil [6757 6779])
            ("pcomplete/org-mode/file-option/filetags" function nil nil [6780 6964])
            ("org-export-default-language" variable nil nil [6966 7002])
            ("pcomplete/org-mode/file-option/language" function nil nil [7003 7215])
            ("org-default-priority" variable nil nil [7217 7246])
            ("org-highest-priority" variable nil nil [7247 7276])
            ("org-lowest-priority" variable nil nil [7277 7305])
            ("pcomplete/org-mode/file-option/priorities" function nil nil [7306 7535])
            ("org-export-select-tags" variable nil nil [7537 7568])
            ("pcomplete/org-mode/file-option/select_tags" function nil nil [7569 7804])
            ("org-startup-options" variable nil nil [7806 7834])
            ("pcomplete/org-mode/file-option/startup" function nil nil [7835 8323])
            ("pcomplete/org-mode/file-option/tags" function nil nil [8325 8499])
            ("pcomplete/org-mode/file-option/title" function nil nil [8501 8842])
            ("declare-function" code nil nil [8845 8904])
            ("pcomplete/org-mode/file-option/options" function nil nil [8905 9657])
            ("pcomplete/org-mode/file-option/infojs_opt" function nil nil [9659 9929])
            ("pcomplete/org-mode/file-option/bind" function nil nil [9931 10184])
            ("org-link-abbrev-alist-local" variable nil nil [10186 10222])
            ("org-link-abbrev-alist" variable nil nil [10223 10253])
            ("pcomplete/org-mode/link" function nil nil [10254 10499])
            ("org-entities" variable nil nil [10501 10522])
            ("pcomplete/org-mode/tex" function nil nil [10523 10764])
            ("org-todo-keywords-1" variable nil nil [10766 10794])
            ("pcomplete/org-mode/todo" function nil nil [10795 10951])
            ("org-todo-line-regexp" variable nil nil [10953 10982])
            ("pcomplete/org-mode/searchhead" function nil nil [10983 11492])
            ("pcomplete/org-mode/tag" function nil nil [11494 12022])
            ("pcomplete/org-mode/prop" function nil nil [12024 12422])
            ("pcomplete/org-mode/block-option/src" function nil nil [12424 13034])
            ("pcomplete/org-mode/block-option/clocktable" function nil nil [13036 13413])
            ("org-pcomplete-case-double" function (:arguments ("list")) nil [13415 13659])
            ("org-pcomplete" package nil nil [13677 13701]))          
      :file "org-pcomplete.el"
      :pointmax 13734
      :fsize 13733
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1247 1264])
            ("org-macs" include nil nil [1265 1284])
            ("org-compat" include nil nil [1285 1306])
            ("ob-keys" include nil nil [1307 1325])
            ("ob-comint" include nil nil [1326 1346])
            ("declare-function" code nil nil [1348 1397])
            ("declare-function" code nil nil [1398 1462])
            ("declare-function" code nil nil [1463 1519])
            ("declare-function" code nil nil [1520 1595])
            ("declare-function" code nil nil [1596 1668])
            ("declare-function" code nil nil [1669 1758])
            ("declare-function" code nil nil [1759 1831])
            ("declare-function" code nil nil [1832 1891])
            ("declare-function" code nil nil [1892 1985])
            ("declare-function" code nil nil [1986 2047])
            ("declare-function" code nil nil [2048 2119])
            ("declare-function" code nil nil [2120 2177])
            ("org-inhibit-startup" variable nil nil [2179 2207])
            ("org-edit-src-turn-on-auto-save" variable nil nil [2209 2695])
            ("org-edit-src-auto-save-idle-delay" variable nil nil [2697 3131])
            ("org-coderef-label-format" variable (:default-value "(ref:%s)") nil [3133 3818])
            ("org-edit-fixed-width-region-mode" variable (:default-value (quote artist-mode)) nil [3820 4157])
            ("org-src-preserve-indentation" variable nil nil [4159 4766])
            ("org-edit-src-content-indentation" variable (:default-value 2) nil [4768 5166])
            ("org-edit-src-persistent-message" variable (:default-value t) nil [5168 5462])
            ("org-src-ask-before-returning-to-edit-buffer" variable (:default-value t) nil [5464 5904])
            ("org-src-window-setup" variable (:default-value (quote reorganize-frame)) nil [5906 6719])
            ("org-src-mode-hook" variable nil nil [6721 7207])
            ("org-src-lang-modes" variable (:default-value (quote (("ocaml" . tuareg) ("elisp" . emacs-lisp) ("ditaa" . artist) ("asymptote" . asy) ("dot" . fundamental) ("sqlite" . sql) ("calc" . fundamental) ("C" . c) ("cpp" . c++) ("C++" . c++) ("screen" . shell-script) ("shell" . sh) ("bash" . sh)))) nil [7209 7993])
            ("org-src-block-faces" variable nil nil [7995 8710])
            ("org-src-tab-acts-natively" variable nil nil [8712 8917])
            ("org-src--allow-write-back" variable (:default-value t) nil [8960 8996])
            ("org-src--auto-save-timer" variable nil nil [8997 9034])
            ("org-src--babel-info" variable nil nil [9035 9067])
            ("org-src--beg-marker" variable nil nil [9068 9100])
            ("org-src--block-indentation" variable nil nil [9101 9140])
            ("org-src--end-marker" variable nil nil [9141 9173])
            ("org-src--from-org-mode" variable nil nil [9174 9209])
            ("org-src--overlay" variable nil nil [9210 9239])
            ("org-src--preserve-indentation" variable nil nil [9240 9282])
            ("org-src--remote" variable nil nil [9283 9311])
            ("org-src--saved-temp-window-config" variable nil nil [9312 9358])
            ("org-src--source-type" variable nil nil [9359 9439])
            ("org-src--tab-width" variable nil nil [9440 9596])
            ("org-src--construct-edit-buffer-name" function (:arguments ("org-buffer-name" "lang")) nil [9598 9778])
            ("org-src--edit-buffer" function (:arguments ("beg" "end")) nil [9780 10241])
            ("org-src--source-buffer" function nil nil [10243 10509])
            ("org-src--get-lang-mode" function (:arguments ("lang")) nil [10511 10799])
            ("org-src--coordinates" function (:arguments ("pos" "beg" "end")) nil [10801 11386])
            ("org-src--goto-coordinates" function (:arguments ("coord" "beg" "end")) nil [11388 11949])
            ("org-src--contents-area" function (:arguments ("datum")) nil [11951 13904])
            ("org-src--make-source-overlay" function (:arguments ("beg" "end" "edit-buffer")) nil [13906 14872])
            ("org-src--remove-overlay" function nil nil [14874 15026])
            ("org-src--on-datum-p" function (:arguments ("datum")) nil [15028 15477])
            ("org-src--contents-for-write-back" function nil nil [15479 16876])
            ("org-src--edit-element" function (:arguments ("datum" "name" "initialize" "write-back" "contents" "remote")) nil [16878 20997])
            ("org-src-font-lock-fontify-block" function (:arguments ("lang" "start" "end")) nil [21038 22668])
            ("org-escape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [22693 23070])
            ("org-escape-code-in-string" function (:arguments ("s")) nil [23072 23332])
            ("org-unescape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [23334 23721])
            ("org-unescape-code-in-string" function (:arguments ("s")) nil [23723 23989])
            ("org-src-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "'" (quote org-edit-src-exit)) (define-key map "" (quote org-edit-src-abort)) (define-key map "" (quote org-edit-src-save)) map)) nil [24018 24239])
            ("define-minor-mode" code nil nil [24241 25751])
            ("org-src-mode-configure-edit-buffer" function nil nil [25753 26224])
            ("add-hook" code nil nil [26226 26292])
            ("org-src-associate-babel-session" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [26326 26742])
            ("org-src-babel-configure-edit-buffer" function nil nil [26744 26877])
            ("add-hook" code nil nil [26879 26946])
            ("org-src-do-at-code-block" function (:arguments ("body")) nil [26966 27259])
            ("org-src-do-key-sequence-at-code-block" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [27261 28257])
            ("org-src-edit-buffer-p" function (:arguments ("buffer")) nil [28259 28603])
            ("org-src-switch-to-buffer" function (:arguments ("buffer" "context")) nil [28605 29453])
            ("org-src-coderef-format" function (:arguments ("element")) nil [29455 30024])
            ("org-src-coderef-regexp" function (:arguments ("fmt" "label")) nil [30026 30644])
            ("org-edit-footnote-reference" function (:user-visible-flag t) nil [30646 32978])
            ("org-edit-table.el" function (:user-visible-flag t) nil [32980 33811])
            ("org-edit-latex-environment" function (:user-visible-flag t) nil [33813 34584])
            ("org-edit-export-block" function (:user-visible-flag t) nil [34586 35671])
            ("org-edit-src-code" function
               (:user-visible-flag t
                :arguments ("code" "edit-buffer-name"))
                nil [35673 37637])
            ("org-edit-inline-src-code" function (:user-visible-flag t) nil [37639 38945])
            ("org-edit-fixed-width-region" function (:user-visible-flag t) nil [38947 39899])
            ("org-edit-src-abort" function (:user-visible-flag t) nil [39901 40066])
            ("org-edit-src-continue" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [40068 40421])
            ("org-edit-src-save" function (:user-visible-flag t) nil [40423 41339])
            ("org-edit-src-exit" function (:user-visible-flag t) nil [41341 43261])
            ("org-src" package nil nil [43264 43282]))          
      :file "org-src.el"
      :pointmax 43309
      :fsize 43308
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1154 1171])
            ("org-macs" include nil nil [1172 1191])
            ("org-compat" include nil nil [1192 1213])
            ("declare-function" code nil nil [1215 1259])
            ("declare-function" code nil nil [1260 1321])
            ("declare-function" code nil nil [1322 1375])
            ("declare-function" code nil nil [1376 1435])
            ("declare-function" code nil nil [1436 1492])
            ("declare-function" code nil nil [1493 1568])
            ("declare-function" code nil nil [1569 1641])
            ("declare-function" code nil nil [1642 1727])
            ("declare-function" code nil nil [1728 1800])
            ("declare-function" code nil nil [1801 1860])
            ("declare-function" code nil nil [1861 1941])
            ("declare-function" code nil nil [1942 2012])
            ("declare-function" code nil nil [2013 2060])
            ("declare-function" code nil nil [2061 2130])
            ("declare-function" code nil nil [2131 2183])
            ("declare-function" code nil nil [2184 2239])
            ("declare-function" code nil nil [2240 2292])
            ("declare-function" code nil nil [2293 2359])
            ("declare-function" code nil nil [2360 2417])
            ("declare-function" code nil nil [2418 2475])
            ("declare-function" code nil nil [2476 2525])
            ("electric-indent-mode" variable nil nil [2527 2556])
            ("org-blank-before-new-entry" variable nil nil [2557 2592])
            ("org-bracket-link-regexp" variable nil nil [2613 2645])
            ("org-complex-heading-regexp" variable nil nil [2666 2701])
            ("org-odd-levels-only" variable nil nil [2722 2750])
            ("org-outline-regexp" variable nil nil [2772 2799])
            ("org-outline-regexp-bol" variable nil nil [2821 2852])
            ("org-footnote-re" variable
               (:constant-flag t
                :default-value "\\[fn:\\(?:\\(?1:[-_[:word:]]+\\)?\\(:\\)\\|\\(?1:[-_[:word:]]+\\)\\]\\)")
                nil [2893 3214])
            ("org-footnote-definition-re" variable
               (:constant-flag t
                :default-value "^\\[fn:\\([-_[:word:]]+\\)\\]")
                nil [3216 3390])
            ("org-footnote-forbidden-blocks" variable
               (:constant-flag t
                :default-value (quote ("comment" "example" "export" "src")))
                nil [3392 3523])
            ("org-footnote" customgroup (:user-visible-flag t) nil [3547 3637])
            ("org-footnote-section" variable (:default-value "Footnotes") nil [3639 4686])
            ("org-footnote-define-inline" variable nil nil [4688 5030])
            ("org-footnote-auto-label" variable (:default-value t) nil [5032 5713])
            ("org-footnote-auto-adjust" variable nil nil [5715 6353])
            ("org-footnote-fill-after-inline-note-extraction" variable nil nil [6355 6699])
            ("org-footnote-in-valid-context-p" function nil nil [6720 7146])
            ("org-footnote-at-reference-p" function nil nil [7148 8591])
            ("org-footnote-at-definition-p" function nil nil [8593 9887])
            ("org-footnote--allow-reference-p" function nil nil [9916 12156])
            ("org-footnote--clear-footnote-section" function nil nil [12158 13096])
            ("org-footnote--set-label" function (:arguments ("label")) nil [13098 13413])
            ("org-footnote--collect-references" function (:arguments ("anonymous")) nil [13415 15932])
            ("org-footnote--collect-definitions" function (:arguments ("delete")) nil [15934 17218])
            ("org-footnote--goto-local-insertion-point" function nil nil [17220 17773])
            ("org-footnote-get-next-reference" function (:arguments ("label" "backward" "limit")) nil [17794 18580])
            ("org-footnote-next-reference-or-definition" function (:arguments ("limit")) nil [18582 19545])
            ("org-footnote-goto-definition" function
               (:user-visible-flag t
                :arguments ("label" "location"))
                nil [19547 20674])
            ("org-footnote-goto-previous-reference" function
               (:user-visible-flag t
                :arguments ("label"))
                nil [20676 21342])
            ("org-footnote-normalize-label" function (:arguments ("label")) nil [21360 21642])
            ("org-footnote-get-definition" function (:arguments ("label")) nil [21644 22558])
            ("org-footnote-all-labels" function nil nil [22560 23107])
            ("org-footnote-unique-label" function (:arguments ("current")) nil [23109 23522])
            ("org-footnote-new" function (:user-visible-flag t) nil [23559 25364])
            ("org-footnote-create-definition" function (:arguments ("label")) nil [25366 26211])
            ("org-footnote-delete-references" function (:arguments ("label")) nil [26213 26575])
            ("org-footnote-delete-definitions" function (:arguments ("label")) nil [26577 27319])
            ("org-footnote-delete" function (:arguments ("label")) nil [27321 28594])
            ("org-footnote-renumber-fn:N" function (:user-visible-flag t) nil [28638 29630])
            ("org-footnote-sort" function nil nil [29632 31407])
            ("org-footnote-normalize" function (:user-visible-flag t) nil [31409 34606])
            ("org-footnote-auto-adjust-maybe" function nil nil [34608 35110])
            ("org-footnote-action" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [35154 37294])
            ("org-footnote" package nil nil [37297 37320]))          
      :file "org-footnote.el"
      :pointmax 37427
      :fsize 37426
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1896 1913])
            ("org-macs" include nil nil [1914 1933])
            ("org-compat" include nil nil [1934 1955])
            ("declare-function" code nil nil [1957 2013])
            ("declare-function" code nil nil [2014 2086])
            ("declare-function" code nil nil [2087 2147])
            ("declare-function" code nil nil [2148 2220])
            ("declare-function" code nil nil [2221 2280])
            ("declare-function" code nil nil [2281 2356])
            ("declare-function" code nil nil [2357 2403])
            ("declare-function" code nil nil [2404 2482])
            ("declare-function" code nil nil [2483 2519])
            ("declare-function" code nil nil [2520 2577])
            ("declare-function" code nil nil [2578 2622])
            ("declare-function" code nil nil [2623 2684])
            ("declare-function" code nil nil [2685 2740])
            ("defvar-local" code nil nil [2757 3093])
            ("org-macro--collect-macros" function nil nil [3110 4879])
            ("org-macro-initialize-templates" function nil nil [4881 6805])
            ("org-macro-expand" function (:arguments ("macro" "templates")) nil [6807 7874])
            ("org-macro-replace-all" function (:arguments ("templates" "finalize" "keywords")) nil [7876 10169])
            ("org-macro-escape-arguments" function (:arguments ("args")) nil [10171 10961])
            ("org-macro-extract-arguments" function (:arguments ("s")) nil [10963 11520])
            ("org-macro--vc-modified-time" function (:arguments ("file")) nil [11580 12310])
            ("org-macro--counter-table" variable nil nil [12312 12399])
            ("org-macro--counter-initialize" function nil nil [12401 12550])
            ("org-macro--counter-increment" function (:arguments ("name" "action")) nil [12552 13560])
            ("org-macro" package nil nil [13563 13583]))          
      :file "org-macro.el"
      :pointmax 13611
      :fsize 13610
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ob.el"
      :fsize 1264
      :lastmodtime '(23525 29589 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4260 4277])
            ("org-element" include nil nil [4278 4300])
            ("org-macro" include nil nil [4301 4321])
            ("ox" include nil nil [4322 4335])
            ("ob" include nil nil [4336 4349])
            ("cl-defstruct" code nil nil [4367 4506])
            ("org-lint-missing-checker-name" function (:arguments ("_")) nil [4528 4656])
            ("org-lint--checkers" variable
               (:constant-flag t
                :default-value (list (make-org-lint-checker :name (quote duplicate-custom-id) :description "Report duplicates CUSTOM_ID properties" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-name) :description "Report duplicate NAME values" :categories (quote (babel link))) (make-org-lint-checker :name (quote duplicate-target) :description "Report duplicate targets" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-footnote-definition) :description "Report duplicate footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote orphaned-affiliated-keywords) :description "Report orphaned affiliated keywords" :trust (quote low)) (make-org-lint-checker :name (quote obsolete-affiliated-keywords) :description "Report obsolete affiliated keywords" :categories (quote (obsolete))) (make-org-lint-checker :name (quote deprecated-export-blocks) :description "Report deprecated export block syntax" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-header-syntax) :description "Report deprecated Babel header syntax" :categories (quote (obsolete babel)) :trust (quote low)) (make-org-lint-checker :name (quote missing-language-in-src-block) :description "Report missing language in src blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote missing-backend-in-export-block) :description "Report missing back-end in export blocks" :categories (quote (export))) (make-org-lint-checker :name (quote invalid-babel-call-block) :description "Report invalid Babel call blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote colon-in-name) :description "Report NAME values with a colon" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-argument) :description "Report wrong babel headers" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-value) :description "Report invalid value in babel headers" :categories (quote (babel)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-category-setup) :description "Report misuse of CATEGORY keyword" :categories (quote (obsolete))) (make-org-lint-checker :name (quote invalid-coderef-link) :description "Report \"coderef\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-custom-id-link) :description "Report \"custom-id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-fuzzy-link) :description "Report \"fuzzy\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-id-link) :description "Report \"id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote link-to-local-file) :description "Report links to non-existent local files" :categories (quote (link)) :trust (quote low)) (make-org-lint-checker :name (quote non-existent-setupfile-parameter) :description "Report SETUPFILE keywords with non-existent file parameter" :trust (quote low)) (make-org-lint-checker :name (quote wrong-include-link-parameter) :description "Report INCLUDE keywords with misleading link parameter" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote obsolete-include-markup) :description "Report obsolete markup in INCLUDE keyword" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote unknown-options-item) :description "Report unknown items in OPTIONS keyword" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote invalid-macro-argument-and-template) :description "Report spurious macro arguments or invalid macro templates" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote special-property-in-properties-drawer) :description "Report special properties in properties drawers" :categories (quote (properties))) (make-org-lint-checker :name (quote obsolete-properties-drawer) :description "Report obsolete syntax for properties drawers" :categories (quote (obsolete properties))) (make-org-lint-checker :name (quote invalid-effort-property) :description "Report invalid duration in EFFORT property" :categories (quote (properties))) (make-org-lint-checker :name (quote undefined-footnote-reference) :description "Report missing definition for footnote references" :categories (quote (footnote))) (make-org-lint-checker :name (quote unreferenced-footnote-definition) :description "Report missing reference for footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote extraneous-element-in-footnote-section) :description "Report non-footnote definitions in footnote section" :categories (quote (footnote))) (make-org-lint-checker :name (quote invalid-keyword-syntax) :description "Report probable invalid keywords" :trust (quote low)) (make-org-lint-checker :name (quote invalid-block) :description "Report invalid blocks" :trust (quote low)) (make-org-lint-checker :name (quote misplaced-planning-info) :description "Report misplaced planning info line" :trust (quote low)) (make-org-lint-checker :name (quote incomplete-drawer) :description "Report probable incomplete drawers" :trust (quote low)) (make-org-lint-checker :name (quote indented-diary-sexp) :description "Report probable indented diary-sexps" :trust (quote low)) (make-org-lint-checker :name (quote quote-section) :description "Report obsolete QUOTE section" :categories (quote (obsolete)) :trust (quote low)) (make-org-lint-checker :name (quote file-application) :description "Report obsolete \"file+application\" link" :categories (quote (link obsolete))) (make-org-lint-checker :name (quote empty-headline-with-tags) :description "Report ambiguous empty headlines with tags" :categories (quote (headline)) :trust (quote low))))
                nil [4658 10638])
            ("org-lint--collect-duplicates" function (:arguments ("ast" "type" "extract-key" "extract-position" "build-message")) nil [10640 11733])
            ("org-lint-duplicate-custom-id" function (:arguments ("ast")) nil [11735 12163])
            ("org-lint-duplicate-name" function (:arguments ("ast")) nil [12165 12574])
            ("org-lint-duplicate-target" function (:arguments ("ast")) nil [12576 12888])
            ("org-lint-duplicate-footnote-definition" function (:arguments ("ast")) nil [12890 13221])
            ("org-lint-orphaned-affiliated-keywords" function (:arguments ("ast")) nil [13223 13848])
            ("org-lint-obsolete-affiliated-keywords" function (:arguments ("_")) nil [13850 14497])
            ("org-lint-deprecated-export-blocks" function (:arguments ("ast")) nil [14499 14977])
            ("org-lint-deprecated-header-syntax" function (:arguments ("ast")) nil [14979 15948])
            ("org-lint-missing-language-in-src-block" function (:arguments ("ast")) nil [15950 16196])
            ("org-lint-missing-backend-in-export-block" function (:arguments ("ast")) nil [16198 16445])
            ("org-lint-invalid-babel-call-block" function (:arguments ("ast")) nil [16447 16921])
            ("org-lint-deprecated-category-setup" function (:arguments ("ast")) nil [16923 17289])
            ("org-lint-invalid-coderef-link" function (:arguments ("ast")) nil [17291 17701])
            ("org-lint-invalid-custom-id-link" function (:arguments ("ast")) nil [17703 18099])
            ("org-lint-invalid-fuzzy-link" function (:arguments ("ast")) nil [18101 18591])
            ("org-lint-invalid-id-link" function (:arguments ("ast")) nil [18593 18902])
            ("org-lint-special-property-in-properties-drawer" function (:arguments ("ast")) nil [18904 19255])
            ("org-lint-obsolete-properties-drawer" function (:arguments ("ast")) nil [19257 19858])
            ("org-lint-invalid-effort-property" function (:arguments ("ast")) nil [19860 20247])
            ("org-lint-link-to-local-file" function (:arguments ("ast")) nil [20249 20766])
            ("org-lint-non-existent-setupfile-parameter" function (:arguments ("ast")) nil [20768 21203])
            ("org-lint-wrong-include-link-parameter" function (:arguments ("ast")) nil [21205 22666])
            ("org-lint-obsolete-include-markup" function (:arguments ("ast")) nil [22668 23348])
            ("org-lint-unknown-options-item" function (:arguments ("ast")) nil [23350 24165])
            ("org-lint-invalid-macro-argument-and-template" function (:arguments ("ast")) nil [24167 26520])
            ("org-lint-undefined-footnote-reference" function (:arguments ("ast")) nil [26522 27020])
            ("org-lint-unreferenced-footnote-definition" function (:arguments ("ast")) nil [27022 27496])
            ("org-lint-colon-in-name" function (:arguments ("ast")) nil [27498 27977])
            ("org-lint-misplaced-planning-info" function (:arguments ("_")) nil [27979 28374])
            ("org-lint-incomplete-drawer" function (:arguments ("_")) nil [28376 28947])
            ("org-lint-indented-diary-sexp" function (:arguments ("_")) nil [28949 29312])
            ("org-lint-invalid-block" function (:arguments ("_")) nil [29314 30151])
            ("org-lint-invalid-keyword-syntax" function (:arguments ("_")) nil [30153 30804])
            ("org-lint-extraneous-element-in-footnote-section" function (:arguments ("ast")) nil [30806 31449])
            ("org-lint-quote-section" function (:arguments ("ast")) nil [31451 31796])
            ("org-lint-file-application" function (:arguments ("ast")) nil [31798 32051])
            ("org-lint-wrong-header-argument" function (:arguments ("ast")) nil [32053 34684])
            ("org-lint-wrong-header-value" function (:arguments ("ast")) nil [34686 37014])
            ("org-lint-empty-headline-with-tags" function (:arguments ("ast")) nil [37016 37363])
            ("org-lint--report-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map (kbd "RET") (quote org-lint--jump-to-source)) (define-key map (kbd "TAB") (quote org-lint--show-source)) (define-key map (kbd "C-j") (quote org-lint--show-source)) (define-key map (kbd "h") (quote org-lint--hide-checker)) (define-key map (kbd "i") (quote org-lint--ignore-checker)) map)) nil [37383 37851])
            ("define-derived-mode" code nil nil [37853 38256])
            ("org-lint--generate-reports" function (:arguments ("buffer" "checkers")) nil [38258 39540])
            ("defvar-local" code nil nil [39542 39639])
            ("defvar-local" code nil nil [39641 39735])
            ("org-lint--refresh-reports" function nil nil [39737 39917])
            ("org-lint--current-line" function nil nil [39919 40054])
            ("org-lint--current-checker" function (:arguments ("entry")) nil [40056 40285])
            ("org-lint--display-reports" function (:arguments ("source" "checkers")) nil [40287 40799])
            ("org-lint--jump-to-source" function (:user-visible-flag t) nil [40801 41085])
            ("org-lint--show-source" function (:user-visible-flag t) nil [41087 41302])
            ("org-lint--hide-checker" function (:user-visible-flag t) nil [41304 41624])
            ("org-lint--ignore-checker" function (:user-visible-flag t) nil [41626 41929])
            ("org-lint" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41969 43553])
            ("org-lint" package nil nil [43556 43575]))          
      :file "org-lint.el"
      :pointmax 43602
      :fsize 43601
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2464 2478])
            ("avl-tree" include nil nil [2479 2498])
            ("cl-lib" include nil nil [2499 2516])
            ("org-element-paragraph-separate" variable nil nil [2827 3105])
            ("org-element--object-regexp" variable nil nil [3107 3431])
            ("org-element--set-regexps" function nil nil [3433 6059])
            ("org-element--set-regexps" code nil nil [6061 6087])
            ("org-element-update-syntax" function (:user-visible-flag t) nil [6104 6247])
            ("org-element-all-elements" variable
               (:constant-flag t
                :default-value (quote (babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block example-block export-block fixed-width footnote-definition headline horizontal-rule inlinetask item keyword latex-environment node-property paragraph plain-list planning property-drawer quote-block section special-block src-block table table-row verse-block)))
                nil [6249 6707])
            ("org-element-greater-elements" variable
               (:constant-flag t
                :default-value (quote (center-block drawer dynamic-block footnote-definition headline inlinetask item plain-list property-drawer quote-block section special-block table)))
                nil [6709 6963])
            ("org-element-all-objects" variable
               (:constant-flag t
                :default-value (quote (bold code entity export-snippet footnote-reference inline-babel-call inline-src-block italic line-break latex-fragment link macro radio-target statistics-cookie strike-through subscript superscript table-cell target timestamp underline verbatim)))
                nil [6965 7290])
            ("org-element-recursive-objects" variable
               (:constant-flag t
                :default-value (quote (bold footnote-reference italic link subscript radio-target strike-through superscript table-cell underline)))
                nil [7292 7482])
            ("org-element-object-containers" variable
               (:constant-flag t
                :default-value (append org-element-recursive-objects (quote (paragraph table-row verse-block))))
                nil [7484 7671])
            ("org-element-affiliated-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "DATA" "HEADER" "HEADERS" "LABEL" "NAME" "PLOT" "RESNAME" "RESULT" "RESULTS" "SOURCE" "SRCNAME" "TBLNAME")))
                nil [7673 8008])
            ("org-element-keyword-translation-alist" variable
               (:constant-flag t
                :default-value (quote (("DATA" . "NAME") ("LABEL" . "NAME") ("RESNAME" . "NAME") ("SOURCE" . "NAME") ("SRCNAME" . "NAME") ("TBLNAME" . "NAME") ("RESULT" . "RESULTS") ("HEADERS" . "HEADER"))))
                nil [8010 8410])
            ("org-element-multiple-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "HEADER")))
                nil [8412 8890])
            ("org-element-parsed-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION")))
                nil [8892 9190])
            ("org-element--parsed-properties-alist" variable
               (:constant-flag t
                :default-value (mapcar (lambda (k) (cons k (intern (concat ":" (downcase k))))) org-element-parsed-keywords))
                nil [9192 9459])
            ("org-element-dual-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "RESULTS")))
                nil [9461 9900])
            ("org-element--affiliated-re" variable
               (:constant-flag t
                :default-value (format "[ 	]*#\\+\\(?:%s\\):[ 	]*" (concat (format "\\(?1:%s\\)\\(?:\\[\\(.*\\)\\]\\)?" (regexp-opt org-element-dual-keywords)) "\\|" (format "\\(?1:%s\\)" (regexp-opt (cl-remove-if (lambda (k) (member k org-element-dual-keywords)) org-element-affiliated-keywords))) "\\|" "\\(?1:ATTR_[-_A-Za-z0-9]+\\)")))
                nil [9902 10645])
            ("org-element-object-restrictions" variable
               (:constant-flag t
                :default-value (let* ((standard-set (remq (quote table-cell) org-element-all-objects)) (standard-set-no-line-break (remq (quote line-break) standard-set))) (\` ((bold (\,@ standard-set)) (footnote-reference (\,@ standard-set)) (headline (\,@ standard-set-no-line-break)) (inlinetask (\,@ standard-set-no-line-break)) (italic (\,@ standard-set)) (item (\,@ standard-set-no-line-break)) (keyword (\,@ (remq (quote footnote-reference) standard-set))) (link bold code entity export-snippet inline-babel-call inline-src-block italic latex-fragment macro statistics-cookie strike-through subscript superscript underline verbatim) (paragraph (\,@ standard-set)) (radio-target bold code entity italic latex-fragment strike-through subscript superscript underline superscript) (strike-through (\,@ standard-set)) (subscript (\,@ standard-set)) (superscript (\,@ standard-set)) (table-cell bold code entity export-snippet footnote-reference italic latex-fragment link macro radio-target strike-through subscript superscript target timestamp underline verbatim) (table-row table-cell) (underline (\,@ standard-set)) (verse-block (\,@ standard-set))))))
                nil [10647 12722])
            ("org-element-secondary-value-alist" variable
               (:constant-flag t
                :default-value (quote ((headline :title) (inlinetask :title) (item :tag))))
                nil [12724 12898])
            ("org-element--pair-round-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 40 "()" table) (modify-syntax-entry 41 ")(" table) (dolist (char (quote (123 125 91 93 60 62)) table) (modify-syntax-entry char " " table))))
                nil [12900 13249])
            ("org-element--pair-square-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 93 ")[" table) (dolist (char (quote (123 125 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [13251 13602])
            ("org-element--pair-curly-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 125 "){" table) (dolist (char (quote (91 93 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [13604 13953])
            ("org-element--parse-paired-brackets" function (:arguments ("char")) nil [13955 14626])
            ("org-element-type" function (:arguments ("element")) nil [15505 15918])
            ("org-element-property" function (:arguments ("property" "element")) nil [15920 16130])
            ("org-element-contents" function (:arguments ("element")) nil [16132 16307])
            ("org-element-restriction" function (:arguments ("element")) nil [16309 16599])
            ("org-element-put-property" function (:arguments ("element" "property" "value")) nil [16601 16874])
            ("org-element-set-contents" function (:arguments ("element" "contents")) nil [16876 17156])
            ("org-element-secondary-p" function (:arguments ("object")) nil [17158 17592])
            ("org-element-class" function (:arguments ("datum" "parent")) nil [17594 18664])
            ("org-element-adopt-elements" function (:arguments ("parent" "children")) nil [18666 19435])
            ("org-element-extract-element" function (:arguments ("element")) nil [19437 20065])
            ("org-element-insert-before" function (:arguments ("element" "location")) nil [20067 21491])
            ("org-element-set-element" function (:arguments ("old" "new")) nil [21493 22579])
            ("org-element-create" function (:arguments ("type" "props" "children")) nil [22581 22887])
            ("org-element-copy" function (:arguments ("datum")) nil [22889 23327])
            ("org-element-center-block-parser" function (:arguments ("limit" "affiliated")) nil [24781 26334])
            ("org-element-center-block-interpreter" function (:arguments ("_" "contents")) nil [26336 26539])
            ("org-element-drawer-parser" function (:arguments ("limit" "affiliated")) nil [26555 28199])
            ("org-element-drawer-interpreter" function (:arguments ("drawer" "contents")) nil [28201 28427])
            ("org-element-dynamic-block-parser" function (:arguments ("limit" "affiliated")) nil [28450 30171])
            ("org-element-dynamic-block-interpreter" function (:arguments ("dynamic-block" "contents")) nil [30173 30538])
            ("org-element--footnote-separator" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" org-footnote-definition-re "\\|" "^\\([ 	]*
\\)\\{2,\\}"))
                nil [30567 30766])
            ("org-element-footnote-definition-parser" function (:arguments ("limit" "affiliated")) nil [30768 32787])
            ("org-element-footnote-definition-interpreter" function (:arguments ("footnote-definition" "contents")) nil [32789 33080])
            ("org-element--get-node-properties" function nil nil [33098 33820])
            ("org-element--get-time-properties" function nil nil [33822 34544])
            ("org-element-headline-parser" function (:arguments ("limit" "raw-secondary-p")) nil [34546 38015])
            ("org-element-headline-interpreter" function (:arguments ("headline" "contents")) nil [38017 39456])
            ("org-element-inlinetask-parser" function (:arguments ("limit" "raw-secondary-p")) nil [39476 42679])
            ("org-element-inlinetask-interpreter" function (:arguments ("inlinetask" "contents")) nil [42681 43931])
            ("org-element-item-parser" function (:arguments ("_" "struct" "raw-secondary-p")) nil [43945 46437])
            ("org-element-item-interpreter" function (:arguments ("item" "contents")) nil [46439 47615])
            ("org-element--list-struct" function (:arguments ("limit")) nil [47635 50436])
            ("org-element-plain-list-parser" function (:arguments ("limit" "affiliated" "structure")) nil [50438 52024])
            ("org-element-plain-list-interpreter" function (:arguments ("_" "contents")) nil [52026 52283])
            ("org-element-property-drawer-parser" function (:arguments ("limit")) nil [52308 53317])
            ("org-element-property-drawer-interpreter" function (:arguments ("_" "contents")) nil [53319 53522])
            ("org-element-quote-block-parser" function (:arguments ("limit" "affiliated")) nil [53543 55048])
            ("org-element-quote-block-interpreter" function (:arguments ("_" "contents")) nil [55050 55247])
            ("org-element-section-parser" function (:arguments ("_")) nil [55264 56021])
            ("org-element-section-interpreter" function (:arguments ("_" "contents")) nil [56023 56172])
            ("org-element-special-block-parser" function (:arguments ("limit" "affiliated")) nil [56195 57862])
            ("org-element-special-block-interpreter" function (:arguments ("special-block" "contents")) nil [57864 58161])
            ("org-element-babel-call-parser" function (:arguments ("limit" "affiliated")) nil [58610 60265])
            ("org-element-babel-call-interpreter" function (:arguments ("babel-call" "_")) nil [60267 60686])
            ("org-element-clock-parser" function (:arguments ("limit")) nil [60701 61799])
            ("org-element-clock-interpreter" function (:arguments ("clock" "_")) nil [61801 62177])
            ("org-element-comment-parser" function (:arguments ("limit" "affiliated")) nil [62194 63588])
            ("org-element-comment-interpreter" function (:arguments ("comment" "_")) nil [63590 63779])
            ("org-element-comment-block-parser" function (:arguments ("limit" "affiliated")) nil [63802 65172])
            ("org-element-comment-block-interpreter" function (:arguments ("comment-block" "_")) nil [65174 65446])
            ("org-element-diary-sexp-parser" function (:arguments ("limit" "affiliated")) nil [65466 66433])
            ("org-element-diary-sexp-interpreter" function (:arguments ("diary-sexp" "_")) nil [66435 66575])
            ("org-element-example-block-parser" function (:arguments ("limit" "affiliated")) nil [66598 69381])
            ("org-element-example-block-interpreter" function (:arguments ("example-block" "_")) nil [69383 69933])
            ("org-element-export-block-parser" function (:arguments ("limit" "affiliated")) nil [69955 71595])
            ("org-element-export-block-interpreter" function (:arguments ("export-block" "_")) nil [71597 71846])
            ("org-element-fixed-width-parser" function (:arguments ("limit" "affiliated")) nil [71867 73088])
            ("org-element-fixed-width-interpreter" function (:arguments ("fixed-width" "_")) nil [73090 73381])
            ("org-element-horizontal-rule-parser" function (:arguments ("limit" "affiliated")) nil [73406 74261])
            ("org-element-horizontal-rule-interpreter" function (:arguments ("_")) nil [74263 74383])
            ("org-element-keyword-parser" function (:arguments ("limit" "affiliated")) nil [74400 75665])
            ("org-element-keyword-interpreter" function (:arguments ("keyword" "_")) nil [75667 75865])
            ("org-element--latex-begin-environment" variable
               (:constant-flag t
                :default-value "^[ 	]*\\\\begin{\\([A-Za-z0-9*]+\\)}")
                nil [75892 76135])
            ("org-element--latex-end-environment" variable
               (:constant-flag t
                :default-value "\\\\end{%s}[ 	]*$")
                nil [76137 76316])
            ("org-element-latex-environment-parser" function (:arguments ("limit" "affiliated")) nil [76318 77674])
            ("org-element-latex-environment-interpreter" function (:arguments ("latex-environment" "_")) nil [77676 77852])
            ("org-element-node-property-parser" function (:arguments ("limit")) nil [77875 78571])
            ("org-element-node-property-interpreter" function (:arguments ("node-property" "_")) nil [78573 78834])
            ("org-element-paragraph-parser" function (:arguments ("limit" "affiliated")) nil [78853 81266])
            ("org-element-paragraph-interpreter" function (:arguments ("_" "contents")) nil [81268 81421])
            ("org-element-planning-parser" function (:arguments ("limit")) nil [81439 82616])
            ("org-element-planning-interpreter" function (:arguments ("planning" "_")) nil [82618 83305])
            ("org-element-src-block-parser" function (:arguments ("limit" "affiliated")) nil [83324 86585])
            ("org-element-src-block-interpreter" function (:arguments ("src-block" "_")) nil [86587 87531])
            ("org-element-table-parser" function (:arguments ("limit" "affiliated")) nil [87546 89305])
            ("org-element-table-interpreter" function (:arguments ("table" "contents")) nil [89307 89810])
            ("org-element-table-row-parser" function (:arguments ("_")) nil [89829 90705])
            ("org-element-table-row-interpreter" function (:arguments ("table-row" "contents")) nil [90707 90947])
            ("org-element-verse-block-parser" function (:arguments ("limit" "affiliated")) nil [90968 92326])
            ("org-element-verse-block-interpreter" function (:arguments ("_" "contents")) nil [92328 92518])
            ("org-element-bold-parser" function nil nil [93102 93883])
            ("org-element-bold-interpreter" function (:arguments ("_" "contents")) nil [93885 94042])
            ("org-element-code-parser" function nil nil [94056 94730])
            ("org-element-code-interpreter" function (:arguments ("code" "_")) nil [94732 94871])
            ("org-element-entity-parser" function nil nil [94887 96075])
            ("org-element-entity-interpreter" function (:arguments ("entity" "_")) nil [96077 96285])
            ("org-element-export-snippet-parser" function nil nil [96309 97251])
            ("org-element-export-snippet-interpreter" function (:arguments ("export-snippet" "_")) nil [97253 97491])
            ("org-element-footnote-reference-parser" function nil nil [97519 98540])
            ("org-element-footnote-reference-interpreter" function (:arguments ("footnote-reference" "contents")) nil [98542 98851])
            ("org-element-inline-babel-call-parser" function nil nil [98878 100385])
            ("org-element-inline-babel-call-interpreter" function (:arguments ("inline-babel-call" "_")) nil [100387 100845])
            ("org-element-inline-src-block-parser" function nil nil [100871 101973])
            ("org-element-inline-src-block-interpreter" function (:arguments ("inline-src-block" "_")) nil [101975 102389])
            ("org-element-italic-parser" function nil nil [102404 103197])
            ("org-element-italic-interpreter" function (:arguments ("_" "contents")) nil [103199 103360])
            ("org-element-latex-fragment-parser" function nil nil [103384 104822])
            ("org-element-latex-fragment-interpreter" function (:arguments ("latex-fragment" "_")) nil [104824 104987])
            ("org-element-line-break-parser" function nil nil [105006 105473])
            ("org-element-line-break-interpreter" function (:arguments ("_")) nil [105475 105585])
            ("org-element-link-parser" function nil nil [105599 110501])
            ("org-element-link-interpreter" function (:arguments ("link" "contents")) nil [110503 111927])
            ("org-element-macro-parser" function nil nil [111942 112809])
            ("org-element-macro-interpreter" function (:arguments ("macro" "_")) nil [112811 112938])
            ("org-element-radio-target-parser" function nil nil [112960 113793])
            ("org-element-radio-target-interpreter" function (:arguments ("_" "contents")) nil [113795 113967])
            ("org-element-statistics-cookie-parser" function nil nil [113994 114740])
            ("org-element-statistics-cookie-interpreter" function (:arguments ("statistics-cookie" "_")) nil [114742 114917])
            ("org-element-strike-through-parser" function nil nil [114941 115776])
            ("org-element-strike-through-interpreter" function (:arguments ("_" "contents")) nil [115778 115955])
            ("org-element-subscript-parser" function nil nil [115974 116912])
            ("org-element-subscript-interpreter" function (:arguments ("subscript" "contents")) nil [116914 117156])
            ("org-element-superscript-parser" function nil nil [117177 118120])
            ("org-element-superscript-interpreter" function (:arguments ("superscript" "contents")) nil [118122 118372])
            ("org-element-table-cell-parser" function nil nil [118392 118932])
            ("org-element-table-cell-interpreter" function (:arguments ("_" "contents")) nil [118934 119113])
            ("org-element-target-parser" function nil nil [119129 119739])
            ("org-element-target-interpreter" function (:arguments ("target" "_")) nil [119741 119890])
            ("org-element--timestamp-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\|" "\\(?:<[0-9]+-[0-9]+-[0-9]+[^>
]+?\\+[0-9]+[dwmy]>\\)" "\\|" "\\(?:<%%\\(?:([^>
]+)\\)>\\)"))
                nil [119909 120138])
            ("org-element-timestamp-parser" function nil nil [120140 123888])
            ("org-element-timestamp-interpreter" function (:arguments ("timestamp" "_")) nil [123890 127587])
            ("org-element-underline-parser" function nil nil [127606 128418])
            ("org-element-underline-interpreter" function (:arguments ("_" "contents")) nil [128420 128587])
            ("org-element-verbatim-parser" function nil nil [128605 129304])
            ("org-element-verbatim-interpreter" function (:arguments ("verbatim" "_")) nil [129306 129461])
            ("org-element--current-element" function (:arguments ("limit" "granularity" "mode" "structure")) nil [129968 135502])
            ("org-element--collect-affiliated-keywords" function (:arguments ("limit")) nil [135775 138452])
            ("org-element-parse-buffer" function (:arguments ("granularity" "visible-only")) nil [139002 141220])
            ("org-element-parse-secondary-string" function (:arguments ("string" "restriction" "parent")) nil [141222 142070])
            ("org-element-map" function (:arguments ("data" "types" "fun" "info" "first-match" "no-recursion" "with-affiliated")) nil [142072 148396])
            ("put" code nil nil [148397 148443])
            ("org-element--next-mode" function (:arguments ("type" "parentp")) nil [148797 149480])
            ("org-element--parse-elements" function (:arguments ("beg" "end" "mode" "structure" "granularity" "visible-only" "acc")) nil [149482 152358])
            ("org-element--object-lex" function (:arguments ("restriction")) nil [152360 156514])
            ("org-element--parse-objects" function (:arguments ("beg" "end" "acc" "restriction" "parent")) nil [156516 158573])
            ("org-element-interpret-data" function (:arguments ("data")) nil [158964 161416])
            ("org-element--interpret-affiliated-keywords" function (:arguments ("element")) nil [161418 162993])
            ("org-element-normalize-string" function (:arguments ("s")) nil [163498 163895])
            ("org-element-normalize-contents" function (:arguments ("element" "ignore-first")) nil [163897 167372])
            ("org-element-use-cache" variable nil nil [169569 169820])
            ("org-element-cache-sync-idle-time" variable (:default-value 0.6) nil [169822 169926])
            ("org-element-cache-sync-duration" variable (:default-value (seconds-to-time 0.04)) nil [169928 170189])
            ("org-element-cache-sync-break" variable (:default-value (seconds-to-time 0.3)) nil [170191 170380])
            ("org-element--cache" variable nil nil [170404 170617])
            ("org-element--cache-sync-requests" variable nil nil [170619 171852])
            ("org-element--cache-sync-timer" variable nil nil [171854 171938])
            ("org-element--cache-sync-keys" variable nil nil [171940 172090])
            ("org-element--cache-key" function (:arguments ("element")) nil [172092 173374])
            ("org-element--cache-generate-key" function (:arguments ("lower" "upper")) nil [173376 175628])
            ("org-element--cache-key-less-p" function (:arguments ("a" "b")) nil [175630 176363])
            ("org-element--cache-compare" function (:arguments ("a" "b")) nil [176365 176554])
            ("org-element--cache-root" function nil nil [176556 176754])
            ("org-element--cache-active-p" function nil nil [176769 176952])
            ("org-element--cache-find" function (:arguments ("pos" "side")) nil [176954 178881])
            ("org-element--cache-put" function (:arguments ("element")) nil [178883 179670])
            ("org-element--cache-remove" function (:arguments ("element")) nil [179672 179856])
            ("org-element--cache-set-timer" function (:arguments ("buffer")) nil [179881 180313])
            ("org-element--cache-interrupt-p" function (:arguments ("time-limit")) nil [180315 180561])
            ("org-element--cache-shift-positions" function (:arguments ("element" "offset" "props")) nil [180563 181705])
            ("org-element--cache-sync" function (:arguments ("buffer" "threshold" "future-change")) nil [181707 183427])
            ("org-element--cache-process-request" function (:arguments ("request" "next" "threshold" "time-limit" "future-change")) nil [183429 190735])
            ("org-element--parse-to" function (:arguments ("pos" "syncp" "time-limit")) nil [190737 196311])
            ("org-element--cache-sensitive-re" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" "\\\\end{[A-Za-z0-9*]+}[ 	]*$" "\\|" "^[ 	]*\\(?:" "#\\+\\(?:BEGIN[:_]\\|END\\(?:_\\|:?[ 	]*$\\)\\)" "\\|" "\\\\begin{[A-Za-z0-9*]+}" "\\|" ":\\(?:\\w\\|[-_]\\)+:[ 	]*$" "\\)"))
                nil [196343 196902])
            ("org-element--cache-change-warning" variable nil nil [196904 197052])
            ("org-element--cache-before-change" function (:arguments ("beg" "end")) nil [197054 197763])
            ("org-element--cache-after-change" function (:arguments ("beg" "end" "pre")) nil [197765 199347])
            ("org-element--cache-for-removal" function (:arguments ("beg" "end" "offset")) nil [199349 201259])
            ("org-element--cache-submit-request" function (:arguments ("beg" "end" "offset")) nil [201261 204299])
            ("org-element-cache-reset" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [204340 205173])
            ("org-element-cache-refresh" function (:arguments ("pos")) nil [205190 205456])
            ("org-element-at-point" function nil nil [206177 207629])
            ("org-element-context" function (:arguments ("element")) nil [207646 212865])
            ("org-element-lineage" function (:arguments ("blob" "types" "with-self")) nil [212867 213754])
            ("org-element-nested-p" function (:arguments ("elem-A" "elem-B")) nil [213756 214135])
            ("org-element-swap-A-B" function (:arguments ("elem-A" "elem-B")) nil [214137 216923])
            ("org-element" package nil nil [216926 216948]))          
      :file "org-element.el"
      :pointmax 217054
      :fsize 217053
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2934 2951])
            ("ob-exp" include nil nil [2952 2969])
            ("org-element" include nil nil [2970 2992])
            ("org-macro" include nil nil [2993 3013])
            ("tabulated-list" include nil nil [3014 3039])
            ("declare-function" code nil nil [3041 3112])
            ("declare-function" code nil nil [3113 3186])
            ("declare-function" code nil nil [3187 3262])
            ("declare-function" code nil nil [3263 3334])
            ("declare-function" code nil nil [3335 3415])
            ("declare-function" code nil nil [3416 3499])
            ("org-publish-project-alist" variable nil nil [3501 3535])
            ("org-table-number-fraction" variable nil nil [3536 3570])
            ("org-table-number-regexp" variable nil nil [3571 3603])
            ("org-export-max-depth" variable
               (:constant-flag t
                :default-value 19)
                nil [3826 3918])
            ("org-export-options-alist" variable
               (:constant-flag t
                :default-value (quote ((:title "TITLE" nil nil parse) (:date "DATE" nil nil parse) (:author "AUTHOR" nil user-full-name parse) (:email "EMAIL" nil user-mail-address t) (:language "LANGUAGE" nil org-export-default-language t) (:select-tags "SELECT_TAGS" nil org-export-select-tags split) (:exclude-tags "EXCLUDE_TAGS" nil org-export-exclude-tags split) (:creator "CREATOR" nil org-export-creator-string) (:headline-levels nil "H" org-export-headline-levels) (:preserve-breaks nil "\\n" org-export-preserve-breaks) (:section-numbers nil "num" org-export-with-section-numbers) (:time-stamp-file nil "timestamp" org-export-time-stamp-file) (:with-archived-trees nil "arch" org-export-with-archived-trees) (:with-author nil "author" org-export-with-author) (:with-broken-links nil "broken-links" org-export-with-broken-links) (:with-clocks nil "c" org-export-with-clocks) (:with-creator nil "creator" org-export-with-creator) (:with-date nil "date" org-export-with-date) (:with-drawers nil "d" org-export-with-drawers) (:with-email nil "email" org-export-with-email) (:with-emphasize nil "*" org-export-with-emphasize) (:with-entities nil "e" org-export-with-entities) (:with-fixed-width nil ":" org-export-with-fixed-width) (:with-footnotes nil "f" org-export-with-footnotes) (:with-inlinetasks nil "inline" org-export-with-inlinetasks) (:with-latex nil "tex" org-export-with-latex) (:with-planning nil "p" org-export-with-planning) (:with-priority nil "pri" org-export-with-priority) (:with-properties nil "prop" org-export-with-properties) (:with-smart-quotes nil "'" org-export-with-smart-quotes) (:with-special-strings nil "-" org-export-with-special-strings) (:with-statistics-cookies nil "stat" org-export-with-statistics-cookies) (:with-sub-superscript nil "^" org-export-with-sub-superscripts) (:with-toc nil "toc" org-export-with-toc) (:with-tables nil "|" org-export-with-tables) (:with-tags nil "tags" org-export-with-tags) (:with-tasks nil "tasks" org-export-with-tasks) (:with-timestamps nil "<" org-export-with-timestamps) (:with-title nil "title" org-export-with-title) (:with-todo-keywords nil "todo" org-export-with-todo-keywords))))
                nil [3920 7640])
            ("org-export-special-keywords" variable
               (:constant-flag t
                :default-value (quote ("FILETAGS" "SETUPFILE" "OPTIONS")))
                nil [7642 7932])
            ("org-export-filters-alist" variable
               (:constant-flag t
                :default-value (quote ((:filter-body . org-export-filter-body-functions) (:filter-bold . org-export-filter-bold-functions) (:filter-babel-call . org-export-filter-babel-call-functions) (:filter-center-block . org-export-filter-center-block-functions) (:filter-clock . org-export-filter-clock-functions) (:filter-code . org-export-filter-code-functions) (:filter-diary-sexp . org-export-filter-diary-sexp-functions) (:filter-drawer . org-export-filter-drawer-functions) (:filter-dynamic-block . org-export-filter-dynamic-block-functions) (:filter-entity . org-export-filter-entity-functions) (:filter-example-block . org-export-filter-example-block-functions) (:filter-export-block . org-export-filter-export-block-functions) (:filter-export-snippet . org-export-filter-export-snippet-functions) (:filter-final-output . org-export-filter-final-output-functions) (:filter-fixed-width . org-export-filter-fixed-width-functions) (:filter-footnote-definition . org-export-filter-footnote-definition-functions) (:filter-footnote-reference . org-export-filter-footnote-reference-functions) (:filter-headline . org-export-filter-headline-functions) (:filter-horizontal-rule . org-export-filter-horizontal-rule-functions) (:filter-inline-babel-call . org-export-filter-inline-babel-call-functions) (:filter-inline-src-block . org-export-filter-inline-src-block-functions) (:filter-inlinetask . org-export-filter-inlinetask-functions) (:filter-italic . org-export-filter-italic-functions) (:filter-item . org-export-filter-item-functions) (:filter-keyword . org-export-filter-keyword-functions) (:filter-latex-environment . org-export-filter-latex-environment-functions) (:filter-latex-fragment . org-export-filter-latex-fragment-functions) (:filter-line-break . org-export-filter-line-break-functions) (:filter-link . org-export-filter-link-functions) (:filter-node-property . org-export-filter-node-property-functions) (:filter-options . org-export-filter-options-functions) (:filter-paragraph . org-export-filter-paragraph-functions) (:filter-parse-tree . org-export-filter-parse-tree-functions) (:filter-plain-list . org-export-filter-plain-list-functions) (:filter-plain-text . org-export-filter-plain-text-functions) (:filter-planning . org-export-filter-planning-functions) (:filter-property-drawer . org-export-filter-property-drawer-functions) (:filter-quote-block . org-export-filter-quote-block-functions) (:filter-radio-target . org-export-filter-radio-target-functions) (:filter-section . org-export-filter-section-functions) (:filter-special-block . org-export-filter-special-block-functions) (:filter-src-block . org-export-filter-src-block-functions) (:filter-statistics-cookie . org-export-filter-statistics-cookie-functions) (:filter-strike-through . org-export-filter-strike-through-functions) (:filter-subscript . org-export-filter-subscript-functions) (:filter-superscript . org-export-filter-superscript-functions) (:filter-table . org-export-filter-table-functions) (:filter-table-cell . org-export-filter-table-cell-functions) (:filter-table-row . org-export-filter-table-row-functions) (:filter-target . org-export-filter-target-functions) (:filter-timestamp . org-export-filter-timestamp-functions) (:filter-underline . org-export-filter-underline-functions) (:filter-verbatim . org-export-filter-verbatim-functions) (:filter-verse-block . org-export-filter-verse-block-functions))))
                nil [7934 12026])
            ("org-export-default-inline-image-rule" variable
               (:constant-flag t
                :default-value (\` (("file" \, (format "\\.%s\\'" (regexp-opt (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm")) t))))))
                nil [12028 12597])
            ("org-export-ignored-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-font-lock-keywords org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [12599 13105])
            ("org-export-async-debug" variable nil nil [13107 13472])
            ("org-export-stack-contents" variable nil nil [13474 13894])
            ("org-export-registered-backends" variable nil nil [13896 14102])
            ("org-export-dispatch-last-action" variable nil nil [14104 14299])
            ("org-export-dispatch-last-position" variable (:default-value (make-marker)) nil [14301 14588])
            ("org-export-current-backend" variable nil nil [14624 14994])
            ("org-export" customgroup (:user-visible-flag t) nil [15256 15357])
            ("org-export-general" customgroup (:user-visible-flag t) nil [15359 15480])
            ("org-export-with-archived-trees" variable (:default-value (quote headline)) nil [15482 16074])
            ("org-export-with-author" variable (:default-value t) nil [16076 16313])
            ("org-export-with-clocks" variable nil nil [16315 16527])
            ("org-export-with-creator" variable nil nil [16529 16896])
            ("org-export-with-date" variable (:default-value t) nil [16898 17126])
            ("org-export-date-timestamp-format" variable nil nil [17128 17602])
            ("org-export-creator-string" variable (:default-value (format "Emacs %s (Org mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [17604 17952])
            ("org-export-with-drawers" variable (:default-value (quote (not "LOGBOOK"))) nil [17954 18849])
            ("org-export-with-email" variable nil nil [18851 19087])
            ("org-export-with-emphasize" variable (:default-value t) nil [19089 19469])
            ("org-export-exclude-tags" variable (:default-value (quote ("noexport"))) nil [19471 19933])
            ("org-export-with-fixed-width" variable (:default-value t) nil [19935 20215])
            ("org-export-with-footnotes" variable (:default-value t) nil [20217 20443])
            ("org-export-with-latex" variable (:default-value t) nil [20445 21046])
            ("org-export-headline-levels" variable (:default-value 3) nil [21048 21394])
            ("org-export-default-language" variable (:default-value "en") nil [21396 21786])
            ("org-export-preserve-breaks" variable nil nil [21788 22024])
            ("org-export-with-entities" variable (:default-value t) nil [22026 22433])
            ("org-export-with-inlinetasks" variable (:default-value t) nil [22435 22718])
            ("org-export-with-planning" variable nil nil [22720 23112])
            ("org-export-with-priority" variable nil nil [23114 23343])
            ("org-export-with-properties" variable nil nil [23345 23931])
            ("org-export-with-section-numbers" variable (:default-value t) nil [23933 24295])
            ("org-export-select-tags" variable (:default-value (quote ("export"))) nil [24297 24818])
            ("org-export-with-smart-quotes" variable nil nil [24820 25310])
            ("org-export-with-special-strings" variable (:default-value t) nil [25312 25825])
            ("org-export-with-statistics-cookies" variable (:default-value t) nil [25827 26120])
            ("org-export-with-sub-superscripts" variable (:default-value t) nil [26122 27673])
            ("org-export-with-toc" variable (:default-value t) nil [27675 28442])
            ("org-export-with-tables" variable (:default-value t) nil [28444 28700])
            ("org-export-with-tags" variable (:default-value t) nil [28702 29204])
            ("org-export-with-tasks" variable (:default-value t) nil [29206 30039])
            ("org-export-with-title" variable (:default-value t) nil [30041 30321])
            ("org-export-time-stamp-file" variable (:default-value t) nil [30323 30617])
            ("org-export-with-timestamps" variable (:default-value t) nil [30619 31383])
            ("org-export-with-todo-keywords" variable (:default-value t) nil [31385 31653])
            ("org-export-allow-bind-keywords" variable nil nil [31655 31996])
            ("org-export-with-broken-links" variable nil nil [31998 32663])
            ("org-export-snippet-translation-alist" variable nil nil [32665 33345])
            ("org-export-global-macros" variable nil nil [33347 34072])
            ("org-export-coding-system" variable nil nil [34074 34259])
            ("org-export-copy-to-kill-ring" variable nil nil [34261 34637])
            ("org-export-initial-scope" variable (:default-value (quote buffer)) nil [34639 34949])
            ("org-export-show-temporary-export-buffer" variable (:default-value t) nil [34951 35373])
            ("org-export-in-background" variable nil nil [35375 35713])
            ("org-export-async-init-file" variable nil nil [35715 36369])
            ("org-export-dispatch-use-expert-ui" variable nil nil [36371 37023])
            ("cl-defstruct" code nil nil [38298 38448])
            ("org-export-get-backend" function (:arguments ("name")) nil [38465 38717])
            ("org-export-register-backend" function (:arguments ("backend")) nil [38719 39634])
            ("org-export-barf-if-invalid-backend" function (:arguments ("backend")) nil [39636 39839])
            ("org-export-derived-backend-p" function (:arguments ("backend" "backends")) nil [39841 40502])
            ("org-export-get-all-transcoders" function (:arguments ("backend")) nil [40504 41299])
            ("org-export-get-all-options" function (:arguments ("backend")) nil [41301 42041])
            ("org-export-get-all-filters" function (:arguments ("backend")) nil [42043 42771])
            ("org-export-define-backend" function (:arguments ("backend" "transcoders" "body")) nil [42773 47301])
            ("org-export-define-derived-backend" function (:arguments ("child" "parent" "body")) nil [47303 49354])
            ("org-export-get-environment" function (:arguments ("backend" "subtreep" "ext-plist")) nil [50953 52024])
            ("org-export--parse-option-keyword" function (:arguments ("options" "backend")) nil [52026 52907])
            ("org-export--get-subtree-options" function (:arguments ("backend")) nil [52909 54964])
            ("org-export--get-inbuffer-options" function (:arguments ("backend")) nil [54966 59299])
            ("org-export--get-export-attributes" function (:arguments ("backend" "subtreep" "visible-only" "body-only")) nil [59301 59882])
            ("org-export--get-buffer-attributes" function nil nil [59884 60103])
            ("org-export--get-global-options" function (:arguments ("backend")) nil [60105 60924])
            ("org-export--list-bound-variables" function nil nil [60926 62617])
            ("org-export-get-parent" function (:arguments ("blob")) nil [62738 62888])
            ("org-export--collect-tree-properties" function (:arguments ("data" "info")) nil [63553 64973])
            ("org-export--get-min-level" function (:arguments ("data" "options")) nil [64975 65719])
            ("org-export--collect-headline-numbering" function (:arguments ("data" "options")) nil [65721 66721])
            ("org-export--selected-trees" function (:arguments ("data" "info")) nil [66723 68277])
            ("org-export--skip-p" function (:arguments ("datum" "options" "selected" "excluded")) nil [68279 72627])
            ("org-export-transcoder" function (:arguments ("blob" "info")) nil [73320 73737])
            ("org-export-data" function (:arguments ("data" "info")) nil [73739 77530])
            ("org-export-data-with-backend" function (:arguments ("data" "backend" "info")) nil [77532 78756])
            ("org-export-expand" function (:arguments ("blob" "contents" "with-affiliated")) nil [78758 79324])
            ("org-export-before-processing-hook" variable nil nil [81914 82343])
            ("org-export-before-parsing-hook" variable nil nil [82345 82769])
            ("org-export-filter-options-functions" variable nil nil [82794 83059])
            ("org-export-filter-parse-tree-functions" variable nil nil [83061 83389])
            ("org-export-filter-plain-text-functions" variable nil nil [83391 83673])
            ("org-export-filter-body-functions" variable nil nil [83675 83956])
            ("org-export-filter-final-output-functions" variable nil nil [83958 84280])
            ("org-export-filter-babel-call-functions" variable nil nil [84306 84596])
            ("org-export-filter-center-block-functions" variable nil nil [84598 84892])
            ("org-export-filter-clock-functions" variable nil nil [84894 85174])
            ("org-export-filter-diary-sexp-functions" variable nil nil [85176 85466])
            ("org-export-filter-drawer-functions" variable nil nil [85468 85750])
            ("org-export-filter-dynamic-block-functions" variable nil nil [85752 86048])
            ("org-export-filter-example-block-functions" variable nil nil [86050 86346])
            ("org-export-filter-export-block-functions" variable nil nil [86348 86642])
            ("org-export-filter-fixed-width-functions" variable nil nil [86644 86936])
            ("org-export-filter-footnote-definition-functions" variable nil nil [86938 87246])
            ("org-export-filter-headline-functions" variable nil nil [87248 87534])
            ("org-export-filter-horizontal-rule-functions" variable nil nil [87536 87836])
            ("org-export-filter-inlinetask-functions" variable nil nil [87838 88128])
            ("org-export-filter-item-functions" variable nil nil [88130 88408])
            ("org-export-filter-keyword-functions" variable nil nil [88410 88694])
            ("org-export-filter-latex-environment-functions" variable nil nil [88696 89000])
            ("org-export-filter-node-property-functions" variable nil nil [89002 89298])
            ("org-export-filter-paragraph-functions" variable nil nil [89300 89588])
            ("org-export-filter-plain-list-functions" variable nil nil [89590 89880])
            ("org-export-filter-planning-functions" variable nil nil [89882 90168])
            ("org-export-filter-property-drawer-functions" variable nil nil [90170 90470])
            ("org-export-filter-quote-block-functions" variable nil nil [90472 90770])
            ("org-export-filter-section-functions" variable nil nil [90772 91056])
            ("org-export-filter-special-block-functions" variable nil nil [91058 91354])
            ("org-export-filter-src-block-functions" variable nil nil [91356 91644])
            ("org-export-filter-table-functions" variable nil nil [91646 91926])
            ("org-export-filter-table-cell-functions" variable nil nil [91928 92218])
            ("org-export-filter-table-row-functions" variable nil nil [92220 92508])
            ("org-export-filter-verse-block-functions" variable nil nil [92510 92802])
            ("org-export-filter-bold-functions" variable nil nil [92827 93108])
            ("org-export-filter-code-functions" variable nil nil [93110 93391])
            ("org-export-filter-entity-functions" variable nil nil [93393 93675])
            ("org-export-filter-export-snippet-functions" variable nil nil [93677 93975])
            ("org-export-filter-footnote-reference-functions" variable nil nil [93977 94283])
            ("org-export-filter-inline-babel-call-functions" variable nil nil [94285 94589])
            ("org-export-filter-inline-src-block-functions" variable nil nil [94591 94893])
            ("org-export-filter-italic-functions" variable nil nil [94895 95180])
            ("org-export-filter-latex-fragment-functions" variable nil nil [95182 95480])
            ("org-export-filter-line-break-functions" variable nil nil [95482 95772])
            ("org-export-filter-link-functions" variable nil nil [95774 96052])
            ("org-export-filter-radio-target-functions" variable nil nil [96054 96348])
            ("org-export-filter-statistics-cookie-functions" variable nil nil [96350 96654])
            ("org-export-filter-strike-through-functions" variable nil nil [96656 96957])
            ("org-export-filter-subscript-functions" variable nil nil [96959 97247])
            ("org-export-filter-superscript-functions" variable nil nil [97249 97541])
            ("org-export-filter-target-functions" variable nil nil [97543 97825])
            ("org-export-filter-timestamp-functions" variable nil nil [97827 98115])
            ("org-export-filter-underline-functions" variable nil nil [98117 98408])
            ("org-export-filter-verbatim-functions" variable nil nil [98410 98699])
            ("org-export-filter-apply-functions" function (:arguments ("filters" "value" "info")) nil [99149 100062])
            ("org-export-install-filters" function (:arguments ("info")) nil [100064 101242])
            ("org-export-copy-buffer" function nil nil [102424 102810])
            ("org-export-with-buffer-copy" function (:arguments ("body")) nil [102812 103468])
            ("org-export--generate-copy-script" function (:arguments ("buffer")) nil [103470 105686])
            ("org-export--delete-comment-trees" function nil nil [105688 106228])
            ("org-export--prune-tree" function (:arguments ("data" "info")) nil [106230 109118])
            ("org-export--missing-definitions" function (:arguments ("tree" "definitions")) nil [109120 112097])
            ("org-export--install-footnote-definitions" function (:arguments ("definitions" "tree")) nil [112099 114337])
            ("org-export--remove-uninterpreted-data" function (:arguments ("data" "info")) nil [114339 116610])
            ("org-export-as" function (:arguments ("backend" "subtreep" "visible-only" "body-only" "ext-plist")) nil [116627 123496])
            ("org-export-string-as" function (:arguments ("string" "backend" "body-only" "ext-plist")) nil [123513 124202])
            ("org-export-replace-region-by" function (:arguments ("backend")) nil [124219 124645])
            ("org-export-insert-default-template" function
               (:user-visible-flag t
                :arguments ("backend" "subtreep"))
                nil [124662 128023])
            ("org-export-expand-include-keyword" function (:arguments ("included" "dir" "footnotes")) nil [128025 133270])
            ("org-export--inclusion-absolute-lines" function (:arguments ("file" "location" "only-contents" "lines")) nil [133272 135624])
            ("org-export--prepare-file-contents" function (:arguments ("file" "lines" "ind" "minlevel" "id" "footnotes")) nil [135626 140898])
            ("org-export--copy-to-kill-ring-p" function nil nil [140900 141205])
            ("org-export-read-attribute" function (:arguments ("attribute" "element" "property")) nil [141817 143209])
            ("org-export-get-caption" function (:arguments ("element" "shortp")) nil [143211 143721])
            ("org-export-with-backend" function (:arguments ("backend" "data" "contents" "info")) nil [143991 145367])
            ("org-export-snippet-backend" function (:arguments ("export-snippet")) nil [145681 146022])
            ("org-export-get-footnote-definition" function (:arguments ("footnote-reference" "info")) nil [146630 148008])
            ("org-export--footnote-reference-map" function (:arguments ("function" "data" "info" "body-first")) nil [148010 149874])
            ("org-export-collect-footnote-definitions" function (:arguments ("info" "data" "body-first")) nil [149876 151010])
            ("org-export-footnote-first-reference-p" function (:arguments ("footnote-reference" "info" "data" "body-first")) nil [151012 152063])
            ("org-export-get-footnote-number" function (:arguments ("footnote" "info" "data" "body-first")) nil [152065 153307])
            ("org-export-get-relative-level" function (:arguments ("headline" "info")) nil [154312 154567])
            ("org-export-low-level-p" function (:arguments ("headline" "info")) nil [154569 155130])
            ("org-export-get-headline-number" function (:arguments ("headline" "info")) nil [155132 155416])
            ("org-export-numbered-headline-p" function (:arguments ("headline" "info")) nil [155418 155838])
            ("org-export-number-to-roman" function (:arguments ("n")) nil [155840 156306])
            ("org-export-get-tags" function (:arguments ("element" "info" "tags" "inherited")) nil [156308 157385])
            ("org-export-get-node-property" function (:arguments ("property" "blob" "inherited")) nil [157387 158124])
            ("org-export-get-category" function (:arguments ("blob" "info")) nil [158126 158820])
            ("org-export-get-alt-title" function (:arguments ("headline" "_")) nil [158822 159207])
            ("org-export-first-sibling-p" function (:arguments ("blob" "info")) nil [159209 159563])
            ("org-export-last-sibling-p" function (:arguments ("datum" "info")) nil [159565 159961])
            ("org-export-get-date" function (:arguments ("info" "fmt")) nil [160157 160861])
            ("org-define-error" code nil nil [161993 162063])
            ("org-export-custom-protocol-maybe" function (:arguments ("link" "desc" "backend")) nil [162065 162824])
            ("org-export-get-coderef-format" function (:arguments ("path" "desc")) nil [162826 163131])
            ("org-export-inline-image-p" function (:arguments ("link" "rules")) nil [163133 163955])
            ("org-export-insert-image-links" function (:arguments ("data" "info" "rules")) nil [163957 165603])
            ("org-export-resolve-coderef" function (:arguments ("ref" "info")) nil [165605 166563])
            ("org-export-search-cells" function (:arguments ("datum")) nil [166565 167901])
            ("org-export-string-to-search-cell" function (:arguments ("s")) nil [167903 168387])
            ("org-export-match-search-cell-p" function (:arguments ("datum" "cells")) nil [168389 168723])
            ("org-export-resolve-fuzzy-link" function (:arguments ("link" "info")) nil [168725 170400])
            ("org-export-resolve-id-link" function (:arguments ("link" "info")) nil [170402 171211])
            ("org-export-resolve-radio-link" function (:arguments ("link" "info")) nil [171213 171837])
            ("org-export-file-uri" function (:arguments ("filename")) nil [171839 172237])
            ("org-export-new-reference" function (:arguments ("references")) nil [172620 173309])
            ("org-export-format-reference" function (:arguments ("reference")) nil [173311 173527])
            ("org-export-get-reference" function (:arguments ("datum" "info")) nil [173529 175541])
            ("org-export-get-ordinal" function (:arguments ("element" "info" "types" "predicate")) nil [175543 177887])
            ("org-export-get-loc" function (:arguments ("element" "info")) nil [178895 180051])
            ("org-export-unravel-code" function (:arguments ("element")) nil [180053 181351])
            ("org-export-format-code" function (:arguments ("code" "fun" "num-lines" "ref-alist")) nil [181353 182556])
            ("org-export-format-code-default" function (:arguments ("element" "info")) nil [182558 184243])
            ("org-export-table-has-special-column-p" function (:arguments ("table")) nil [185395 186228])
            ("org-export-table-has-header-p" function (:arguments ("table" "info")) nil [186230 187138])
            ("org-export-table-row-is-special-p" function (:arguments ("table-row" "_")) nil [187140 188470])
            ("org-export-table-row-group" function (:arguments ("table-row" "info")) nil [188472 189493])
            ("org-export-table-cell-width" function (:arguments ("table-cell" "info")) nil [189495 190986])
            ("org-export-table-cell-alignment" function (:arguments ("table-cell" "info")) nil [190988 194013])
            ("org-export-table-cell-borders" function (:arguments ("table-cell" "info")) nil [194015 197576])
            ("org-export-table-cell-starts-colgroup-p" function (:arguments ("table-cell" "info")) nil [197578 198106])
            ("org-export-table-cell-ends-colgroup-p" function (:arguments ("table-cell" "info")) nil [198108 198559])
            ("org-export-table-row-starts-rowgroup-p" function (:arguments ("table-row" "info")) nil [198561 199017])
            ("org-export-table-row-ends-rowgroup-p" function (:arguments ("table-row" "info")) nil [199019 199470])
            ("org-export-table-row-in-header-p" function (:arguments ("table-row" "info")) nil [199472 199841])
            ("org-export-table-row-starts-header-p" function (:arguments ("table-row" "info")) nil [199843 200134])
            ("org-export-table-row-ends-header-p" function (:arguments ("table-row" "info")) nil [200136 200422])
            ("org-export-table-row-number" function (:arguments ("table-row" "info")) nil [200424 201341])
            ("org-export-table-dimensions" function (:arguments ("table" "info")) nil [201343 202021])
            ("org-export-table-cell-address" function (:arguments ("table-cell" "info")) nil [202023 202720])
            ("org-export-get-table-cell-at" function (:arguments ("address" "table" "info")) nil [202722 203575])
            ("org-export-collect-headlines" function (:arguments ("info" "n" "scope")) nil [204167 205639])
            ("org-export-collect-elements" function (:arguments ("type" "info" "predicate")) nil [205641 206377])
            ("org-export-collect-tables" function (:arguments ("info")) nil [206379 206589])
            ("org-export-collect-figures" function (:arguments ("info" "predicate")) nil [206591 207149])
            ("org-export-collect-listings" function (:arguments ("info")) nil [207151 207376])
            ("org-export-toc-entry-backend" function (:arguments ("parent" "transcoders")) nil [207378 208269])
            ("org-export-smart-quotes-alist" variable
               (:constant-flag t
                :default-value (quote (("ar" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‹" :html "&lsaquo;" :latex "\\guilsinglleft{}" :texinfo "@guilsinglleft{}") (secondary-closing :utf-8 "›" :html "&rsaquo;" :latex "\\guilsinglright{}" :texinfo "@guilsinglright{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("da" (primary-opening :utf-8 "»" :html "&raquo;" :latex ">>" :texinfo "@guillemetright{}") (primary-closing :utf-8 "«" :html "&laquo;" :latex "<<" :texinfo "@guillemetleft{}") (secondary-opening :utf-8 "›" :html "&rsaquo;" :latex "\\frq{}" :texinfo "@guilsinglright{}") (secondary-closing :utf-8 "‹" :html "&lsaquo;" :latex "\\flq{}" :texinfo "@guilsingleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("de" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("en" (primary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("es" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (secondary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (apostrophe :utf-8 "’" :html "&rsquo;")) ("fr" (primary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (primary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (secondary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (secondary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("is" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("no" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nb" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nn" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("ru" (primary-opening :utf-8 "«" :html "&laquo;" :latex "{}<<" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex ">>{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "„" :html "&bdquo;" :latex "\\glqq{}" :texinfo "@quotedblbase{}") (secondary-closing :utf-8 "“" :html "&ldquo;" :latex "\\grqq{}" :texinfo "@quotedblleft{}") (apostrophe :utf-8 "’" :html: "&#39;")) ("sl" (primary-opening :utf-8 "«" :html "&laquo;" :latex "{}<<" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex ">>{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "„" :html "&bdquo;" :latex "\\glqq{}" :texinfo "@quotedblbase{}") (secondary-closing :utf-8 "“" :html "&ldquo;" :latex "\\grqq{}" :texinfo "@quotedblleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("sv" (primary-opening :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (secondary-opening :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")))))
                nil [208570 215690])
            ("org-export--smart-quote-status" function (:arguments ("s" "info")) nil [215692 218531])
            ("org-export-activate-smart-quotes" function (:arguments ("s" "encoding" "info" "original")) nil [218533 219422])
            ("org-export-get-parent-headline" function (:arguments ("blob")) nil [219998 220172])
            ("org-export-get-parent-element" function (:arguments ("object")) nil [220174 220361])
            ("org-export-get-parent-table" function (:arguments ("object")) nil [220363 220550])
            ("org-export-get-previous-element" function (:arguments ("blob" "info" "n")) nil [220552 221496])
            ("org-export-get-next-element" function (:arguments ("blob" "info" "n")) nil [221498 222451])
            ("org-export-dictionary" variable
               (:constant-flag t
                :default-value (quote (("%e %n: %c" ("fr" :default "%e %n : %c" :html "%e&nbsp;%n&nbsp;: %c")) ("Author" ("ar" :default "تأليف") ("ca" :default "Autor") ("cs" :default "Autor") ("da" :default "Forfatter") ("de" :default "Autor") ("eo" :html "A&#365;toro") ("es" :default "Autor") ("et" :default "Autor") ("fi" :html "Tekij&auml;") ("fr" :default "Auteur") ("hu" :default "Szerz&otilde;") ("is" :html "H&ouml;fundur") ("it" :default "Autore") ("ja" :default "著者" :html "&#33879;&#32773;") ("nl" :default "Auteur") ("no" :default "Forfatter") ("nb" :default "Forfatter") ("nn" :default "Forfattar") ("pl" :default "Autor") ("pt_BR" :default "Autor") ("ru" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("sl" :default "Avtor") ("sv" :html "F&ouml;rfattare") ("uk" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("zh-CN" :html "&#20316;&#32773;" :utf-8 "作者") ("zh-TW" :html "&#20316;&#32773;" :utf-8 "作者")) ("Continued from previous page" ("ar" :default "تتمة الصفحة السابقة") ("cs" :default "Pokračování z předchozí strany") ("de" :default "Fortsetzung von vorheriger Seite") ("es" :html "Contin&uacute;a de la p&aacute;gina anterior" :ascii "Continua de la pagina anterior" :default "Continúa de la página anterior") ("fr" :default "Suite de la page précédente") ("it" :default "Continua da pagina precedente") ("ja" :default "前ページからの続き") ("nl" :default "Vervolg van vorige pagina") ("pt" :default "Continuação da página anterior") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077;)" :utf-8 "(Продолжение)") ("sl" :default "Nadaljevanje s prejšnje strani")) ("Continued on next page" ("ar" :default "التتمة في الصفحة التالية") ("cs" :default "Pokračuje na další stránce") ("de" :default "Fortsetzung nächste Seite") ("es" :html "Contin&uacute;a en la siguiente p&aacute;gina" :ascii "Continua en la siguiente pagina" :default "Continúa en la siguiente página") ("fr" :default "Suite page suivante") ("it" :default "Continua alla pagina successiva") ("ja" :default "次ページに続く") ("nl" :default "Vervolg op volgende pagina") ("pt" :default "Continua na página seguinte") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077; &#1089;&#1083;&#1077;&#1076;&#1091;&#1077;&#1090;)" :utf-8 "(Продолжение следует)") ("sl" :default "Nadaljevanje na naslednji strani")) ("Created" ("cs" :default "Vytvořeno") ("sl" :default "Ustvarjeno")) ("Date" ("ar" :default "بتاريخ") ("ca" :default "Data") ("cs" :default "Datum") ("da" :default "Dato") ("de" :default "Datum") ("eo" :default "Dato") ("es" :default "Fecha") ("et" :html "Kuup&#228;ev" :utf-8 "Kuupäev") ("fi" :html "P&auml;iv&auml;m&auml;&auml;r&auml;") ("hu" :html "D&aacute;tum") ("is" :default "Dagsetning") ("it" :default "Data") ("ja" :default "日付" :html "&#26085;&#20184;") ("nl" :default "Datum") ("no" :default "Dato") ("nb" :default "Dato") ("nn" :default "Dato") ("pl" :default "Data") ("pt_BR" :default "Data") ("ru" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("sl" :default "Datum") ("sv" :default "Datum") ("uk" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("zh-CN" :html "&#26085;&#26399;" :utf-8 "日期") ("zh-TW" :html "&#26085;&#26399;" :utf-8 "日期")) ("Equation" ("ar" :default "معادلة") ("cs" :default "Rovnice") ("da" :default "Ligning") ("de" :default "Gleichung") ("es" :ascii "Ecuacion" :html "Ecuaci&oacute;n" :default "Ecuación") ("et" :html "V&#245;rrand" :utf-8 "Võrrand") ("fr" :ascii "Equation" :default "Équation") ("is" :default "Jafna") ("ja" :default "方程式") ("no" :default "Ligning") ("nb" :default "Ligning") ("nn" :default "Likning") ("pt_BR" :html "Equa&ccedil;&atilde;o" :default "Equação" :ascii "Equacao") ("ru" :html "&#1059;&#1088;&#1072;&#1074;&#1085;&#1077;&#1085;&#1080;&#1077;" :utf-8 "Уравнение") ("sl" :default "Enačba") ("sv" :default "Ekvation") ("zh-CN" :html "&#26041;&#31243;" :utf-8 "方程")) ("Figure" ("ar" :default "شكل") ("cs" :default "Obrázek") ("da" :default "Figur") ("de" :default "Abbildung") ("es" :default "Figura") ("et" :default "Joonis") ("is" :default "Mynd") ("ja" :default "図" :html "&#22259;") ("no" :default "Illustrasjon") ("nb" :default "Illustrasjon") ("nn" :default "Illustrasjon") ("pt_BR" :default "Figura") ("ru" :html "&#1056;&#1080;&#1089;&#1091;&#1085;&#1086;&#1082;" :utf-8 "Рисунок") ("sv" :default "Illustration") ("zh-CN" :html "&#22270;" :utf-8 "图")) ("Figure %d:" ("ar" :default "شكل %d:") ("cs" :default "Obrázek %d:") ("da" :default "Figur %d") ("de" :default "Abbildung %d:") ("es" :default "Figura %d:") ("et" :default "Joonis %d:") ("fr" :default "Figure %d :" :html "Figure&nbsp;%d&nbsp;:") ("is" :default "Mynd %d") ("ja" :default "図%d: " :html "&#22259;%d: ") ("no" :default "Illustrasjon %d") ("nb" :default "Illustrasjon %d") ("nn" :default "Illustrasjon %d") ("pt_BR" :default "Figura %d:") ("ru" :html "&#1056;&#1080;&#1089;. %d.:" :utf-8 "Рис. %d.:") ("sl" :default "Slika %d") ("sv" :default "Illustration %d") ("zh-CN" :html "&#22270;%d&nbsp;" :utf-8 "图%d ")) ("Footnotes" ("ar" :default "الهوامش") ("ca" :html "Peus de p&agrave;gina") ("cs" :default "Poznámky pod čarou") ("da" :default "Fodnoter") ("de" :html "Fu&szlig;noten" :default "Fußnoten") ("eo" :default "Piednotoj") ("es" :ascii "Nota al pie de pagina" :html "Nota al pie de p&aacute;gina" :default "Nota al pie de página") ("et" :html "Allm&#228;rkused" :utf-8 "Allmärkused") ("fi" :default "Alaviitteet") ("fr" :default "Notes de bas de page") ("hu" :html "L&aacute;bjegyzet") ("is" :html "Aftanm&aacute;lsgreinar") ("it" :html "Note a pi&egrave; di pagina") ("ja" :default "脚注" :html "&#33050;&#27880;") ("nl" :default "Voetnoten") ("no" :default "Fotnoter") ("nb" :default "Fotnoter") ("nn" :default "Fotnotar") ("pl" :default "Przypis") ("pt_BR" :html "Notas de Rodap&eacute;" :default "Notas de Rodapé" :ascii "Notas de Rodape") ("ru" :html "&#1057;&#1085;&#1086;&#1089;&#1082;&#1080;" :utf-8 "Сноски") ("sl" :default "Opombe") ("sv" :default "Fotnoter") ("uk" :html "&#1055;&#1088;&#1080;&#1084;&#1110;&#1090;&#1082;&#1080;" :utf-8 "Примітки") ("zh-CN" :html "&#33050;&#27880;" :utf-8 "脚注") ("zh-TW" :html "&#33139;&#35387;" :utf-8 "腳註")) ("List of Listings" ("ar" :default "قائمة بالبرامج") ("cs" :default "Seznam programů") ("da" :default "Programmer") ("de" :default "Programmauflistungsverzeichnis") ("es" :ascii "Indice de Listados de programas" :html "&Iacute;ndice de Listados de programas" :default "Índice de Listados de programas") ("et" :default "Loendite nimekiri") ("fr" :default "Liste des programmes") ("ja" :default "ソースコード目次") ("no" :default "Dataprogrammer") ("nb" :default "Dataprogrammer") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1088;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1086;&#1082;" :utf-8 "Список распечаток") ("sl" :default "Seznam programskih izpisov") ("zh-CN" :html "&#20195;&#30721;&#30446;&#24405;" :utf-8 "代码目录")) ("List of Tables" ("ar" :default "قائمة بالجداول") ("cs" :default "Seznam tabulek") ("da" :default "Tabeller") ("de" :default "Tabellenverzeichnis") ("es" :ascii "Indice de tablas" :html "&Iacute;ndice de tablas" :default "Índice de tablas") ("et" :default "Tabelite nimekiri") ("fr" :default "Liste des tableaux") ("is" :default "Töfluskrá" :html "T&ouml;fluskr&aacute;") ("ja" :default "表目次") ("no" :default "Tabeller") ("nb" :default "Tabeller") ("nn" :default "Tabeller") ("pt_BR" :default "Índice de Tabelas" :ascii "Indice de Tabelas") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1090;&#1072;&#1073;&#1083;&#1080;&#1094;" :utf-8 "Список таблиц") ("sl" :default "Seznam tabel") ("sv" :default "Tabeller") ("zh-CN" :html "&#34920;&#26684;&#30446;&#24405;" :utf-8 "表格目录")) ("Listing" ("ar" :default "برنامج") ("cs" :default "Program") ("da" :default "Program") ("de" :default "Programmlisting") ("es" :default "Listado de programa") ("et" :default "Loend") ("fr" :default "Programme" :html "Programme") ("ja" :default "ソースコード") ("no" :default "Dataprogram") ("nb" :default "Dataprogram") ("pt_BR" :default "Listagem") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072;" :utf-8 "Распечатка") ("sl" :default "Izpis programa") ("zh-CN" :html "&#20195;&#30721;" :utf-8 "代码")) ("Listing %d:" ("ar" :default "برنامج %d:") ("cs" :default "Program %d:") ("da" :default "Program %d") ("de" :default "Programmlisting %d") ("es" :default "Listado de programa %d") ("et" :default "Loend %d") ("fr" :default "Programme %d :" :html "Programme&nbsp;%d&nbsp;:") ("ja" :default "ソースコード%d:") ("no" :default "Dataprogram %d") ("nb" :default "Dataprogram %d") ("pt_BR" :default "Listagem %d") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072; %d.:" :utf-8 "Распечатка %d.:") ("sl" :default "Izpis programa %d") ("zh-CN" :html "&#20195;&#30721;%d&nbsp;" :utf-8 "代码%d ")) ("References" ("ar" :default "المراجع") ("cs" :default "Reference") ("fr" :ascii "References" :default "Références") ("de" :default "Quellen") ("es" :default "Referencias") ("sl" :default "Reference")) ("See figure %s" ("cs" :default "Viz obrázek %s") ("fr" :default "cf. figure %s" :html "cf.&nbsp;figure&nbsp;%s" :latex "cf.~figure~%s") ("sl" :default "Glej sliko %s")) ("See listing %s" ("cs" :default "Viz program %s") ("fr" :default "cf. programme %s" :html "cf.&nbsp;programme&nbsp;%s" :latex "cf.~programme~%s") ("sl" :default "Glej izpis programa %s")) ("See section %s" ("ar" :default "انظر قسم %s") ("cs" :default "Viz sekce %s") ("da" :default "jævnfør afsnit %s") ("de" :default "siehe Abschnitt %s") ("es" :ascii "Vea seccion %s" :html "Vea secci&oacute;n %s" :default "Vea sección %s") ("et" :html "Vaata peat&#252;kki %s" :utf-8 "Vaata peatükki %s") ("fr" :default "cf. section %s") ("ja" :default "セクション %s を参照") ("pt_BR" :html "Veja a se&ccedil;&atilde;o %s" :default "Veja a seção %s" :ascii "Veja a secao %s") ("ru" :html "&#1057;&#1084;. &#1088;&#1072;&#1079;&#1076;&#1077;&#1083; %s" :utf-8 "См. раздел %s") ("sl" :default "Glej poglavje %d") ("zh-CN" :html "&#21442;&#35265;&#31532;%s&#33410;" :utf-8 "参见第%s节")) ("See table %s" ("cs" :default "Viz tabulka %s") ("fr" :default "cf. tableau %s" :html "cf.&nbsp;tableau&nbsp;%s" :latex "cf.~tableau~%s") ("sl" :default "Glej tabelo %s")) ("Table" ("ar" :default "جدول") ("cs" :default "Tabulka") ("de" :default "Tabelle") ("es" :default "Tabla") ("et" :default "Tabel") ("fr" :default "Tableau") ("is" :default "Tafla") ("ja" :default "表" :html "&#34920;") ("pt_BR" :default "Tabela") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072;" :utf-8 "Таблица") ("zh-CN" :html "&#34920;" :utf-8 "表")) ("Table %d:" ("ar" :default "جدول %d:") ("cs" :default "Tabulka %d:") ("da" :default "Tabel %d") ("de" :default "Tabelle %d") ("es" :default "Tabla %d") ("et" :default "Tabel %d") ("fr" :default "Tableau %d :") ("is" :default "Tafla %d") ("ja" :default "表%d:" :html "&#34920;%d:") ("no" :default "Tabell %d") ("nb" :default "Tabell %d") ("nn" :default "Tabell %d") ("pt_BR" :default "Tabela %d") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072; %d.:" :utf-8 "Таблица %d.:") ("sl" :default "Tabela %d") ("sv" :default "Tabell %d") ("zh-CN" :html "&#34920;%d&nbsp;" :utf-8 "表%d ")) ("Table of Contents" ("ar" :default "قائمة المحتويات") ("ca" :html "&Iacute;ndex") ("cs" :default "Obsah") ("da" :default "Indhold") ("de" :default "Inhaltsverzeichnis") ("eo" :default "Enhavo") ("es" :ascii "Indice" :html "&Iacute;ndice" :default "Índice") ("et" :default "Sisukord") ("fi" :html "Sis&auml;llysluettelo") ("fr" :ascii "Sommaire" :default "Table des matières") ("hu" :html "Tartalomjegyz&eacute;k") ("is" :default "Efnisyfirlit") ("it" :default "Indice") ("ja" :default "目次" :html "&#30446;&#27425;") ("nl" :default "Inhoudsopgave") ("no" :default "Innhold") ("nb" :default "Innhold") ("nn" :default "Innhald") ("pl" :html "Spis tre&#x015b;ci") ("pt_BR" :html "&Iacute;ndice" :utf8 "Índice" :ascii "Indice") ("ru" :html "&#1057;&#1086;&#1076;&#1077;&#1088;&#1078;&#1072;&#1085;&#1080;&#1077;" :utf-8 "Содержание") ("sl" :default "Kazalo") ("sv" :html "Inneh&aring;ll") ("uk" :html "&#1047;&#1084;&#1110;&#1089;&#1090;" :utf-8 "Зміст") ("zh-CN" :html "&#30446;&#24405;" :utf-8 "目录") ("zh-TW" :html "&#30446;&#37636;" :utf-8 "目錄")) ("Unknown reference" ("ar" :default "مرجع غير معرّف") ("da" :default "ukendt reference") ("de" :default "Unbekannter Verweis") ("es" :default "Referencia desconocida") ("et" :default "Tundmatu viide") ("fr" :ascii "Destination inconnue" :default "Référence inconnue") ("ja" :default "不明な参照先") ("pt_BR" :default "Referência desconhecida" :ascii "Referencia desconhecida") ("ru" :html "&#1053;&#1077;&#1080;&#1079;&#1074;&#1077;&#1089;&#1090;&#1085;&#1072;&#1103; &#1089;&#1089;&#1099;&#1083;&#1082;&#1072;" :utf-8 "Неизвестная ссылка") ("sl" :default "Neznana referenca") ("zh-CN" :html "&#26410;&#30693;&#24341;&#29992;" :utf-8 "未知引用")))))
                nil [222663 237683])
            ("org-export-translate" function (:arguments ("s" "encoding" "info")) nil [237685 238300])
            ("org-export-async-start" function (:arguments ("fun" "body")) nil [239518 243680])
            ("org-export-to-buffer" function (:arguments ("backend" "buffer" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [243697 246109])
            ("org-export-to-file" function (:arguments ("backend" "file" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [246126 248619])
            ("org-export-output-file-name" function (:arguments ("extension" "subtreep" "pub-dir")) nil [248621 250652])
            ("org-export-add-to-stack" function (:arguments ("source" "backend" "process")) nil [250654 251153])
            ("org-export-stack" function (:user-visible-flag t) nil [251155 251492])
            ("org-export-stack-clear" function (:user-visible-flag t) nil [251494 251624])
            ("org-export-stack-refresh" function (:user-visible-flag t) nil [251626 251734])
            ("org-export-stack-remove" function
               (:user-visible-flag t
                :arguments ("source"))
                nil [251736 252098])
            ("org-export-stack-view" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [252100 252544])
            ("org-export-stack-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (set-keymap-parent km tabulated-list-mode-map) (define-key km " " (quote next-line)) (define-key km "" (quote next-line)) (define-key km [down] (quote next-line)) (define-key km "" (quote previous-line)) (define-key km "" (quote previous-line)) (define-key km [up] (quote previous-line)) (define-key km "C" (quote org-export-stack-clear)) (define-key km "v" (quote org-export-stack-view)) (define-key km (kbd "RET") (quote org-export-stack-view)) (define-key km "d" (quote org-export-stack-remove)) km)) nil [252546 253141])
            ("define-derived-mode" code nil nil [253143 254150])
            ("org-export--stack-generate" function nil nil [254152 255267])
            ("org-export--stack-num-predicate" function (:arguments ("a" "b")) nil [255269 255401])
            ("org-export--stack-source-at-point" function nil nil [255403 256072])
            ("org-export-dispatch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [256363 259262])
            ("org-export--dispatch-ui" function (:arguments ("options" "first-key" "expertp")) nil [259264 265977])
            ("org-export--dispatch-action" function (:arguments ("prompt" "allowed-keys" "entries" "options" "first-key" "expertp")) nil [265979 269344])
            ("ox" package nil nil [269348 269361]))          
      :file "ox.el"
      :pointmax 269458
      :fsize 270217
      :lastmodtime '(23525 29594 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1937 1954])
            ("org-macs" include nil nil [1955 1974])
            ("declare-function" code nil nil [1975 2032])
            ("org-duration-canonical-units" variable
               (:constant-flag t
                :default-value (\` (("min" . 1) ("h" . 60) ("d" \, (* 60 24)))))
                nil [2058 2225])
            ("org-duration-units" variable (:default-value (\` (("min" . 1) ("h" . 60) ("d" \, (* 60 24)) ("w" \, (* 60 24 7)) ("m" \, (* 60 24 30)) ("y" \, (* 60 24 365.25))))) nil [2227 3397])
            ("org-duration-format" variable (:default-value (quote (("d") (special . h:mm)))) nil [3399 6127])
            ("org-duration--h:mm-re" variable
               (:constant-flag t
                :default-value "\\`[ 	]*[0-9]+\\(?::[0-9]\\{2\\}\\)\\{1,2\\}[ 	]*\\'")
                nil [6169 6424])
            ("org-duration--h:mm:ss-re" variable
               (:constant-flag t
                :default-value "\\`[ 	]*[0-9]+\\(?::[0-9]\\{2\\}\\)\\{2\\}[ 	]*\\'")
                nil [6426 6669])
            ("org-duration--unit-re" variable nil nil [6671 6876])
            ("org-duration--full-re" variable nil nil [6878 7016])
            ("org-duration--mixed-re" variable nil nil [7018 7266])
            ("org-duration--modifier" function (:arguments ("unit" "canonical")) nil [7268 7627])
            ("org-duration-set-regexps" function (:user-visible-flag t) nil [7668 8416])
            ("org-duration-p" function (:arguments ("s")) nil [8433 8669])
            ("org-duration-to-minutes" function (:arguments ("duration" "canonical")) nil [8686 10115])
            ("org-duration-from-minutes" function (:arguments ("minutes" "fmt" "canonical")) nil [10132 14164])
            ("org-duration-h:mm-only-p" function (:arguments ("times")) nil [14181 14898])
            ("org-duration-set-regexps" code nil nil [14922 14948])
            ("org-duration" package nil nil [14950 14973]))          
      :file "org-duration.el"
      :pointmax 15004
      :fsize 15003
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1111 1128])
            ("org" include nil nil [1129 1143])
            ("declare-function" code nil nil [1145 1208])
            ("declare-function" code nil nil [1209 1272])
            ("declare-function" code nil nil [1273 1351])
            ("declare-function" code nil nil [1352 1422])
            ("declare-function" code nil nil [1423 1489])
            ("declare-function" code nil nil [1490 1611])
            ("declare-function" code nil nil [1612 1717])
            ("declare-function" code nil nil [1718 1790])
            ("declare-function" code nil nil [1791 1857])
            ("declare-function" code nil nil [1858 1917])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [1919 1977])
            ("org-agenda-columns-compute-summary-properties" variable nil nil [1978 2032])
            ("org-agenda-columns-show-summaries" variable nil nil [2033 2075])
            ("org-agenda-view-columns-initially" variable nil nil [2076 2118])
            ("org-inlinetask-min-level" variable nil nil [2119 2152])
            ("org-columns-modify-value-for-display-function" variable nil nil [2175 2698])
            ("org-columns-summary-types" variable nil nil [2700 3664])
            ("defvar-local" code nil nil [3686 3772])
            ("defvar-local" code nil nil [3774 3878])
            ("defvar-local" code nil nil [3880 4037])
            ("defvar-local" code nil nil [4039 4144])
            ("defvar-local" code nil nil [4146 4265])
            ("defvar-local" code nil nil [4267 4378])
            ("org-columns--time" variable nil nil [4380 4477])
            ("org-columns-map" variable (:default-value (make-sparse-keymap)) nil [4479 4564])
            ("org-columns-summary-types-default" variable
               (:constant-flag t
                :default-value (quote (("+" . org-columns--summary-sum) ("$" . org-columns--summary-currencies) ("X" . org-columns--summary-checkbox) ("X/" . org-columns--summary-checkbox-count) ("X%" . org-columns--summary-checkbox-percent) ("max" . org-columns--summary-max) ("mean" . org-columns--summary-mean) ("min" . org-columns--summary-min) (":" . org-columns--summary-sum-times) (":max" . org-columns--summary-max-time) (":mean" . org-columns--summary-mean-time) (":min" . org-columns--summary-min-time) ("@max" . org-columns--summary-max-age) ("@mean" . org-columns--summary-mean-age) ("@min" . org-columns--summary-min-age) ("est+" . org-columns--summary-estimate))))
                nil [4566 5431])
            ("org-columns-content" function (:user-visible-flag t) nil [5433 5563])
            ("org-defkey" code nil nil [5565 5618])
            ("org-defkey" code nil nil [5619 5665])
            ("org-defkey" code nil nil [5666 5722])
            ("org-defkey" code nil nil [5723 5780])
            ("org-defkey" code nil nil [5781 5852])
            ("org-defkey" code nil nil [5853 5915])
            ("org-defkey" code nil nil [5916 5972])
            ("org-defkey" code nil nil [5973 6023])
            ("org-defkey" code nil nil [6024 6074])
            ("org-defkey" code nil nil [6075 6125])
            ("org-defkey" code nil nil [6126 6176])
            ("org-defkey" code nil nil [6177 6227])
            ("org-defkey" code nil nil [6228 6286])
            ("org-defkey" code nil nil [6287 6348])
            ("org-defkey" code nil nil [6349 6440])
            ("org-defkey" code nil nil [6441 6533])
            ("org-defkey" code nil nil [6534 6836])
            ("org-defkey" code nil nil [6837 7137])
            ("org-defkey" code nil nil [7138 7214])
            ("org-defkey" code nil nil [7215 7279])
            ("org-defkey" code nil nil [7280 7359])
            ("org-defkey" code nil nil [7360 7428])
            ("org-defkey" code nil nil [7429 7481])
            ("org-defkey" code nil nil [7482 7533])
            ("org-defkey" code nil nil [7534 7601])
            ("org-defkey" code nil nil [7602 7667])
            ("org-defkey" code nil nil [7668 7734])
            ("org-defkey" code nil nil [7735 7803])
            ("dotimes" code nil nil [7804 7949])
            ("easy-menu-define" code nil nil [7951 8896])
            ("org-columns--displayed-value" function (:arguments ("spec" "value")) nil [8898 9749])
            ("org-columns--collect-values" function (:arguments ("compiled-fmt")) nil [9751 10891])
            ("org-columns--set-widths" function (:arguments ("cache")) nil [10893 11621])
            ("org-columns--new-overlay" function (:arguments ("beg" "end" "string" "face")) nil [11623 11922])
            ("org-columns--summarize" function (:arguments ("operator")) nil [11924 12210])
            ("org-columns--overlay-text" function (:arguments ("value" "fmt" "width" "property" "original")) nil [12212 12907])
            ("org-columns--display-here" function (:arguments ("columns" "dateline")) nil [12909 15844])
            ("org-columns-add-ellipses" function (:arguments ("string" "width")) nil [15846 16195])
            ("org-columns-full-header-line-format" variable nil nil [16197 16320])
            ("org-previous-header-line-format" variable nil nil [16321 16426])
            ("org-columns-inhibit-recalculation" variable nil nil [16427 16532])
            ("org-columns-flyspell-was-active" variable nil nil [16533 16742])
            ("header-line-format" variable nil nil [16744 16771])
            ("org-columns-previous-hscroll" variable nil nil [16772 16811])
            ("org-columns--display-here-title" function (:user-visible-flag t) nil [16813 17627])
            ("org-columns-hscroll-title" function nil nil [17629 18129])
            ("org-colview-initial-truncate-line-value" variable nil nil [18131 18242])
            ("org-columns-remove-overlays" function (:user-visible-flag t) nil [18259 19236])
            ("org-columns-compact-links" function (:arguments ("s")) nil [19238 19484])
            ("org-columns-show-value" function (:user-visible-flag t) nil [19486 19684])
            ("org-agenda-columns-active" variable nil nil [19686 19720])
            ("org-columns-quit" function (:user-visible-flag t) nil [19750 20247])
            ("org-columns-check-computed" function nil nil [20249 20586])
            ("org-columns-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20588 20729])
            ("org-columns-set-tags-or-toggle" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20731 21041])
            ("org-agenda-overriding-columns-format" variable nil nil [21043 21211])
            ("org-columns-edit-value" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [21213 24105])
            ("org-columns-edit-allowed" function (:user-visible-flag t) nil [24107 24910])
            ("org-columns--call" function (:arguments ("fun")) nil [24912 25267])
            ("org-columns-previous-allowed-value" function (:user-visible-flag t) nil [25269 25425])
            ("org-columns-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous" "nth"))
                nil [25427 27882])
            ("org-colview-construct-allowed-dates" function (:arguments ("s")) nil [27884 28921])
            ("org-columns-open-link" function (:arguments ("arg")) nil [28923 29095])
            ("org-columns-get-format-and-top-level" function nil nil [29112 29241])
            ("org-columns-get-format" function
               (:user-visible-flag t
                :arguments ("fmt-string"))
                nil [29243 30074])
            ("org-columns-goto-top-level" function nil nil [30076 30556])
            ("org-columns" function
               (:user-visible-flag t
                :arguments ("global" "columns-fmt-string"))
                nil [30573 32676])
            ("org-columns-new" function
               (:user-visible-flag t
                :arguments ("spec" "attributes"))
                nil [32678 34174])
            ("org-columns-delete" function (:user-visible-flag t) nil [34176 34920])
            ("org-columns-edit-attributes" function (:user-visible-flag t) nil [34922 35099])
            ("org-columns-widen" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35101 35504])
            ("org-columns-narrow" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35506 35636])
            ("org-columns-move-right" function (:user-visible-flag t) nil [35638 36692])
            ("org-columns-move-left" function (:user-visible-flag t) nil [36694 36974])
            ("org-columns-store-format" function nil nil [36976 38349])
            ("org-columns-update" function (:arguments ("property")) nil [38351 39403])
            ("org-columns-redo" function (:user-visible-flag t) nil [39405 39940])
            ("org-columns-uncompile-format" function (:arguments ("compiled")) nil [39942 40472])
            ("org-columns-compile-format" function (:arguments ("fmt")) nil [40474 41945])
            ("org-columns--age-to-minutes" function (:arguments ("s")) nil [41975 42474])
            ("org-columns--format-age" function (:arguments ("minutes")) nil [42476 42657])
            ("org-columns--summary-apply-times" function (:arguments ("fun" "times")) nil [42687 43247])
            ("org-columns--compute-spec" function (:arguments ("spec" "update")) nil [43249 46077])
            ("org-columns-compute" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [46094 46599])
            ("org-columns-compute-all" function nil nil [46601 47118])
            ("org-columns--summary-sum" function (:arguments ("values" "printf")) nil [47120 47327])
            ("org-columns--summary-currencies" function (:arguments ("values" "_")) nil [47329 47494])
            ("org-columns--summary-checkbox" function (:arguments ("check-boxes" "_")) nil [47496 47748])
            ("org-columns--summary-checkbox-count" function (:arguments ("check-boxes" "_")) nil [47750 48026])
            ("org-columns--summary-checkbox-percent" function (:arguments ("check-boxes" "_")) nil [48028 48285])
            ("org-columns--summary-min" function (:arguments ("values" "printf")) nil [48287 48503])
            ("org-columns--summary-max" function (:arguments ("values" "printf")) nil [48505 48721])
            ("org-columns--summary-mean" function (:arguments ("values" "printf")) nil [48723 48969])
            ("org-columns--summary-sum-times" function (:arguments ("times" "_")) nil [48971 49081])
            ("org-columns--summary-min-time" function (:arguments ("times" "_")) nil [49083 49221])
            ("org-columns--summary-max-time" function (:arguments ("times" "_")) nil [49223 49361])
            ("org-columns--summary-mean-time" function (:arguments ("times" "_")) nil [49363 49570])
            ("org-columns--summary-min-age" function (:arguments ("ages" "_")) nil [49572 49747])
            ("org-columns--summary-max-age" function (:arguments ("ages" "_")) nil [49749 49924])
            ("org-columns--summary-mean-age" function (:arguments ("ages" "_")) nil [49926 50132])
            ("org-columns--summary-estimate" function (:arguments ("estimates" "_")) nil [50134 50787])
            ("org-columns--capture-view" function (:arguments ("maxlevel" "skip-empty" "format" "local")) nil [50827 52458])
            ("org-columns--clean-item" function (:arguments ("item")) nil [52460 53015])
            ("org-dblock-write:columnview" function (:arguments ("params")) nil [53032 57492])
            ("org-columns-insert-dblock" function (:user-visible-flag t) nil [57509 58009])
            ("org-agenda-columns" function (:user-visible-flag t) nil [58060 60230])
            ("org-agenda-colview-summarize" function (:arguments ("cache")) nil [60232 62467])
            ("org-agenda-colview-compute" function (:arguments ("fmt")) nil [62469 63261])
            ("org-colview" package nil nil [63264 63286]))          
      :file "org-colview.el"
      :pointmax 63317
      :fsize 63316
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2108 2125])
            ("org" include nil nil [2126 2140])
            ("declare-function" code nil nil [2142 2200])
            ("declare-function" code nil nil [2201 2278])
            ("declare-function" code nil nil [2279 2376])
            ("declare-function" code nil nil [2377 2428])
            ("declare-function" code nil nil [2429 2480])
            ("declare-function" code nil nil [2481 2532])
            ("declare-function" code nil nil [2533 2590])
            ("declare-function" code nil nil [2591 2645])
            ("org-end-time-was-given" variable nil nil [2647 2678])
            ("org-remember-default-headline" variable nil nil [2679 2717])
            ("org-remember-templates" variable nil nil [2718 2749])
            ("org-table-hlines" variable nil nil [2750 2775])
            ("org-table-current-begin-pos" variable nil nil [2776 2812])
            ("dired-buffers" variable nil nil [2813 2835])
            ("org-capture-clock-was-started" variable nil nil [2837 2931])
            ("org-capture-last-stored-marker" variable (:default-value (make-marker)) nil [2933 3060])
            ("org-capture-link-is-already-stored" variable nil nil [3191 3238])
            ("org-capture-is-refiling" variable nil nil [3240 3331])
            ("org-capture--prompt-history-table" variable (:default-value (make-hash-table :test (function equal))) nil [3333 3456])
            ("org-capture--prompt-history" variable nil nil [3458 3540])
            ("org-capture" customgroup (:user-visible-flag t) nil [3542 3649])
            ("org-capture-upgrade-templates" function (:arguments ("templates")) nil [3651 5100])
            ("org-capture-templates" variable nil nil [5102 19125])
            ("org-capture-before-finalize-hook" variable nil nil [19127 19391])
            ("org-capture-after-finalize-hook" variable nil nil [19393 19588])
            ("org-capture-prepare-finalize-hook" variable nil nil [19590 19796])
            ("org-capture-bookmark" variable (:default-value t) nil [19798 19975])
            ("org-capture-plist" variable nil nil [20050 20159])
            ("org-capture-current-plist" variable nil nil [20161 20554])
            ("org-capture-clock-keep" variable nil nil [20556 20728])
            ("org-capture-put" function (:arguments ("stuff")) nil [20730 20946])
            ("org-capture-get" function (:arguments ("prop" "local")) nil [20947 21328])
            ("org-capture-member" function (:arguments ("prop" "local")) nil [21330 21690])
            ("org-capture-mode-map" variable (:default-value (make-sparse-keymap)) nil [21712 21902])
            ("org-capture-mode-hook" variable nil nil [21904 21981])
            ("define-minor-mode" code nil nil [21983 22397])
            ("define-key" code nil nil [22398 22464])
            ("define-key" code nil nil [22465 22527])
            ("define-key" code nil nil [22528 22592])
            ("org-capture-initial" variable nil nil [22617 22649])
            ("org-capture-entry" variable nil nil [22650 22680])
            ("org-capture-string" function
               (:user-visible-flag t
                :arguments ("string" "keys"))
                nil [22697 22951])
            ("org-capture-templates-contexts" variable nil nil [22953 24747])
            ("org-capture-use-agenda-date" variable nil nil [24749 25005])
            ("org-capture" function
               (:user-visible-flag t
                :arguments ("goto" "keys"))
                nil [25022 29236])
            ("org-capture-get-template" function nil nil [29238 29955])
            ("org-capture-finalize" function
               (:user-visible-flag t
                :arguments ("stay-with-capture"))
                nil [29957 35061])
            ("org-capture-refile" function (:user-visible-flag t) nil [35063 36616])
            ("org-capture-kill" function (:user-visible-flag t) nil [36618 36926])
            ("org-capture-goto-last-stored" function (:user-visible-flag t) nil [36928 37229])
            ("org-capture-put-target-region-and-position" function nil nil [37282 37634])
            ("org-time-was-given" variable nil nil [37636 37663])
            ("org-capture-set-target-location" function (:arguments ("target")) nil [37695 43118])
            ("org-capture-expand-file" function (:arguments ("file")) nil [43120 43859])
            ("org-capture-target-buffer" function (:arguments ("file")) nil [43861 44175])
            ("org-capture-place-template" function (:arguments ("inhibit-wconf-store")) nil [44177 45106])
            ("org-capture-place-entry" function nil nil [45108 46463])
            ("org-capture-place-item" function nil nil [46465 48529])
            ("org-capture-place-table-line" function nil nil [48531 51561])
            ("org-capture-place-plain-text" function nil nil [51563 52884])
            ("org-capture-mark-kill-region" function (:arguments ("beg" "end")) nil [52886 53138])
            ("org-capture-position-for-last-stored" function (:arguments ("where")) nil [53140 53643])
            ("org-capture-store-last-position" function nil nil [53645 54400])
            ("org-capture-narrow" function (:arguments ("beg" "end")) nil [54402 54583])
            ("org-capture-empty-lines-before" function (:arguments ("n")) nil [54585 54992])
            ("org-capture-empty-lines-after" function (:arguments ("n")) nil [54994 55426])
            ("org-clock-marker" variable nil nil [55428 55453])
            ("org-capture-insert-template-here" function nil nil [55475 56679])
            ("org-capture-set-plist" function (:arguments ("entry")) nil [56681 57466])
            ("org-capture-goto-target" function
               (:user-visible-flag t
                :arguments ("template-key"))
                nil [57468 57919])
            ("org-capture-get-indirect-buffer" function (:arguments ("buffer" "prefix")) nil [57921 58552])
            ("org-capture-verify-tree" function (:arguments ("tree")) nil [58554 58733])
            ("org-mks" function (:arguments ("table" "title" "prompt" "specials")) nil [58735 62249])
            ("org-capture-select-template" function (:arguments ("keys")) nil [62273 62984])
            ("org-capture--clipboards" variable nil nil [62986 63058])
            ("org-capture-fill-template" function (:arguments ("template" "initial" "annotation")) nil [63060 72393])
            ("org-capture-escaped-%" function nil nil [72395 72695])
            ("org-capture-expand-embedded-elisp" function (:arguments ("mark")) nil [72697 73909])
            ("org-capture--expand-keyword-in-embedded-elisp" function (:arguments ("attr")) nil [73911 74436])
            ("org-capture-inside-embedded-elisp-p" function nil nil [74438 74675])
            ("org-capture-import-remember-templates" function (:user-visible-flag t) nil [74692 76174])
            ("org-capture" package nil nil [76177 76199]))          
      :file "org-capture.el"
      :pointmax 76230
      :fsize 76229
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-release" function nil nil [84 247])
            ("org-git-version" function nil nil [263 453])
            ("org-version" package nil nil [456 478]))          
      :file "org-version.el"
      :pointmax 603
      :fsize 602
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1450 1467])
            ("org" include nil nil [1468 1482])
            ("declare-function" code nil nil [1484 1540])
            ("declare-function" code nil nil [1541 1604])
            ("declare-function" code nil nil [1605 1675])
            ("declare-function" code nil nil [1676 1742])
            ("declare-function" code nil nil [1743 1832])
            ("declare-function" code nil nil [1833 1961])
            ("declare-function" code nil nil [1962 2060])
            ("declare-function" code nil nil [2061 2133])
            ("declare-function" code nil nil [2134 2193])
            ("declare-function" code nil nil [2195 2259])
            ("declare-function" code nil nil [2260 2332])
            ("declare-function" code nil nil [2333 2415])
            ("declare-function" code nil nil [2416 2478])
            ("declare-function" code nil nil [2479 2532])
            ("declare-function" code nil nil [2533 2626])
            ("declare-function" code nil nil [2627 2684])
            ("declare-function" code nil nil [2685 2754])
            ("declare-function" code nil nil [2755 2829])
            ("declare-function" code nil nil [2831 2903])
            ("constants-unit-system" variable nil nil [2905 2935])
            ("org-element-use-cache" variable nil nil [2936 2966])
            ("org-export-filters-alist" variable nil nil [2967 3000])
            ("org-table-follow-field-mode" variable nil nil [3001 3037])
            ("orgtbl-mode" variable nil nil [3038 3058])
            ("orgtbl-mode-menu" variable nil nil [3075 3100])
            ("sort-fold-case" variable nil nil [3144 3167])
            ("orgtbl-after-send-table-hook" variable nil nil [3169 3438])
            ("org-table-TBLFM-begin-regexp" variable (:default-value "^[ 	]*|.*
[ 	]*#\\+TBLFM: ") nil [3440 3509])
            ("orgtbl-optimized" variable (:default-value t) nil [3511 4034])
            ("orgtbl-radio-table-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGTBL %n
% END RECEIVE ORGTBL %n
\\begin{comment}
#+ORGTBL: SEND %n orgtbl-to-latex :splice nil :skip 0
| | |
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGTBL %n
@c END RECEIVE ORGTBL %n
@ignore
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGTBL %n -->
<!-- END RECEIVE ORGTBL %n -->
<!--
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
-->
") (org-mode "#+ BEGIN RECEIVE ORGTBL %n
#+ END RECEIVE ORGTBL %n

#+ORGTBL: SEND %n orgtbl-to-orgtbl :splice nil :skip 0
| | |
")))) nil [4036 5821])
            ("org-table-settings" customgroup (:user-visible-flag t) nil [5823 5941])
            ("org-table-default-size" variable (:default-value "5x2") nil [5943 6091])
            ("org-table-number-regexp" variable (:default-value "^\\([<>]?[-+^.0-9]*[0-9][-+^.0-9eEdDx()%:]*\\|[<>]?[-+]?0[xX][0-9a-fA-F.]+\\|[<>]?[-+]?[0-9]+#[0-9a-zA-Z.]+\\|nan\\|[-+u]?inf\\)$") nil [6093 7703])
            ("org-table-number-fraction" variable (:default-value 0.5) nil [7705 8034])
            ("org-table-editing" customgroup (:user-visible-flag t) nil [8036 8166])
            ("org-table-automatic-realign" variable (:default-value t) nil [8168 8425])
            ("org-table-auto-blank-field" variable (:default-value t) nil [8427 8685])
            ("org-table-exit-follow-field-mode-when-leaving-table" variable (:default-value t) nil [8687 9150])
            ("org-table-fix-formulas-confirm" variable nil nil [9152 9445])
            ("put" code nil nil [9446 9564])
            ("org-table-tab-jumps-over-hlines" variable (:default-value t) nil [9566 9957])
            ("org-table-calculation" customgroup (:user-visible-flag t) nil [9959 10089])
            ("org-table-use-standard-references" variable (:default-value (quote from)) nil [10091 10603])
            ("org-table-copy-increment" variable (:default-value t) nil [10605 11018])
            ("org-calc-default-modes" variable (:default-value (quote (calc-internal-prec 12 calc-float-format (float 8) calc-angle-mode deg calc-prefer-frac nil calc-symbolic-mode nil calc-date-format (YYYY "-" MM "-" DD " " Www (" " hh ":" mm)) calc-display-working-message t))) nil [11020 11663])
            ("org-table-duration-custom-format" variable (:default-value (quote hours)) nil [11665 12364])
            ("org-table-duration-hour-zero-padding" variable (:default-value t) nil [12366 12656])
            ("org-table-formula-field-format" variable (:default-value "%s") nil [12658 12999])
            ("org-table-formula-evaluate-inline" variable (:default-value t) nil [13001 13536])
            ("org-table-formula-use-constants" variable (:default-value t) nil [13538 13879])
            ("org-table-formula-constants" variable nil nil [13881 14526])
            ("org-table-allow-automatic-line-recalculation" variable (:default-value t) nil [14528 14828])
            ("org-table-relative-ref-may-cross-hline" variable (:default-value t) nil [14830 15595])
            ("org-table-formula-create-columns" variable nil nil [15597 16330])
            ("org-table-import-export" customgroup (:user-visible-flag t) nil [16332 16483])
            ("org-table-export-default-format" variable (:default-value "orgtbl-to-tsv") nil [16485 16852])
            ("org-table-convert-region-max-lines" variable (:default-value 999) nil [16854 17175])
            ("org-table-auto-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *# *\\(|\\|$\\)")
                nil [17177 17311])
            ("org-table-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[#*] *\\(|\\|$\\)")
                nil [17313 17435])
            ("org-table-calculate-mark-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[!$^_#*] *\\(|\\|$\\)")
                nil [17437 17564])
            ("org-table-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^| 	]")
                nil [17566 17668])
            ("org-table-last-highlighted-reference" variable nil nil [17670 17719])
            ("org-table-formula-history" variable nil nil [17721 17759])
            ("org-table-column-names" variable nil nil [17761 17907])
            ("org-table-column-name-regexp" variable nil nil [17909 18063])
            ("org-table-local-parameters" variable nil nil [18065 18218])
            ("org-table-named-field-locations" variable nil nil [18220 18578])
            ("org-table-current-line-types" variable nil nil [18580 18714])
            ("org-table-current-begin-pos" variable nil nil [18716 18858])
            ("org-table-current-ncol" variable nil nil [18860 18990])
            ("org-table-dlines" variable nil nil [18992 19194])
            ("org-table-hlines" variable nil nil [19196 19394])
            ("org-table-range-regexp" variable
               (:constant-flag t
                :default-value "@\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\(\\.\\.@?\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\)?")
                nil [19396 19689])
            ("org-table-range-regexp2" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)" "\\.\\." "\\(" "@?[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)"))
                nil [19691 19980])
            ("org-table-translate-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\)"))
                nil [19982 20166])
            ("org-table-save-field" function (:arguments ("body")) nil [20168 20600])
            ("org-table-create-with-table.el" function (:user-visible-flag t) nil [20617 21109])
            ("org-table-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21126 21676])
            ("org-table-create" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [21693 22705])
            ("org-table-convert-region" function
               (:user-visible-flag t
                :arguments ("beg0" "end0" "separator"))
                nil [22722 25472])
            ("org-table-import" function
               (:user-visible-flag t
                :arguments ("file" "separator"))
                nil [25489 26412])
            ("org-table-export" function
               (:user-visible-flag t
                :arguments ("file" "format"))
                nil [26430 29323])
            ("org-table-aligned-begin-marker" variable (:default-value (make-marker)) nil [29325 29506])
            ("org-table-aligned-end-marker" variable (:default-value (make-marker)) nil [29507 29680])
            ("org-table-last-alignment" variable nil nil [29681 29861])
            ("org-table-last-column-widths" variable nil nil [29862 30022])
            ("defvar-local" code nil nil [30023 30160])
            ("defvar-local" code nil nil [30161 30262])
            ("org-last-recalc-line" variable nil nil [30264 30297])
            ("org-table-do-narrow" variable (:default-value t) nil [30298 30328])
            ("org-narrow-column-arrow" variable
               (:constant-flag t
                :default-value "=>")
                nil [30353 30448])
            ("org-table-align" function (:user-visible-flag t) nil [30465 38676])
            ("org-table-begin" function (:arguments ("table-type")) nil [38693 39151])
            ("org-table-end" function (:arguments ("table-type")) nil [39168 40026])
            ("org-table-justify-field-maybe" function (:arguments ("new")) nil [40043 41627])
            ("org-table-next-field" function (:user-visible-flag t) nil [41644 42545])
            ("org-table-previous-field" function (:user-visible-flag t) nil [42562 43287])
            ("org-table-beginning-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [43289 43905])
            ("org-table-end-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [43907 44493])
            ("org-table-next-row" function (:user-visible-flag t) nil [44510 45141])
            ("org-table-copy-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [45158 48415])
            ("org-table-check-inside-data-field" function (:arguments ("noerror")) nil [48417 48879])
            ("org-table-clip" variable nil nil [48881 48941])
            ("org-table-get" function (:arguments ("line" "column")) nil [48943 49441])
            ("org-table-put" function (:arguments ("line" "column" "value" "align")) nil [49443 49848])
            ("org-table-current-line" function nil nil [49850 50172])
            ("org-table-goto-line" function (:arguments ("N")) nil [50174 50496])
            ("org-table-blank-field" function (:user-visible-flag t) nil [50513 51102])
            ("org-table-get-field" function (:arguments ("n" "replace")) nil [51104 51769])
            ("org-table-field-info" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [51786 53476])
            ("org-table-current-column" function (:user-visible-flag t) nil [53478 53719])
            ("org-table-current-dline" function nil nil [53721 54054])
            ("org-table-goto-column" function
               (:user-visible-flag t
                :arguments ("n" "on-delim" "force"))
                nil [54071 54851])
            ("org-table-insert-column" function (:user-visible-flag t) nil [54868 55615])
            ("org-table-find-dataline" function nil nil [55617 56203])
            ("org-table-line-to-dline" function (:arguments ("line" "above")) nil [56205 56985])
            ("org-table-delete-column" function (:user-visible-flag t) nil [57002 57963])
            ("org-table-move-column-right" function (:user-visible-flag t) nil [57980 58094])
            ("org-table-move-column-left" function (:user-visible-flag t) nil [58110 58224])
            ("org-table-move-column" function
               (:user-visible-flag t
                :arguments ("left"))
                nil [58241 59765])
            ("org-table-move-row-down" function (:user-visible-flag t) nil [59782 59884])
            ("org-table-move-row-up" function (:user-visible-flag t) nil [59900 59998])
            ("org-table-move-row" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [60015 61403])
            ("org-table-insert-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61420 62538])
            ("org-table-insert-hline" function
               (:user-visible-flag t
                :arguments ("above"))
                nil [62555 63505])
            ("org-table-hline-and-move" function
               (:user-visible-flag t
                :arguments ("same-column"))
                nil [63522 63975])
            ("org-table-clean-line" function (:arguments ("s")) nil [63977 64505])
            ("org-table-kill-row" function (:user-visible-flag t) nil [64522 65219])
            ("org-table-sort-lines" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "interactive?"))
                nil [65236 69857])
            ("org-table-cut-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [69874 70212])
            ("org-table-copy-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "cut"))
                nil [70229 71439])
            ("org-table-paste-rectangle" function (:user-visible-flag t) nil [71456 72443])
            ("org-table-convert" function (:user-visible-flag t) nil [72460 74223])
            ("org-table-transpose-table-at-point" function (:user-visible-flag t) nil [74225 75215])
            ("org-table-wrap-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [75232 77813])
            ("org-field-marker" variable nil nil [77815 77844])
            ("org-table-edit-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77861 79994])
            ("org-table-finish-edit-field" function nil nil [79996 80803])
            ("define-minor-mode" code nil nil [80805 81606])
            ("org-table-follow-fields-with-editor" function nil nil [81608 82010])
            ("org-timecnt" variable nil nil [82012 82032])
            ("org-table-sum" function
               (:user-visible-flag t
                :arguments ("beg" "end" "nlast"))
                nil [82080 84211])
            ("org-table-get-number-for-summing" function (:arguments ("s")) nil [84213 84979])
            ("org-table-current-field-formula" function (:arguments ("key" "noerror")) nil [84981 85982])
            ("org-table-get-formula" function (:arguments ("equation" "named")) nil [85984 87893])
            ("org-table-store-formulas" function (:arguments ("alist" "location")) nil [87895 88716])
            ("org-table-formula-make-cmp-string" function (:arguments ("a")) nil [88718 89443])
            ("org-table-formula-less-p" function (:arguments ("a" "b")) nil [89445 89662])
            ("org-table-get-stored-formulas" function (:arguments ("noerror" "location")) nil [89679 91169])
            ("org-table-fix-formulas" function (:arguments ("key" "replace" "limit" "delta" "remove")) nil [91171 92624])
            ("org-table-maybe-eval-formula" function nil nil [92641 93265])
            ("org-recalc-commands" variable nil nil [93267 93401])
            ("org-recalc-marks" variable (:default-value (quote ((" " . "Unmarked: no special line, no automatic recalculation") ("#" . "Automatically recalculate this line upon TAB, RET, and C-c C-c in the line") ("*" . "Recalculate only when entire table is recalculated with `C-u C-c *'") ("!" . "Column name definition line.  Reference in formula as $name.") ("$" . "Parameter definition line name=value.  Reference in formula as $name.") ("_" . "Names for values in row below this one.") ("^" . "Names for values in row above this one.")))) nil [93403 93935])
            ("org-table-rotate-recalc-marks" function
               (:user-visible-flag t
                :arguments ("newchar"))
                nil [93952 96608])
            ("org-table-analyze" function nil nil [96625 100757])
            ("org-table-goto-field" function (:arguments ("ref" "create-column-p")) nil [100759 101982])
            ("org-table-maybe-recalculate-line" function (:user-visible-flag t) nil [101999 102441])
            ("org-tbl-calc-modes" variable nil nil [102443 102470])
            ("org-set-calc-mode" function (:arguments ("var" "value")) nil [102520 102952])
            ("org-table-eval-formula" function
               (:user-visible-flag t
                :arguments ("arg" "equation" "suppress-align" "suppress-const" "suppress-store" "suppress-analysis"))
                nil [102969 113941])
            ("org-table-put-field-property" function (:arguments ("prop" "value")) nil [113943 114149])
            ("org-table-get-range" function (:arguments ("desc" "tbeg" "col" "highlight" "corners-only")) nil [114151 117228])
            ("org-table--descriptor-line" function (:arguments ("desc" "cline")) nil [117230 118568])
            ("org-table--row-type" function (:arguments ("type" "n" "i" "backwards" "relative" "desc")) nil [118570 119768])
            ("org-table--error-on-old-row-references" function (:arguments ("s")) nil [119770 119944])
            ("org-table-make-reference" function (:arguments ("elements" "keep-empty" "numbers" "lispp")) nil [119946 121807])
            ("org-table-message-once-per-second" function (:arguments ("t1" "args")) nil [121809 122248])
            ("org-table-recalculate" function
               (:user-visible-flag t
                :arguments ("all" "noalign"))
                nil [122265 128825])
            ("org-table-iterate" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [128842 129610])
            ("org-table-recalculate-buffer-tables" function (:user-visible-flag t) nil [129627 130022])
            ("org-table-iterate-buffer-tables" function (:user-visible-flag t) nil [130039 130742])
            ("org-table-calc-current-TBLFM" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [130744 131561])
            ("org-table-TBLFM-begin" function nil nil [131563 131869])
            ("org-table-expand-lhs-ranges" function (:arguments ("equations")) nil [131871 133233])
            ("org-table-formula-handle-first/last-rc" function (:arguments ("s")) nil [133235 134500])
            ("org-table-formula-substitute-names" function (:arguments ("f")) nil [134502 135556])
            ("org-table-get-constant" function (:arguments ("const")) nil [135558 136059])
            ("org-table-fedit-map" variable (:default-value (let ((map (make-sparse-keymap))) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "'" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-abort)) (org-defkey map "?" (quote org-table-show-reference)) (org-defkey map [(meta shift up)] (quote org-table-fedit-line-up)) (org-defkey map [(meta shift down)] (quote org-table-fedit-line-down)) (org-defkey map [(shift up)] (quote org-table-fedit-ref-up)) (org-defkey map [(shift down)] (quote org-table-fedit-ref-down)) (org-defkey map [(shift left)] (quote org-table-fedit-ref-left)) (org-defkey map [(shift right)] (quote org-table-fedit-ref-right)) (org-defkey map [(meta up)] (quote org-table-fedit-scroll-down)) (org-defkey map [(meta down)] (quote org-table-fedit-scroll)) (org-defkey map [(meta tab)] (quote lisp-complete-symbol)) (org-defkey map "\211" (quote lisp-complete-symbol)) (org-defkey map [(tab)] (quote org-table-fedit-lisp-indent)) (org-defkey map "	" (quote org-table-fedit-lisp-indent)) (org-defkey map "" (quote org-table-fedit-toggle-ref-type)) (org-defkey map "}" (quote org-table-fedit-toggle-coordinates)) map)) nil [136061 137385])
            ("easy-menu-define" code nil nil [137387 138550])
            ("org-pos" variable nil nil [138552 138568])
            ("org-table--fedit-source" variable nil nil [138569 138650])
            ("org-table-edit-formulas" function (:user-visible-flag t) nil [138667 141189])
            ("org-table-fedit-post-command" function nil nil [141191 141413])
            ("org-table-formula-to-user" function (:arguments ("s")) nil [141415 141605])
            ("org-table-formula-from-user" function (:arguments ("s")) nil [141607 141792])
            ("org-table-convert-refs-to-rc" function (:arguments ("s")) nil [141794 142952])
            ("org-table-convert-refs-to-an" function (:arguments ("s")) nil [142954 143592])
            ("org-letters-to-number" function (:arguments ("s")) nil [143594 143874])
            ("org-number-to-letters" function (:arguments ("n")) nil [143876 144132])
            ("org-table-time-string-to-seconds" function (:arguments ("s")) nil [144134 145259])
            ("org-table-time-seconds-to-string" function (:arguments ("secs" "output-format")) nil [145261 146135])
            ("org-table-fedit-convert-buffer" function (:arguments ("function")) nil [146137 146560])
            ("org-table-fedit-toggle-ref-type" function (:user-visible-flag t) nil [146562 146986])
            ("org-table-fedit-ref-up" function (:user-visible-flag t) nil [146988 147128])
            ("org-table-fedit-ref-down" function (:user-visible-flag t) nil [147129 147275])
            ("org-table-fedit-ref-left" function (:user-visible-flag t) nil [147276 147425])
            ("org-table-fedit-ref-right" function (:user-visible-flag t) nil [147426 147578])
            ("org-table-fedit-shift-reference" function (:arguments ("dir")) nil [147580 148295])
            ("org-rematch-and-replace" function (:arguments ("n" "decr" "hline")) nil [148297 148675])
            ("org-table-shift-refpart" function (:arguments ("ref" "decr" "hline")) nil [148677 149787])
            ("org-table-fedit-toggle-coordinates" function (:user-visible-flag t) nil [149789 150085])
            ("org-table-fedit-finish" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [150087 151373])
            ("org-table-fedit-abort" function (:user-visible-flag t) nil [151375 151775])
            ("org-table-fedit-lisp-indent" function (:user-visible-flag t) nil [151777 153078])
            ("org-show-positions" variable nil nil [153080 153111])
            ("org-table-show-reference" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [153113 158224])
            ("org-table-force-dataline" function nil nil [158226 158781])
            ("org-table-fedit-line-up" function (:user-visible-flag t) nil [158783 158934])
            ("org-table-fedit-line-down" function (:user-visible-flag t) nil [158936 159087])
            ("org-table-fedit-move" function (:arguments ("command")) nil [159089 159665])
            ("org-table-fedit-scroll" function (:arguments ("N")) nil [159667 159812])
            ("org-table-fedit-scroll-down" function (:arguments ("N")) nil [159814 159906])
            ("org-table-rectangle-overlays" variable nil nil [159908 159949])
            ("org-table-add-rectangle-overlay" function (:arguments ("beg" "end" "face")) nil [159951 160177])
            ("org-table-highlight-rectangle" function (:arguments ("beg" "end" "face")) nil [160179 161570])
            ("org-table-remove-rectangle-highlight" function (:arguments ("_ignore")) nil [161572 161889])
            ("defvar-local" code nil nil [161891 162011])
            ("org-table-overlay-coordinates" function (:user-visible-flag t) nil [162013 163185])
            ("org-table-toggle-coordinate-overlays" function (:user-visible-flag t) nil [163202 163731])
            ("org-table-toggle-formula-debugger" function (:user-visible-flag t) nil [163748 164009])
            ("orgtbl-mode-map" variable (:default-value (make-keymap)) nil [165499 165567])
            ("org-old-auto-fill-inhibit-regexp" variable nil nil [165569 165656])
            ("orgtbl-line-start-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\(|\\|#\\+\\(tblfm\\|orgtbl\\|tblname\\):\\)")
                nil [165658 165792])
            ("orgtbl-extra-font-lock-keywords" variable
               (:constant-flag t
                :default-value (list (list (concat "^" orgtbl-line-start-regexp ".*") 0 (quote (quote org-table)) (quote prepend))))
                nil [165794 166005])
            ("put" code nil nil [166038 166068])
            ("put" code nil nil [166069 166114])
            ("define-minor-mode" code nil nil [166131 167963])
            ("org-table-cleanup-narrow-column-properties" function nil nil [167965 168568])
            ("orgtbl-make-binding" function (:arguments ("fun" "n" "keys")) nil [168570 169403])
            ("orgtbl-error" function (:user-visible-flag t) nil [169405 169561])
            ("orgtbl-setup" function nil nil [169563 176262])
            ("orgtbl-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [176264 177325])
            ("orgtbl-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [177327 177746])
            ("orgtbl-tab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177748 177945])
            ("orgtbl-ret" function (:user-visible-flag t) nil [177947 178129])
            ("orgtbl-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [178131 179822])
            ("orgtbl-exp-regexp" variable (:default-value "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$") nil [179839 179980])
            ("orgtbl-gather-send-defs" function nil nil [179982 180612])
            ("orgtbl-send-replace-tbl" function (:arguments ("name" "text")) nil [180614 181372])
            ("org-table-to-lisp" function (:arguments ("txt")) nil [181389 182045])
            ("orgtbl-send-table" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [182047 183211])
            ("org-remove-by-index" function (:arguments ("list" "indices" "i0")) nil [183213 183590])
            ("orgtbl-toggle-comment" function (:user-visible-flag t) nil [183592 184328])
            ("orgtbl-insert-radio-table" function (:user-visible-flag t) nil [184330 184847])
            ("orgtbl-to-generic" function (:arguments ("table" "params")) nil [184864 191686])
            ("org-table--generic-apply" function (:arguments ("value" "name" "with-cons" "args")) nil [191688 192278])
            ("org-table--to-generic-table" function (:arguments ("params")) nil [192280 192925])
            ("org-table--to-generic-row" function (:arguments ("params")) nil [192927 196074])
            ("org-table--to-generic-cell" function (:arguments ("params")) nil [196076 198809])
            ("orgtbl-to-tsv" function (:arguments ("table" "params")) nil [198826 198992])
            ("orgtbl-to-csv" function (:arguments ("table" "params")) nil [199009 199276])
            ("orgtbl-to-latex" function (:arguments ("table" "params")) nil [199293 200321])
            ("orgtbl-to-html" function (:arguments ("table" "params")) nil [200338 201340])
            ("orgtbl-to-texinfo" function (:arguments ("table" "params")) nil [201357 202361])
            ("orgtbl-to-orgtbl" function (:arguments ("table" "params")) nil [202378 203022])
            ("orgtbl-to-table.el" function (:arguments ("table" "params")) nil [203024 203586])
            ("orgtbl-to-unicode" function (:arguments ("table" "params")) nil [203588 204585])
            ("orgtbl-ascii-draw" function (:arguments ("value" "min" "max" "width" "characters")) nil [204818 205938])
            ("orgtbl-ascii-plot" function
               (:user-visible-flag t
                :arguments ("ask"))
                nil [205955 207381])
            ("orgtbl-uc-draw-grid" function (:arguments ("value" "min" "max" "width")) nil [207853 208310])
            ("orgtbl-uc-draw-cont" function (:arguments ("value" "min" "max" "width")) nil [208312 208669])
            ("org-table-get-remote-range" function (:arguments ("name-or-id" "form")) nil [208671 211027])
            ("org-table-remote-reference-indirection" function (:arguments ("form")) nil [211029 211855])
            ("org-define-lookup-function" function (:arguments ("mode")) nil [211857 212994])
            ("org-define-lookup-function" code nil nil [212996 213030])
            ("org-define-lookup-function" code nil nil [213031 213064])
            ("org-define-lookup-function" code nil nil [213065 213097])
            ("org-table" package nil nil [213099 213119]))          
      :file "org-table.el"
      :pointmax 213223
      :fsize 213222
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1196 1214])
            ("org-babel-key-prefix" variable (:default-value "") nil [1216 1470])
            ("org-babel-map" variable (:default-value (make-sparse-keymap)) nil [1472 1563])
            ("org-babel-describe-bindings" function (:user-visible-flag t) nil [1580 1737])
            ("org-babel-key-bindings" variable (:default-value (quote (("p" . org-babel-previous-src-block) ("" . org-babel-previous-src-block) ("n" . org-babel-next-src-block) ("" . org-babel-next-src-block) ("e" . org-babel-execute-maybe) ("" . org-babel-execute-maybe) ("o" . org-babel-open-src-block-result) ("" . org-babel-open-src-block-result) ("" . org-babel-expand-src-block) ("v" . org-babel-expand-src-block) ("u" . org-babel-goto-src-block-head) ("" . org-babel-goto-src-block-head) ("g" . org-babel-goto-named-src-block) ("r" . org-babel-goto-named-result) ("" . org-babel-goto-named-result) ("" . org-babel-execute-buffer) ("b" . org-babel-execute-buffer) ("" . org-babel-execute-subtree) ("s" . org-babel-execute-subtree) ("" . org-babel-demarcate-block) ("d" . org-babel-demarcate-block) ("" . org-babel-tangle) ("t" . org-babel-tangle) ("" . org-babel-tangle-file) ("f" . org-babel-tangle-file) ("" . org-babel-check-src-block) ("c" . org-babel-check-src-block) ("
" . org-babel-insert-header-arg) ("j" . org-babel-insert-header-arg) ("" . org-babel-load-in-session) ("l" . org-babel-load-in-session) ("	" . org-babel-lob-ingest) ("i" . org-babel-lob-ingest) ("	" . org-babel-view-src-block-info) ("I" . org-babel-view-src-block-info) ("" . org-babel-switch-to-session) ("z" . org-babel-switch-to-session-with-code) ("" . org-babel-sha1-hash) ("a" . org-babel-sha1-hash) ("h" . org-babel-describe-bindings) ("" . org-babel-do-key-sequence-in-edit-buffer) ("x" . org-babel-do-key-sequence-in-edit-buffer) ("k" . org-babel-remove-result-one-or-many) ("\210" . org-babel-mark-block)))) nil [1739 3844])
            ("ob-keys" package nil nil [3846 3864]))          
      :file "ob-keys.el"
      :pointmax 3966
      :fsize 3965
      :lastmodtime '(23525 29586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1192 1210])
            ("org-compat" include nil nil [1211 1232])
            ("comint" include nil nil [1233 1250])
            ("org-babel-comint-buffer-livep" function (:arguments ("buffer")) nil [1252 1484])
            ("org-babel-comint-in-buffer" function (:arguments ("buffer" "body")) nil [1486 2021])
            ("def-edebug-spec" code nil nil [2022 2078])
            ("org-babel-comint-with-output" function (:arguments ("meta" "body")) nil [2080 4304])
            ("def-edebug-spec" code nil nil [4305 4363])
            ("org-babel-comint-input-command" function (:arguments ("buffer" "cmd")) nil [4365 4654])
            ("org-babel-comint-wait-for-output" function (:arguments ("buffer")) nil [4656 5259])
            ("org-babel-comint-eval-invisibly-and-wait-for-file" function (:arguments ("buffer" "file" "string" "period")) nil [5261 5859])
            ("ob-comint" package nil nil [5861 5881]))          
      :file "ob-comint.el"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(23525 29585 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1563 1580])
            ("format-spec" include nil nil [1581 1603])
            ("ox" include nil nil [1604 1617])
            ("org-publish-cache" variable nil nil [1710 1852])
            ("org-publish-after-publishing-hook" variable nil nil [1854 2072])
            ("org-export-publish" customgroup (:user-visible-flag t) nil [2074 2195])
            ("org-publish-project-alist" variable nil nil [2197 10673])
            ("org-publish-use-timestamps-flag" variable (:default-value t) nil [10675 10903])
            ("org-publish-timestamp-directory" variable (:default-value (convert-standard-filename "~/.org-timestamps/")) nil [10905 11110])
            ("org-publish-list-skipped-files" variable (:default-value t) nil [11112 11262])
            ("org-publish-sitemap-sort-files" variable (:default-value (quote alphabetically)) nil [11264 11852])
            ("org-publish-sitemap-sort-folders" variable (:default-value (quote ignore)) nil [11854 12695])
            ("org-publish-sitemap-sort-ignore-case" variable nil nil [12697 12960])
            ("org-publish-timestamp-filename" function (:arguments ("filename" "pub-dir" "pub-func")) nil [12998 13295])
            ("org-publish-needed-p" function (:arguments ("filename" "pub-dir" "pub-func" "_true-pub-dir" "base-dir")) nil [13297 14140])
            ("org-publish-update-timestamp" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [14142 14481])
            ("org-publish-remove-all-timestamps" function nil nil [14483 14781])
            ("org-publish-property" function (:arguments ("property" "project" "default")) nil [14854 15176])
            ("org-publish--expand-file-name" function (:arguments ("file" "project")) nil [15178 15479])
            ("org-publish-expand-projects" function (:arguments ("projects-alist")) nil [15481 16034])
            ("org-publish-get-base-files" function (:arguments ("project")) nil [16036 18034])
            ("org-publish-get-project-from-filename" function (:arguments ("filename" "up")) nil [18036 19968])
            ("org-publish-org-to" function (:arguments ("backend" "filename" "extension" "plist" "pub-dir")) nil [20022 21649])
            ("org-publish-attachment" function (:arguments ("_plist" "filename" "pub-dir")) nil [21651 22292])
            ("org-publish-file" function (:arguments ("filename" "project" "no-cache")) nil [22334 24180])
            ("org-publish-projects" function (:arguments ("projects")) nil [24182 25846])
            ("org-publish--sitemap-files-to-lisp" function (:arguments ("files" "project" "style" "format-entry")) nil [25875 27553])
            ("org-publish-sitemap" function (:arguments ("project" "sitemap-filename")) nil [27555 30745])
            ("org-publish-find-property" function (:arguments ("file" "property" "project" "backend")) nil [30747 31871])
            ("org-publish-find-title" function (:arguments ("file" "project")) nil [31873 32501])
            ("org-publish-find-date" function (:arguments ("file" "project")) nil [32503 33457])
            ("org-publish-sitemap-default-entry" function (:arguments ("entry" "style" "project")) nil [33459 33902])
            ("org-publish-sitemap-default" function (:arguments ("title" "list")) nil [33904 34219])
            ("defalias" code nil nil [34276 34320])
            ("org-publish" function
               (:user-visible-flag t
                :arguments ("project" "force" "async"))
                nil [34337 35617])
            ("org-publish-all" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [35634 36450])
            ("org-publish-current-file" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [36468 37129])
            ("org-publish-current-project" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [37146 37644])
            ("org-publish-collect-index" function (:arguments ("output" "_backend" "info")) nil [37671 39247])
            ("org-publish-index-generate-theindex" function (:arguments ("project" "directory")) nil [39249 41958])
            ("org-publish--store-crossrefs" function (:arguments ("output" "_backend" "info")) nil [42132 42958])
            ("org-publish-resolve-external-link" function (:arguments ("search" "file")) nil [42960 44464])
            ("org-publish-file-relative-name" function (:arguments ("filename" "info")) nil [44466 44900])
            ("org-publish-write-cache-file" function (:arguments ("free-cache")) nil [44928 45708])
            ("org-publish-initialize-cache" function (:arguments ("project-name")) nil [45710 46877])
            ("org-publish-reset-cache" function nil nil [46879 47111])
            ("org-publish-cache-file-needs-publishing" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [47113 48844])
            ("org-publish-cache-set-file-property" function (:arguments ("filename" "property" "value" "project-name")) nil [48846 49419])
            ("org-publish-cache-get-file-property" function (:arguments ("filename" "property" "default" "no-create" "project-name")) nil [49421 50116])
            ("org-publish-cache-get" function (:arguments ("key")) nil [50118 50433])
            ("org-publish-cache-set" function (:arguments ("key" "value")) nil [50435 50742])
            ("org-publish-cache-ctime-of-src" function (:arguments ("file")) nil [50744 51072])
            ("ox-publish" package nil nil [51075 51096]))          
      :file "ox-publish.el"
      :pointmax 51201
      :fsize 51200
      :lastmodtime '(23525 29594 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [954 971])
            ("ob-eval" include nil nil [972 990])
            ("org-macs" include nil nil [991 1010])
            ("org-compat" include nil nil [1011 1032])
            ("org-babel-exeext" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (windows-nt cygwin))) ".exe" nil))
                nil [1034 1129])
            ("org-babel-library-of-babel" variable nil nil [1131 1166])
            ("org-edit-src-content-indentation" variable nil nil [1167 1208])
            ("org-src-lang-modes" variable nil nil [1209 1236])
            ("org-src-preserve-indentation" variable nil nil [1237 1274])
            ("declare-function" code nil nil [1276 1322])
            ("declare-function" code nil nil [1323 1385])
            ("declare-function" code nil nil [1386 1444])
            ("declare-function" code nil nil [1445 1508])
            ("declare-function" code nil nil [1509 1567])
            ("declare-function" code nil nil [1568 1628])
            ("declare-function" code nil nil [1629 1684])
            ("declare-function" code nil nil [1685 1750])
            ("declare-function" code nil nil [1751 1829])
            ("declare-function" code nil nil [1830 1887])
            ("declare-function" code nil nil [1888 1933])
            ("declare-function" code nil nil [1934 1984])
            ("declare-function" code nil nil [1985 2049])
            ("declare-function" code nil nil [2050 2130])
            ("declare-function" code nil nil [2131 2181])
            ("declare-function" code nil nil [2182 2238])
            ("declare-function" code nil nil [2239 2311])
            ("declare-function" code nil nil [2312 2377])
            ("declare-function" code nil nil [2378 2450])
            ("declare-function" code nil nil [2451 2510])
            ("declare-function" code nil nil [2511 2594])
            ("declare-function" code nil nil [2595 2659])
            ("declare-function" code nil nil [2660 2721])
            ("declare-function" code nil nil [2722 2783])
            ("declare-function" code nil nil [2784 2857])
            ("declare-function" code nil nil [2858 2901])
            ("declare-function" code nil nil [2902 2973])
            ("declare-function" code nil nil [2974 3033])
            ("declare-function" code nil nil [3034 3082])
            ("declare-function" code nil nil [3083 3146])
            ("declare-function" code nil nil [3147 3212])
            ("declare-function" code nil nil [3213 3283])
            ("declare-function" code nil nil [3284 3355])
            ("declare-function" code nil nil [3356 3422])
            ("declare-function" code nil nil [3423 3472])
            ("declare-function" code nil nil [3473 3550])
            ("declare-function" code nil nil [3551 3631])
            ("declare-function" code nil nil [3632 3705])
            ("declare-function" code nil nil [3706 3778])
            ("declare-function" code nil nil [3779 3845])
            ("declare-function" code nil nil [3846 3898])
            ("declare-function" code nil nil [3899 3959])
            ("declare-function" code nil nil [3960 4017])
            ("declare-function" code nil nil [4018 4089])
            ("declare-function" code nil nil [4090 4163])
            ("declare-function" code nil nil [4164 4213])
            ("declare-function" code nil nil [4214 4281])
            ("declare-function" code nil nil [4282 4340])
            ("declare-function" code nil nil [4341 4405])
            ("declare-function" code nil nil [4406 4463])
            ("declare-function" code nil nil [4464 4524])
            ("declare-function" code nil nil [4525 4569])
            ("declare-function" code nil nil [4570 4633])
            ("declare-function" code nil nil [4634 4696])
            ("declare-function" code nil nil [4697 4745])
            ("declare-function" code nil nil [4746 4837])
            ("org-babel" customgroup (:user-visible-flag t) nil [4839 4958])
            ("org-confirm-babel-evaluate" variable (:default-value t) nil [4960 6031])
            ("put" code nil nil [6097 6173])
            ("org-babel-no-eval-on-ctrl-c-ctrl-c" variable nil nil [6175 6377])
            ("org-babel-results-keyword" variable (:default-value "RESULTS") nil [6379 6750])
            ("org-babel-noweb-wrap-start" variable (:default-value "<<") nil [6752 6928])
            ("org-babel-noweb-wrap-end" variable (:default-value ">>") nil [6930 7104])
            ("org-babel-inline-result-wrap" variable (:default-value "=%s=") nil [7106 7309])
            ("put" code nil nil [7310 7455])
            ("org-babel-hash-show-time" variable nil nil [7457 7686])
            ("org-babel-uppercase-example-markers" variable nil nil [7688 7923])
            ("org-babel-noweb-wrap" function (:arguments ("regexp")) nil [7925 8090])
            ("org-babel-src-name-regexp" variable (:default-value "^[ 	]*#\\+name:[ 	]*") nil [8092 8210])
            ("org-babel-multi-line-header-regexp" variable (:default-value "^[ 	]*#\\+headers?:[ 	]*\\([^
]*\\)$") nil [8212 8365])
            ("org-babel-src-block-regexp" variable (:default-value (concat "^\\([ 	]*\\)#\\+begin_src[ 	]+\\([^ 	
]+\\)[ 	]*" "\\([^\":
]*\"[^\"
*]*\"[^\":
]*\\|[^\":
]*\\)" "\\([^
]*\\)
" "\\([^ ]*?
\\)??[ 	]*#\\+end_src")) nil [8367 8744])
            ("org-babel--get-vars" function (:arguments ("params")) nil [8746 9076])
            ("org-babel-exp-reference-buffer" variable nil nil [9078 9293])
            ("org-babel-check-confirm-evaluate" function (:arguments ("info")) nil [9295 10202])
            ("org-babel-check-evaluate" function (:arguments ("info")) nil [10204 10688])
            ("org-babel-confirm-evaluate-answer-no" variable nil nil [10737 10782])
            ("org-babel-confirm-evaluate" function (:arguments ("info")) nil [10784 11936])
            ("org-babel-execute-safely-maybe" function nil nil [11953 12070])
            ("org-babel-execute-maybe" function nil nil [12087 12216])
            ("org-babel-when-in-src-block" function (:arguments ("body")) nil [12218 12497])
            ("org-babel-execute-src-block-maybe" function (:user-visible-flag t) nil [12499 12821])
            ("org-babel-view-src-block-info" function (:user-visible-flag t) nil [12838 14227])
            ("org-babel-expand-src-block-maybe" function (:user-visible-flag t) nil [14244 14529])
            ("org-babel-load-in-session-maybe" function (:user-visible-flag t) nil [14546 14839])
            ("add-hook" code nil nil [14841 14901])
            ("org-babel-pop-to-session-maybe" function (:user-visible-flag t) nil [14918 15198])
            ("add-hook" code nil nil [15200 15261])
            ("org-babel-common-header-args-w-values" variable
               (:constant-flag t
                :default-value (quote ((cache (no yes)) (cmdline . :any) (colnames (nil no yes)) (comments (no link yes org both noweb)) (dir . :any) (eval (yes no no-export strip-export never-export eval never query)) (exports (code results both none)) (epilogue . :any) (file . :any) (file-desc . :any) (file-ext . :any) (hlines (no yes)) (mkdirp (yes no)) (no-expand) (noeval) (noweb (yes no tangle no-export strip-export)) (noweb-ref . :any) (noweb-sep . :any) (output-dir . :any) (padline (yes no)) (post . :any) (prologue . :any) (results (file list vector table scalar verbatim) (raw html latex org code pp drawer) (replace silent none append prepend) (output value)) (rownames (no yes)) (sep . :any) (session . :any) (shebang . :any) (tangle (tangle yes no :any)) (tangle-mode (493 365 292 :any)) (var . :any) (wrap . :any))))
                nil [15263 16325])
            ("org-babel-header-arg-names" variable
               (:constant-flag t
                :default-value (mapcar (function car) org-babel-common-header-args-w-values))
                nil [16327 16562])
            ("org-babel-safe-header-args" variable
               (:constant-flag t
                :default-value (quote (:cache :colnames :comments :exports :epilogue :hlines :noeval :noweb :noweb-ref :noweb-sep :padline :prologue :rownames :sep :session :tangle :wrap (:eval "never" "query") (:results lambda (str) (not (string-match "file" str))))))
                nil [16564 17415])
            ("org-babel-header-args-safe-fn" function (:arguments ("safe-list")) nil [17417 18045])
            ("org-babel-default-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "code") (:cache . "no") (:noweb . "no") (:hlines . "no") (:tangle . "no")))) nil [18047 18284])
            ("put" code nil nil [18285 18406])
            ("org-babel-default-inline-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "results") (:hlines . "yes")))) nil [18408 18615])
            ("put" code nil nil [18616 18744])
            ("org-babel-name-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s:[ 	]*" (regexp-opt (quote ("NAME" "TBLNAME")))))
                nil [18746 18936])
            ("org-babel-result-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s\\(?:\\[\\(?:%s \\)?\\([[:alnum:]]+\\)\\]\\)?:[ 	]*" org-babel-results-keyword "<\\(?:[0-9]\\{4\\}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]\\(?::[0-5][0-9]\\)\\{2\\}\\)>"))
                nil [18938 19338])
            ("org-babel-result-w-name-regexp" variable
               (:constant-flag t
                :default-value (concat org-babel-result-regexp "\\(?9:[^ 	
]+\\)"))
                nil [19340 19526])
            ("org-babel-min-lines-for-block-output" variable (:default-value 10) nil [19528 19923])
            ("org-babel-noweb-error-all-langs" variable nil nil [19925 20119])
            ("org-babel-noweb-error-langs" variable nil nil [20121 20456])
            ("org-babel-hash-show" variable (:default-value 4) nil [20458 20555])
            ("org-babel-after-execute-hook" variable nil nil [20557 20670])
            ("org-babel-named-src-block-regexp-for-name" function (:arguments ("name")) nil [20672 21137])
            ("org-babel-named-data-regexp-for-name" function (:arguments ("name")) nil [21139 21312])
            ("org-babel--normalize-body" function (:arguments ("datum")) nil [21314 22092])
            ("org-babel-current-src-block-location" variable nil nil [22108 22437])
            ("*this*" variable nil nil [22439 22454])
            ("org-babel-get-src-block-info" function (:arguments ("light" "datum")) nil [22456 24462])
            ("org-babel-execute-src-block" function
               (:user-visible-flag t
                :arguments ("arg" "info" "params"))
                nil [24479 28482])
            ("org-babel-expand-body:generic" function (:arguments ("body" "params" "var-lines")) nil [28484 29040])
            ("org-babel-expand-src-block" function
               (:user-visible-flag t
                :arguments ("_arg" "info" "params"))
                nil [29057 30243])
            ("org-babel-edit-distance" function (:arguments ("s1" "s2")) nil [30245 31006])
            ("org-babel-combine-header-arg-lists" function (:arguments ("original" "others")) nil [31008 31409])
            ("org-babel-check-src-block" function (:user-visible-flag t) nil [31426 32346])
            ("org-babel-insert-header-arg" function
               (:user-visible-flag t
                :arguments ("header-arg" "value"))
                nil [32363 33634])
            ("org-babel-header-arg-expand" function nil nil [33711 33965])
            ("org-babel-enter-header-arg-w-completion" function (:arguments ("lang")) nil [33967 34826])
            ("add-hook" code nil nil [34828 34887])
            ("org-babel-load-in-session" function
               (:user-visible-flag t
                :arguments ("_arg" "info"))
                nil [34904 35882])
            ("org-babel-initiate-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [35899 37177])
            ("org-babel-switch-to-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [37194 37543])
            ("defalias" code nil nil [37545 37610])
            ("org-src-window-setup" variable nil nil [37612 37641])
            ("org-babel-switch-to-session-with-code" function
               (:user-visible-flag t
                :arguments ("arg" "_info"))
                nil [37658 38235])
            ("org-babel-do-in-edit-buffer" function (:arguments ("body")) nil [38252 39196])
            ("org-babel-do-key-sequence-in-edit-buffer" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [39198 39874])
            ("org-bracket-link-regexp" variable nil nil [39876 39908])
            ("org-babel-active-location-p" function nil nil [39910 40076])
            ("org-babel-open-src-block-result" function
               (:user-visible-flag t
                :arguments ("re-run"))
                nil [40093 41112])
            ("org-babel-map-src-blocks" function (:arguments ("file" "body")) nil [41129 43794])
            ("def-edebug-spec" code nil nil [43795 43849])
            ("org-babel-map-inline-src-blocks" function (:arguments ("file" "body")) nil [43866 44915])
            ("org-babel-map-call-lines" function (:arguments ("file" "body")) nil [44932 46004])
            ("org-babel-map-executables" function (:arguments ("file" "body")) nil [46021 47168])
            ("org-babel-execute-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [47185 47659])
            ("org-babel-execute-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [47676 47994])
            ("org-babel-sha1-hash" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [48011 50164])
            ("org-babel-current-result-hash" function (:arguments ("info")) nil [50166 50480])
            ("org-babel-set-current-result-hash" function (:arguments ("hash" "info")) nil [50482 50963])
            ("org-babel-hide-hash" function nil nil [50965 51690])
            ("org-babel-hide-all-hashes" function nil nil [51692 52135])
            ("add-hook" code nil nil [52136 52188])
            ("org-babel-hash-at-point" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [52190 52631])
            ("org-babel-result-hide-spec" function nil nil [52633 52854])
            ("add-hook" code nil nil [52855 52908])
            ("org-babel-hide-result-overlays" variable nil nil [52910 52982])
            ("org-babel-result-hide-all" function (:user-visible-flag t) nil [52984 53305])
            ("org-babel-show-result-all" function nil nil [53307 53489])
            ("org-babel-hide-result-toggle-maybe" function (:user-visible-flag t) nil [53506 53852])
            ("org-babel-hide-result-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [53883 55571])
            ("add-hook" code nil nil [55613 55679])
            ("add-hook" code nil nil [55724 55846])
            ("org-file-properties" variable nil nil [55848 55876])
            ("org-babel-params-from-properties" function (:arguments ("lang")) nil [55877 56571])
            ("org-babel-balanced-split" function (:arguments ("string" "alts")) nil [56573 59376])
            ("org-babel-join-splits-near-ch" function (:arguments ("ch" "list")) nil [59378 59834])
            ("org-babel-parse-header-arguments" function (:arguments ("arg-string")) nil [59836 60464])
            ("org-babel-parse-multiple-vars" function (:arguments ("header-arguments")) nil [60466 60992])
            ("org-babel-process-params" function (:arguments ("params")) nil [60994 62387])
            ("org-babel-del-hlines" function (:arguments ("table")) nil [62413 62507])
            ("org-babel-get-colnames" function (:arguments ("table")) nil [62509 62824])
            ("org-babel-get-rownames" function (:arguments ("table")) nil [62826 63328])
            ("org-babel-put-colnames" function (:arguments ("table" "colnames")) nil [63330 63476])
            ("org-babel-put-rownames" function (:arguments ("table" "rownames")) nil [63478 63737])
            ("org-babel-pick-name" function (:arguments ("names" "selector")) nil [63739 64254])
            ("org-babel-disassemble-tables" function (:arguments ("vars" "hlines" "colnames" "rownames")) nil [64256 65509])
            ("org-babel-reassemble-table" function (:arguments ("table" "colnames" "rownames")) nil [65511 66092])
            ("org-babel-where-is-src-block-head" function (:arguments ("src-block")) nil [66094 67004])
            ("org-babel-goto-src-block-head" function (:user-visible-flag t) nil [67021 67253])
            ("org-babel-goto-named-src-block" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [67270 68513])
            ("org-babel-find-named-block" function (:arguments ("name")) nil [68515 69041])
            ("org-babel-src-block-names" function (:arguments ("file")) nil [69043 69595])
            ("org-babel-goto-named-result" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [69612 70047])
            ("org-babel-find-named-result" function (:arguments ("name")) nil [70049 70691])
            ("org-babel-result-names" function (:arguments ("file")) nil [70693 71060])
            ("org-babel-next-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71077 71306])
            ("org-babel-previous-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71323 71561])
            ("org-babel-load-languages" variable nil nil [71563 71596])
            ("org-babel-mark-block" function (:user-visible-flag t) nil [71613 71929])
            ("org-babel-demarcate-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71931 74287])
            ("org-babel--insert-results-keyword" function (:arguments ("name" "hash")) nil [74289 75220])
            ("org-babel--clear-results-maybe" function (:arguments ("hash")) nil [75222 76239])
            ("org-babel-where-is-src-block-result" function (:arguments ("insert" "_info" "hash")) nil [76241 79636])
            ("org-babel-read-element" function (:arguments ("element")) nil [79638 81090])
            ("org-babel-read-result" function nil nil [81092 81315])
            ("org-babel-read-table" function nil nil [81317 81589])
            ("org-babel-read-list" function nil nil [81591 81757])
            ("org-link-types-re" variable nil nil [81759 81785])
            ("org-babel-read-link" function nil nil [81786 82386])
            ("org-babel-format-result" function (:arguments ("result" "sep")) nil [82388 82716])
            ("org-babel-insert-result" function (:arguments ("result" "result-params" "info" "hash" "lang")) nil [82718 93486])
            ("org-babel-remove-result" function
               (:user-visible-flag t
                :arguments ("info" "keep-keyword"))
                nil [93488 94034])
            ("org-babel-remove-inline-result" function
               (:user-visible-flag t
                :arguments ("datum"))
                nil [94036 94986])
            ("org-babel-remove-result-one-or-many" function
               (:user-visible-flag t
                :arguments ("x"))
                nil [94988 95282])
            ("org-babel-result-end" function nil nil [95284 95957])
            ("org-babel-result-to-file" function (:arguments ("result" "description")) nil [95959 96550])
            ("org-babel-examplify-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "results-switches" "inline"))
                nil [96552 97627])
            ("org-babel-update-block-body" function (:arguments ("new-body")) nil [97629 98629])
            ("org-babel-merge-params" function (:arguments ("plists")) nil [98631 102696])
            ("org-babel-use-quick-and-dirty-noweb-expansion" variable nil nil [102698 103007])
            ("org-babel-noweb-p" function (:arguments ("params" "context")) nil [103009 103446])
            ("org-babel-expand-noweb-references" function (:arguments ("info" "parent-buffer")) nil [103448 109925])
            ("org-babel--script-escape-inner" function (:arguments ("str")) nil [109927 112067])
            ("org-babel-script-escape" function (:arguments ("str" "force")) nil [112069 113161])
            ("org-babel-read" function (:arguments ("cell" "inhibit-lisp-eval")) nil [113163 113872])
            ("org-babel--string-to-number" function (:arguments ("string")) nil [113874 114084])
            ("org-babel-import-elisp-from-file" function (:arguments ("file-name" "separator")) nil [114086 114832])
            ("org-babel-string-read" function (:arguments ("cell")) nil [114834 115101])
            ("org-babel-chomp" function (:arguments ("string" "regexp")) nil [115103 115520])
            ("org-babel-process-file-name" function (:arguments ("name" "no-quote-p")) nil [115522 116057])
            ("org-babel-temporary-directory" variable nil nil [116059 116097])
            ("unless" code nil nil [116098 116533])
            ("org-babel-remote-temporary-directory" variable (:default-value "/tmp/") nil [116535 116682])
            ("org-babel-result-cond" function (:arguments ("result-params" "scalar-form" "table-forms")) nil [116684 117386])
            ("def-edebug-spec" code nil nil [117387 117443])
            ("org-babel-temp-file" function (:arguments ("prefix" "suffix")) nil [117445 118241])
            ("org-babel-remove-temporary-directory" function nil nil [118243 119183])
            ("add-hook" code nil nil [119185 119250])
            ("org-babel-one-header-arg-safe-p" function (:arguments ("pair" "safe-list")) nil [119252 119817])
            ("org-babel-generate-file-param" function (:arguments ("src-name" "params")) nil [119819 121253])
            ("org-babel-graphical-output-file" function (:arguments ("params")) nil [121255 121815])
            ("org-babel-make-language-alias" function (:arguments ("new" "old")) nil [121817 122741])
            ("org-babel-strip-quotes" function (:arguments ("string")) nil [122743 122877])
            ("ob-core" package nil nil [122879 122897]))          
      :file "ob-core.el"
      :pointmax 122999
      :fsize 122998
      :lastmodtime '(23525 29585 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1065 1084])
            ("org-babel-error-buffer-name" variable (:default-value "*Org-Babel Error Output*") nil [1086 1149])
            ("declare-function" code nil nil [1150 1224])
            ("org-babel-eval-error-notify" function (:arguments ("exit-code" "stderr")) nil [1226 1608])
            ("org-babel-eval" function (:arguments ("cmd" "body")) nil [1610 2552])
            ("org-babel-eval-read-file" function (:arguments ("file")) nil [2554 2709])
            ("org-babel--shell-command-on-region" function (:arguments ("start" "end" "command" "error-buffer")) nil [2711 5207])
            ("org-babel-eval-wipe-error-buffer" function nil nil [5209 5517])
            ("ob-eval" package nil nil [5519 5537]))          
      :file "ob-eval.el"
      :pointmax 5566
      :fsize 5565
      :lastmodtime '(23525 29586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [1064 1077])
            ("ox-publish" include nil nil [1078 1099])
            ("cl-lib" include nil nil [1100 1117])
            ("declare-function" code nil nil [1119 1172])
            ("org-export-define-backend" code nil nil [1610 5906])
            ("org-export-ascii" customgroup (:user-visible-flag t) nil [5944 6073])
            ("org-ascii-text-width" variable (:default-value 72) nil [6075 6313])
            ("org-ascii-global-margin" variable nil nil [6315 6503])
            ("org-ascii-inner-margin" variable (:default-value 2) nil [6505 6740])
            ("org-ascii-quote-margin" variable (:default-value 6) nil [6742 7053])
            ("org-ascii-list-margin" variable nil nil [7055 7309])
            ("org-ascii-inlinetask-width" variable (:default-value 30) nil [7311 7532])
            ("org-ascii-headline-spacing" variable (:default-value (quote (1 . 2))) nil [7534 8236])
            ("org-ascii-indented-line-width" variable (:default-value (quote auto)) nil [8238 8811])
            ("org-ascii-paragraph-spacing" variable (:default-value (quote auto)) nil [8813 9276])
            ("org-ascii-charset" variable (:default-value (quote ascii)) nil [9278 9709])
            ("org-ascii-underline" variable (:default-value (quote ((ascii 61 126 45) (latin1 61 126 45) (utf-8 9552 9472 9548 9476 9480)))) nil [9711 10645])
            ("org-ascii-bullets" variable (:default-value (quote ((ascii 42 43 45) (latin1 167 182) (utf-8 9674)))) nil [10647 11603])
            ("org-ascii-links-to-notes" variable (:default-value t) nil [11605 11911])
            ("org-ascii-table-keep-all-vertical-lines" variable nil nil [11913 12209])
            ("org-ascii-table-widen-columns" variable (:default-value t) nil [12211 12509])
            ("org-ascii-table-use-ascii-art" variable nil nil [12511 12881])
            ("org-ascii-caption-above" variable nil nil [12883 13113])
            ("org-ascii-verbatim-format" variable (:default-value "`%s'") nil [13115 13312])
            ("org-ascii-format-drawer-function" variable (:default-value (lambda (_name contents _width) contents)) nil [13314 13871])
            ("org-ascii-format-inlinetask-function" variable (:default-value (quote org-ascii-format-inlinetask-default)) nil [13873 14692])
            ("org-ascii--fill-string" function (:arguments ("s" "text-width" "info" "justify")) nil [16332 17293])
            ("org-ascii--justify-lines" function (:arguments ("s" "text-width" "how")) nil [17295 17873])
            ("org-ascii--justify-element" function (:arguments ("contents" "element" "info")) nil [17875 19471])
            ("org-ascii--indent-string" function (:arguments ("s" "width")) nil [19473 19701])
            ("org-ascii--box-string" function (:arguments ("s" "info")) nil [19703 20121])
            ("org-ascii--current-text-width" function (:arguments ("element" "info")) nil [20123 23724])
            ("org-ascii--current-justification" function (:arguments ("element")) nil [23726 24341])
            ("org-ascii--build-title" function (:arguments ("element" "info" "text-width" "underline" "notags" "toc")) nil [24343 26761])
            ("org-ascii--has-caption-p" function (:arguments ("element" "_info")) nil [26763 27041])
            ("org-ascii--build-caption" function (:arguments ("element" "info")) nil [27043 27922])
            ("org-ascii--build-toc" function (:arguments ("info" "n" "keyword" "local")) nil [27924 29265])
            ("org-ascii--list-listings" function (:arguments ("keyword" "info")) nil [29267 30719])
            ("org-ascii--list-tables" function (:arguments ("keyword" "info")) nil [30721 32149])
            ("org-ascii--unique-links" function (:arguments ("element" "info")) nil [32151 33453])
            ("org-ascii--describe-datum" function (:arguments ("datum" "info")) nil [33455 35015])
            ("org-ascii--describe-links" function (:arguments ("links" "width" "info")) nil [35017 36515])
            ("org-ascii--checkbox" function (:arguments ("item" "info")) nil [36517 36870])
            ("org-ascii-template--document-title" function (:arguments ("info")) nil [36889 40209])
            ("org-ascii-inner-template" function (:arguments ("contents" "info")) nil [40211 42215])
            ("org-ascii-template" function (:arguments ("contents" "info")) nil [42217 43185])
            ("org-ascii--translate" function (:arguments ("s" "info")) nil [43187 43459])
            ("org-ascii-bold" function (:arguments ("_bold" "contents" "_info")) nil [43500 43698])
            ("org-ascii-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [43720 44036])
            ("org-ascii-clock" function (:arguments ("clock" "_contents" "info")) nil [44051 44520])
            ("org-ascii-code" function (:arguments ("code" "_contents" "info")) nil [44534 44777])
            ("org-ascii-drawer" function (:arguments ("drawer" "contents" "info")) nil [44793 45181])
            ("org-ascii-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [45204 45426])
            ("org-ascii-entity" function (:arguments ("entity" "_contents" "info")) nil [45442 45731])
            ("org-ascii-example-block" function (:arguments ("example-block" "_contents" "info")) nil [45754 46080])
            ("org-ascii-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [46104 46406])
            ("org-ascii-export-block" function (:arguments ("export-block" "_contents" "info")) nil [46428 46778])
            ("org-ascii-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [46799 47137])
            ("org-ascii-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [47311 47586])
            ("org-ascii-headline" function (:arguments ("headline" "contents" "info")) nil [47604 49793])
            ("org-ascii-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [49818 50411])
            ("org-ascii-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [50437 50757])
            ("org-ascii-format-inlinetask-default" function (:arguments ("_todo" "_type" "_priority" "_name" "_tags" "contents" "width" "inlinetask" "info")) nil [50777 52110])
            ("org-ascii-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [52112 53058])
            ("org-ascii-italic" function (:arguments ("_italic" "contents" "_info")) nil [53074 53280])
            ("org-ascii-item" function (:arguments ("item" "contents" "info")) nil [53294 55660])
            ("org-ascii-keyword" function (:arguments ("keyword" "_contents" "info")) nil [55677 56594])
            ("org-ascii-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [56621 56995])
            ("org-ascii-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [57019 57293])
            ("org-ascii-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [57313 57506])
            ("org-ascii-link" function (:arguments ("link" "desc" "info")) nil [57520 59482])
            ("org-ascii-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [59507 59879])
            ("org-ascii-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [59898 60601])
            ("org-ascii-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [60621 61028])
            ("org-ascii-plain-text" function (:arguments ("text" "info")) nil [61048 61711])
            ("org-ascii-planning" function (:arguments ("planning" "_contents" "info")) nil [61729 62496])
            ("org-ascii-property-drawer" function (:arguments ("property-drawer" "contents" "info")) nil [62521 62838])
            ("org-ascii-quote-block" function (:arguments ("_quote-block" "contents" "info")) nil [62859 63138])
            ("org-ascii-radio-target" function (:arguments ("_radio-target" "contents" "_info")) nil [63160 63376])
            ("org-ascii-section" function (:arguments ("section" "contents" "info")) nil [63393 64307])
            ("org-ascii-special-block" function (:arguments ("_special-block" "contents" "_info")) nil [64330 64699])
            ("org-ascii-src-block" function (:arguments ("src-block" "_contents" "info")) nil [64718 65338])
            ("org-ascii-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [65365 65612])
            ("org-ascii-subscript" function (:arguments ("subscript" "contents" "_info")) nil [65631 65942])
            ("org-ascii-superscript" function (:arguments ("superscript" "contents" "_info")) nil [65963 66282])
            ("org-ascii-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [66306 66540])
            ("org-ascii-table" function (:arguments ("table" "contents" "info")) nil [66555 67734])
            ("org-ascii--table-cell-width" function (:arguments ("table-cell" "info")) nil [67754 69215])
            ("org-ascii-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [69217 70456])
            ("org-ascii-table-row" function (:arguments ("table-row" "contents" "info")) nil [70475 72395])
            ("org-ascii-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [72414 72652])
            ("org-ascii-underline" function (:arguments ("_underline" "contents" "_info")) nil [72671 72889])
            ("org-ascii-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [72907 73166])
            ("org-ascii-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [73187 73509])
            ("org-ascii-filter-headline-blank-lines" function (:arguments ("headline" "_backend" "info")) nil [73527 74176])
            ("org-ascii-filter-paragraph-spacing" function (:arguments ("tree" "_backend" "info")) nil [74178 74819])
            ("org-ascii-filter-comment-spacing" function (:arguments ("tree" "_backend" "info")) nil [74821 75289])
            ("org-ascii-export-as-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [75333 76513])
            ("org-ascii-export-to-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [76530 77618])
            ("org-ascii-publish-to-ascii" function (:arguments ("plist" "filename" "pub-dir")) nil [77635 77991])
            ("org-ascii-publish-to-latin1" function (:arguments ("plist" "filename" "pub-dir")) nil [78008 78368])
            ("org-ascii-publish-to-utf8" function (:arguments ("plist" "filename" "pub-dir")) nil [78385 78740])
            ("ox-ascii" package nil nil [78743 78762]))          
      :file "ox-ascii.el"
      :pointmax 78882
      :fsize 78981
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [954 972])
            ("declare-function" code nil nil [974 1042])
            ("declare-function" code nil nil [1043 1099])
            ("declare-function" code nil nil [1100 1172])
            ("declare-function" code nil nil [1173 1245])
            ("declare-function" code nil nil [1246 1305])
            ("declare-function" code nil nil [1306 1364])
            ("declare-function" code nil nil [1365 1414])
            ("declare-function" code nil nil [1415 1474])
            ("declare-function" code nil nil [1475 1536])
            ("declare-function" code nil nil [1537 1615])
            ("org-src-preserve-indentation" variable nil nil [1617 1654])
            ("org-export-use-babel" variable (:default-value t) nil [1656 2105])
            ("org-babel-exp--at-source" function (:arguments ("body")) nil [2108 2815])
            ("org-babel-exp-src-block" function (:user-visible-flag t) nil [2817 4320])
            ("org-babel-exp-call-line-template" variable nil nil [4322 4833])
            ("org-babel-exp-process-buffer" function (:user-visible-flag t) nil [4835 10428])
            ("org-babel-exp-do-export" function (:arguments ("info" "type" "hash")) nil [10430 11269])
            ("org-babel-exp-code-template" variable (:default-value "#+BEGIN_SRC %lang%switches%flags
%body
#+END_SRC") nil [11271 12064])
            ("org-babel-exp-inline-code-template" variable (:default-value "src_%lang[%switches%flags]{%body}") nil [12066 12908])
            ("org-babel-exp-code" function (:arguments ("info" "type")) nil [12910 13899])
            ("org-babel-exp-results" function (:arguments ("info" "type" "silent" "hash")) nil [13901 15426])
            ("ob-exp" package nil nil [15429 15446]))          
      :file "ob-exp.el"
      :pointmax 15472
      :fsize 15471
      :lastmodtime '(23525 29586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1130 1147])
            ("format-spec" include nil nil [1148 1170])
            ("ox" include nil nil [1171 1184])
            ("ox-publish" include nil nil [1185 1206])
            ("table" include nil nil [1207 1223])
            ("declare-function" code nil nil [1254 1306])
            ("declare-function" code nil nil [1307 1364])
            ("declare-function" code nil nil [1365 1418])
            ("htmlize-css-name-prefix" variable nil nil [1420 1452])
            ("htmlize-output-type" variable nil nil [1453 1481])
            ("htmlize-output-type" variable nil nil [1482 1510])
            ("htmlize-css-name-prefix" variable nil nil [1511 1543])
            ("org-export-define-backend" code nil nil [1566 8049])
            ("org-html-format-table-no-css" variable nil nil [8077 8114])
            ("htmlize-buffer-places" variable nil nil [8115 8145])
            ("org-html--pre/postamble-class" variable (:default-value "status") nil [8166 8250])
            ("org-html-doctype-alist" variable
               (:constant-flag t
                :default-value (quote (("html4-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
\"http://www.w3.org/TR/html4/strict.dtd\">") ("html4-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
\"http://www.w3.org/TR/html4/loose.dtd\">") ("html4-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"
\"http://www.w3.org/TR/html4/frameset.dtd\">") ("xhtml-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">") ("xhtml-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">") ("xhtml-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">") ("xhtml-11" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml11.dtd\">") ("html5" . "<!DOCTYPE html>") ("xhtml5" . "<!DOCTYPE html>"))))
                nil [8252 9370])
            ("org-html-html5-elements" variable
               (:constant-flag t
                :default-value (quote ("article" "aside" "audio" "canvas" "details" "figcaption" "figure" "footer" "header" "menu" "meter" "nav" "output" "progress" "section" "video")))
                nil [9372 9689])
            ("org-html-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [9691 9955])
            ("org-html-scripts" variable
               (:constant-flag t
                :default-value "<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>")
                nil [9957 11677])
            ("org-html-style-default" variable
               (:constant-flag t
                :default-value "<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per \"defun org-babel-execute\"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf \" \")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>")
                nil [11679 18905])
            ("org-export-html" customgroup (:user-visible-flag t) nil [18943 19069])
            ("org-html-infojs-opts-table" variable (:default-value (quote ((path PATH "https://orgmode.org/org-info.js") (view VIEW "info") (toc TOC :with-toc) (ftoc FIXED_TOC "0") (tdepth TOC_DEPTH "max") (sdepth SECTION_DEPTH "max") (mouse MOUSE_HINT "underline") (buttons VIEW_BUTTONS "0") (ltoc LOCAL_TOC "1") (up LINK_UP :html-link-up) (home LINK_HOME :html-link-home)))) nil [19091 19532])
            ("org-html-use-infojs" variable (:default-value (quote when-configured)) nil [19534 20151])
            ("org-html-infojs-options" variable (:default-value (mapcar (lambda (x) (cons (car x) (nth 2 x))) org-html-infojs-opts-table)) nil [20153 21013])
            ("org-html-infojs-template" variable (:default-value "<script type=\"text/javascript\" src=\"%SCRIPT_PATH\">
/**
 *
 * @source: %SCRIPT_PATH
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in %SCRIPT_PATH.
 *
 * Copyright (C) 2012-2018 Free Software Foundation, Inc.
 *
 *
 * The JavaScript code in this tag is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in %SCRIPT_PATH.
 *
 */
</script>

<script type=\"text/javascript\">

/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/

<!--/*--><![CDATA[/*><!--*/
%MANAGER_OPTIONS
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
</script>") nil [21015 23625])
            ("org-html-infojs-install-script" function (:arguments ("exp-plist" "_backend")) nil [23627 26918])
            ("org-html-text-markup-alist" variable (:default-value (quote ((bold . "<b>%s</b>") (code . "<code>%s</code>") (italic . "<i>%s</i>") (strike-through . "<del>%s</del>") (underline . "<span class=\"underline\">%s</span>") (verbatim . "<code>%s</code>")))) nil [26937 27733])
            ("org-html-indent" variable nil nil [27735 27971])
            ("org-html-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [27987 28556])
            ("org-html-footnotes-section" variable (:default-value "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s: </h2>
<div id=\"text-footnotes\">
%s
</div>
</div>") nil [28574 28974])
            ("org-html-footnote-format" variable (:default-value "<sup>%s</sup>") nil [28976 29167])
            ("org-html-footnote-separator" variable (:default-value "<sup>, </sup>") nil [29169 29303])
            ("org-html-toplevel-hlevel" variable (:default-value 2) nil [29320 29846])
            ("org-html-format-headline-function" variable (:default-value (quote org-html-format-headline-default-function)) nil [29848 30460])
            ("org-html-allow-name-attribute-in-anchors" variable nil nil [30482 30785])
            ("org-html-format-inlinetask-function" variable (:default-value (quote org-html-format-inlinetask-default-function)) nil [30805 31510])
            ("org-html-with-latex" variable (:default-value org-export-with-latex) nil [31524 32393])
            ("org-html-link-org-files-as-html" variable (:default-value t) nil [32418 32957])
            ("org-html-inline-images" variable (:default-value t) nil [32988 33271])
            ("org-html-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("http" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("https" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [33273 33858])
            ("org-html-protect-char-alist" variable (:default-value (quote (("&" . "&amp;") ("<" . "&lt;") (">" . "&gt;")))) nil [33877 34045])
            ("org-html-htmlize-output-type" variable (:default-value (quote inline-css)) nil [34063 35180])
            ("org-html-htmlize-font-prefix" variable (:default-value "org-") nil [35182 35339])
            ("org-html-table-default-attributes" variable (:default-value (quote (:border "2" :cellspacing "0" :cellpadding "6" :rules "groups" :frame "hsides"))) nil [35353 35867])
            ("org-html-table-header-tags" variable (:default-value (quote ("<th scope=\"%s\"%s>" . "</th>"))) nil [35869 36443])
            ("org-html-table-data-tags" variable (:default-value (quote ("<td%s>" . "</td>"))) nil [36445 36929])
            ("org-html-table-row-open-tag" variable (:default-value "<tr>") nil [36931 38245])
            ("org-html-table-row-close-tag" variable (:default-value "</tr>") nil [38247 38679])
            ("org-html-table-align-individual-fields" variable (:default-value t) nil [38681 39006])
            ("org-html-table-use-header-tags-for-first-column" variable nil nil [39008 39224])
            ("org-html-table-caption-above" variable (:default-value t) nil [39226 39415])
            ("org-html-tag-class-prefix" variable nil nil [39428 39810])
            ("org-html-extension" variable (:default-value "html") nil [39838 39960])
            ("org-html-xml-declaration" variable (:default-value (quote (("html" . "<?xml version=\"1.0\" encoding=\"%s\"?>") ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")))) nil [39962 40579])
            ("org-html-coding-system" variable (:default-value (quote utf-8)) nil [40581 40790])
            ("org-html-doctype" variable (:default-value "xhtml-strict") nil [40792 41196])
            ("org-html-html5-fancy" variable nil nil [41198 41701])
            ("org-html-container-element" variable (:default-value "div") nil [41703 42083])
            ("org-html-divs" variable (:default-value (quote ((preamble "div" "preamble") (content "div" "content") (postamble "div" "postamble")))) nil [42085 42981])
            ("org-html-checkbox-types" variable
               (:constant-flag t
                :default-value (quote ((unicode (on . "&#x2611;") (off . "&#x2610;") (trans . "&#x2610;")) (ascii (on . "<code>[X]</code>") (off . "<code>[&#xa0;]</code>") (trans . "<code>[-]</code>")) (html (on . "<input type='checkbox' checked='checked' />") (off . "<input type='checkbox' />") (trans . "<input type='checkbox' />")))))
                nil [42983 43742])
            ("org-html-checkbox-type" variable (:default-value (quote ascii)) nil [43744 44128])
            ("org-html-metadata-timestamp-format" variable (:default-value "%Y-%m-%d %a %H:%M") nil [44130 44423])
            ("org-html-mathjax-options" variable (:default-value (quote ((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML") (scale "100") (align "center") (font "TeX") (linebreaks "false") (autonumber "AMS") (indent "0em") (multlinewidth "85%") (tagindent ".8em") (tagside "right")))) nil [44451 47695])
            ("org-html-mathjax-template" variable (:default-value "<script type=\"text/x-mathjax-config\">
    MathJax.Hub.Config({
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": { scale: %SCALE,
                        linebreaks: { automatic: \"%LINEBREAKS\" },
                        webFont: \"%FONT\"
                       },
        SVG: {scale: %SCALE,
              linebreaks: { automatic: \"%LINEBREAKS\" },
              font: \"%FONT\"},
        NativeMML: {scale: %SCALE},
        TeX: { equationNumbers: {autoNumber: \"%AUTONUMBER\"},
               MultLineWidth: \"%MULTLINEWIDTH\",
               TagSide: \"%TAGSIDE\",
               TagIndent: \"%TAGINDENT\"
             }
});
</script>
<script type=\"text/javascript\"
        src=\"%PATH\"></script>") nil [47697 48597])
            ("org-html-postamble" variable (:default-value (quote auto)) nil [48627 49497])
            ("org-html-postamble-format" variable (:default-value (quote (("en" "<p class=\"author\">Author: %a (%e)</p>
<p class=\"date\">Date: %d</p>
<p class=\"creator\">%c</p>
<p class=\"validation\">%v</p>")))) nil [49499 50548])
            ("org-html-validation-link" variable (:default-value "<a href=\"http://validator.w3.org/check?uri=referer\">Validate</a>") nil [50550 50736])
            ("org-html-creator-string" variable (:default-value (format "<a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> %s (<a href=\"https://orgmode.org\">Org</a> mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [50738 51208])
            ("org-html-preamble" variable (:default-value t) nil [51237 52000])
            ("org-html-preamble-format" variable (:default-value (quote (("en" "")))) nil [52002 52987])
            ("org-html-link-up" variable nil nil [52989 53145])
            ("org-html-link-home" variable nil nil [53147 53307])
            ("org-html-link-use-abs-url" variable nil nil [53309 53503])
            ("org-html-home/up-format" variable (:default-value "<div id=\"org-div-home-and-up\">
 <a accesskey=\"h\" href=\"%s\"> UP </a>
 |
 <a accesskey=\"H\" href=\"%s\"> HOME </a>
</div>") nil [53505 53953])
            ("org-html-head-include-scripts" variable (:default-value t) nil [53981 54272])
            ("org-html-head-include-default-style" variable (:default-value t) nil [54299 54651])
            ("put" code nil nil [54667 54740])
            ("org-html-head" variable nil nil [54742 55833])
            ("put" code nil nil [55849 55899])
            ("org-html-head-extra" variable nil nil [55901 56211])
            ("put" code nil nil [56227 56283])
            ("org-html-viewport" variable (:default-value (quote ((width "device-width") (initial-scale "1") (minimum-scale "") (maximum-scale "") (user-scalable "")))) nil [56312 57917])
            ("org-html-klipsify-src" variable nil nil [57961 58151])
            ("org-html-klipse-css" variable (:default-value "https://storage.googleapis.com/app.klipse.tech/css/codemirror.css") nil [58153 58391])
            ("org-html-klipse-js" variable (:default-value "https://storage.googleapis.com/app.klipse.tech/plugin_prod/js/klipse_plugin.min.js") nil [58393 58596])
            ("org-html-klipse-selection-script" variable (:default-value "window.klipse_settings = {selector_eval_html: '.src-html',
                             selector_eval_js: '.src-js',
                             selector_eval_python_client: '.src-python',
                             selector_eval_scheme: '.src-scheme',
                             selector: '.src-clojure',
                             selector_eval_ruby: '.src-ruby'};") nil [58598 59139])
            ("org-html-todo-kwd-class-prefix" variable nil nil [59154 59554])
            ("org-html-xhtml-p" function (:arguments ("info")) nil [59581 59701])
            ("org-html-html5-p" function (:arguments ("info")) nil [59703 59842])
            ("org-html--html5-fancy-p" function (:arguments ("info")) nil [59844 60074])
            ("org-html-close-tag" function (:arguments ("tag" "attr" "info")) nil [60076 60351])
            ("org-html-doctype" function (:arguments ("info")) nil [60353 60717])
            ("org-html--make-attribute-string" function (:arguments ("attributes")) nil [60719 61391])
            ("org-html--wrap-image" function (:arguments ("contents" "info" "caption" "label")) nil [61393 62161])
            ("org-html--format-image" function (:arguments ("source" "attributes" "info")) nil [62163 62900])
            ("org-html--svg-image" function (:arguments ("source" "attributes" "info")) nil [62902 63948])
            ("org-html--textarea-block" function (:arguments ("element")) nil [63950 64383])
            ("org-html--has-caption-p" function (:arguments ("element" "_info")) nil [64385 64724])
            ("org-html-htmlize-region-for-paste" function (:arguments ("beg" "end")) nil [64738 65330])
            ("org-html-htmlize-generate-css" function (:user-visible-flag t) nil [65347 66833])
            ("org-html--make-string" function (:arguments ("n" "string")) nil [66835 66992])
            ("org-html-fix-class-name" function (:arguments ("kwd")) nil [66994 67214])
            ("org-html-footnote-section" function (:arguments ("info")) nil [67216 68162])
            ("org-html--build-meta-info" function (:arguments ("info")) nil [68180 71133])
            ("org-html--build-head" function (:arguments ("info")) nil [71135 71915])
            ("org-html--build-mathjax-config" function (:arguments ("info")) nil [71917 72876])
            ("org-html-format-spec" function (:arguments ("info")) nil [72878 73840])
            ("org-html--build-pre/postamble" function (:arguments ("type" "info")) nil [73842 76166])
            ("org-html-inner-template" function (:arguments ("contents" "info")) nil [76168 76582])
            ("org-html-template" function (:arguments ("contents" "info")) nil [76584 79569])
            ("org-html--translate" function (:arguments ("s" "info")) nil [79571 79750])
            ("org-html--anchor" function (:arguments ("id" "desc" "attributes" "info")) nil [79765 80099])
            ("org-html--todo" function (:arguments ("todo" "info")) nil [80112 80405])
            ("org-html--priority" function (:arguments ("priority" "_info")) nil [80422 80671])
            ("org-html--tags" function (:arguments ("tags" "info")) nil [80684 81064])
            ("org-html-fontify-code" function (:arguments ("code" "lang")) nil [81081 83302])
            ("org-html-do-format-code" function (:arguments ("code" "lang" "refs" "retain-labels" "num-start")) nil [83304 84564])
            ("org-html-format-code" function (:arguments ("element" "info")) nil [84566 85201])
            ("org-html-toc" function (:arguments ("depth" "info" "scope")) nil [85229 86319])
            ("org-html--toc-text" function (:arguments ("toc-entries")) nil [86321 87131])
            ("org-html--format-toc-headline" function (:arguments ("headline" "info")) nil [87133 88407])
            ("org-html-list-of-listings" function (:arguments ("info")) nil [88409 89674])
            ("org-html-list-of-tables" function (:arguments ("info")) nil [89676 90923])
            ("org-html-bold" function (:arguments ("_bold" "contents" "info")) nil [90963 91224])
            ("org-html-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [91245 91510])
            ("org-html-clock" function (:arguments ("clock" "_contents" "_info")) nil [91524 92041])
            ("org-html-code" function (:arguments ("code" "_contents" "info")) nil [92054 92348])
            ("org-html-drawer" function (:arguments ("drawer" "contents" "info")) nil [92363 92667])
            ("org-html-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [92689 92933])
            ("org-html-entity" function (:arguments ("entity" "_contents" "_info")) nil [92948 93168])
            ("org-html-example-block" function (:arguments ("example-block" "_contents" "info")) nil [93190 93903])
            ("org-html-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [93926 94225])
            ("org-html-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [94246 94567])
            ("org-html-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [94587 94917])
            ("org-html-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [94944 95755])
            ("org-html-headline" function (:arguments ("headline" "contents" "info")) nil [95772 99722])
            ("org-html-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "info")) nil [99724 100160])
            ("org-html--container" function (:arguments ("headline" "info")) nil [100162 100366])
            ("org-html-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "info")) nil [100390 100618])
            ("org-html-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [100643 101269])
            ("org-html-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [101288 102110])
            ("org-html-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags" "contents" "info")) nil [102112 102518])
            ("org-html-italic" function (:arguments ("_italic" "contents" "info")) nil [102533 102807])
            ("org-html-checkbox" function (:arguments ("checkbox" "info")) nil [102820 103104])
            ("org-html-format-list-item" function (:arguments ("contents" "type" "checkbox" "info" "term-counter-id" "headline")) nil [103106 104451])
            ("org-html-item" function (:arguments ("item" "contents" "info")) nil [104453 105011])
            ("org-html-keyword" function (:arguments ("keyword" "_contents" "info")) nil [105027 105783])
            ("org-html-format-latex" function (:arguments ("latex-frag" "processing-type" "info")) nil [105809 107266])
            ("org-html-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [107268 108241])
            ("org-html-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [108264 108988])
            ("org-html-line-break" function (:arguments ("_line-break" "_contents" "info")) nil [109007 109232])
            ("org-html-image-link-filter" function (:arguments ("data" "_backend" "info")) nil [109245 109372])
            ("org-html-inline-image-p" function (:arguments ("link" "info")) nil [109374 110271])
            ("org-html-standalone-image-predicate" variable nil nil [110273 110317])
            ("org-html-standalone-image-p" function (:arguments ("element" "info")) nil [110318 111677])
            ("org-html-link" function (:arguments ("link" "desc" "info")) nil [111679 118831])
            ("org-html-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [118853 119223])
            ("org-html-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [119241 121068])
            ("org-html-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [121087 121808])
            ("org-html-convert-special-strings" function (:arguments ("string")) nil [121827 122085])
            ("org-html-encode-plain-text" function (:arguments ("text")) nil [122087 122380])
            ("org-html-plain-text" function (:arguments ("text" "info")) nil [122382 123318])
            ("org-html-planning" function (:arguments ("planning" "_contents" "info")) nil [123334 124129])
            ("org-html-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [124153 124465])
            ("org-html-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [124485 125074])
            ("org-html-section" function (:arguments ("section" "contents" "info")) nil [125090 126032])
            ("org-html-radio-target" function (:arguments ("radio-target" "text" "info")) nil [126053 126344])
            ("org-html-special-block" function (:arguments ("special-block" "contents" "info")) nil [126366 127538])
            ("org-html-src-block" function (:arguments ("src-block" "_contents" "info")) nil [127556 129234])
            ("org-html-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [129260 129572])
            ("org-html-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [129595 129916])
            ("org-html-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [129934 130164])
            ("org-html-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [130184 130420])
            ("org-html-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [130439 131832])
            ("org-html-table-row" function (:arguments ("table-row" "contents" "info")) nil [131850 133755])
            ("org-html-table-first-row-data-cells" function (:arguments ("table" "info")) nil [133769 134251])
            ("org-html-table--table.el-table" function (:arguments ("table" "_info")) nil [134253 134857])
            ("org-html-table" function (:arguments ("table" "contents" "info")) nil [134859 136994])
            ("org-html-target" function (:arguments ("target" "_contents" "info")) nil [137009 137265])
            ("org-html-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [137283 137680])
            ("org-html-underline" function (:arguments ("_underline" "contents" "info")) nil [137698 137991])
            ("org-html-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [138008 138322])
            ("org-html-verse-block" function (:arguments ("_verse-block" "contents" "info")) nil [138342 139049])
            ("org-html-final-function" function (:arguments ("contents" "_backend" "info")) nil [139075 139394])
            ("org-html-export-as-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [139437 140633])
            ("org-html-convert-region-to-html" function (:user-visible-flag t) nil [140650 140962])
            ("org-html-export-to-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [140979 142242])
            ("org-html-publish-to-html" function (:arguments ("plist" "filename" "pub-dir")) nil [142259 142689])
            ("ox-html" package nil nil [142692 142710]))          
      :file "ox-html.el"
      :pointmax 142812
      :fsize 142811
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [985 1002])
            ("format-spec" include nil nil [1003 1025])
            ("ox" include nil nil [1026 1039])
            ("org-compat" include nil nil [1040 1061])
            ("table" include nil nil [1062 1091])
            ("org-export-define-backend" code nil nil [1114 4638])
            ("declare-function" code nil nil [4730 4785])
            ("declare-function" code nil nil [4786 4847])
            ("declare-function" code nil nil [4848 4912])
            ("declare-function" code nil nil [4913 4996])
            ("declare-function" code nil nil [4997 5055])
            ("nxml-auto-insert-xml-declaration-flag" variable nil nil [5057 5103])
            ("archive-zip-extract" variable nil nil [5119 5147])
            ("hfy-end-span-handler" variable nil nil [5170 5199])
            ("hfy-begin-span-handler" variable nil nil [5225 5256])
            ("hfy-face-to-css" variable nil nil [5282 5306])
            ("hfy-html-quote-map" variable nil nil [5332 5359])
            ("hfy-html-quote-regex" variable nil nil [5385 5414])
            ("org-odt-lib-dir" variable
               (:constant-flag t
                :default-value (file-name-directory (or load-file-name (buffer-file-name))))
                nil [5467 5661])
            ("org-odt-data-dir" variable (:default-value (expand-file-name "../../etc/" org-odt-lib-dir)) nil [5663 5850])
            ("org-odt-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;\\1") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [5852 6118])
            ("org-odt-schema-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)))))
                nil [6120 6645])
            ("org-odt-styles-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir))) (expand-file-name "../etc/styles/" org-odt-lib-dir) (expand-file-name "./etc/styles/" org-odt-lib-dir) (expand-file-name "./org/" data-directory)))
                nil [6647 7323])
            ("org-odt-styles-dir" variable
               (:constant-flag t
                :default-value (let ((styles-dir (cl-find-if (lambda (dir) (and dir (file-readable-p (expand-file-name "OrgOdtContentTemplate.xml" dir)) (file-readable-p (expand-file-name "OrgOdtStyles.xml" dir)))) org-odt-styles-dir-list))) (unless styles-dir (error "Error (ox-odt): Cannot find factory styles files, aborting")) styles-dir))
                nil [7325 8245])
            ("org-odt-bookmark-prefix" variable
               (:constant-flag t
                :default-value "OrgXref.")
                nil [8247 8292])
            ("org-odt-manifest-file-entry-tag" variable
               (:constant-flag t
                :default-value "
<manifest:file-entry manifest:media-type=\"%s\" manifest:full-path=\"%s\"%s/>")
                nil [8294 8420])
            ("org-odt-file-extensions" variable
               (:constant-flag t
                :default-value (quote (("odt" . "OpenDocument Text") ("ott" . "OpenDocument Text Template") ("odm" . "OpenDocument Master Document") ("ods" . "OpenDocument Spreadsheet") ("ots" . "OpenDocument Spreadsheet Template") ("odg" . "OpenDocument Drawing (Graphics)") ("otg" . "OpenDocument Drawing Template") ("odp" . "OpenDocument Presentation") ("otp" . "OpenDocument Presentation Template") ("odi" . "OpenDocument Image") ("odf" . "OpenDocument Formula") ("odc" . "OpenDocument Chart"))))
                nil [8422 8964])
            ("org-odt-table-style-format" variable
               (:constant-flag t
                :default-value "
<style:style style:name=\"%s\" style:family=\"table\">
  <style:table-properties style:rel-width=\"%s%%\" fo:margin-top=\"0cm\" fo:margin-bottom=\"0.20cm\" table:align=\"center\"/>
</style:style>
")
                nil [8966 9251])
            ("org-odt-automatic-styles" variable (:default-value (quote nil)) nil [9253 9840])
            ("org-odt-object-counters" variable nil nil [9842 10014])
            ("org-odt-src-block-paragraph-format" variable (:default-value "<style:style style:name=\"OrgSrcBlock\" style:family=\"paragraph\" style:parent-style-name=\"Preformatted_20_Text\">
   <style:paragraph-properties fo:background-color=\"%s\" fo:padding=\"0.049cm\" fo:border=\"0.51pt solid #000000\" style:shadow=\"none\">
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties fo:color=\"%s\"/>
  </style:style>") nil [10016 10693])
            ("hfy-optimizations" variable nil nil [10695 10721])
            ("org-odt-embedded-formulas-count" variable nil nil [10722 10764])
            ("org-odt-embedded-images-count" variable nil nil [10765 10805])
            ("org-odt-image-size-probe-method" variable (:default-value (append (and (executable-find "identify") (quote (imagemagick))) (quote (emacs fixed)))) nil [10806 10998])
            ("org-odt-default-image-sizes-alist" variable (:default-value (quote (("as-char" 5 . 0.4) ("paragraph" 5 . 5)))) nil [11000 11168])
            ("org-odt-max-image-size" variable (:default-value (quote (17.0 . 20.0))) nil [11321 11414])
            ("org-odt-label-styles" variable
               (:constant-flag t
                :default-value (quote (("math-formula" "%c" "text" "(%n)") ("math-label" "(%n)" "text" "(%n)") ("category-and-value" "%e %n: %c" "category-and-value" "%e %n") ("value" "%e %n: %c" "value" "%n"))))
                nil [11416 12415])
            ("org-odt-category-map-alist" variable (:default-value (quote (("__Table__" "Table" "value" "Table" org-odt--enumerable-p) ("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p) ("__MathFormula__" "Text" "math-formula" "Equation" org-odt--enumerable-formula-p) ("__DvipngImage__" "Equation" "value" "Equation" org-odt--enumerable-latex-image-p) ("__Listing__" "Listing" "value" "Listing" org-odt--enumerable-p)))) nil [12417 13580])
            ("org-odt-manifest-file-entries" variable nil nil [13582 13624])
            ("hfy-user-sheet-assoc" variable nil nil [13625 13654])
            ("org-odt-zip-dir" variable nil nil [13656 13740])
            ("org-export-odt" customgroup (:user-visible-flag t) nil [13779 13902])
            ("org-odt-prettify-xml" variable nil nil [13921 14274])
            ("rng-loc" include nil nil [14299 14317])
            ("org-odt-schema-dir" variable (:default-value (cl-find-if (lambda (dir) (and dir (file-expand-wildcards (expand-file-name "od-manifest-schema*.rnc" dir)) (file-expand-wildcards (expand-file-name "od-schema*.rnc" dir)) (file-readable-p (expand-file-name "schemas.xml" dir)))) org-odt-schema-dir-list)) nil [14318 16180])
            ("org-odt-content-template-file" variable nil nil [16205 16551])
            ("org-odt-styles-file" variable nil nil [16553 18098])
            ("org-odt-display-outline-level" variable (:default-value 2) nil [18100 18303])
            ("org-odt-convert-processes" variable (:default-value (quote (("LibreOffice" "soffice --headless --convert-to %f%x --outdir %d %i") ("unoconv" "unoconv -f %f -o %d %i")))) nil [18331 19392])
            ("org-odt-convert-process" variable (:default-value "LibreOffice") nil [19394 19925])
            ("org-odt-convert-capabilities" variable (:default-value (quote (("Text" ("odt" "ott" "doc" "rtf" "docx") (("pdf" "pdf") ("odt" "odt") ("rtf" "rtf") ("ott" "ott") ("doc" "doc" ":\"MS Word 97\"") ("docx" "docx") ("html" "html"))) ("Web" ("html") (("pdf" "pdf") ("odt" "odt") ("html" "html"))) ("Spreadsheet" ("ods" "ots" "xls" "csv" "xlsx") (("pdf" "pdf") ("ots" "ots") ("html" "html") ("csv" "csv") ("ods" "ods") ("xls" "xls") ("xlsx" "xlsx"))) ("Presentation" ("odp" "otp" "ppt" "pptx") (("pdf" "pdf") ("swf" "swf") ("odp" "odp") ("otp" "otp") ("ppt" "ppt") ("pptx" "pptx") ("odg" "odg")))))) nil [19927 22525])
            ("org-odt-preferred-output-format" variable nil nil [22527 23339])
            ("put" code nil nil [23355 23423])
            ("org-odt-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [23440 23904])
            ("org-odt-format-headline-function" variable (:default-value (quote org-odt-format-headline-default-function)) nil [23922 24509])
            ("org-odt-format-inlinetask-function" variable (:default-value (quote org-odt-format-inlinetask-default-function)) nil [24530 25177])
            ("org-odt-with-latex" variable (:default-value org-export-with-latex) nil [25192 26298])
            ("org-odt-inline-formula-rules" variable (:default-value (quote (("file" . "\\.\\(mathml\\|mml\\|odf\\)\\'")))) nil [26313 26773])
            ("org-odt-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [26775 27241])
            ("org-odt-pixels-per-inch" variable (:default-value 96.0) nil [27243 27540])
            ("org-odt-create-custom-styles-for-srcblocks" variable (:default-value t) nil [27559 28295])
            ("org-odt-fontify-srcblocks" variable (:default-value t) nil [28297 28648])
            ("org-odt-table-styles" variable (:default-value (quote (("OrgEquation" "OrgEquation" ((use-first-column-styles . t) (use-last-column-styles . t))) ("TableWithHeaderRowAndColumn" "Custom" ((use-first-row-styles . t) (use-first-column-styles . t))) ("TableWithFirstRowandLastRow" "Custom" ((use-first-row-styles . t) (use-last-row-styles . t))) ("GriddedTable" "Custom" nil)))) nil [28663 32646])
            ("org-odt-use-date-fields" variable nil nil [32665 33964])
            ("org-odt--format-timestamp" function (:arguments ("timestamp" "end" "iso-date-p")) nil [34004 36112])
            ("org-odt--frame" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type" "title-and-desc")) nil [36126 36953])
            ("org-odt--zip-extract" function (:arguments ("archive" "members" "target")) nil [36979 37849])
            ("org-odt--target" function (:arguments ("text" "id")) nil [37864 38127])
            ("org-odt--textbox" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type")) nil [38143 38488])
            ("org-odt--format-toc" function (:arguments ("title" "entries" "depth")) nil [38516 39905])
            ("cl-defun" code nil nil [39907 40947])
            ("org-odt-toc" function (:arguments ("depth" "info" "scope")) nil [40949 42417])
            ("org-odt-add-automatic-style" function (:arguments ("object-type" "object-props")) nil [42442 43543])
            ("org-odt--checkbox" function (:arguments ("item")) nil [43560 43903])
            ("org-odt--build-date-styles" function (:arguments ("fmt" "style")) nil [43919 47655])
            ("org-odt-template" function (:arguments ("contents" "info")) nil [47657 58662])
            ("org-odt-bold" function (:arguments ("_bold" "contents" "_info")) nil [58703 58951])
            ("org-odt-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [58973 59195])
            ("org-odt-clock" function (:arguments ("clock" "contents" "info")) nil [59210 59873])
            ("org-odt-code" function (:arguments ("code" "_contents" "_info")) nil [59887 60188])
            ("org-odt-drawer" function (:arguments ("drawer" "contents" "info")) nil [60204 60545])
            ("org-odt-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [60568 60810])
            ("org-odt-entity" function (:arguments ("entity" "_contents" "_info")) nil [60826 61045])
            ("org-odt-example-block" function (:arguments ("example-block" "_contents" "info")) nil [61068 61292])
            ("org-odt-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [61316 61612])
            ("org-odt-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [61634 61952])
            ("org-odt-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [61973 62222])
            ("org-odt-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [62315 64672])
            ("org-odt-format-headline--wrap" function (:arguments ("headline" "backend" "info" "format-function" "extra-keys")) nil [64690 66326])
            ("org-odt-headline" function (:arguments ("headline" "contents" "info")) nil [66328 68899])
            ("org-odt-format-headline-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags")) nil [68901 69778])
            ("org-odt-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [69803 70078])
            ("org-odt--find-verb-separator" function (:arguments ("s")) nil [70165 70542])
            ("org-odt-inline-src-block" function (:arguments ("_inline-src-block" "_contents" "_info")) nil [70544 70779])
            ("org-odt-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [70799 71613])
            ("org-odt-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "name" "tags" "contents")) nil [71615 72177])
            ("org-odt-italic" function (:arguments ("_italic" "contents" "_info")) nil [72192 72452])
            ("org-odt-item" function (:arguments ("item" "contents" "info")) nil [72466 73039])
            ("org-odt-keyword" function (:arguments ("keyword" "_contents" "info")) nil [73055 73867])
            ("org-odt-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [74274 74617])
            ("org-odt-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [74808 75181])
            ("org-odt-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [75201 75397])
            ("org-odt--enumerate" function (:arguments ("element" "info" "predicate" "n")) nil [75443 76650])
            ("org-odt-format-label" function (:arguments ("element" "info" "op")) nil [76652 79907])
            ("org-odt--copy-image-file" function (:arguments ("path")) nil [79939 80649])
            ("org-odt--image-size" function (:arguments ("file" "info" "user-width" "user-height" "scale" "dpi" "embed-as")) nil [80651 83012])
            ("org-odt-link--inline-image" function (:arguments ("element" "info")) nil [83014 86085])
            ("org-odt-link--inline-formula" function (:arguments ("element" "info")) nil [86116 88004])
            ("org-odt--copy-formula-file" function (:arguments ("src-file")) nil [88006 89170])
            ("org-odt--render-image/formula" function (:arguments ("cfg-key" "href" "width" "height" "captions" "user-frame-params" "title-and-desc")) nil [89186 93292])
            ("org-odt--enumerable-p" function (:arguments ("element" "_info")) nil [93294 93474])
            ("org-odt--enumerable-image-p" function (:arguments ("element" "info")) nil [93476 94060])
            ("org-odt--enumerable-latex-image-p" function (:arguments ("element" "info")) nil [94062 94643])
            ("org-odt--enumerable-formula-p" function (:arguments ("element" "info")) nil [94645 95077])
            ("org-odt--standalone-link-p" function (:arguments ("element" "_info" "paragraph-predicate" "link-predicate")) nil [95079 96405])
            ("org-odt-link--infer-description" function (:arguments ("destination" "info")) nil [96407 100330])
            ("org-odt-link" function (:arguments ("link" "desc" "info")) nil [100332 105226])
            ("org-odt-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [105249 105631])
            ("org-odt--paragraph-style" function (:arguments ("paragraph")) nil [105649 106039])
            ("org-odt--format-paragraph" function (:arguments ("paragraph" "contents" "info" "default" "center" "quote")) nil [106041 107003])
            ("org-odt-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [107005 107366])
            ("org-odt-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [107386 108168])
            ("org-odt--encode-tabs-and-spaces" function (:arguments ("line")) nil [108187 108412])
            ("org-odt--encode-plain-text" function (:arguments ("text" "no-whitespace-filling")) nil [108414 108705])
            ("org-odt-plain-text" function (:arguments ("text" "info")) nil [108707 109664])
            ("org-odt-planning" function (:arguments ("planning" "contents" "info")) nil [109682 110693])
            ("org-odt-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [110718 111061])
            ("org-odt-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [111082 111294])
            ("org-odt-format-section" function (:arguments ("text" "style" "name")) nil [111311 111596])
            ("org-odt-section" function (:arguments ("_section" "contents" "_info")) nil [111599 111809])
            ("org-odt-radio-target" function (:arguments ("radio-target" "text" "info")) nil [111830 112087])
            ("org-odt-special-block" function (:arguments ("special-block" "contents" "info")) nil [112110 113542])
            ("org-odt-hfy-face-to-css" function (:arguments ("fn")) nil [113561 114943])
            ("org-odt-htmlfontify-string" function (:arguments ("line")) nil [114945 115649])
            ("org-odt-do-format-code" function (:arguments ("code" "info" "lang" "refs" "retain-labels" "num-start")) nil [115651 117512])
            ("org-odt-format-code" function (:arguments ("element" "info")) nil [117514 118004])
            ("org-odt-src-block" function (:arguments ("src-block" "_contents" "info")) nil [118006 118700])
            ("org-odt-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [118727 119085])
            ("org-odt-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [119109 119406])
            ("org-odt-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [119425 119706])
            ("org-odt-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [119727 120016])
            ("org-odt-table-style-spec" function (:arguments ("element" "info")) nil [120036 120316])
            ("org-odt-get-table-cell-styles" function (:arguments ("table-cell" "info")) nil [120318 123082])
            ("org-odt-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [123084 125562])
            ("org-odt-table-row" function (:arguments ("table-row" "contents" "info")) nil [125581 126824])
            ("org-odt-table-first-row-data-cells" function (:arguments ("table" "info")) nil [126839 127233])
            ("org-odt--table" function (:arguments ("table" "contents" "info")) nil [127235 129178])
            ("org-odt-table" function (:arguments ("table" "contents" "info")) nil [129180 134904])
            ("org-odt-target" function (:arguments ("target" "_contents" "info")) nil [134920 135141])
            ("org-odt-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [135160 136833])
            ("org-odt-underline" function (:arguments ("_underline" "contents" "_info")) nil [136852 137125])
            ("org-odt-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [137143 137460])
            ("org-odt-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [137481 138003])
            ("org-odt--translate-image-links" function (:arguments ("data" "_backend" "info")) nil [138033 138163])
            ("org-odt--translate-latex-fragments" function (:arguments ("tree" "_backend" "info")) nil [138187 141998])
            ("org-odt--translate-description-lists" function (:arguments ("tree" "_backend" "info")) nil [142142 143857])
            ("org-odt--translate-list-tables" function (:arguments ("tree" "_backend" "info")) nil [145059 146652])
            ("org-odt-create-manifest-file-entry" function (:arguments ("args")) nil [146683 146782])
            ("org-odt-write-manifest-file" function nil nil [146784 147588])
            ("org-odt--export-wrap" function (:arguments ("out-file" "body")) nil [147590 151929])
            ("org-odt-export-as-odf" function
               (:user-visible-flag t
                :arguments ("latex-frag" "odf-file"))
                nil [151984 153949])
            ("org-odt-export-as-odf-and-open" function (:user-visible-flag t) nil [153966 154250])
            ("org-odt-export-to-odt" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "ext-plist"))
                nil [154302 156781])
            ("org-odt-reachable-p" function (:arguments ("in-fmt" "out-fmt")) nil [156837 157180])
            ("org-odt-do-convert" function (:arguments ("in-file" "out-fmt" "open")) nil [157182 158703])
            ("org-odt-do-reachable-formats" function (:arguments ("in-fmt")) nil [158705 159531])
            ("org-odt-reachable-formats" function (:arguments ("in-fmt")) nil [159533 159823])
            ("org-odt-convert-read-params" function nil nil [159825 160472])
            ("org-odt-convert" function
               (:user-visible-flag t
                :arguments ("in-file" "out-fmt" "open"))
                nil [160489 161005])
            ("dolist" code nil nil [161036 161230])
            ("ox-odt" package nil nil [161232 161249]))          
      :file "ox-odt.el"
      :pointmax 161350
      :fsize 161349
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1212 1229])
            ("ox-ascii" include nil nil [1230 1249])
            ("declare-function" code nil nil [1250 1310])
            ("org-export-icalendar" customgroup (:user-visible-flag t) nil [1348 1486])
            ("org-icalendar-combined-agenda-file" variable (:default-value "~/org.ics") nil [1488 1814])
            ("org-icalendar-alarm-time" variable nil nil [1816 2244])
            ("org-icalendar-combined-name" variable (:default-value "OrgMode") nil [2246 2418])
            ("org-icalendar-combined-description" variable nil nil [2420 2588])
            ("org-icalendar-exclude-tags" variable nil nil [2590 2881])
            ("org-icalendar-use-deadline" variable (:default-value (quote (event-if-not-todo todo-due))) nil [2883 3619])
            ("org-icalendar-use-scheduled" variable (:default-value (quote (todo-start))) nil [3621 4514])
            ("org-icalendar-categories" variable (:default-value (quote (local-tags category))) nil [4516 5177])
            ("org-icalendar-with-timestamps" variable (:default-value (quote active)) nil [5179 5787])
            ("org-icalendar-include-todo" variable nil nil [5789 6383])
            ("org-icalendar-include-bbdb-anniversaries" variable nil nil [6385 6615])
            ("org-icalendar-include-sexps" variable (:default-value t) nil [6617 6848])
            ("org-icalendar-include-body" variable (:default-value t) nil [6850 7291])
            ("org-icalendar-store-UID" variable nil nil [7293 8017])
            ("org-icalendar-timezone" variable (:default-value (getenv "TZ")) nil [8019 8293])
            ("org-icalendar-date-time-format" variable (:default-value ":%Y%m%dT%H%M%S") nil [8295 8980])
            ("org-icalendar-after-save-hook" variable nil nil [8982 9230])
            ("org-export-define-derived-backend" code nil nil [9256 10913])
            ("org-icalendar-create-uid" function (:arguments ("file" "bell")) nil [10942 11505])
            ("org-icalendar-blocked-headline-p" function (:arguments ("headline" "info")) nil [11507 12706])
            ("org-icalendar-use-UTC-date-time-p" function nil nil [12708 12926])
            ("org-agenda-default-appointment-duration" variable nil nil [12928 12976])
            ("org-icalendar-convert-timestamp" function (:arguments ("timestamp" "keyword" "end" "tz")) nil [12999 15699])
            ("org-icalendar-dtstamp" function nil nil [15701 15829])
            ("org-icalendar-get-categories" function (:arguments ("entry" "info")) nil [15831 16613])
            ("org-icalendar-transcode-diary-sexp" function (:arguments ("sexp" "uid" "summary")) nil [16615 17208])
            ("org-icalendar-cleanup-string" function (:arguments ("s")) nil [17210 17521])
            ("org-icalendar-fold-string" function (:arguments ("s")) nil [17523 18349])
            ("org-icalendar-clear-blank-lines" function (:arguments ("headline" "_back-end" "_info")) nil [18367 18626])
            ("org-icalendar-entry" function (:arguments ("entry" "contents" "info")) nil [19059 24386])
            ("org-icalendar--vevent" function (:arguments ("entry" "timestamp" "uid" "summary" "location" "description" "categories" "timezone")) nil [24388 26094])
            ("org-icalendar--vtodo" function (:arguments ("entry" "uid" "summary" "location" "description" "categories" "timezone")) nil [26096 28136])
            ("org-icalendar--valarm" function (:arguments ("entry" "timestamp" "summary")) nil [28138 29157])
            ("org-icalendar-template" function (:arguments ("contents" "info")) nil [29175 29904])
            ("org-icalendar--vcalendar" function (:arguments ("name" "owner" "tz" "description" "contents")) nil [29906 30557])
            ("org-icalendar-export-to-ics" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only"))
                nil [30604 31978])
            ("org-icalendar-export-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [31995 33123])
            ("org-icalendar-combine-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [33140 33888])
            ("org-icalendar-export-current-agenda" function (:arguments ("file")) nil [33890 35139])
            ("org-icalendar--combine-files" function (:arguments ("files")) nil [35141 36675])
            ("ox-icalendar" package nil nil [36678 36701]))          
      :file "ox-icalendar.el"
      :pointmax 36808
      :fsize 36807
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [984 1001])
            ("ox" include nil nil [1002 1015])
            ("ox-publish" include nil nil [1016 1037])
            ("org-latex-default-packages-alist" variable nil nil [1039 1080])
            ("org-latex-packages-alist" variable nil nil [1081 1114])
            ("orgtbl-exp-regexp" variable nil nil [1115 1141])
            ("org-export-define-backend" code nil nil [1167 6856])
            ("org-latex-babel-language-alist" variable
               (:constant-flag t
                :default-value (quote (("af" . "afrikaans") ("bg" . "bulgarian") ("bt-br" . "brazilian") ("ca" . "catalan") ("cs" . "czech") ("cy" . "welsh") ("da" . "danish") ("de" . "germanb") ("de-at" . "naustrian") ("de-de" . "ngerman") ("el" . "greek") ("en" . "english") ("en-au" . "australian") ("en-ca" . "canadian") ("en-gb" . "british") ("en-ie" . "irish") ("en-nz" . "newzealand") ("en-us" . "american") ("es" . "spanish") ("et" . "estonian") ("eu" . "basque") ("fi" . "finnish") ("fr" . "frenchb") ("fr-ca" . "canadien") ("gl" . "galician") ("hr" . "croatian") ("hu" . "hungarian") ("id" . "indonesian") ("is" . "icelandic") ("it" . "italian") ("la" . "latin") ("ms" . "malay") ("nl" . "dutch") ("nb" . "norsk") ("nn" . "nynorsk") ("no" . "norsk") ("pl" . "polish") ("pt" . "portuguese") ("ro" . "romanian") ("ru" . "russian") ("sa" . "sanskrit") ("sb" . "uppersorbian") ("sk" . "slovak") ("sl" . "slovene") ("sq" . "albanian") ("sr" . "serbian") ("sv" . "swedish") ("ta" . "tamil") ("tr" . "turkish") ("uk" . "ukrainian"))))
                nil [6885 8187])
            ("org-latex-polyglossia-language-alist" variable
               (:constant-flag t
                :default-value (quote (("am" "amharic") ("ast" "asturian") ("ar" "arabic") ("bo" "tibetan") ("bn" "bengali") ("bg" "bulgarian") ("br" "breton") ("bt-br" "brazilian") ("ca" "catalan") ("cop" "coptic") ("cs" "czech") ("cy" "welsh") ("da" "danish") ("de" "german" "german") ("de-at" "german" "austrian") ("de-de" "german" "german") ("dv" "divehi") ("el" "greek") ("en" "english" "usmax") ("en-au" "english" "australian") ("en-gb" "english" "uk") ("en-nz" "english" "newzealand") ("en-us" "english" "usmax") ("eo" "esperanto") ("es" "spanish") ("et" "estonian") ("eu" "basque") ("fa" "farsi") ("fi" "finnish") ("fr" "french") ("fu" "friulan") ("ga" "irish") ("gd" "scottish") ("gl" "galician") ("he" "hebrew") ("hi" "hindi") ("hr" "croatian") ("hu" "magyar") ("hy" "armenian") ("id" "bahasai") ("ia" "interlingua") ("is" "icelandic") ("it" "italian") ("kn" "kannada") ("la" "latin" "modern") ("la-modern" "latin" "modern") ("la-classic" "latin" "classic") ("la-medieval" "latin" "medieval") ("lo" "lao") ("lt" "lithuanian") ("lv" "latvian") ("mr" "maranthi") ("ml" "malayalam") ("nl" "dutch") ("nb" "norsk") ("nn" "nynorsk") ("nko" "nko") ("no" "norsk") ("oc" "occitan") ("pl" "polish") ("pms" "piedmontese") ("pt" "portuges") ("rm" "romansh") ("ro" "romanian") ("ru" "russian") ("sa" "sanskrit") ("hsb" "usorbian") ("dsb" "lsorbian") ("sk" "slovak") ("sl" "slovenian") ("se" "samin") ("sq" "albanian") ("sr" "serbian") ("sv" "swedish") ("syr" "syriac") ("ta" "tamil") ("te" "telugu") ("th" "thai") ("tk" "turkmen") ("tr" "turkish") ("uk" "ukrainian") ("ur" "urdu") ("vi" "vietnamese"))))
                nil [8189 10197])
            ("org-latex-table-matrix-macros" variable
               (:constant-flag t
                :default-value (quote (("bordermatrix" . "\\cr") ("qbordermatrix" . "\\cr") ("kbordermatrix" . "\\\\"))))
                nil [10201 10392])
            ("org-latex-math-environments-re" variable
               (:constant-flag t
                :default-value (format "\\`[ 	]*\\\\begin{%s\\*?}" (regexp-opt (quote ("equation" "eqnarray" "math" "displaymath" "align" "gather" "multline" "flalign" "alignat" "xalignat" "xxalignat" "subequations" "dmath" "dseries" "dgroup" "darray" "empheq")))))
                nil [10394 10777])
            ("org-export-latex" customgroup (:user-visible-flag t) nil [10814 10943])
            ("org-latex-caption-above" variable (:default-value (quote (table))) nil [10959 11653])
            ("org-latex-prefer-user-labels" variable nil nil [11655 13648])
            ("org-latex-default-class" variable (:default-value "article") nil [13665 13803])
            ("org-latex-classes" variable (:default-value (quote (("article" "\\documentclass[11pt]{article}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass[11pt]{report}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book" "\\documentclass[11pt]{book}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))) nil [13805 18808])
            ("org-latex-inputenc-alist" variable nil nil [18810 19213])
            ("org-latex-title-command" variable (:default-value "\\maketitle") nil [19215 19854])
            ("org-latex-subtitle-format" variable (:default-value "\\\\\\medskip
\\large %s") nil [19856 20185])
            ("org-latex-subtitle-separate" variable nil nil [20187 20390])
            ("org-latex-toc-command" variable (:default-value "\\tableofcontents

") nil [20392 20691])
            ("org-latex-hyperref-template" variable (:default-value "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c}, 
 pdflang={%L}}
") nil [20693 21593])
            ("org-latex-format-headline-function" variable (:default-value (quote org-latex-format-headline-default-function)) nil [21610 22241])
            ("org-latex-footnote-separator" variable (:default-value "\\textsuperscript{,}\\,") nil [22260 22406])
            ("org-latex-footnote-defined-format" variable (:default-value "\\textsuperscript{\\ref{%s}}") nil [22408 22897])
            ("org-latex-active-timestamp-format" variable (:default-value "\\textit{%s}") nil [22916 23082])
            ("org-latex-inactive-timestamp-format" variable (:default-value "\\textit{%s}") nil [23084 23254])
            ("org-latex-diary-timestamp-format" variable (:default-value "\\textit{%s}") nil [23256 23420])
            ("org-latex-images-centered" variable (:default-value t) nil [23435 23628])
            ("org-latex-image-default-option" variable nil nil [23630 23801])
            ("org-latex-image-default-width" variable (:default-value ".9\\linewidth") nil [23803 24038])
            ("org-latex-image-default-height" variable nil nil [24040 24341])
            ("org-latex-default-figure-position" variable (:default-value "htbp") nil [24343 24548])
            ("org-latex-inline-image-rules" variable (:default-value (\` (("file" \, (regexp-opt (quote ("pdf" "jpeg" "jpg" "png" "ps" "eps" "tikz" "pgf" "svg"))))))) nil [24550 25337])
            ("org-latex-link-with-unknown-path-format" variable (:default-value "\\texttt{%s}") nil [25339 25500])
            ("org-latex-default-table-environment" variable (:default-value "tabular") nil [25516 25714])
            ("org-latex-default-table-mode" variable (:default-value (quote table)) nil [25716 26749])
            ("org-latex-tables-centered" variable (:default-value t) nil [26751 26916])
            ("org-latex-tables-booktabs" variable nil nil [26918 27335])
            ("org-latex-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [27337 27757])
            ("org-latex-text-markup-alist" variable (:default-value (quote ((bold . "\\textbf{%s}") (code . protectedtexttt) (italic . "\\emph{%s}") (strike-through . "\\sout{%s}") (underline . "\\uline{%s}") (verbatim . protectedtexttt)))) nil [27777 28771])
            ("org-latex-format-drawer-function" variable (:default-value (lambda (_ contents) contents)) nil [28788 29257])
            ("org-latex-format-inlinetask-function" variable (:default-value (quote org-latex-format-inlinetask-default-function)) nil [29278 29979])
            ("org-latex-listings" variable nil nil [29997 31551])
            ("org-latex-listings-langs" variable (:default-value (quote ((emacs-lisp "Lisp") (lisp "Lisp") (clojure "Lisp") (c "C") (cc "C++") (fortran "fortran") (perl "Perl") (cperl "Perl") (python "Python") (ruby "Ruby") (html "HTML") (xml "XML") (tex "TeX") (latex "[LaTeX]TeX") (shell-script "bash") (gnuplot "Gnuplot") (ocaml "Caml") (caml "Caml") (sql "SQL") (sqlite "sql") (makefile "make") (R "r")))) nil [31553 32532])
            ("org-latex-listings-options" variable nil nil [32534 33452])
            ("org-latex-minted-langs" variable (:default-value (quote ((emacs-lisp "common-lisp") (cc "c++") (cperl "perl") (shell-script "bash") (caml "ocaml")))) nil [33454 34257])
            ("org-latex-minted-options" variable nil nil [34259 35157])
            ("org-latex-custom-lang-environments" variable nil nil [35159 36646])
            ("org-latex-compiler-file-string" variable (:default-value "%% Intended LaTeX compiler: %s
") nil [36667 37160])
            ("org-latex-compiler" variable (:default-value "pdflatex") nil [37162 37625])
            ("org-latex-compilers" variable
               (:constant-flag t
                :default-value (quote ("pdflatex" "xelatex" "lualatex")))
                nil [37627 37750])
            ("org-latex-bib-compiler" variable (:default-value "bibtex") nil [37752 38180])
            ("org-latex-pdf-process" variable (:default-value (quote ("%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f"))) nil [38182 40463])
            ("org-latex-logfiles-extensions" variable (:default-value (quote ("aux" "bcf" "blg" "fdb_latexmk" "fls" "figlist" "idx" "log" "nav" "out" "ptc" "run.xml" "snm" "toc" "vrb" "xdv"))) nil [40465 40885])
            ("org-latex-remove-logfiles" variable (:default-value t) nil [40887 41220])
            ("org-latex-known-warnings" variable (:default-value (quote (("Reference.*?undefined" . "[undefined reference]") ("Runaway argument" . "[runaway argument]") ("Underfull \\hbox" . "[underfull hbox]") ("Overfull \\hbox" . "[overfull hbox]") ("Citation.*?undefined" . "[undefined citation]") ("Undefined control sequence" . "[undefined control sequence]")))) nil [41222 41962])
            ("org-latex--caption-above-p" function (:arguments ("element" "info")) nil [41991 42336])
            ("org-latex--label" function (:arguments ("datum" "info" "force" "full")) nil [42338 43555])
            ("org-latex--caption/label-string" function (:arguments ("element" "info")) nil [43557 45131])
            ("org-latex-guess-inputenc" function (:arguments ("header")) nil [45133 45836])
            ("org-latex-guess-babel-language" function (:arguments ("header" "info")) nil [45838 47254])
            ("org-latex-guess-polyglossia-language" function (:arguments ("header" "info")) nil [47256 48996])
            ("org-latex--remove-packages" function (:arguments ("pkg-alist" "info")) nil [48998 49715])
            ("org-latex--find-verb-separator" function (:arguments ("s")) nil [49717 50096])
            ("org-latex--make-option-string" function (:arguments ("options")) nil [50098 50515])
            ("org-latex--wrap-label" function (:arguments ("element" "output" "info")) nil [50517 50968])
            ("org-latex--protect-text" function (:arguments ("text")) nil [50970 51129])
            ("org-latex--text-markup" function (:arguments ("text" "markup" "info")) nil [51131 52277])
            ("org-latex--delayed-footnotes-definitions" function (:arguments ("element" "info")) nil [52279 53600])
            ("org-latex--translate" function (:arguments ("s" "info")) nil [53602 53783])
            ("org-latex--format-spec" function (:arguments ("info")) nil [53785 54644])
            ("org-latex--insert-compiler" function (:arguments ("info")) nil [54646 55007])
            ("org-latex-matrices-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [55024 55128])
            ("org-latex-math-block-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [55130 55238])
            ("org-latex-math-block-options-filter" function (:arguments ("info" "_backend")) nil [55240 55442])
            ("org-latex-clean-invalid-line-breaks" function (:arguments ("data" "_backend" "_info")) nil [55444 55609])
            ("org-latex-make-preamble" function (:arguments ("info" "template" "snippet?")) nil [55642 57067])
            ("org-latex-template" function (:arguments ("contents" "info")) nil [57069 59964])
            ("org-latex-bold" function (:arguments ("_bold" "contents" "info")) nil [60005 60222])
            ("org-latex-center-block" function (:arguments ("center-block" "contents" "info")) nil [60244 60557])
            ("org-latex-clock" function (:arguments ("clock" "_contents" "info")) nil [60572 61051])
            ("org-latex-code" function (:arguments ("code" "_contents" "info")) nil [61065 61296])
            ("org-latex-drawer" function (:arguments ("drawer" "contents" "info")) nil [61312 61695])
            ("org-latex-dynamic-block" function (:arguments ("dynamic-block" "contents" "info")) nil [61718 62005])
            ("org-latex-entity" function (:arguments ("entity" "_contents" "_info")) nil [62021 62244])
            ("org-latex-example-block" function (:arguments ("example-block" "_contents" "info")) nil [62267 62852])
            ("org-latex-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [62874 63206])
            ("org-latex-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [63230 63532])
            ("org-latex-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [63553 63908])
            ("org-latex-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [63936 65862])
            ("org-latex-headline" function (:arguments ("headline" "contents" "info")) nil [65880 71298])
            ("org-latex-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "_info")) nil [71300 71725])
            ("org-latex-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [71750 72573])
            ("org-latex-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [72599 74065])
            ("org-latex-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [74085 74964])
            ("org-latex-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents" "_info")) nil [74966 75718])
            ("org-latex-italic" function (:arguments ("_italic" "contents" "info")) nil [75734 75961])
            ("org-latex-item" function (:arguments ("item" "contents" "info")) nil [75975 78177])
            ("org-latex-keyword" function (:arguments ("keyword" "_contents" "info")) nil [78194 79558])
            ("org-latex--environment-type" function (:arguments ("latex-environment")) nil [79585 80471])
            ("org-latex-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [80473 81685])
            ("org-latex-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [81708 82206])
            ("org-latex-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [82226 82414])
            ("org-latex-image-link-filter" function (:arguments ("data" "_backend" "info")) nil [82428 82557])
            ("org-latex--inline-image" function (:arguments ("link" "info")) nil [82559 87898])
            ("org-latex-link" function (:arguments ("link" "desc" "info")) nil [87900 91135])
            ("org-latex-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [91158 91530])
            ("org-latex-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [91549 91776])
            ("org-latex-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [91796 92505])
            ("org-latex-plain-text" function (:arguments ("text" "info")) nil [92525 93965])
            ("org-latex-planning" function (:arguments ("planning" "_contents" "info")) nil [93983 94993])
            ("org-latex-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [95018 95335])
            ("org-latex--wrap-latex-matrices" function (:arguments ("data" "info")) nil [95516 97651])
            ("org-latex-matrices" function (:arguments ("matrices" "contents" "_info")) nil [97653 98004])
            ("org-latex--wrap-latex-math-block" function (:arguments ("data" "info")) nil [98123 100300])
            ("org-latex-math-block" function (:arguments ("_math-block" "contents" "_info")) nil [100302 100564])
            ("org-latex-quote-block" function (:arguments ("quote-block" "contents" "info")) nil [100584 100884])
            ("org-latex-radio-target" function (:arguments ("radio-target" "text" "info")) nil [100906 101174])
            ("org-latex-section" function (:arguments ("_section" "contents" "_info")) nil [101191 101397])
            ("org-latex-special-block" function (:arguments ("special-block" "contents" "info")) nil [101420 102068])
            ("org-latex-src-block" function (:arguments ("src-block" "_contents" "info")) nil [102087 108523])
            ("org-latex-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [108550 108843])
            ("org-latex-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [108867 109134])
            ("org-latex--script-size" function (:arguments ("object" "info")) nil [109153 110414])
            ("org-latex-subscript" function (:arguments ("subscript" "_contents" "info")) nil [110416 110653])
            ("org-latex-superscript" function (:arguments ("superscript" "_contents" "info")) nil [110674 110919])
            ("org-latex-table" function (:arguments ("table" "contents" "info")) nil [111351 112488])
            ("org-latex--align-string" function (:arguments ("table" "info" "math?")) nil [112490 113596])
            ("org-latex--org-table" function (:arguments ("table" "contents" "info")) nil [113598 117648])
            ("org-latex--table.el-table" function (:arguments ("table" "info")) nil [117650 119189])
            ("org-latex--math-table" function (:arguments ("table" "info")) nil [119191 120626])
            ("org-latex-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [120646 121257])
            ("org-latex-table-row" function (:arguments ("table-row" "contents" "info")) nil [121276 123494])
            ("org-latex-target" function (:arguments ("target" "_contents" "info")) nil [123510 123729])
            ("org-latex-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [123748 124269])
            ("org-latex-underline" function (:arguments ("_underline" "contents" "info")) nil [124288 124530])
            ("org-latex-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [124548 124802])
            ("org-latex-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [124823 125622])
            ("org-latex-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [125666 126872])
            ("org-latex-convert-region-to-latex" function (:user-visible-flag t) nil [126889 127206])
            ("org-latex-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [127223 128314])
            ("org-latex-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [128331 129513])
            ("org-latex-compile" function (:arguments ("texfile" "snippet")) nil [129515 131771])
            ("org-latex--collect-warnings" function (:arguments ("buffer")) nil [131773 132495])
            ("org-latex-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [132512 132839])
            ("org-latex-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [132856 133689])
            ("ox-latex" package nil nil [133692 133711]))          
      :file "ox-latex.el"
      :pointmax 133814
      :fsize 133813
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1079 1096])
            ("ox-html" include nil nil [1097 1115])
            ("ox-publish" include nil nil [1116 1137])
            ("org-export-md" customgroup (:user-visible-flag t) nil [1174 1347])
            ("org-md-headline-style" variable (:default-value (quote atx)) nil [1349 1605])
            ("org-md-footnotes-section" variable (:default-value "%s%s") nil [1624 1943])
            ("org-md-footnote-format" variable (:default-value "<sup>%s</sup>") nil [1945 2191])
            ("org-export-define-derived-backend" code nil nil [2216 3830])
            ("org-md-separate-elements" function (:arguments ("tree" "_backend" "info")) nil [3847 4875])
            ("org-md-bold" function (:arguments ("_bold" "contents" "_info")) nil [4916 5126])
            ("org-md-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [5153 5559])
            ("org-md-example-block" function (:arguments ("example-block" "_contents" "info")) nil [5610 5921])
            ("org-md-export-block" function (:arguments ("export-block" "contents" "info")) nil [5923 6358])
            ("org-md-headline" function (:arguments ("headline" "contents" "info")) nil [6376 8327])
            ("org-md--headline-referred-p" function (:arguments ("headline" "info")) nil [8330 9893])
            ("org-md--headline-title" function (:arguments ("style" "level" "title" "anchor" "tags")) nil [9895 10744])
            ("org-md-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [10768 10993])
            ("org-md-italic" function (:arguments ("_italic" "contents" "_info")) nil [11009 11225])
            ("org-md-item" function (:arguments ("item" "contents" "info")) nil [11239 12169])
            ("org-md-keyword" function (:arguments ("keyword" "contents" "info")) nil [12187 12923])
            ("org-md-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [12943 13128])
            ("org-md-link" function (:arguments ("link" "contents" "info")) nil [13142 16148])
            ("org-md-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [16171 16543])
            ("org-md-paragraph" function (:arguments ("paragraph" "contents" "_info")) nil [16562 16978])
            ("org-md-plain-list" function (:arguments ("_plain-list" "contents" "_info")) nil [16998 17205])
            ("org-md-plain-text" function (:arguments ("text" "info")) nil [17225 18309])
            ("org-md-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [18334 18641])
            ("org-md-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [18662 18953])
            ("org-md-section" function (:arguments ("_section" "contents" "_info")) nil [18970 19165])
            ("org-md--build-toc" function (:arguments ("info" "n" "keyword" "local")) nil [19183 20820])
            ("org-md--footnote-formatted" function (:arguments ("footnote" "info")) nil [20822 21388])
            ("org-md--footnote-section" function (:arguments ("info")) nil [21390 22134])
            ("org-md-inner-template" function (:arguments ("contents" "info")) nil [22136 22722])
            ("org-md-template" function (:arguments ("contents" "_info")) nil [22724 22932])
            ("org-md-export-as-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [22978 23879])
            ("org-md-convert-region-to-md" function (:user-visible-flag t) nil [23896 24209])
            ("org-md-export-to-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [24227 25033])
            ("org-md-publish-to-md" function (:arguments ("plist" "filename" "pub-dir")) nil [25050 25370])
            ("ox-md" package nil nil [25372 25388]))          
      :file "ox-md.el"
      :pointmax 25488
      :fsize 25487
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1126 1143])
            ("org" include nil nil [1144 1158])
            ("declare-function" code nil nil [1160 1220])
            ("declare-function" code nil nil [1221 1291])
            ("declare-function" code nil nil [1292 1364])
            ("declare-function" code nil nil [1365 1424])
            ("declare-function" code nil nil [1425 1479])
            ("org-frame-title-format-backup" variable (:default-value frame-title-format) nil [1481 1538])
            ("org-time-stamp-formats" variable nil nil [1539 1570])
            ("org-clock" customgroup (:user-visible-flag t) nil [1573 1697])
            ("org-clock-into-drawer" variable (:default-value t) nil [1699 2639])
            ("org-clock-into-drawer" function nil nil [2641 3346])
            ("org-clock-out-when-done" variable (:default-value t) nil [3348 3911])
            ("org-clock-rounding-minutes" variable nil nil [3913 4657])
            ("org-clock-out-remove-zero-time-clocks" variable nil nil [4659 4822])
            ("org-clock-in-switch-to-state" variable nil nil [4824 5276])
            ("org-clock-out-switch-to-state" variable nil nil [5278 5732])
            ("org-clock-history-length" variable (:default-value 5) nil [5734 5859])
            ("org-clock-goto-may-find-recent-task" variable (:default-value t) nil [5861 6024])
            ("org-clock-heading-function" variable nil nil [6026 6334])
            ("org-clock-string-limit" variable nil nil [6336 6482])
            ("org-clock-in-resume" variable nil nil [6484 6740])
            ("org-clock-persist" variable nil nil [6742 7555])
            ("org-clock-persist-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory "org-clock-save.el"))) nil [7557 7744])
            ("org-clock-persist-query-save" variable nil nil [7746 7890])
            ("org-clock-persist-query-resume" variable (:default-value t) nil [7892 8041])
            ("org-clock-sound" variable nil nil [8043 8378])
            ("org-clock-mode-line-total" variable (:default-value (quote auto)) nil [8380 9125])
            ("defvaralias" code nil nil [9127 9192])
            ("org-clock-task-overrun-text" variable nil nil [9193 9699])
            ("org-show-notification-handler" variable nil nil [9701 9988])
            ("org-clocktable" customgroup (:user-visible-flag t) nil [9990 10116])
            ("org-clocktable-defaults" variable (:default-value (list :maxlevel 2 :lang (or (bound-and-true-p org-export-default-language) "en") :scope (quote file) :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow (quote 40!) :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)) nil [10118 10626])
            ("org-clock-clocktable-formatter" variable (:default-value (quote org-clocktable-write-default)) nil [10628 10868])
            ("org-clock-clocktable-language-setup" variable (:default-value (quote (("en" "File" "L" "Timestamp" "Headline" "Time" "ALL" "Total time" "File time" "Clock summary at") ("es" "Archivo" "N" "Fecha y hora" "Tarea" "Tiempo" "TODO" "Tiempo total" "Tiempo archivo" "Clock summary at") ("fr" "Fichier" "N" "Horodatage" "En-tête" "Durée" "TOUT" "Durée totale" "Durée fichier" "Horodatage sommaire à") ("nl" "Bestand" "N" "Tijdstip" "Hoofding" "Duur" "ALLES" "Totale duur" "Bestandstijd" "Clock summary at") ("de" "Datei" "E" "Zeitstempel" "Kopfzeile" "Dauer" "GESAMT" "Gesamtdauer" "Dateizeit" "Erstellt am")))) nil [10931 11686])
            ("org-clock-clocktable-default-properties" variable (:default-value (quote (:maxlevel 2 :scope file))) nil [11688 11939])
            ("org-clock-idle-time" variable nil nil [11941 12157])
            ("org-clock-auto-clock-resolution" variable (:default-value (quote when-no-clock-is-running)) nil [12159 12457])
            ("org-clock-report-include-clocking-task" variable nil nil [12459 12643])
            ("org-clock-resolve-expert" variable nil nil [12645 12813])
            ("org-clock-continuously" variable nil nil [12815 12982])
            ("org-clock-total-time-cell-format" variable (:default-value "*%s*") nil [12984 13133])
            ("org-clock-file-time-cell-format" variable (:default-value "*%s*") nil [13135 13282])
            ("org-clock-clocked-in-display" variable (:default-value (quote mode-line)) nil [13284 13844])
            ("org-clock-frame-title-format" variable (:default-value (quote (t org-mode-line-string))) nil [13846 14318])
            ("org-clock-x11idle-program-name" variable (:default-value "x11idle") nil [14320 14693])
            ("org-clock-goto-before-context" variable (:default-value 2) nil [14695 14894])
            ("org-clock-display-default-range" variable (:default-value (quote thisyear)) nil [14896 15435])
            ("org-clock-in-prepare-hook" variable nil nil [15437 15657])
            ("org-clock-in-hook" variable nil nil [15658 15726])
            ("org-clock-out-hook" variable nil nil [15727 15804])
            ("org-clock-cancel-hook" variable nil nil [15806 15887])
            ("org-clock-goto-hook" variable nil nil [15888 15980])
            ("org-clock-has-been-used" variable nil nil [15981 16079])
            ("org-clock-stored-history" variable nil nil [16081 16167])
            ("org-clock-stored-resume-clock" variable nil nil [16168 16257])
            ("org-mode-line-string" variable nil nil [16299 16331])
            ("put" code nil nil [16332 16383])
            ("org-clock-mode-line-timer" variable nil nil [16385 16423])
            ("org-clock-idle-timer" variable nil nil [16424 16457])
            ("org-clock-heading" variable nil nil [16458 16484])
            ("org-clock-start-time" variable nil nil [16505 16537])
            ("org-clock-leftover-time" variable nil nil [16539 16650])
            ("org-clock-effort" variable nil nil [16652 16732])
            ("org-clock-total-time" variable nil nil [16734 16896])
            ("org-clock-history" variable nil nil [16898 16981])
            ("org-clock-default-task" variable (:default-value (make-marker)) nil [16983 17177])
            ("org-clock-interrupted-task" variable (:default-value (make-marker)) nil [17179 17308])
            ("org-clock-mode-line-map" variable (:default-value (make-sparse-keymap)) nil [17310 17363])
            ("define-key" code nil nil [17364 17436])
            ("define-key" code nil nil [17437 17509])
            ("org-clock--translate" function (:arguments ("s" "language")) nil [17511 17926])
            ("org-clock--mode-line-heading" function nil nil [17928 18284])
            ("org-clock-menu" function nil nil [18286 18603])
            ("org-clock-history-push" function (:arguments ("pos" "buffer")) nil [18605 19334])
            ("org-clock-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [19336 19758])
            ("org-clock-drawer-name" function nil nil [19760 20064])
            ("org-clocking-buffer" function nil nil [20066 20206])
            ("org-clocking-p" function nil nil [20208 20310])
            ("org-clock-before-select-task-hook" variable nil nil [20312 20424])
            ("org-clock-select-task" function (:arguments ("prompt")) nil [20426 22487])
            ("org-clock-insert-selection-line" function (:arguments ("i" "marker")) nil [22489 23294])
            ("org-clock-task-overrun" variable nil nil [23296 23403])
            ("org-clock-update-period" variable (:default-value 60) nil [23404 23501])
            ("org-clock-get-clock-string" function nil nil [23503 24467])
            ("org-clock-get-last-clock-out-time" function nil nil [24469 24792])
            ("org-clock-update-mode-line" function (:arguments ("refresh")) nil [24794 25928])
            ("org-clock-get-clocked-time" function nil nil [25930 26275])
            ("org-clock-modify-effort-estimate" function
               (:user-visible-flag t
                :arguments ("value"))
                nil [26277 27845])
            ("org-clock-notification-was-shown" variable nil nil [27847 27941])
            ("org-clock-notify-once-if-expired" function nil nil [27943 28706])
            ("org-notify" function (:arguments ("notification" "play-sound")) nil [28708 28957])
            ("org-show-notification" function (:arguments ("notification")) nil [28959 29824])
            ("org-clock-play-sound" function (:arguments ("clock-sound")) nil [29826 30483])
            ("org-clock-mode-line-entry" variable nil nil [30485 30582])
            ("org-find-open-clocks" function (:arguments ("file")) nil [30584 31064])
            ("org-is-active-clock" function (:arguments ("clock")) nil [31066 31227])
            ("org-with-clock-position" function (:arguments ("clock" "forms")) nil [31229 31495])
            ("def-edebug-spec" code nil nil [31496 31549])
            ("put" code nil nil [31550 31604])
            ("org-with-clock" function (:arguments ("clock" "forms")) nil [31606 32084])
            ("def-edebug-spec" code nil nil [32085 32129])
            ("put" code nil nil [32130 32175])
            ("org-clock-clock-in" function (:arguments ("clock" "resume" "start-time")) nil [32177 32477])
            ("org-clock-clock-out" function (:arguments ("clock" "fail-quietly" "at-time")) nil [32479 32852])
            ("org-clock-clock-cancel" function (:arguments ("clock")) nil [32854 33149])
            ("org-clock-clocking-in" variable nil nil [33151 33185])
            ("org-clock-resolving-clocks" variable nil nil [33186 33225])
            ("org-clock-resolving-clocks-due-to-idleness" variable nil nil [33226 33281])
            ("org-clock-resolve-clock" function (:arguments ("clock" "resolve-to" "clock-out-time" "close-p" "restart-p" "fail-quietly")) nil [33283 34457])
            ("org-clock-jump-to-current-clock" function (:arguments ("effective-clock")) nil [34459 35392])
            ("org-clock-resolve" function (:arguments ("clock" "prompt-fn" "last-valid" "fail-quietly")) nil [35394 39413])
            ("org-resolve-clocks" function
               (:user-visible-flag t
                :arguments ("only-dangling-p" "prompt-fn" "last-valid"))
                nil [39430 40280])
            ("org-emacs-idle-seconds" function nil nil [40282 40479])
            ("org-mac-idle-seconds" function nil nil [40481 40704])
            ("org-x11idle-exists-p" variable (:default-value (and (eq window-system (quote x)) (eq 0 (call-process-shell-command (format "command -v %s" org-clock-x11idle-program-name))) (eq 0 (call-process-shell-command org-clock-x11idle-program-name)))) nil [40706 41112])
            ("org-x11-idle-seconds" function nil nil [41114 41281])
            ("org-user-idle-seconds" function nil nil [41283 41605])
            ("org-clock-user-idle-seconds" variable nil nil [41607 41643])
            ("org-resolve-clocks-if-idle" function nil nil [41645 42564])
            ("org-clock-current-task" variable nil nil [42566 42630])
            ("org-clock-out-time" variable nil nil [42631 42662])
            ("org--msg-extra" variable nil nil [42702 42725])
            ("org-clock-in" function
               (:user-visible-flag t
                :arguments ("select" "start-time"))
                nil [42742 49959])
            ("org-clock-in-last" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49976 51450])
            ("org-clock-mark-default-task" function (:user-visible-flag t) nil [51452 51641])
            ("org-clock-get-sum-start" function nil nil [51643 53023])
            ("org-clock-find-position" function (:arguments ("find-unclosed")) nil [53025 56513])
            ("org-clock-out" function
               (:user-visible-flag t
                :arguments ("switch-to-state" "fail-quietly" "at-time"))
                nil [56530 60189])
            ("add-hook" code nil nil [60191 60258])
            ("org-clock-remove-empty-clock-drawer" function nil nil [60260 60737])
            ("org-clock-timestamps-up" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60739 60939])
            ("org-clock-timestamps-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60941 61145])
            ("org-clock-timestamps-change" function (:arguments ("updown" "n")) nil [61147 62496])
            ("org-clock-cancel" function (:user-visible-flag t) nil [62513 63594])
            ("org-clock-goto" function
               (:user-visible-flag t
                :arguments ("select"))
                nil [63611 64634])
            ("defvar-local" code nil nil [64636 64758])
            ("org-clock-sum-today" function (:arguments ("headline-filter")) nil [64775 65018])
            ("org-clock-sum-custom" function (:arguments ("headline-filter" "range" "propname")) nil [65020 65516])
            ("org-clock-sum" function (:arguments ("tstart" "tend" "headline-filter" "propname")) nil [65533 69070])
            ("org-clock-sum-current-item" function (:arguments ("tstart")) nil [69072 69312])
            ("org-clock-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69329 71379])
            ("defvar-local" code nil nil [71381 71418])
            ("org-clock-put-overlay" function (:arguments ("time")) nil [71420 72284])
            ("org-clock-remove-overlays" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [72301 72757])
            ("org-state" variable nil nil [72759 72777])
            ("org-clock-out-if-current" function nil nil [72819 73773])
            ("add-hook" code nil nil [73775 73848])
            ("org-clock-get-clocktable" function (:arguments ("props")) nil [73865 74567])
            ("org-clock-report" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74584 75552])
            ("org-day-of-week" function (:arguments ("day" "month" "year")) nil [75554 75738])
            ("org-quarter-to-date" function (:arguments ("quarter" "year")) nil [75740 76904])
            ("org-clock-special-range" function (:arguments ("key" "time" "as-strings" "wstart" "mstart")) nil [76906 83104])
            ("org-count-quarter" function (:arguments ("n")) nil [83106 83220])
            ("org-clocktable-shift" function (:arguments ("dir" "n")) nil [83237 86529])
            ("org-dblock-write:clocktable" function (:arguments ("params")) nil [86546 89309])
            ("org-clocktable-write-default" function (:arguments ("ipos" "tables" "params")) nil [89311 97709])
            ("org-clocktable-indent-string" function (:arguments ("level")) nil [97711 97943])
            ("org-clocktable-steps" function (:arguments ("params")) nil [97945 100286])
            ("org-clock-get-table-data" function (:arguments ("file" "params")) nil [100288 104559])
            ("org-clock-loaded" variable nil nil [104594 104654])
            ("org-clock-update-time-maybe" function (:user-visible-flag t) nil [104671 105954])
            ("org-clock-save" function nil nil [105956 107480])
            ("org-clock-load" function nil nil [107482 108619])
            ("org-defkey" code nil nil [108643 108717])
            ("org-clock" package nil nil [108719 108739]))          
      :file "org-clock.el"
      :pointmax 108860
      :fsize 108865
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1716 1734])
            ("declare-function" code nil nil [1736 1793])
            ("org-babel-table-truncate-at-newline" function (:arguments ("string")) nil [1795 2171])
            ("org-sbe" function (:arguments ("source-block" "variables")) nil [2173 5329])
            ("ob-table" package nil nil [5331 5350]))          
      :file "ob-table.el"
      :pointmax 5380
      :fsize 5379
      :lastmodtime '(23525 29588 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob" include nil nil [1016 1029])
            ("org-babel-header-args:emacs-lisp" variable
               (:constant-flag t
                :default-value (quote ((lexical . :any))))
                nil [1031 1136])
            ("org-babel-default-header-args:emacs-lisp" variable (:default-value (quote ((:lexical . "no")))) nil [1138 1476])
            ("org-babel-expand-body:emacs-lisp" function (:arguments ("body" "params")) nil [1478 1883])
            ("org-babel-execute:emacs-lisp" function (:arguments ("body" "params")) nil [1885 3079])
            ("org-babel-make-language-alias" code nil nil [3081 3133])
            ("ob-emacs-lisp" package nil nil [3135 3159]))          
      :file "ob-emacs-lisp.el"
      :pointmax 3194
      :fsize 3193
      :lastmodtime '(23525 29586 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1002 1019])
            ("ox" include nil nil [1020 1033])
            ("orgtbl-exp-regexp" variable nil nil [1035 1061])
            ("org-export-define-backend" code nil nil [1087 5204])
            ("org-export-texinfo" customgroup (:user-visible-flag t) nil [5242 5429])
            ("org-texinfo-coding-system" variable nil nil [5446 5645])
            ("org-texinfo-default-class" variable (:default-value "info") nil [5647 5790])
            ("org-texinfo-classes" variable (:default-value (quote (("info" "@documentencoding AUTO
@documentlanguage AUTO" ("@chapter %s" "@unnumbered %s" "@appendix %s") ("@section %s" "@unnumberedsec %s" "@appendixsec %s") ("@subsection %s" "@unnumberedsubsec %s" "@appendixsubsec %s") ("@subsubsection %s" "@unnumberedsubsubsec %s" "@appendixsubsubsec %s"))))) nil [5792 7724])
            ("org-texinfo-format-headline-function" variable (:default-value (quote org-texinfo-format-headline-default-function)) nil [7741 8352])
            ("org-texinfo-node-description-column" variable (:default-value 32) nil [8380 8647])
            ("org-texinfo-active-timestamp-format" variable (:default-value "@emph{%s}") nil [8666 8833])
            ("org-texinfo-inactive-timestamp-format" variable (:default-value "@emph{%s}") nil [8835 9006])
            ("org-texinfo-diary-timestamp-format" variable (:default-value "@emph{%s}") nil [9008 9173])
            ("org-texinfo-link-with-unknown-path-format" variable (:default-value "@indicateurl{%s}") nil [9187 9356])
            ("org-texinfo-tables-verbatim" variable nil nil [9371 9508])
            ("org-texinfo-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [9510 9882])
            ("org-texinfo-table-default-markup" variable (:default-value "@asis") nil [9884 10247])
            ("org-texinfo-text-markup-alist" variable (:default-value (quote ((bold . "@strong{%s}") (code . code) (italic . "@emph{%s}") (verbatim . samp)))) nil [10267 11172])
            ("org-texinfo-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [11188 11667])
            ("org-texinfo-format-inlinetask-function" variable (:default-value (quote org-texinfo-format-inlinetask-default-function)) nil [11687 12307])
            ("org-texinfo-info-process" variable (:default-value (quote ("makeinfo --no-split %f"))) nil [12327 12945])
            ("org-texinfo-logfiles-extensions" variable (:default-value (quote ("aux" "toc" "cp" "fn" "ky" "pg" "tp" "vr"))) nil [12947 13248])
            ("org-texinfo-remove-logfiles" variable (:default-value t) nil [13250 13586])
            ("org-texinfo-max-toc-depth" variable
               (:constant-flag t
                :default-value 4)
                nil [13603 13831])
            ("org-texinfo-supported-coding-systems" variable
               (:constant-flag t
                :default-value (quote ("US-ASCII" "UTF-8" "ISO-8859-15" "ISO-8859-1" "ISO-8859-2" "koi8-r" "koi8-u")))
                nil [13833 14212])
            ("org-texinfo-inline-image-rules" variable
               (:constant-flag t
                :default-value (list (cons "file" (regexp-opt (quote ("eps" "pdf" "png" "jpg" "jpeg" "gif" "svg"))))))
                nil [14214 14402])
            ("org-texinfo--untabify" function (:arguments ("s" "_backend" "_info")) nil [14430 14581])
            ("org-texinfo--filter-section-blank-lines" function (:arguments ("headline" "_backend" "_info")) nil [14583 14788])
            ("org-texinfo--normalize-headlines" function (:arguments ("tree" "_backend" "info")) nil [14790 15599])
            ("org-texinfo--find-verb-separator" function (:arguments ("s")) nil [15601 15982])
            ("org-texinfo--text-markup" function (:arguments ("text" "markup" "_info")) nil [15984 16624])
            ("org-texinfo--get-node" function (:arguments ("datum" "info")) nil [16626 17478])
            ("org-texinfo--sanitize-node" function (:arguments ("title")) nil [17480 17957])
            ("org-texinfo--sanitize-title" function (:arguments ("title" "info")) nil [17959 18474])
            ("org-texinfo--sanitize-content" function (:arguments ("text")) nil [18476 18645])
            ("org-texinfo--wrap-float" function (:arguments ("value" "info" "type" "label" "caption" "short")) nil [18647 20210])
            ("org-texinfo-template" function (:arguments ("contents" "info")) nil [20226 25124])
            ("org-texinfo-bold" function (:arguments ("_bold" "contents" "info")) nil [25165 25388])
            ("org-texinfo-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [25409 25633])
            ("org-texinfo-clock" function (:arguments ("clock" "_contents" "info")) nil [25647 26128])
            ("org-texinfo-code" function (:arguments ("code" "_contents" "info")) nil [26141 26378])
            ("org-texinfo-drawer" function (:arguments ("drawer" "contents" "info")) nil [26393 26746])
            ("org-texinfo-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [26768 26994])
            ("org-texinfo-entity" function (:arguments ("entity" "_contents" "_info")) nil [27009 29000])
            ("org-texinfo-example-block" function (:arguments ("example-block" "_contents" "info")) nil [29022 29341])
            ("org-texinfo-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [29361 29691])
            ("org-texinfo-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [29713 30021])
            ("org-texinfo-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [30041 30374])
            ("org-texinfo-footnote-reference" function (:arguments ("footnote" "_contents" "info")) nil [30401 30754])
            ("org-texinfo--structuring-command" function (:arguments ("headline" "info")) nil [30771 31948])
            ("org-texinfo-headline" function (:arguments ("headline" "contents" "info")) nil [31950 33716])
            ("org-texinfo-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags")) nil [33718 34083])
            ("org-texinfo-inline-src-block" function (:arguments ("inline-src-block" "_contents" "_info")) nil [34108 34441])
            ("org-texinfo-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [34460 35275])
            ("org-texinfo-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents")) nil [35277 35728])
            ("org-texinfo-italic" function (:arguments ("_italic" "contents" "info")) nil [35743 35976])
            ("org-texinfo-item" function (:arguments ("item" "contents" "info")) nil [35989 36786])
            ("org-texinfo-keyword" function (:arguments ("keyword" "_contents" "info")) nil [36802 37657])
            ("org-texinfo-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [37676 37866])
            ("org-texinfo--@ref" function (:arguments ("datum" "description" "info")) nil [37879 38542])
            ("org-texinfo-link" function (:arguments ("link" "desc" "info")) nil [38544 40936])
            ("org-texinfo--inline-image" function (:arguments ("link" "info")) nil [40938 42112])
            ("org-texinfo-make-menu" function (:arguments ("scope" "info" "master")) nil [42126 43006])
            ("org-texinfo--build-menu" function (:arguments ("scope" "info" "level")) nil [43008 43795])
            ("org-texinfo--format-entries" function (:arguments ("entries" "info")) nil [43797 44652])
            ("org-texinfo--menu-entries" function (:arguments ("scope" "info")) nil [44654 45331])
            ("org-texinfo-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [45353 45729])
            ("org-texinfo-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [45747 45978])
            ("org-texinfo-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [45997 46883])
            ("org-texinfo-plain-text" function (:arguments ("text" "info")) nil [46902 48004])
            ("org-texinfo-planning" function (:arguments ("planning" "_contents" "info")) nil [48021 49035])
            ("org-texinfo-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [49059 49370])
            ("org-texinfo-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [49390 49800])
            ("org-texinfo-radio-target" function (:arguments ("radio-target" "text" "info")) nil [49821 50096])
            ("org-texinfo-section" function (:arguments ("section" "contents" "info")) nil [50112 50499])
            ("org-texinfo-special-block" function (:arguments ("special-block" "contents" "_info")) nil [50521 50976])
            ("org-texinfo-src-block" function (:arguments ("src-block" "_contents" "info")) nil [50994 51815])
            ("org-texinfo-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [51841 52092])
            ("org-texinfo-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [52116 52389])
            ("org-texinfo-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [52407 52640])
            ("org-texinfo-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [52660 52899])
            ("org-texinfo-table" function (:arguments ("table" "contents" "info")) nil [52913 53903])
            ("org-texinfo-table-column-widths" function (:arguments ("table" "info")) nil [53905 54839])
            ("org-texinfo-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [54858 55483])
            ("org-texinfo-table-row" function (:arguments ("table-row" "contents" "info")) nil [55501 56117])
            ("org-texinfo-target" function (:arguments ("target" "_contents" "info")) nil [56132 56360])
            ("org-texinfo-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [56378 56985])
            ("org-texinfo-underline" function (:arguments ("_underline" "contents" "info")) nil [57003 57251])
            ("org-texinfo-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [57268 57528])
            ("org-texinfo-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [57548 57795])
            ("org-texinfo-export-to-texinfo" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [57841 59023])
            ("org-texinfo-export-to-info" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [59040 60364])
            ("org-texinfo-publish-to-texinfo" function (:arguments ("plist" "filename" "pub-dir")) nil [60381 60717])
            ("org-texinfo-convert-region-to-texinfo" function (:user-visible-flag t) nil [60734 61061])
            ("org-texinfo-compile" function (:arguments ("file")) nil [61063 61932])
            ("ox-texinfo" package nil nil [61935 61956]))          
      :file "ox-texinfo.el"
      :pointmax 62061
      :fsize 62060
      :lastmodtime '(23525 29594 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1678 1696])
            ("cl-lib" include nil nil [1697 1714])
            ("declare-function" code nil nil [1716 1784])
            ("declare-function" code nil nil [1785 1841])
            ("declare-function" code nil nil [1842 1914])
            ("declare-function" code nil nil [1915 1974])
            ("declare-function" code nil nil [1975 2037])
            ("declare-function" code nil nil [2038 2107])
            ("declare-function" code nil nil [2108 2160])
            ("declare-function" code nil nil [2161 2239])
            ("declare-function" code nil nil [2240 2318])
            ("declare-function" code nil nil [2319 2368])
            ("declare-function" code nil nil [2369 2426])
            ("declare-function" code nil nil [2427 2484])
            ("org-babel-update-intermediate" variable nil nil [2486 2608])
            ("org-babel-ref-parse" function (:arguments ("assignment")) nil [2610 3653])
            ("org-babel-ref-goto-headline-id" function (:arguments ("id")) nil [3655 4051])
            ("org-babel-ref-headline-body" function nil nil [4053 4271])
            ("org-babel-library-of-babel" variable nil nil [4273 4308])
            ("org-babel-ref-resolve" function (:arguments ("ref")) nil [4309 7436])
            ("org-babel-ref-index-list" function (:arguments ("index" "lis")) nil [7438 9069])
            ("org-babel-ref-split-args" function (:arguments ("arg-string")) nil [9071 9250])
            ("ob-ref" package nil nil [9253 9270]))          
      :file "ob-ref.el"
      :pointmax 9296
      :fsize 9295
      :lastmodtime '(23525 29588 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3474 3488])
            ("sha1" include nil nil [3489 3504])
            ("declare-function" code nil nil [3506 3622])
            ("declare-function" code nil nil [3623 3672])
            ("declare-function" code nil nil [3673 3732])
            ("declare-function" code nil nil [3733 3792])
            ("declare-function" code nil nil [3793 3859])
            ("declare-function" code nil nil [3860 3916])
            ("declare-function" code nil nil [3918 3975])
            ("declare-function" code nil nil [3976 4059])
            ("declare-function" code nil nil [4060 4131])
            ("org-feed" customgroup (:user-visible-flag t) nil [4133 4247])
            ("org-feed-alist" variable nil nil [4249 8849])
            ("org-feed-drawer" variable (:default-value "FEEDSTATUS") nil [8851 9101])
            ("org-feed-default-template" variable (:default-value "
* %h
  %U
  %description
  %a
") nil [9103 9977])
            ("org-feed-save-after-adding" variable (:default-value t) nil [9979 10114])
            ("org-feed-retrieve-method" variable (:default-value (quote url-retrieve-synchronously)) nil [10116 10635])
            ("org-feed-before-adding-hook" variable nil nil [10637 10862])
            ("org-feed-after-adding-hook" variable nil nil [10864 11087])
            ("org-feed-buffer" variable (:default-value "*Org feed*") nil [11089 11166])
            ("org-feed-update-all" function (:user-visible-flag t) nil [11183 11797])
            ("org-feed-update" function
               (:user-visible-flag t
                :arguments ("feed" "retrieve-only"))
                nil [11814 16345])
            ("org-feed-goto-inbox" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16362 16777])
            ("org-feed-show-raw-feed" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16794 17235])
            ("org-feed-goto-inbox-internal" function (:arguments ("file" "heading")) nil [17237 17691])
            ("org-feed-read-previous-status" function (:arguments ("pos" "drawer")) nil [17693 18085])
            ("org-feed-write-status" function (:arguments ("pos" "drawer" "status")) nil [18087 18669])
            ("org-feed-add-items" function (:arguments ("pos" "entries")) nil [18671 19209])
            ("org-feed-format-entry" function (:arguments ("entry" "template" "formatter")) nil [19211 21888])
            ("org-feed-make-indented-block" function (:arguments ("s" "n")) nil [21890 22148])
            ("org-feed-skip-http-headers" function (:arguments ("buffer")) nil [22150 22431])
            ("org-feed-get-feed" function (:arguments ("url")) nil [22433 23098])
            ("org-feed-parse-rss-feed" function (:arguments ("buffer")) nil [23100 23921])
            ("org-feed-parse-rss-entry" function (:arguments ("entry")) nil [23923 24548])
            ("org-feed-parse-atom-feed" function (:arguments ("buffer")) nil [24550 25184])
            ("org-feed-parse-atom-entry" function (:arguments ("entry")) nil [25186 26523])
            ("org-feed" package nil nil [26525 26544]))          
      :file "org-feed.el"
      :pointmax 26647
      :fsize 26646
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1239 1253])
            ("org-datetree-base-level" variable (:default-value 1) nil [1255 1580])
            ("org-datetree-add-timestamp" variable nil nil [1582 1946])
            ("org-datetree-find-date-create" function (:arguments ("d" "keep-restriction")) nil [1963 3425])
            ("org-datetree-find-iso-week-create" function (:arguments ("d" "keep-restriction")) nil [3442 5404])
            ("org-datetree--find-create" function (:arguments ("regex" "year" "month" "day" "insert")) nil [5406 6379])
            ("org-datetree-insert-line" function (:arguments ("year" "month" "day" "text")) nil [6381 7181])
            ("org-datetree-file-entry-under" function (:arguments ("txt" "d")) nil [7183 7480])
            ("org-datetree-cleanup" function (:user-visible-flag t) nil [7482 9166])
            ("org-datetree" package nil nil [9168 9191]))          
      :file "org-datetree.el"
      :pointmax 9298
      :fsize 9297
      :lastmodtime '(23525 29590 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2882 2896])
            ("declare-function" code nil nil [2898 2947])
            ("org-id" customgroup (:user-visible-flag t) nil [2968 3080])
            ("org-id-link-to-org-use-id" variable nil nil [3082 4697])
            ("org-id-uuid-program" variable (:default-value "uuidgen") nil [4699 4798])
            ("org-id-method" variable (:default-value (quote uuid)) nil [4800 5581])
            ("org-id-prefix" variable nil nil [5583 5920])
            ("org-id-include-domain" variable nil nil [5922 6429])
            ("org-id-track-globally" variable (:default-value t) nil [6431 6954])
            ("org-id-locations-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory ".org-id-locations"))) nil [6956 7234])
            ("org-id-locations" variable nil nil [7236 7308])
            ("org-id-files" variable nil nil [7310 7371])
            ("org-id-extra-files" variable (:default-value (quote org-agenda-text-search-extra-files)) nil [7373 7982])
            ("org-id-search-archives" variable (:default-value t) nil [7984 8319])
            ("org-id-get-create" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [8359 8669])
            ("org-id-copy" function (:user-visible-flag t) nil [8686 8849])
            ("org-id-get" function (:arguments ("pom" "create" "prefix")) nil [8866 9533])
            ("org-id-get-with-outline-path-completion" function (:arguments ("targets")) nil [9550 10300])
            ("org-id-get-with-outline-drilling" function nil nil [10317 10759])
            ("org-id-goto" function
               (:user-visible-flag t
                :arguments ("id"))
                nil [10776 11149])
            ("org-id-find" function (:arguments ("id" "markerp")) nil [11166 11866])
            ("org-id-new" function (:arguments ("prefix")) nil [11928 13048])
            ("org-id-uuid" function nil nil [13050 13612])
            ("org-id-int-to-b36-one-digit" function (:arguments ("i")) nil [13614 13823])
            ("org-id-b36-to-int-one-digit" function (:arguments ("i")) nil [13825 14162])
            ("org-id-int-to-b36" function (:arguments ("i" "length")) nil [14164 14561])
            ("org-id-b36-to-int" function (:arguments ("s")) nil [14563 14758])
            ("org-id-time-to-b36" function (:arguments ("time")) nil [14760 15104])
            ("org-id-decode" function (:arguments ("id")) nil [15106 15753])
            ("org-id-update-id-locations" function
               (:user-visible-flag t
                :arguments ("files" "silent"))
                nil [15803 18726])
            ("org-id-locations-save" function nil nil [18728 19120])
            ("org-id-locations-load" function nil nil [19122 19657])
            ("org-id-add-location" function (:arguments ("id" "file")) nil [19659 20051])
            ("unless" code nil nil [20053 20129])
            ("org-id-hash-to-alist" function (:arguments ("hash")) nil [20131 20402])
            ("org-id-alist-to-hash" function (:arguments ("list")) nil [20404 20718])
            ("org-id-paste-tracker" function (:arguments ("txt" "buffer-or-file")) nil [20720 21384])
            ("org-id-find-id-file" function (:arguments ("id")) nil [21439 21820])
            ("org-id-find-id-in-file" function (:arguments ("id" "file" "markerp")) nil [21822 22463])
            ("org-id-store-link" function (:user-visible-flag t) nil [22627 23168])
            ("org-id-open" function (:arguments ("id")) nil [23170 23876])
            ("org-link-set-parameters" code nil nil [23878 23930])
            ("org-id" package nil nil [23932 23949]))          
      :file "org-id.el"
      :pointmax 24050
      :fsize 24049
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1031 1048])
            ("org-src" include nil nil [1049 1067])
            ("org-macs" include nil nil [1068 1087])
            ("declare-function" code nil nil [1089 1154])
            ("declare-function" code nil nil [1155 1216])
            ("declare-function" code nil nil [1217 1284])
            ("declare-function" code nil nil [1285 1354])
            ("declare-function" code nil nil [1355 1409])
            ("declare-function" code nil nil [1410 1466])
            ("declare-function" code nil nil [1467 1526])
            ("declare-function" code nil nil [1527 1586])
            ("declare-function" code nil nil [1587 1637])
            ("declare-function" code nil nil [1638 1716])
            ("declare-function" code nil nil [1717 1786])
            ("declare-function" code nil nil [1787 1872])
            ("declare-function" code nil nil [1873 1939])
            ("declare-function" code nil nil [1940 1985])
            ("declare-function" code nil nil [1986 2043])
            ("declare-function" code nil nil [2044 2100])
            ("declare-function" code nil nil [2101 2163])
            ("org-link-types-re" variable nil nil [2165 2191])
            ("org-babel-tangle-lang-exts" variable (:default-value (quote (("emacs-lisp" . "el") ("elisp" . "el")))) nil [2193 2693])
            ("org-babel-tangle-use-relative-file-links" variable (:default-value t) nil [2695 2869])
            ("org-babel-post-tangle-hook" variable nil nil [2871 3023])
            ("org-babel-pre-tangle-hook" variable (:default-value (quote (save-buffer))) nil [3025 3182])
            ("org-babel-tangle-body-hook" variable nil nil [3184 3334])
            ("org-babel-tangle-comment-format-beg" variable (:default-value "[[%link][%source-name]]") nil [3336 4154])
            ("org-babel-tangle-comment-format-end" variable (:default-value "%source-name ends here") nil [4156 4973])
            ("org-babel-tangle-uncomment-comments" variable nil nil [4975 5280])
            ("org-babel-process-comment-text" variable (:default-value (quote org-remove-indentation)) nil [5282 5642])
            ("org-babel-find-file-noselect-refresh" function (:arguments ("file")) nil [5644 5888])
            ("org-babel-with-temp-filebuffer" function (:arguments ("file" "body")) nil [5890 6648])
            ("def-edebug-spec" code nil nil [6649 6709])
            ("org-babel-tangle-file" function
               (:user-visible-flag t
                :arguments ("file" "target-file" "lang"))
                nil [6726 7480])
            ("org-babel-tangle-publish" function (:arguments ("_" "filename" "pub-dir")) nil [7482 7786])
            ("org-babel-tangle" function
               (:user-visible-flag t
                :arguments ("arg" "target-file" "lang"))
                nil [7803 12504])
            ("org-babel-tangle-clean" function (:user-visible-flag t) nil [12506 13173])
            ("org-stored-links" variable nil nil [13175 13200])
            ("org-bracket-link-regexp" variable nil nil [13201 13233])
            ("org-babel-spec-to-string" function (:arguments ("spec")) nil [13234 14846])
            ("org-babel-tangle-collect-blocks" function (:arguments ("language" "tangle-file")) nil [14848 16386])
            ("org-babel-tangle-single-block" function (:arguments ("block-counter" "only-this-block")) nil [16388 19502])
            ("org-babel-tangle-comment-links" function (:arguments ("info")) nil [19504 20156])
            ("org-bracket-link-analytic-regexp" variable nil nil [20183 20224])
            ("org-babel-detangle" function
               (:user-visible-flag t
                :arguments ("source-code-file"))
                nil [20225 21114])
            ("org-babel-tangle-jump-to-org" function (:user-visible-flag t) nil [21116 23251])
            ("ob-tangle" package nil nil [23253 23273]))          
      :file "ob-tangle.el"
      :pointmax 23377
      :fsize 23376
      :lastmodtime '(23525 29588 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1116 1130])
            ("declare-function" code nil nil [1132 1191])
            ("declare-function" code nil nil [1192 1289])
            ("declare-function" code nil nil [1290 1360])
            ("org-archive-default-command" variable (:default-value (quote org-archive-subtree)) nil [1362 1601])
            ("org-archive-reversed-order" variable nil nil [1603 1783])
            ("org-archive-sibling-heading" variable (:default-value "Archive") nil [1785 2055])
            ("org-archive-mark-done" variable nil nil [2057 2422])
            ("org-archive-stamp-time" variable (:default-value t) nil [2424 2704])
            ("org-archive-file-header-format" variable (:default-value "
Archived entries from file %s

") nil [2706 3041])
            ("org-archive-subtree-add-inherited-tags" variable (:default-value (quote infile)) nil [3043 3347])
            ("org-archive-save-context-info" variable (:default-value (quote (time file olpath category todo itags))) nil [3349 4727])
            ("org-archive-hook" variable nil nil [4729 4997])
            ("org-get-local-archive-location" function nil nil [4999 5449])
            ("org-add-archive-files" function (:arguments ("files")) nil [5466 5854])
            ("org-all-archive-files" function nil nil [5856 6633])
            ("org-extract-archive-file" function (:arguments ("location")) nil [6635 7145])
            ("org-extract-archive-heading" function (:arguments ("location")) nil [7147 7547])
            ("org-archive-subtree" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [7564 15782])
            ("org-archive-to-archive-sibling" function (:user-visible-flag t) nil [15799 18177])
            ("org-archive-all-done" function (:arguments ("tag")) nil [18179 18661])
            ("org-archive-all-old" function (:arguments ("tag")) nil [18663 19397])
            ("org-archive-all-matches" function (:arguments ("predicate" "tag")) nil [19399 21248])
            ("org-toggle-archive-tag" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [21265 22196])
            ("org-archive-set-tag" function (:user-visible-flag t) nil [22198 22689])
            ("org-archive-subtree-default" function (:user-visible-flag t) nil [22706 22938])
            ("org-archive-subtree-default-with-confirmation" function (:user-visible-flag t) nil [22955 23281])
            ("org-archive" package nil nil [23283 23305]))          
      :file "org-archive.el"
      :pointmax 23411
      :fsize 23410
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1456 1473])
            ("org-clock" include nil nil [1474 1494])
            ("declare-function" code nil nil [1496 1547])
            ("org-timer-start-time" variable nil nil [1549 1613])
            ("org-timer-pause-time" variable nil nil [1615 1684])
            ("org-timer-countdown-timer" variable nil nil [1686 1881])
            ("org-timer-countdown-timer-title" variable nil nil [1883 1991])
            ("org-timer-re" variable
               (:constant-flag t
                :default-value "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)")
                nil [1993 2125])
            ("org-timer-format" variable (:default-value "%s ") nil [2127 2342])
            ("org-timer-default-timer" variable (:default-value "0") nil [2344 2586])
            ("org-timer-display" variable (:default-value (quote mode-line)) nil [2588 3151])
            ("org-timer-start-hook" variable nil nil [3153 3232])
            ("org-timer-stop-hook" variable nil nil [3234 3326])
            ("org-timer-pause-hook" variable nil nil [3328 3420])
            ("org-timer-continue-hook" variable nil nil [3422 3519])
            ("org-timer-set-hook" variable nil nil [3521 3595])
            ("org-timer-done-hook" variable nil nil [3597 3678])
            ("org-timer-start" function
               (:user-visible-flag t
                :arguments ("offset"))
                nil [3695 5513])
            ("org-timer-pause-or-continue" function
               (:user-visible-flag t
                :arguments ("stop"))
                nil [5515 7022])
            ("org-timer-stop" function (:user-visible-flag t) nil [7024 7451])
            ("org-timer" function
               (:user-visible-flag t
                :arguments ("restart" "no-insert"))
                nil [7468 8274])
            ("org-timer-value-string" function nil nil [8276 8428])
            ("org-timer-seconds" function nil nil [8430 8850])
            ("org-timer-change-times-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "delta"))
                nil [8867 9758])
            ("org-timer-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9775 10737])
            ("org-timer-fix-incomplete" function (:arguments ("hms")) nil [10739 11234])
            ("org-timer-hms-to-secs" function (:arguments ("hms")) nil [11236 11785])
            ("org-timer-secs-to-hms" function (:arguments ("s")) nil [11787 12089])
            ("org-timer-mode-line-timer" variable nil nil [12091 12129])
            ("org-timer-mode-line-string" variable nil nil [12130 12169])
            ("org-timer-set-mode-line" function (:arguments ("value")) nil [12171 14396])
            ("org-timer-update-mode-line" function nil nil [14398 14647])
            ("org-timer-show-remaining-time" function (:user-visible-flag t) nil [14649 15104])
            ("org-timer-set-timer" function
               (:user-visible-flag t
                :arguments ("opt"))
                nil [15121 17618])
            ("org-timer--run-countdown-timer" function (:arguments ("secs" "title")) nil [17620 18072])
            ("org-timer--get-timer-title" function nil nil [18074 18743])
            ("org-timer" package nil nil [18745 18765]))          
      :file "org-timer.el"
      :pointmax 18869
      :fsize 18868
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1555 1572])
            ("org" include nil nil [1573 1587])
            ("org-id" include nil nil [1588 1605])
            ("vc-git" include nil nil [1606 1623])
            ("declare-function" code nil nil [1625 1683])
            ("org-attach" customgroup (:user-visible-flag t) nil [1685 1798])
            ("org-attach-directory" variable (:default-value "data/") nil [1800 2031])
            ("org-attach-commit" variable (:default-value t) nil [2033 2256])
            ("org-attach-git-annex-cutoff" variable (:default-value (* 32 1024)) nil [2258 2527])
            ("org-attach-auto-tag" variable (:default-value "ATTACH") nil [2529 2736])
            ("org-attach-file-list-property" variable (:default-value "Attachments") nil [2738 3144])
            ("org-attach-method" variable (:default-value (quote cp)) nil [3146 3725])
            ("org-attach-expert" variable nil nil [3727 3874])
            ("org-attach-allow-inheritance" variable (:default-value t) nil [3876 4017])
            ("org-attach-inherited" variable nil nil [4019 4128])
            ("org-attach-store-link-p" variable nil nil [4130 4428])
            ("org-attach-archive-delete" variable nil nil [4430 4805])
            ("org-attach-annex-auto-get" variable (:default-value (quote ask)) nil [4807 5227])
            ("org-attach" function (:user-visible-flag t) nil [5244 8512])
            ("org-attach-dir" function (:arguments ("create-if-not-exists-p")) nil [8514 10271])
            ("org-attach-check-absolute-path" function (:arguments ("dir")) nil [10273 10872])
            ("org-attach-set-directory" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10874 11915])
            ("org-attach-set-inherit" function (:user-visible-flag t) nil [11917 12325])
            ("org-attach-use-annex" function nil nil [12327 12649])
            ("org-attach-annex-get-maybe" function (:arguments ("path")) nil [12651 13513])
            ("org-attach-commit" function nil nil [13515 14663])
            ("org-attach-tag" function (:arguments ("off")) nil [14665 14892])
            ("org-attach-untag" function nil nil [14894 14971])
            ("org-attach-store-link" function (:arguments ("file")) nil [14973 15255])
            ("org-attach-url" function (:arguments ("url")) nil [15257 15360])
            ("org-attach-attach" function
               (:user-visible-flag t
                :arguments ("file" "visit-dir" "method"))
                nil [15362 16959])
            ("org-attach-attach-cp" function (:user-visible-flag t) nil [16961 17115])
            ("org-attach-attach-mv" function (:user-visible-flag t) nil [17116 17280])
            ("org-attach-attach-ln" function (:user-visible-flag t) nil [17281 17586])
            ("org-attach-attach-lns" function (:user-visible-flag t) nil [17587 17903])
            ("org-attach-new" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [17905 18397])
            ("org-attach-delete-one" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [18399 18941])
            ("org-attach-delete-all" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [18943 19668])
            ("org-attach-sync" function (:user-visible-flag t) nil [19670 20366])
            ("org-attach-file-list" function (:arguments ("dir")) nil [20368 20610])
            ("org-attach-reveal" function
               (:user-visible-flag t
                :arguments ("if-exists"))
                nil [20612 20906])
            ("org-attach-reveal-in-emacs" function (:user-visible-flag t) nil [20908 21090])
            ("org-attach-open" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [21092 21788])
            ("org-attach-open-in-emacs" function (:user-visible-flag t) nil [21790 21939])
            ("org-attach-expand" function (:arguments ("file")) nil [21941 22145])
            ("org-attach-expand-link" function (:arguments ("file")) nil [22147 22388])
            ("org-attach-archive-delete-maybe" function nil nil [22390 22752])
            ("add-hook" code nil nil [22754 22815])
            ("org-attach" package nil nil [22817 22838]))          
      :file "org-attach.el"
      :pointmax 22943
      :fsize 22942
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1176 1193])
            ("ox-latex" include nil nil [1194 1213])
            ("unless" code nil nil [1262 1541])
            ("org-export-beamer" customgroup (:user-visible-flag t) nil [1579 1735])
            ("org-beamer-frame-level" variable (:default-value 1) nil [1737 2429])
            ("org-beamer-frame-default-options" variable nil nil [2431 2641])
            ("org-beamer-column-view-format" variable (:default-value "%45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)") nil [2643 3041])
            ("org-beamer-theme" variable (:default-value "default") nil [3043 3310])
            ("org-beamer-environments-extra" variable nil nil [3312 4340])
            ("org-beamer-outline-frame-title" variable (:default-value "Outline") nil [4342 4519])
            ("org-beamer-outline-frame-options" variable nil nil [4521 4758])
            ("org-beamer-subtitle-format" variable (:default-value "\\subtitle{%s}") nil [4761 5081])
            ("org-beamer-column-widths" variable
               (:constant-flag t
                :default-value "0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC")
                nil [5109 5266])
            ("org-beamer-environments-special" variable
               (:constant-flag t
                :default-value (quote (("againframe" "A") ("appendix" "x") ("column" "c") ("columns" "C") ("frame" "f") ("fullframe" "F") ("ignoreheading" "i") ("note" "n") ("noteNH" "N"))))
                nil [5268 5864])
            ("org-beamer-environments-default" variable
               (:constant-flag t
                :default-value (quote (("block" "b" "\\begin{block}%a{%h}" "\\end{block}") ("alertblock" "a" "\\begin{alertblock}%a{%h}" "\\end{alertblock}") ("verse" "v" "\\begin{verse}%a %% %h" "\\end{verse}") ("quotation" "q" "\\begin{quotation}%a %% %h" "\\end{quotation}") ("quote" "Q" "\\begin{quote}%a %% %h" "\\end{quote}") ("structureenv" "s" "\\begin{structureenv}%a %% %h" "\\end{structureenv}") ("theorem" "t" "\\begin{theorem}%a[%h]" "\\end{theorem}") ("definition" "d" "\\begin{definition}%a[%h]" "\\end{definition}") ("example" "e" "\\begin{example}%a[%h]" "\\end{example}") ("exampleblock" "E" "\\begin{exampleblock}%a{%h}" "\\end{exampleblock}") ("proof" "p" "\\begin{proof}%a[%h]" "\\end{proof}") ("beamercolorbox" "o" "\\begin{beamercolorbox}%o{%h}" "\\end{beamercolorbox}"))))
                nil [5866 6981])
            ("org-beamer-verbatim-elements" variable
               (:constant-flag t
                :default-value (quote (code example-block fixed-width inline-src-block src-block verbatim)))
                nil [6983 7241])
            ("org-beamer--normalize-argument" function (:arguments ("argument" "type")) nil [7270 8006])
            ("org-beamer--element-has-overlay-p" function (:arguments ("element")) nil [8008 8555])
            ("org-export-define-derived-backend" code nil nil [8581 10317])
            ("org-beamer-bold" function (:arguments ("bold" "contents" "_info")) nil [10358 10622])
            ("org-beamer-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [10644 10981])
            ("org-beamer-export-snippet" function (:arguments ("export-snippet" "_contents" "info")) nil [11005 11608])
            ("org-beamer--get-label" function (:arguments ("headline" "info")) nil [12113 12960])
            ("org-beamer--frame-level" function (:arguments ("headline" "info")) nil [12962 14105])
            ("org-beamer--format-section" function (:arguments ("headline" "contents" "info")) nil [14107 15349])
            ("org-beamer--format-frame" function (:arguments ("headline" "contents" "info")) nil [15351 18355])
            ("org-beamer--format-block" function (:arguments ("headline" "contents" "info")) nil [18357 22575])
            ("org-beamer-headline" function (:arguments ("headline" "contents" "info")) nil [22577 25662])
            ("org-beamer-item" function (:arguments ("item" "contents" "info")) nil [25676 26680])
            ("org-beamer-keyword" function (:arguments ("keyword" "contents" "info")) nil [26697 27602])
            ("org-beamer-link" function (:arguments ("link" "contents" "info")) nil [27616 28305])
            ("org-beamer-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [28408 29534])
            ("org-beamer-radio-target" function (:arguments ("radio-target" "text" "info")) nil [29556 29900])
            ("org-beamer-template" function (:arguments ("contents" "info")) nil [30043 33626])
            ("org-beamer-mode-map" variable (:default-value (make-sparse-keymap)) nil [33648 33735])
            ("define-key" code nil nil [33736 33810])
            ("define-minor-mode" code nil nil [33827 33951])
            ("when" code nil nil [33953 34106])
            ("org-beamer-tag" variable
               (:default-value (quote ((t (:box (:line-width 1 :color grey40)))))
                :type "face")
                nil [34108 34242])
            ("org-beamer-property-changed" function (:arguments ("property" "value")) nil [34244 34938])
            ("add-hook" code nil nil [34940 35011])
            ("org-beamer-allowed-property-values" function (:arguments ("property")) nil [35013 35681])
            ("add-hook" code nil nil [35683 35770])
            ("org-beamer-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [35804 37015])
            ("org-beamer-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [37032 38162])
            ("org-beamer-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [38179 39351])
            ("org-beamer-select-environment" function (:user-visible-flag t) nil [39368 41436])
            ("org-beamer-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [41453 41806])
            ("org-beamer-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [41823 42682])
            ("ox-beamer" package nil nil [42685 42705]))          
      :file "ox-beamer.el"
      :pointmax 42809
      :fsize 42808
      :lastmodtime '(23525 29593 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1126 1143])
            ("org" include nil nil [1144 1158])
            ("org-table" include nil nil [1159 1179])
            ("declare-function" code nil nil [1181 1248])
            ("declare-function" code nil nil [1249 1297])
            ("declare-function" code nil nil [1298 1364])
            ("org-plot/gnuplot-default-options" variable (:default-value (quote ((:plot-type . 2d) (:with . lines) (:ind . 0)))) nil [1366 1524])
            ("org-plot-timestamp-fmt" variable nil nil [1526 1561])
            ("org-plot/add-options-to-plist" function (:arguments ("p" "options")) nil [1563 2709])
            ("org-plot/goto-nearest-table" function (:user-visible-flag t) nil [2711 3004])
            ("org-plot/collect-options" function
               (:user-visible-flag t
                :arguments ("params"))
                nil [3006 3409])
            ("org-plot-quote-timestamp-field" function (:arguments ("s")) nil [3411 3598])
            ("org-plot-quote-tsv-field" function (:arguments ("s")) nil [3600 3880])
            ("org-plot/gnuplot-to-data" function (:arguments ("table" "data-file" "params")) nil [3882 4347])
            ("org-plot/gnuplot-to-grid-data" function
               (:user-visible-flag t
                :arguments ("table" "data-file" "params"))
                nil [4349 6307])
            ("org-plot/gnuplot-script" function (:arguments ("data-file" "num-cols" "params" "preface")) nil [6309 9640])
            ("org-plot/gnuplot" function
               (:user-visible-flag t
                :arguments ("params"))
                nil [9757 12816])
            ("org-plot" package nil nil [12818 12837]))          
      :file "org-plot.el"
      :pointmax 12940
      :fsize 12939
      :lastmodtime '(23525 29592 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [962 979])
            ("ob-core" include nil nil [980 998])
            ("ob-table" include nil nil [999 1018])
            ("declare-function" code nil nil [1020 1085])
            ("declare-function" code nil nil [1086 1142])
            ("declare-function" code nil nil [1143 1215])
            ("declare-function" code nil nil [1216 1288])
            ("declare-function" code nil nil [1289 1348])
            ("org-babel-library-of-babel" variable nil nil [1350 1544])
            ("org-babel-default-lob-header-args" variable (:default-value (quote ((:exports . "results")))) nil [1546 1912])
            ("org-babel-lob-ingest" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [1914 2710])
            ("org-babel-lob-execute-maybe" function (:user-visible-flag t) nil [2771 3125])
            ("org-babel-lob--src-info" function (:arguments ("ref")) nil [3127 4569])
            ("org-babel-lob-get-info" function (:arguments ("datum")) nil [4586 5981])
            ("ob-lob" package nil nil [5983 6000]))          
      :file "ob-lob.el"
      :pointmax 6101
      :fsize 6100
      :lastmodtime '(23525 29587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3598 3612])
            ("cl-lib" include nil nil [3613 3630])
            ("declare-function" code nil nil [3677 3731])
            ("declare-function" code nil nil [3732 3794])
            ("declare-function" code nil nil [3795 3886])
            ("declare-function" code nil nil [3887 3946])
            ("declare-function" code nil nil [3947 4044])
            ("declare-function" code nil nil [4045 4107])
            ("declare-function" code nil nil [4108 4175])
            ("declare-function" code nil nil [4176 4231])
            ("declare-function" code nil nil [4232 4327])
            ("declare-function" code nil nil [4328 4388])
            ("declare-function" code nil nil [4389 4444])
            ("declare-function" code nil nil [4445 4511])
            ("declare-function" code nil nil [4512 4588])
            ("declare-function" code nil nil [4589 4673])
            ("declare-function" code nil nil [4719 4780])
            ("declare-function" code nil nil [4838 4901])
            ("declare-function" code nil nil [4903 4960])
            ("declare-function" code nil nil [4961 5016])
            ("with-no-warnings" code nil nil [5018 5050])
            ("org-bbdb-anniversaries" customgroup (:user-visible-flag t) nil [5102 5228])
            ("org-bbdb-default-anniversary-format" variable (:default-value "birthday") nil [5230 5386])
            ("org-bbdb-general-anniversary-description-after" variable (:default-value 7) nil [5388 6050])
            ("org-bbdb-anniversary-format-alist" variable (:default-value (quote (("birthday" lambda (name years suffix) (concat "Birthday: [[bbdb:" name "][" name " (" (format "%s" years) suffix ")]]")) ("wedding" lambda (name years suffix) (concat "[[bbdb:" name "][" name "'s " (format "%s" years) suffix " wedding anniversary]]"))))) nil [6052 7265])
            ("org-bbdb-anniversary-field" variable (:default-value (quote anniversary)) nil [7267 7839])
            ("org-bbdb-extract-date-fun" variable (:default-value (quote org-bbdb-anniv-extract-date)) nil [7841 8179])
            ("org-link-set-parameters" code nil nil [8206 8368])
            ("org-bbdb-store-link" function nil nil [8388 8944])
            ("org-bbdb-export" function (:arguments ("path" "desc" "format")) nil [8946 9463])
            ("org-bbdb-open" function (:arguments ("name")) nil [9465 9685])
            ("org-bbdb-open-old" function (:arguments ("name")) nil [9687 10495])
            ("org-bbdb-open-new" function (:arguments ("name")) nil [10497 11343])
            ("org-bbdb-anniv-extract-date" function (:arguments ("time-str")) nil [11345 11760])
            ("org-bbdb-anniv-split" function (:arguments ("str")) nil [11762 12050])
            ("org-bbdb-anniv-hash" variable nil nil [12052 12178])
            ("org-bbdb-updated-p" variable (:default-value t) nil [12180 12284])
            ("org-bbdb-make-anniv-hash" function nil nil [12286 13552])
            ("org-bbdb-updated" function (:arguments ("_rec")) nil [13554 13724])
            ("add-hook" code nil nil [13726 13778])
            ("org-bbdb-anniversaries" function nil nil [13795 15757])
            ("org-bbdb-date-list" function (:arguments ("d" "n")) nil [16056 16330])
            ("org-bbdb-anniversary-description" function (:arguments ("agenda-date" "anniv-date")) nil [16332 17240])
            ("org-bbdb-anniversaries-future" function (:arguments ("n")) nil [17243 18865])
            ("org-bbdb-complete-link" function nil nil [18867 19106])
            ("org-bbdb-anniv-export-ical" function nil nil [19108 19551])
            ("org-bbdb-format-vevent" function (:arguments ("key" "recs")) nil [19553 20133])
            ("org-bbdb" package nil nil [20135 20154]))          
      :file "org-bbdb.el"
      :pointmax 20257
      :fsize 20256
      :lastmodtime '(23525 29589 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [912 925])
            ("declare-function" code nil nil [926 992])
            ("htmlize-output-type" variable nil nil [993 1021])
            ("org-export-org" customgroup (:user-visible-flag t) nil [1023 1198])
            ("org-org-htmlized-css-url" variable nil nil [1200 1934])
            ("org-export-define-backend" code nil nil [1936 4091])
            ("org-org--add-missing-sections" function (:arguments ("tree" "_backend" "_info")) nil [4093 4810])
            ("org-org-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [4812 5072])
            ("org-org-identity" function (:arguments ("blob" "contents" "_info")) nil [5074 5402])
            ("org-org-headline" function (:arguments ("headline" "contents" "info")) nil [5404 6096])
            ("org-org-keyword" function (:arguments ("keyword" "_contents" "_info")) nil [6098 6425])
            ("org-org-link" function (:arguments ("link" "contents" "_info")) nil [6427 6740])
            ("org-org-template" function (:arguments ("contents" "info")) nil [6742 8111])
            ("org-org-section" function (:arguments ("section" "contents" "info")) nil [8113 9162])
            ("org-org-export-as-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [9179 10338])
            ("org-org-export-to-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [10355 11431])
            ("org-org-publish-to-org" function (:arguments ("plist" "filename" "pub-dir")) nil [11448 12984])
            ("ox-org" package nil nil [12987 13004]))          
      :file "ox-org.el"
      :pointmax 13105
      :fsize 13104
      :lastmodtime '(23525 29594 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1452 1466])
            ("org-agenda" include nil nil [1467 1488])
            ("cl-lib" include nil nil [1489 1506])
            ("org-agenda-keep-restricted-file-list" variable nil nil [1508 1553])
            ("org-mobile" customgroup (:user-visible-flag t) nil [1566 1696])
            ("org-mobile-files" variable (:default-value (quote (org-agenda-files))) nil [1698 2545])
            ("org-mobile-files-exclude-regexp" variable nil nil [2547 2703])
            ("org-mobile-directory" variable nil nil [2705 2856])
            ("org-mobile-allpriorities" variable (:default-value "A B C") nil [2858 3047])
            ("org-mobile-use-encryption" variable nil nil [3049 3543])
            ("org-mobile-encryption-tempfile" variable (:default-value "~/orgtmpcrypt") nil [3545 3876])
            ("org-mobile-encryption-password" variable nil nil [3878 4819])
            ("org-mobile-encryption-password-session" variable nil nil [4821 4872])
            ("org-mobile-encryption-password" function nil nil [4874 5134])
            ("org-mobile-inbox-for-pull" variable (:default-value "~/org/from-mobile.org") nil [5136 5539])
            ("org-mobile-capture-file" variable
               (:constant-flag t
                :default-value "mobileorg.org")
                nil [5541 5727])
            ("org-mobile-index-file" variable (:default-value "index.org") nil [5729 5997])
            ("org-mobile-agendas" variable (:default-value (quote all)) nil [5999 6550])
            ("org-mobile-force-id-on-agenda-items" variable (:default-value t) nil [6552 6692])
            ("org-mobile-force-mobile-change" variable nil nil [6694 7366])
            ("org-mobile-checksum-binary" variable (:default-value (or (executable-find "shasum") (executable-find "sha1sum") (executable-find "md5sum") (executable-find "md5"))) nil [7368 7636])
            ("org-mobile-pre-push-hook" variable nil nil [7638 7957])
            ("org-mobile-post-push-hook" variable nil nil [7959 8297])
            ("org-mobile-pre-pull-hook" variable nil nil [8299 8625])
            ("org-mobile-post-pull-hook" variable nil nil [8627 8975])
            ("org-mobile-action-alist" variable
               (:constant-flag t
                :default-value (quote (("edit" . org-mobile-edit))))
                nil [8977 9712])
            ("org-mobile-last-flagged-files" variable nil nil [9714 9821])
            ("org-mobile-files-alist" variable nil nil [9823 9858])
            ("org-mobile-checksum-files" variable nil nil [9859 9897])
            ("org-mobile-prepare-file-lists" function nil nil [9899 10035])
            ("org-mobile-files-alist" function nil nil [10037 11760])
            ("org-mobile-push" function (:user-visible-flag t) nil [11777 12930])
            ("org-mobile-before-process-capture-hook" variable nil nil [12932 13164])
            ("org-mobile-pull" function (:user-visible-flag t) nil [13181 14207])
            ("org-mobile-check-setup" function nil nil [14209 15831])
            ("org-mobile-create-index-file" function nil nil [15833 18251])
            ("org-mobile-copy-agenda-files" function nil nil [18253 19760])
            ("org-mobile-write-checksums" function nil nil [19762 20258])
            ("org-mobile-sumo-agenda-command" function nil nil [20260 23076])
            ("org-mobile-creating-agendas" variable nil nil [23078 23118])
            ("org-mobile-write-agenda-for-mobile" function (:arguments ("file")) nil [23119 25255])
            ("org-mobile-get-outline-path-link" function (:arguments ("pom")) nil [25257 25585])
            ("org-mobile-escape-olp" function (:arguments ("s")) nil [25587 25678])
            ("org-mobile-create-sumo-agenda" function (:user-visible-flag t) nil [25680 26395])
            ("org-mobile-encrypt-and-move" function (:arguments ("infile" "outfile")) nil [26397 26820])
            ("org-mobile-encrypt-file" function (:arguments ("infile" "outfile")) nil [26822 27226])
            ("org-mobile-decrypt-file" function (:arguments ("infile" "outfile")) nil [27228 27635])
            ("org-mobile-cleanup-encryption-tempfile" function nil nil [27637 27890])
            ("org-mobile-move-capture" function (:user-visible-flag t) nil [27892 29410])
            ("org-mobile-update-checksum-for-capture-file" function (:arguments ("buffer-string")) nil [29412 30008])
            ("org-mobile-apply" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [30010 34155])
            ("org-mobile-timestamp-buffer" function (:arguments ("buf")) nil [34157 34711])
            ("org-mobile-smart-read" function nil nil [34713 36141])
            ("org-mobile-locate-entry" function (:arguments ("link")) nil [36143 37051])
            ("org-mobile-edit" function (:arguments ("what" "old" "new")) nil [37053 41317])
            ("org-mobile-tags-same-p" function (:arguments ("list1" "list2")) nil [41319 41474])
            ("org-mobile-bodies-same-p" function (:arguments ("a" "b")) nil [41476 42071])
            ("org-mobile" package nil nil [42073 42094]))          
      :file "org-mobile.el"
      :pointmax 42199
      :fsize 42198
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1476 1495])
            ("org-compat" include nil nil [1496 1517])
            ("org" include nil nil [1518 1532])
            ("cl-lib" include nil nil [1534 1551])
            ("declare-function" code nil nil [1553 1621])
            ("declare-function" code nil nil [1622 1685])
            ("declare-function" code nil nil [1686 1748])
            ("org-inlinetask-show-first-star" variable nil nil [1749 1788])
            ("org-indent" customgroup (:user-visible-flag t) nil [1790 1909])
            ("org-indent-inlinetask-first-star" variable (:default-value (org-add-props "*" (quote (face org-warning)))) nil [1911 2043])
            ("org-indent-agent-timer" variable nil nil [2044 2119])
            ("org-indent-agentized-buffers" variable nil nil [2120 2214])
            ("org-indent-agent-resume-timer" variable nil nil [2215 2328])
            ("org-indent-agent-active-delay" variable (:default-value (quote (0 2 0))) nil [2329 2493])
            ("org-indent-agent-passive-delay" variable (:default-value (quote (0 0 400000))) nil [2494 2667])
            ("org-indent-agent-resume-delay" variable (:default-value (quote (0 0 100000))) nil [2668 2794])
            ("org-indent--initial-marker" variable nil nil [2795 2938])
            ("org-hide-leading-stars-before-indent-mode" variable nil nil [2939 3011])
            ("org-indent-modified-headline-flag" variable nil nil [3012 3175])
            ("org-indent-boundary-char" variable (:default-value 32) nil [3178 3527])
            ("org-indent-mode-turns-off-org-adapt-indentation" variable (:default-value t) nil [3529 3779])
            ("org-indent-mode-turns-on-hiding-stars" variable (:default-value t) nil [3781 3968])
            ("org-indent-indentation-per-level" variable (:default-value 2) nil [3970 4105])
            ("org-indent" variable
               (:default-value (quote ((t (:inherit org-hide))))
                :type "face")
                nil [4107 4323])
            ("org-indent--text-line-prefixes" variable nil nil [4325 4430])
            ("org-indent--heading-line-prefixes" variable nil nil [4432 4535])
            ("org-indent--inlinetask-line-prefixes" variable nil nil [4537 4646])
            ("org-indent--deepest-level" variable
               (:constant-flag t
                :default-value 50)
                nil [4648 4727])
            ("org-indent--compute-prefixes" function nil nil [4729 5997])
            ("org-indent-remove-properties" function (:arguments ("beg" "end")) nil [5999 6198])
            ("define-minor-mode" code nil nil [6215 8929])
            ("org-indent-indent-buffer" function (:user-visible-flag t) nil [8931 9355])
            ("org-indent-remove-properties-from-string" function (:arguments ("string")) nil [9357 9562])
            ("org-indent-initialize-agent" function nil nil [9564 10525])
            ("org-indent-initialize-buffer" function (:arguments ("buffer" "delay")) nil [10527 11372])
            ("org-indent-set-line-properties" function (:arguments ("level" "indentation" "heading")) nil [11374 12349])
            ("org-indent-add-properties" function (:arguments ("beg" "end" "delay")) nil [12351 14504])
            ("org-indent-notify-modified-headline" function (:arguments ("beg" "end")) nil [14506 15130])
            ("org-indent-refresh-maybe" function (:arguments ("beg" "end" "_")) nil [15132 16099])
            ("org-indent" package nil nil [16101 16122]))          
      :file "org-indent.el"
      :pointmax 16227
      :fsize 16226
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1911 1925])
            ("declare-function" code nil nil [1927 1996])
            ("declare-function" code nil nil [1997 2045])
            ("declare-function" code nil nil [2046 2107])
            ("declare-function" code nil nil [2108 2175])
            ("declare-function" code nil nil [2176 2222])
            ("declare-function" code nil nil [2223 2279])
            ("declare-function" code nil nil [2280 2347])
            ("declare-function" code nil nil [2348 2386])
            ("declare-function" code nil nil [2387 2458])
            ("declare-function" code nil nil [2459 2504])
            ("org-irc-client" variable (:default-value (quote erc)) nil [2506 2564])
            ("org-irc-link-to-logs" variable nil nil [2566 2677])
            ("erc-default-port" variable nil nil [2679 2704])
            ("erc-session-port" variable nil nil [2740 2765])
            ("erc-session-server" variable nil nil [2809 2836])
            ("org-link-set-parameters" code nil nil [2941 3024])
            ("org-irc-visit" function (:arguments ("link")) nil [3026 3297])
            ("org-irc-parse-link" function (:arguments ("link")) nil [3299 3778])
            ("org-irc-store-link" function nil nil [3795 3969])
            ("org-irc-ellipsify-description" function (:arguments ("string" "after")) nil [3971 4537])
            ("org-irc-erc-get-line-from-log" function (:arguments ("erc-line")) nil [4566 5431])
            ("org-irc-erc-store-link" function nil nil [5433 6693])
            ("org-irc-get-erc-link" function nil nil [6695 7270])
            ("org-irc-get-current-erc-port" function nil nil [7272 7589])
            ("org-irc-visit-erc" function (:arguments ("link")) nil [7591 9097])
            ("org-irc" package nil nil [9099 9117]))          
      :file "org-irc.el"
      :pointmax 9219
      :fsize 9218
      :lastmodtime '(23525 29591 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!org!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
