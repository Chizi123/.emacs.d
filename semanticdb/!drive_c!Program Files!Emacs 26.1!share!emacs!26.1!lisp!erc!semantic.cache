;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [923 937])
            ("erc-ezbounce" customgroup (:user-visible-flag t) nil [939 1045])
            ("erc-ezb-regexp" variable (:default-value "^ezbounce!srv$") nil [1047 1194])
            ("erc-ezb-login-alist" variable (:default-value (quote nil)) nil [1196 1579])
            ("erc-ezb-action-alist" variable (:default-value (quote (("^\\[awaiting login/pass command\\]$" . erc-ezb-identify) ("^\\[use /quote CONN <server> to connect\\]$" . erc-ezb-select) ("^ID +IRC NICK +TO +TIME$" . erc-ezb-init-session-list) ("^$" . erc-ezb-end-of-session-list) (".*" . erc-ezb-add-session)))) nil [1581 2002])
            ("erc-ezb-session-list" variable (:default-value (quote nil)) nil [2005 2078])
            ("make-variable-buffer-local" code nil nil [2079 2129])
            ("erc-ezb-inside-session-listing" variable nil nil [2131 2252])
            ("erc-cmd-ezb" function (:arguments ("line" "force")) nil [2269 2401])
            ("put" code nil nil [2402 2441])
            ("erc-ezb-get-login" function (:arguments ("server" "port")) nil [2458 3094])
            ("erc-ezb-lookup-action" function (:arguments ("message")) nil [3111 3452])
            ("erc-ezb-notice-autodetect" function (:arguments ("proc" "parsed")) nil [3469 3804])
            ("erc-ezb-identify" function (:arguments ("message")) nil [3821 4130])
            ("erc-ezb-init-session-list" function (:arguments ("message")) nil [4147 4310])
            ("erc-ezb-end-of-session-list" function (:arguments ("message")) nil [4327 4470])
            ("erc-ezb-add-session" function (:arguments ("message")) nil [4487 4883])
            ("erc-ezb-select" function (:arguments ("message")) nil [4900 5336])
            ("erc-ezb-select-session" function nil nil [5354 5632])
            ("erc-ezb-initialize" function nil nil [5650 5796])
            ("erc-ezbounce" package nil nil [5798 5821]))          
      :file "erc-ezbounce.el"
      :pointmax 5853
      :fsize 5852
      :lastmodtime '(23525 29546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "erc.el"
      :fsize 258462
      :lastmodtime '(23525 29548 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [1056 1070])
            ("erc-networks" include nil nil [1071 1094])
            ("pcomplete" include nil nil [1114 1134])
            ("erc-notify" customgroup (:user-visible-flag t) nil [1166 1251])
            ("erc-notify-list" variable nil nil [1253 1412])
            ("erc-notify-interval" variable (:default-value 60) nil [1414 1564])
            ("erc-notify-signon-hook" variable nil nil [1566 1807])
            ("erc-notify-signoff-hook" variable nil nil [1809 2053])
            ("erc-notify-signon" function (:arguments ("server" "nick")) nil [2055 2139])
            ("erc-notify-signoff" function (:arguments ("server" "nick")) nil [2141 2229])
            ("erc-last-ison" variable nil nil [2256 2345])
            ("make-variable-buffer-local" code nil nil [2346 2389])
            ("erc-last-ison-time" variable nil nil [2391 2485])
            ("make-variable-buffer-local" code nil nil [2486 2534])
            ("erc-notify-install-message-catalogs" function nil nil [2548 2842])
            ("define-erc-module" code nil nil [2906 3476])
            ("erc-notify-timer" function (:arguments ("now")) nil [3498 4727])
            ("erc-notify-JOIN" function (:arguments ("proc" "parsed")) nil [4729 5433])
            ("erc-notify-NICK" function (:arguments ("proc" "parsed")) nil [5435 6116])
            ("erc-notify-QUIT" function (:arguments ("proc" "parsed")) nil [6118 6952])
            ("erc-cmd-NOTIFY" function (:arguments ("args")) nil [6994 8424])
            ("pcomplete-erc-all-nicks" function (:prototype-flag t) nil [8426 8477])
            ("declare-function" code nil nil [8502 8591])
            ("pcomplete/erc-mode/NOTIFY" function nil nil [8608 8712])
            ("erc-notify-install-message-catalogs" code nil nil [8714 8751])
            ("erc-notify" package nil nil [8753 8774]))          
      :file "erc-notify.el"
      :pointmax 8874
      :fsize 8873
      :lastmodtime '(23525 29548 0 0)
      :unmatched-syntax '((close-paren 1134 . 1135) (symbol 1096 . 1113) (open-paren 1095 . 1096)))
    (semanticdb-table "semanticdb-table"
      :file "erc-networks.el"
      :fsize 42299
      :lastmodtime '(23525 29547 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [1931 1945])
            ("pcomplete" include nil nil [1965 1985])
            ("define-erc-module" code nil nil [2038 2247])
            ("erc-dcc" customgroup (:user-visible-flag t) nil [2249 2617])
            ("erc-dcc-verbose" variable nil nil [2619 2742])
            ("erc-dcc-connection-types" variable
               (:constant-flag t
                :default-value (quote ("CHAT" "GET" "SEND")))
                nil [2744 2894])
            ("erc-dcc-list" variable nil nil [2896 4096])
            ("erc-dcc-list-add" function (:arguments ("type" "nick" "peer" "parent" "args")) nil [4098 4372])
            ("erc-dcc-connect-function" variable (:default-value (quote erc-dcc-open-network-stream)) nil [4520 4582])
            ("erc-dcc-open-network-stream" function (:arguments ("procname" "buffer" "addr" "port" "entry")) nil [4584 4908])
            ("erc-define-catalog" code nil nil [4910 6665])
            ("erc-dcc-member" function (:arguments ("args")) nil [6706 8319])
            ("erc-pack-int" function (:arguments ("value")) nil [8321 8977])
            ("erc-most-positive-int-bytes" variable
               (:constant-flag t
                :default-value (ceiling (/ (ceiling (/ (log most-positive-fixnum) (log 2))) 8.0)))
                nil [8979 9128])
            ("erc-most-positive-int-msb" variable
               (:constant-flag t
                :default-value (lsh most-positive-fixnum (- 0 (* 8 (1- erc-most-positive-int-bytes)))))
                nil [9130 9306])
            ("erc-unpack-int" function (:arguments ("str")) nil [9308 10152])
            ("erc-dcc-ipv4-regexp" variable
               (:constant-flag t
                :default-value (concat "^" (mapconcat (function identity) (make-list 4 "\\([0-9]\\{1,3\\}\\)") "\\.") "$"))
                nil [10154 10289])
            ("erc-ip-to-decimal" function
               (:user-visible-flag t
                :arguments ("ip"))
                nil [10291 11124])
            ("erc-decimal-to-ip" function (:arguments ("dec")) nil [11126 11714])
            ("erc-dcc-listen-host" variable nil nil [11733 12107])
            ("erc-dcc-public-host" variable nil nil [12109 12469])
            ("erc-dcc-send-request" variable (:default-value (quote ask)) nil [12471 12897])
            ("erc-dcc-get-host" function (:arguments ("proc")) nil [12899 13048])
            ("erc-dcc-host" function nil nil [13050 13340])
            ("erc-dcc-port-range" variable nil nil [13342 13726])
            ("erc-dcc-auto-masks" variable nil nil [13728 14070])
            ("erc-dcc-server" function (:arguments ("name" "filter" "sentinel")) nil [14072 15736])
            ("erc-dcc-server-accept" function (:arguments ("server" "client" "message")) nil [15738 16408])
            ("erc-dcc-get-default-directory" variable nil nil [16444 16698])
            ("erc-cmd-DCC" function (:arguments ("cmd" "args")) nil [16715 17288])
            ("pcomplete-erc-all-nicks" function (:prototype-flag t) nil [17290 17341])
            ("pcomplete/erc-mode/DCC" function nil nil [17358 19053])
            ("erc-dcc-do-CHAT-command" function (:arguments ("proc" "nick")) nil [19055 19707])
            ("erc-dcc-do-CLOSE-command" function (:arguments ("proc" "type" "nick")) nil [19709 21163])
            ("erc-dcc-do-GET-command" function (:arguments ("proc" "nick" "file")) nil [21165 22658])
            ("erc-dcc-byte-count" variable nil nil [22660 22691])
            ("make-variable-buffer-local" code nil nil [22692 22740])
            ("erc-dcc-do-LIST-command" function (:arguments ("proc")) nil [22742 24563])
            ("erc-dcc-do-SEND-command" function (:arguments ("proc" "nick" "file")) nil [24565 25074])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [25154 25248])
            ("erc-dcc-query-handler-alist" variable (:default-value (quote (("SEND" . erc-dcc-handle-ctcp-send) ("CHAT" . erc-dcc-handle-ctcp-chat)))) nil [25250 25367])
            ("erc-ctcp-query-DCC" function (:arguments ("proc" "nick" "login" "host" "to" "query")) nil [25384 25977])
            ("erc-dcc-ctcp-query-send-regexp" variable
               (:constant-flag t
                :default-value (concat "^DCC SEND \\(" "\"\\(\\(.*?\\(\\\\\"\\)?\\)+?\\)\"\\|\\([^ ]+\\)" "\\) \\([0-9]+\\) \\([0-9]+\\) *\\([0-9]*\\)"))
                nil [25979 26344])
            ("erc-dcc-unquote-filename" function (:arguments ("filename")) nil [26346 26535])
            ("erc-dcc-handle-ctcp-send" function (:arguments ("proc" "query" "nick" "login" "host" "to")) nil [26537 28341])
            ("erc-dcc-auto-mask-p" function (:arguments ("spec")) nil [28343 28716])
            ("erc-dcc-ctcp-query-chat-regexp" variable
               (:constant-flag t
                :default-value "^DCC CHAT +chat +\\([0-9]+\\) +\\([0-9]+\\)")
                nil [28718 28807])
            ("erc-dcc-chat-request" variable (:default-value (quote ask)) nil [28809 29170])
            ("erc-dcc-handle-ctcp-chat" function (:arguments ("proc" "query" "nick" "login" "host" "to")) nil [29172 30989])
            ("erc-dcc-entry-data" variable nil nil [30992 31083])
            ("make-variable-buffer-local" code nil nil [31084 31132])
            ("erc-dcc-block-size" variable (:default-value 1024) nil [31153 31268])
            ("erc-dcc-pump-bytes" variable nil nil [31270 31443])
            ("erc-dcc-get-parent" function (:arguments ("proc")) nil [31445 31531])
            ("erc-dcc-send-block" function (:arguments ("proc")) nil [31533 32442])
            ("erc-dcc-send-filter" function (:arguments ("proc" "string")) nil [32444 33905])
            ("erc-dcc-display-send" function (:arguments ("proc")) nil [33907 34114])
            ("erc-dcc-send-connect-hook" variable (:default-value (quote (erc-dcc-display-send erc-dcc-send-block))) nil [34116 34321])
            ("erc-dcc-nick" function (:arguments ("plist")) nil [34323 34467])
            ("erc-dcc-send-sentinel" function (:arguments ("proc" "event")) nil [34469 34867])
            ("erc-dcc-find-file" function (:arguments ("file")) nil [34869 35073])
            ("erc-dcc-file-to-name" function (:arguments ("file")) nil [35075 35253])
            ("erc-dcc-send-file" function
               (:user-visible-flag t
                :arguments ("nick" "file" "pproc"))
                nil [35255 36604])
            ("erc-dcc-receive-cache" variable (:default-value (* 1024 512)) nil [36624 36776])
            ("erc-dcc-file-name" variable nil nil [36778 36808])
            ("make-variable-buffer-local" code nil nil [36809 36856])
            ("erc-dcc-get-file" function (:arguments ("entry" "file" "parent-proc")) nil [36858 38775])
            ("erc-dcc-append-contents" function (:arguments ("buffer" "file")) nil [38777 39387])
            ("erc-dcc-get-filter" function (:arguments ("proc" "str")) nil [39389 40794])
            ("erc-dcc-get-sentinel" function (:arguments ("proc" "event")) nil [40797 41655])
            ("erc-dcc-chat-buffer-name-format" variable (:default-value "DCC-CHAT-%s") nil [41676 41812])
            ("erc-dcc-chat-mode-hook" variable nil nil [41814 41956])
            ("erc-dcc-chat-connect-hook" variable nil nil [41958 42036])
            ("erc-dcc-chat-exit-hook" variable nil nil [42038 42113])
            ("erc-cmd-CREQ" function (:arguments ("line" "force")) nil [42115 42731])
            ("erc-cmd-SREQ" function (:arguments ("line" "force")) nil [42733 43349])
            ("pcomplete/erc-mode/CREQ" function nil nil [43351 43429])
            ("defalias" code nil nil [43430 43490])
            ("erc-dcc-chat-filter-functions" variable (:default-value (quote (erc-dcc-chat-parse-output))) nil [43492 43720])
            ("define-obsolete-variable-alias" code nil nil [43722 43820])
            ("erc-dcc-chat-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote erc-send-current-line)) (define-key map "	" (quote completion-at-point)) map)) nil [43822 44031])
            ("define-derived-mode" code nil nil [44033 44365])
            ("erc-dcc-chat-send-input-line" function (:arguments ("recipient" "line" "force")) nil [44367 44777])
            ("erc-dcc-chat" function
               (:user-visible-flag t
                :arguments ("nick" "pproc"))
                nil [44779 45534])
            ("erc-dcc-from" variable nil nil [45536 45557])
            ("make-variable-buffer-local" code nil nil [45558 45600])
            ("erc-dcc-unprocessed-output" variable nil nil [45602 45637])
            ("make-variable-buffer-local" code nil nil [45638 45694])
            ("erc-dcc-chat-setup" function (:arguments ("entry")) nil [45696 46584])
            ("erc-dcc-chat-accept" function (:arguments ("entry" "parent-proc")) nil [46586 47312])
            ("erc-dcc-chat-filter" function (:arguments ("proc" "str")) nil [47314 47730])
            ("erc-dcc-chat-parse-output" function (:arguments ("proc" "str")) nil [47732 48236])
            ("erc-dcc-chat-buffer-killed" function nil nil [48238 48314])
            ("erc-dcc-chat-close" function (:arguments ("event")) nil [48316 48903])
            ("erc-dcc-chat-sentinel" function (:arguments ("proc" "event")) nil [48905 49349])
            ("erc-dcc-no-such-nick" function (:arguments ("proc" "parsed")) nil [49351 49991])
            ("erc-dcc" package nil nil [49993 50011]))          
      :file "erc-dcc.el"
      :pointmax 50094
      :fsize 50093
      :lastmodtime '(23525 29546 0 0)
      :unmatched-syntax '((close-paren 1985 . 1986) (symbol 1947 . 1964) (open-paren 1946 . 1947)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc-dcc" include nil nil [994 1012])
            ("erc-xdcc-files" variable nil nil [1014 1190])
            ("erc-xdcc-verbose-flag" variable (:default-value t) nil [1192 1314])
            ("erc-xdcc-handler-alist" variable (:default-value (quote (("help" . erc-xdcc-help) ("list" . erc-xdcc-list) ("send" . erc-xdcc-send)))) nil [1316 1585])
            ("erc-xdcc-help-text" variable (:default-value (quote (("Hey " nick ", wondering how this works?  Pretty easy.") ("Available commands: XDCC [" (mapconcat (quote car) erc-xdcc-handler-alist "|") "]") ("Type \"/ctcp " (erc-current-nick) " XDCC list\" to see the list of offered files, then type \"/ctcp " (erc-current-nick) " XDCC send #\" to get a particular file number.")))) nil [1587 2209])
            ("define-erc-module" code nil nil [2263 2333])
            ("erc-xdcc-add-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [2350 2532])
            ("erc-xdcc-reply" function (:arguments ("proc" "nick" "msg")) nil [2534 2641])
            ("erc-ctcp-query-XDCC-hook" variable (:default-value (quote (erc-xdcc))) nil [2667 2770])
            ("erc-xdcc" function (:arguments ("proc" "nick" "login" "host" "to" "query")) nil [2772 3360])
            ("erc-xdcc-help" function (:arguments ("proc" "nick" "login" "host" "args")) nil [3362 3607])
            ("erc-xdcc-list" function (:arguments ("proc" "nick" "login" "host" "args")) nil [3609 4064])
            ("erc-xdcc-send" function (:arguments ("proc" "nick" "login" "host" "args")) nil [4066 4461])
            ("erc-xdcc" package nil nil [4463 4482]))          
      :file "erc-xdcc.el"
      :pointmax 4580
      :fsize 4579
      :lastmodtime '(23525 29548 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [1063 1077])
            ("define-erc-module" code nil nil [1131 1216])
            ("erc-define-catalog-entry" code nil nil [1218 1291])
            ("erc-page" customgroup (:user-visible-flag t) nil [1293 1363])
            ("erc-page-function" variable nil nil [1365 1860])
            ("erc-ctcp-query-PAGE-hook" variable (:default-value (quote (erc-ctcp-query-PAGE))) nil [1862 2295])
            ("erc-ctcp-query-PAGE" function (:arguments ("proc" "nick" "login" "host" "to" "msg")) nil [2297 3172])
            ("erc-cmd-PAGE" function (:arguments ("line" "force")) nil [3174 3557])
            ("put" code nil nil [3559 3599])
            ("erc-page" package nil nil [3601 3620]))          
      :file "erc-page.el"
      :pointmax 3718
      :fsize 3717
      :lastmodtime '(23525 29548 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [1020 1034])
            ("xml" include nil nil [1035 1049])
            ("notifications" include nil nil [1050 1074])
            ("erc-match" include nil nil [1075 1095])
            ("dbus" include nil nil [1096 1111])
            ("erc-notifications" customgroup (:user-visible-flag t) nil [1113 1224])
            ("erc-notifications-last-notification" variable nil nil [1226 1300])
            ("erc-notifications-icon" variable nil nil [1302 1452])
            ("erc-notifications-bus" variable (:default-value :session) nil [1454 1642])
            ("dbus-debug" variable nil nil [1644 1663])
            ("erc-notifications-notify" function (:arguments ("nick" "msg")) nil [1716 2234])
            ("erc-notifications-PRIVMSG" function (:arguments ("proc" "parsed")) nil [2236 2770])
            ("erc-notifications-notify-on-match" function (:arguments ("match-type" "nickuserhost" "msg")) nil [2772 3141])
            ("define-erc-module" code nil nil [3225 3647])
            ("erc-desktop-notifications" package nil nil [3649 3685]))          
      :file "erc-desktop-notifications.el"
      :pointmax 3730
      :fsize 3729
      :lastmodtime '(23525 29546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "erc-match.el"
      :fsize 21205
      :lastmodtime '(23525 29547 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("erc" include nil nil [1168 1182])
            ("erc-stamp" include nil nil [1183 1203])
            ("erc-fill" customgroup (:user-visible-flag t) nil [1230 1327])
            ("erc-define-minor-mode" code nil nil [1387 1818])
            ("erc-fill-enable" function (:user-visible-flag t) nil [1820 1991])
            ("erc-fill-disable" function (:user-visible-flag t) nil [1993 2178])
            ("erc-fill-prefix" variable nil nil [2180 2390])
            ("erc-fill-function" variable (:default-value (quote erc-fill-variable)) nil [2392 3349])
            ("erc-fill-static-center" variable (:default-value 27) nil [3351 3651])
            ("erc-fill-variable-maximum-indentation" variable (:default-value 17) nil [3653 3847])
            ("erc-fill-column" variable (:default-value 78) nil [3849 3969])
            ("erc-fill" function nil nil [3986 4575])
            ("erc-fill-static" function nil nil [4577 5176])
            ("erc-fill-variable" function nil nil [5178 6295])
            ("erc-fill-regarding-timestamp" function nil nil [6297 6563])
            ("erc-timestamp-offset" function nil nil [6565 6891])
            ("erc-fill" package nil nil [6893 6912]))          
      :file "erc-fill.el"
      :pointmax 6993
      :fsize 6992
      :lastmodtime '(23525 29546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "erc-stamp.el"
      :fsize 15795
      :lastmodtime '(23525 29548 0 0)))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!erc!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
