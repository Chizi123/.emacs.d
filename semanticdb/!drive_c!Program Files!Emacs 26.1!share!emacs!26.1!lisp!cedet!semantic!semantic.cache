;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1156 1175])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1220 1327])
            ("semantic-update-mode-line" variable (:default-value t) nil [1371 1807])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1809 2045])
            ("semantic-minor-modes-format" variable nil nil [2047 2198])
            ("put" code nil nil [2199 2257])
            ("semantic-minor-mode-alist" variable nil nil [2259 2399])
            ("semantic-mode-line-update" function nil nil [2401 4477])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4479 4666])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4668 5734])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5736 6884])
            ("define-minor-mode" code nil nil [6967 7327])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7329 7481])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7483 7814])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7816 8122])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8124 8252])
            ("define-minor-mode" code nil nil [8269 9438])
            ("semantic-add-minor-mode" code nil nil [9440 9525])
            ("define-minor-mode" code nil nil [9604 10072])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10074 10238])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10240 10537])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10539 10712])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10714 11043])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11045 11587])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11589 11892])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11894 12088])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12090 12315])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12317 13256])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13258 13956])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13958 14177])
            ("define-minor-mode" code nil nil [14194 16052])
            ("semantic-add-minor-mode" code nil nil [16054 16145])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16147 16376])
            ("define-minor-mode" code nil nil [16467 16896])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16898 17054])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17056 17188])
            ("define-minor-mode" code nil nil [17205 20915])
            ("semantic-add-minor-mode" code nil nil [20917 21003])
            ("semantic-show-parser-state-string" variable nil nil [21005 21157])
            ("make-variable-buffer-local" code nil nil [21158 21221])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21223 22043])
            ("semantic-show-parser-state-auto-marker" function nil nil [22045 22363])
            ("define-minor-mode" code nil nil [22440 22861])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22863 23005])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23007 23200])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23202 23322])
            ("easy-menu-define" code nil nil [23324 24471])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24473 26624])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26626 26726])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) (t (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline)))))))
                nil [26728 27023])
            ("define-minor-mode" code nil nil [27040 29024])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29026 29162])
            ("make-variable-buffer-local" code nil nil [29163 29227])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29229 29507])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29509 29876])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [29878 31698])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31700 32170])
            ("semantic-add-minor-mode" code nil nil [32173 32252])
            ("define-minor-mode" code nil nil [32506 32946])
            ("semantic-highlight-func-mode-hook" variable nil nil [32948 33098])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33100 33336])
            ("semantic-highlight-func-popup-menu" variable nil nil [33338 33477])
            ("easy-menu-define" code nil nil [33479 34534])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34536 35052])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35054 35157])
            ("make-variable-buffer-local" code nil nil [35158 35222])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35224 35546])
            ("define-minor-mode" code nil nil [35563 36916])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [36918 38583])
            ("semantic-add-minor-mode" code nil nil [38585 38668])
            ("semantic/util-modes" package nil nil [38715 38745]))          
      :file "util-modes.el"
      :pointmax 38910
      :fsize 38909
      :lastmodtime '(23525 29534 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1509 1528])
            ("semantic/ctxt" include nil nil [1529 1553])
            ("semantic/format" include nil nil [1554 1580])
            ("semantic/tag" include nil nil [1581 1604])
            ("timer" include nil nil [1605 1621])
            ("semantic/find" include nil nil [1708 1732])
            ("eldoc-last-message" variable nil nil [1735 1762])
            ("declare-function" code nil nil [1763 1803])
            ("declare-function" code nil nil [1804 1874])
            ("declare-function" code nil nil [1875 1946])
            ("declare-function" code nil nil [1947 2023])
            ("declare-function" code nil nil [2024 2095])
            ("declare-function" code nil nil [2096 2156])
            ("declare-function" code nil nil [2157 2239])
            ("declare-function" code nil nil [2240 2331])
            ("declare-function" code nil nil [2332 2391])
            ("declare-function" code nil nil [2392 2452])
            ("declare-function" code nil nil [2453 2527])
            ("semantic-idle-scheduler-timer" variable nil nil [2571 2660])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2662 2778])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2780 2984])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2986 3493])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3495 4041])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4043 4653])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4655 4876])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5026 5180])
            ("semantic-idle-scheduler-mode" variable nil nil [5182 5348])
            ("make-variable-buffer-local" code nil nil [5349 5407])
            ("semantic-idle-scheduler-max-buffer-size" variable nil nil [5409 5676])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5678 6516])
            ("define-minor-mode" code nil nil [6533 7526])
            ("semantic-add-minor-mode" code nil nil [7528 7614])
            ("semantic-idle-scheduler-queue" variable nil nil [7695 7977])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7979 8130])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8132 8320])
            ("semantic-idle-core-handler" function nil nil [8343 11162])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11164 11347])
            ("semantic-idle-scheduler-function" function nil nil [11349 11710])
            ("semantic-idle-work-parse-neighboring-files-flag" variable nil nil [11840 12070])
            ("semantic-idle-work-update-headers-flag" variable nil nil [12072 12338])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12340 13368])
            ("semantic-idle-work-core-handler" function nil nil [13370 15456])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15458 15656])
            ("semantic-idle-scheduler-work-function" function nil nil [15658 16214])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16216 17242])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17385 17627])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17629 17865])
            ("semantic-varalias-obsolete" code nil nil [17867 18000])
            ("semantic-varalias-obsolete" code nil nil [18001 18132])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18134 20982])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21361 23453])
            ("put" code nil nil [23454 23513])
            ("add-hook" code nil nil [23514 23656])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23721 23926])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23928 24304])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24306 24757])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24759 25138])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25140 25466])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25468 25861])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25863 26361])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26363 27203])
            ("semantic-idle-summary-useful-context-p" function nil nil [27205 27587])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27589 27724])
            ("make-obsolete-overload" code nil nil [27726 27884])
            ("semantic-idle-summary-mode-hook" variable nil nil [27886 28018])
            ("semantic-idle-summary-idle-function" function nil nil [28020 29228])
            ("define-minor-mode" code nil nil [29230 30191])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30193 30564])
            ("semantic-add-minor-mode" code nil nil [30566 30622])
            ("define-minor-mode" code nil nil [30624 31096])
            ("semantic-idle-symbol-highlight" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [31311 31447])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote semantic-idle-symbol-highlight)) nil [31448 31570])
            ("make-obsolete-variable" code nil nil [31571 31710])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31712 33608])
            ("define-semantic-idle-service" code nil nil [33610 34921])
            ("define-minor-mode" code nil nil [34940 35688])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [35935 36171])
            ("semantic-idle-completion-list-default" function nil nil [36173 36875])
            ("define-semantic-idle-service" code nil nil [36877 37766])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [37933 38650])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38652 39595])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39597 39967])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [39969 40367])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40369 40639])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40641 40773])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40775 41195])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [41197 41740])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41785 42221])
            ("easy-menu-define" code nil nil [42223 44142])
            ("define-semantic-idle-service" code nil nil [44144 44686])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44688 45544])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45546 46087])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [46089 46804])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46806 47582])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47584 48877])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [48879 49607])
            ("semantic/idle" package nil nil [49610 49634]))          
      :file "idle.el"
      :pointmax 49787
      :fsize 49786
      :lastmodtime '(23525 29532 0 0)
      :unmatched-syntax '((close-paren 1732 . 1733) (symbol 1690 . 1707) (open-paren 1689 . 1690)))
    (semanticdb-table "semanticdb-table"
      :file "ctxt.el"
      :fsize 25497
      :lastmodtime '(23525 29531 0 0))
    (semanticdb-table "semanticdb-table"
      :file "format.el"
      :fsize 27613
      :lastmodtime '(23525 29532 0 0))
    (semanticdb-table "semanticdb-table"
      :file "tag.el"
      :fsize 51800
      :lastmodtime '(23525 29533 0 0))
    (semanticdb-table "semanticdb-table"
      :file "find.el"
      :fsize 27564
      :lastmodtime '(23525 29532 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [925 947])
            ("declare-function" code nil nil [949 1021])
            ("semanticdb-hooks" variable (:default-value (quote ((semanticdb-semantic-init-hook-fcn semantic-init-db-hook) (semanticdb-synchronize-table semantic-after-toplevel-cache-change-hook) (semanticdb-partial-synchronize-table semantic-after-partial-cache-change-hook) (semanticdb-revert-hook before-revert-hook) (semanticdb-kill-hook kill-buffer-hook) (semanticdb-kill-hook change-major-mode-hook) (semanticdb-kill-emacs-hook kill-emacs-hook)))) nil [1054 1622])
            ("semanticdb-minor-mode-p" function nil nil [1662 1846])
            ("define-minor-mode" code nil nil [1863 2370])
            ("defvaralias" code nil nil [2372 2442])
            ("defvaralias" code nil nil [2443 2510])
            ("semantic-varalias-obsolete" code nil nil [2511 2611])
            ("semanticdb-toggle-global-mode" function (:user-visible-flag t) nil [2614 2976])
            ("semanticdb-semantic-init-hook-fcn" function nil nil [3061 4974])
            ("semanticdb-revert-hook" function nil nil [4976 5355])
            ("semanticdb-kill-hook" function nil nil [5357 6787])
            ("semanticdb-kill-emacs-hook" function nil nil [6789 6919])
            ("semanticdb-synchronize-table" function (:arguments ("new-table")) nil [6950 7173])
            ("semanticdb-partial-synchronize-table" function (:arguments ("new-table")) nil [7175 7414])
            ("semantic/db-mode" package nil nil [7417 7444]))          
      :file "db-mode.el"
      :pointmax 7603
      :fsize 7602
      :lastmodtime '(23525 29531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "db.el"
      :fsize 40338
      :lastmodtime '(23525 29531 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1578 1591])
            ("semantic" include nil nil [1593 1612])
            ("eieio-base" include nil nil [1613 1634])
            ("ring" include nil nil [1635 1650])
            ("declare-function" code nil nil [1652 1705])
            ("declare-function" code nil nil [1706 1773])
            ("declare-function" code nil nil [1774 1845])
            ("declare-function" code nil nil [1846 1905])
            ("semantic-bookmark" type
               (:superclasses "eieio-named"
                :members 
                  ( ("tag" variable
                       (:documentation "The TAG this bookmark belongs to."
                        :type "semantic-tag")
                        nil nil)
                    ("parent" variable
                       (:documentation "The tag that is the parent of :tag."
                        :type "(or semantic-tag null)")
                        nil nil)
                    ("offset" variable
                       (:documentation "The offset from `tag' start that is
somehow interesting."
                        :type "number")
                        nil nil)
                    ("filename" variable
                       (:documentation "String the tag belongs to.
Set this when the tag gets unlinked from the buffer it belongs to."
                        :type "string")
                        nil nil)
                    ("frequency" variable
                       (:documentation "Track the frequency this tag is visited."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("reason" variable
                       (:documentation "The reason this tag is interesting.
Nice values are 'edit, 'read, 'jump, and 'mark.
 edit - created because the tag text was edited.
 read - created because point lingered in tag text.
 jump - jumped to another tag from this tag.
 mark - created a regular mark in this tag."
                        :default-value "t"
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [1978 2938])
            ("cl-defmethod" code nil nil [2940 3320])
            ("cl-defmethod" code nil nil [3322 4011])
            ("cl-defmethod" code nil nil [4013 4491])
            ("cl-defmethod" code nil nil [4493 5062])
            ("semantic-bookmark-ring" type
               (:members 
                  ( ("ring" variable
                       (:documentation "List of `semantic-bookmark' objects.
This list is maintained as a list with the first item
being the current location, and the rest being a list of
items that were recently visited."
                        :type "ring")
                        nil nil)
                    ("current-index" variable
                       (:documentation "The current index into RING for some operation.
User commands use this to move through the ring, or reset."
                        :default-value "0"
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [5064 5698])
            ("semantic-mru-bookmark-ring" variable (:default-value (semantic-bookmark-ring "Ring" :ring (make-ring 20))) nil [5700 5889])
            ("semantic-mrub-find-nearby-tag" function (:arguments ("point")) nil [5891 6418])
            ("cl-defmethod" code nil nil [6420 7245])
            ("semantic-mrub-cache-flush-fcn" function nil nil [7247 7600])
            ("add-hook" code nil nil [7602 7689])
            ("semantic-mrub-last-overlay" variable nil nil [7711 7822])
            ("semantic-mru-bookmark-change-hook-fcn" function (:arguments ("overlay")) nil [7824 8229])
            ("global-semantic-mru-bookmark-mode" variable nil nil [8274 8743])
            ("define-minor-mode" code nil nil [8760 9189])
            ("semantic-mru-bookmark-mode-hook" variable nil nil [9191 9337])
            ("semantic-mru-bookmark-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "B" (quote semantic-mrub-switch-tags)) km)) nil [9339 9516])
            ("define-minor-mode" code nil nil [9518 10909])
            ("semantic-add-minor-mode" code nil nil [10911 10993])
            ("semantic-mrub-read-history" function nil nil [11058 11144])
            ("semantic-mrub-ring-to-assoc-list" function (:arguments ("ring")) nil [11146 11472])
            ("semantic-mrub-completing-read" function (:arguments ("prompt")) nil [11474 13001])
            ("semantic-mrub-switch-tags" function
               (:user-visible-flag t
                :arguments ("tagmark"))
                nil [13003 13447])
            ("semantic-adebug-mrub" function (:user-visible-flag t) nil [13466 13775])
            ("semantic/mru-bookmark" package nil nil [13778 13810]))          
      :file "mru-bookmark.el"
      :pointmax 13979
      :fsize 13978
      :lastmodtime '(23525 29533 0 0)
      :unmatched-syntax '((close-paren 1591 . 1592) (symbol 1560 . 1577) (open-paren 1559 . 1560))))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
