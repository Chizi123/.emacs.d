;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" include nil nil [2323 2343])
            ("browse-url-url-at-point" function (:prototype-flag t) nil [2344 2392])
            ("unless" code nil nil [2437 2489])
            ("unless" code nil nil [2490 2585])
            ("unless" code nil nil [2586 2669])
            ("unless" code nil nil [2670 2771])
            ("goto-address" customgroup (:user-visible-flag t) nil [2773 2885])
            ("goto-address-fontify-p" variable (:default-value t) nil [2954 3155])
            ("goto-address-highlight-p" variable (:default-value t) nil [3157 3306])
            ("goto-address-fontify-maximum-size" variable (:default-value 30000) nil [3308 3594])
            ("goto-address-mail-regexp" variable (:default-value "[-a-zA-Z0-9=._+]+@\\([-a-zA-z0-9_]+\\.\\)+[a-zA-Z0-9]+") nil [3596 3827])
            ("goto-address-url-regexp" variable (:default-value (concat "\\<\\(" (mapconcat (quote identity) (delete "mailto:" (delete "data:" (copy-sequence thing-at-point-uri-schemes))) "\\|") "\\)" thing-at-point-url-path-regexp)) nil [3829 4541])
            ("goto-address-highlight-keymap" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m (if (featurep (quote xemacs)) (kbd "<button2>") (kbd "<mouse-2>")) (quote goto-address-at-point)) (define-key m (kbd "C-c RET") (quote goto-address-at-point)) m)) nil [4543 4858])
            ("goto-address-url-face" variable (:default-value (quote link)) nil [4860 4962])
            ("goto-address-url-mouse-face" variable (:default-value (quote highlight)) nil [4964 5103])
            ("goto-address-mail-face" variable (:default-value (quote italic)) nil [5105 5222])
            ("goto-address-mail-mouse-face" variable (:default-value (quote secondary-selection)) nil [5224 5386])
            ("goto-address-unfontify" function (:arguments ("start" "end")) nil [5388 5609])
            ("goto-address-prog-mode" variable nil nil [5611 5642])
            ("goto-address-fontify" function (:arguments ("start" "end")) nil [5644 7858])
            ("goto-address-fontify-region" function (:arguments ("start" "end")) nil [7860 8172])
            ("define-obsolete-function-alias" code nil nil [8288 8375])
            ("goto-address-at-point" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8392 9209])
            ("goto-address-find-address-at-point" function nil nil [9211 9725])
            ("goto-address" function (:user-visible-flag t) nil [9742 10227])
            ("define-minor-mode" code nil nil [10306 10820])
            ("define-minor-mode" code nil nil [10837 11195])
            ("goto-addr" package nil nil [11197 11217]))          
      :file "goto-addr.el"
      :pointmax 11246
      :fsize 11245
      :lastmodtime '(23525 29575 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1385 1402])
            ("gnutls" customgroup (:user-visible-flag t) nil [1404 1521])
            ("gnutls-algorithm-priority" variable nil nil [1523 1792])
            ("gnutls-verify-error" variable nil nil [1794 3095])
            ("gnutls-trustfiles" variable (:default-value (quote ("/etc/ssl/certs/ca-certificates.crt" "/etc/pki/tls/certs/ca-bundle.crt" "/etc/ssl/ca-bundle.pem" "/usr/ssl/certs/ca-bundle.crt" "/usr/local/share/certs/ca-root-nss.crt" "/etc/ssl/cert.pem"))) nil [3097 3862])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [3879 4538])
            ("open-gnutls-stream" function (:arguments ("name" "buffer" "host" "service" "nowait")) nil [4540 6485])
            ("define-error" code nil nil [6487 6530])
            ("declare-function" code nil nil [6532 6594])
            ("declare-function" code nil nil [6595 6646])
            ("gnutls-log-level" variable nil nil [6647 6672])
            ("cl-defun" code nil nil [6699 8264])
            ("cl-defun" code nil nil [8266 12866])
            ("gnutls-trustfiles" function nil nil [12868 13142])
            ("declare-function" code nil nil [13144 13201])
            ("gnutls-message-maybe" function (:arguments ("doit" "format" "params")) nil [13203 13579])
            ("gnutls" package nil nil [13581 13598]))          
      :file "gnutls.el"
      :pointmax 13624
      :fsize 13623
      :lastmodtime '(23525 29575 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("browse-url" customgroup (:user-visible-flag t) nil [5262 5431])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [5448 7347])
            ("browse-url-mailto-function" variable (:default-value (quote browse-url-mail)) nil [7349 7767])
            ("browse-url-man-function" variable (:default-value (quote browse-url-man)) nil [7769 8054])
            ("browse-url-netscape-program" variable (:default-value "netscape") nil [8056 8517])
            ("make-obsolete-variable" code nil nil [8519 8583])
            ("browse-url-netscape-arguments" variable nil nil [8585 8750])
            ("make-obsolete-variable" code nil nil [8752 8818])
            ("browse-url-netscape-startup-arguments" variable (:default-value browse-url-netscape-arguments) nil [8820 9118])
            ("make-obsolete-variable" code nil nil [9120 9194])
            ("browse-url-browser-display" variable nil nil [9196 9378])
            ("browse-url-mozilla-program" variable (:default-value "mozilla") nil [9380 9506])
            ("browse-url-mozilla-arguments" variable nil nil [9508 9671])
            ("browse-url-mozilla-startup-arguments" variable (:default-value browse-url-mozilla-arguments) nil [9673 9966])
            ("browse-url-firefox-program" variable (:default-value (let ((candidates (quote ("icecat" "iceweasel" "firefox")))) (while (and candidates (not (executable-find (car candidates)))) (setq candidates (cdr candidates))) (or (car candidates) "firefox"))) nil [9968 10307])
            ("browse-url-firefox-arguments" variable nil nil [10309 10485])
            ("browse-url-firefox-startup-arguments" variable (:default-value browse-url-firefox-arguments) nil [10487 10793])
            ("make-obsolete-variable" code nil nil [10795 10919])
            ("browse-url-chrome-program" variable (:default-value (let ((candidates (quote ("google-chrome-stable" "google-chrome")))) (while (and candidates (not (executable-find (car candidates)))) (setq candidates (cdr candidates))) (or (car candidates) "chromium"))) nil [10921 11278])
            ("browse-url-chrome-arguments" variable nil nil [11280 11466])
            ("browse-url-chromium-program" variable (:default-value (let ((candidates (quote ("chromium" "chromium-browser")))) (while (and candidates (not (executable-find (car candidates)))) (setq candidates (cdr candidates))) (or (car candidates) "chromium"))) nil [11468 11808])
            ("browse-url-chromium-arguments" variable nil nil [11810 11993])
            ("browse-url-galeon-program" variable (:default-value "galeon") nil [11995 12118])
            ("make-obsolete-variable" code nil nil [12120 12182])
            ("browse-url-galeon-arguments" variable nil nil [12184 12345])
            ("make-obsolete-variable" code nil nil [12347 12411])
            ("browse-url-galeon-startup-arguments" variable (:default-value browse-url-galeon-arguments) nil [12413 12702])
            ("make-obsolete-variable" code nil nil [12704 12776])
            ("browse-url-epiphany-program" variable (:default-value "epiphany") nil [12778 12907])
            ("browse-url-epiphany-arguments" variable nil nil [12909 13074])
            ("browse-url-epiphany-startup-arguments" variable (:default-value browse-url-epiphany-arguments) nil [13076 13373])
            ("browse-url-gnome-moz-program" variable (:default-value "gnome-moz-remote") nil [13430 13486])
            ("make-obsolete-variable" code nil nil [13488 13553])
            ("browse-url-gnome-moz-arguments" variable (:default-value (quote nil)) nil [13555 13754])
            ("make-obsolete-variable" code nil nil [13756 13823])
            ("browse-url-mozilla-new-window-is-tab" variable nil nil [13825 14105])
            ("browse-url-firefox-new-window-is-tab" variable nil nil [14107 14387])
            ("browse-url-conkeror-new-window-is-buffer" variable nil nil [14389 14698])
            ("browse-url-galeon-new-window-is-tab" variable nil nil [14700 14978])
            ("make-obsolete-variable" code nil nil [14980 15052])
            ("browse-url-epiphany-new-window-is-tab" variable nil nil [15054 15336])
            ("browse-url-netscape-new-window-is-tab" variable nil nil [15338 15620])
            ("make-obsolete-variable" code nil nil [15622 15696])
            ("browse-url-new-window-flag" variable nil nil [15698 15974])
            ("browse-url-mosaic-program" variable (:default-value "xmosaic") nil [15976 16131])
            ("make-obsolete-variable" code nil nil [16133 16195])
            ("browse-url-mosaic-arguments" variable nil nil [16197 16358])
            ("make-obsolete-variable" code nil nil [16360 16424])
            ("browse-url-mosaic-pidfile" variable (:default-value "~/.mosaicpid") nil [16426 16562])
            ("make-obsolete-variable" code nil nil [16564 16626])
            ("browse-url-conkeror-program" variable (:default-value "conkeror") nil [16628 16775])
            ("browse-url-conkeror-arguments" variable nil nil [16777 16960])
            ("browse-url-filename-alist" variable (:default-value (\` (("^/\\(ftp@\\|anonymous@\\)?\\([^:/]+\\):/*" . "ftp://\\2/") ("^/\\([^:@/]+@\\)?\\([^:/]+\\):/*" . "ftp://\\1\\2/") (\,@ (if (memq system-type (quote (windows-nt ms-dos))) (quote (("^\\([a-zA-Z]:\\)[\\/]" . "file:///\\1/") ("^[\\/][\\/]+" . "file://"))))) ("^/+" . "file:///")))) nil [16962 18419])
            ("browse-url-save-file" variable nil nil [18421 18597])
            ("browse-url-of-file-hook" variable nil nil [18599 18749])
            ("browse-url-CCI-port" variable (:default-value 3003) nil [18751 18960])
            ("make-obsolete-variable" code nil nil [18962 19018])
            ("browse-url-CCI-host" variable (:default-value "localhost") nil [19020 19271])
            ("make-obsolete-variable" code nil nil [19273 19329])
            ("browse-url-temp-file-name" variable nil nil [19331 19369])
            ("make-variable-buffer-local" code nil nil [19370 19425])
            ("browse-url-xterm-program" variable (:default-value "xterm") nil [19427 19643])
            ("browse-url-xterm-args" variable nil nil [19645 19857])
            ("browse-url-gnudoit-program" variable (:default-value "gnudoit") nil [19859 20015])
            ("browse-url-gnudoit-args" variable (:default-value (quote ("-q"))) nil [20017 20237])
            ("browse-url-generic-program" variable nil nil [20239 20417])
            ("browse-url-generic-args" variable nil nil [20419 20595])
            ("browse-url-temp-dir" variable (:default-value temporary-file-directory) nil [20597 20912])
            ("browse-url-netscape-version" variable (:default-value 3) nil [20914 21124])
            ("make-obsolete-variable" code nil nil [21126 21190])
            ("browse-url-text-browser" variable (:default-value "lynx") nil [21192 21333])
            ("browse-url-text-emacs-args" variable (:default-value (and (not window-system) (quote ("-show_cursor")))) nil [21335 21780])
            ("browse-url-text-input-field" variable (:default-value (quote avoid)) nil [21782 22521])
            ("browse-url-text-input-attempts" variable (:default-value 10) nil [22523 22707])
            ("browse-url-text-input-delay" variable (:default-value 0.2) nil [22709 22886])
            ("browse-url-kde-program" variable (:default-value "kfmclient") nil [22888 23042])
            ("browse-url-kde-args" variable (:default-value (quote ("openURL"))) nil [23044 23221])
            ("browse-url-elinks-wrapper" variable (:default-value (quote ("xterm" "-e"))) nil [23223 23397])
            ("browse-url-url-encode-chars" function (:arguments ("text" "chars")) nil [23483 23926])
            ("browse-url-encode-url" function (:arguments ("url")) nil [23928 24344])
            ("browse-url-url-at-point" function nil nil [24427 24648])
            ("browse-url-interactive-arg" function (:arguments ("prompt")) nil [24821 25673])
            ("browse-url-maybe-new-window" function (:arguments ("arg")) nil [25873 26025])
            ("browse-url-of-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [26135 26852])
            ("browse-url-file-url" function (:arguments ("file")) nil [26854 27539])
            ("browse-url-of-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [27556 28419])
            ("browse-url-delete-temp-file" function (:arguments ("temp-file-name")) nil [28421 28752])
            ("add-hook" code nil nil [28754 28811])
            ("declare-function" code nil nil [28813 28903])
            ("browse-url-of-dired-file" function (:user-visible-flag t) nil [28920 29179])
            ("browse-url-of-region" function
               (:user-visible-flag t
                :arguments ("min" "max"))
                nil [29196 29411])
            ("browse-url" function
               (:user-visible-flag t
                :arguments ("url" "args"))
                nil [29598 31871])
            ("browse-url-at-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31888 32357])
            ("browse-url-at-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32374 32807])
            ("dos-windows-version" variable nil nil [32945 32973])
            ("declare-function" code nil nil [32974 33021])
            ("browse-url-default-windows-browser" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [33043 34391])
            ("browse-url-default-macosx-browser" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [34393 34665])
            ("browse-url-process-environment" function nil nil [34688 35175])
            ("browse-url-emacs-display" function nil nil [35177 35571])
            ("browse-url-default-browser" function (:arguments ("url" "args")) nil [35573 37251])
            ("browse-url-can-use-xdg-open" function nil nil [37253 37857])
            ("browse-url-xdg-open" function
               (:user-visible-flag t
                :arguments ("url" "ignored"))
                nil [37874 38188])
            ("browse-url-netscape" function (:arguments ("url" "new-window")) nil [38205 39766])
            ("browse-url-netscape-sentinel" function (:arguments ("process" "url")) nil [39768 40276])
            ("browse-url-netscape-reload" function nil nil [40278 40667])
            ("browse-url-netscape-send" function (:arguments ("command")) nil [40669 41033])
            ("browse-url-mozilla" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [41050 42463])
            ("browse-url-mozilla-sentinel" function (:arguments ("process" "url")) nil [42465 42936])
            ("browse-url-firefox" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [42953 44153])
            ("browse-url-chromium" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [44170 44762])
            ("browse-url-chrome" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [44764 45363])
            ("browse-url-galeon" function (:arguments ("url" "new-window")) nil [45380 46871])
            ("browse-url-galeon-sentinel" function (:arguments ("process" "url")) nil [46873 47371])
            ("browse-url-epiphany" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [47373 48850])
            ("browse-url-epiphany-sentinel" function (:arguments ("process" "url")) nil [48852 49330])
            ("url-handler-regexp" variable nil nil [49332 49359])
            ("browse-url-emacs" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [49376 49999])
            ("browse-url-gnome-moz" function (:arguments ("url" "new-window")) nil [50016 50953])
            ("browse-url-mosaic" function (:arguments ("url" "new-window")) nil [50989 53071])
            ("browse-url-cci" function (:arguments ("url" "new-window")) nil [53117 54336])
            ("browse-url-conkeror" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [54373 55689])
            ("declare-function" code nil nil [55718 55784])
            ("declare-function" code nil nil [55785 55858])
            ("browse-url-w3" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [55875 56545])
            ("browse-url-w3-gnudoit" function (:arguments ("url" "_new-window")) nil [56562 57137])
            ("browse-url-text-xterm" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [57183 57840])
            ("declare-function" code nil nil [57885 57928])
            ("declare-function" code nil nil [57929 57972])
            ("declare-function" code nil nil [57973 58026])
            ("browse-url-text-emacs" function
               (:user-visible-flag t
                :arguments ("url" "new-buffer"))
                nil [58043 60751])
            ("rfc2368-parse-mailto-url" function (:prototype-flag t) nil [60772 60818])
            ("browse-url-mail" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [60835 62473])
            ("manual-program" variable nil nil [62491 62514])
            ("browse-url-man" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [62516 62847])
            ("browse-url-generic" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [62891 63557])
            ("browse-url-kde" function
               (:user-visible-flag t
                :arguments ("url" "_new-window"))
                nil [63574 63962])
            ("browse-url-elinks-new-window" function (:arguments ("url")) nil [63964 64266])
            ("browse-url-elinks" function
               (:user-visible-flag t
                :arguments ("url" "new-window"))
                nil [64283 65074])
            ("browse-url-elinks-sentinel" function (:arguments ("process" "url")) nil [65076 65786])
            ("browse-url" package nil nil [65788 65809]))          
      :file "browse-url.el"
      :pointmax 65839
      :fsize 65838
      :lastmodtime '(23525 29574 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("gnutls" include nil nil [1541 1558])
            ("format-spec" function (:prototype-flag t) nil [1560 1597])
            ("format-spec-make" function (:prototype-flag t) nil [1598 1640])
            ("tls" customgroup (:user-visible-flag t) nil [1642 1722])
            ("tls-end-of-info" variable (:default-value (concat "\\(" "^    Verify return code: .+
---
\\|" "^- Simple Client Mode:
" "\\(
\\|" "^\\*\\*\\* Starting TLS handshake
\\)*" "\\)")) nil [1724 2633])
            ("tls-program" variable (:default-value (quote ("gnutls-cli --x509cafile %t -p %p %h" "gnutls-cli --x509cafile %t -p %p %h --protocols ssl3"))) nil [2635 4010])
            ("tls-process-connection-type" variable nil nil [4012 4178])
            ("tls-success" variable (:default-value "- Handshake was completed\\|SSL handshake has read ") nil [4180 4455])
            ("tls-checktrust" variable nil nil [4457 5168])
            ("tls-untrusted" variable (:default-value "- Peer's certificate is NOT trusted\\|Verify return code: \\([^0] \\|.[^ ]\\)") nil [5170 5543])
            ("tls-hostmismatch" variable (:default-value "# The hostname in the certificate does NOT match") nil [5545 6005])
            ("tls-certtool-program" variable (:default-value "certtool") nil [6007 6166])
            ("defalias" code nil nil [6168 6331])
            ("tls-certificate-information" function (:arguments ("der")) nil [6333 7138])
            ("open-tls-stream" function (:arguments ("name" "buffer" "host" "port")) nil [7140 10834])
            ("tls" package nil nil [10836 10850]))          
      :file "tls.el"
      :pointmax 10873
      :fsize 10872
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tls" include nil nil [1521 1535])
            ("starttls" include nil nil [1536 1555])
            ("auth-source" include nil nil [1556 1578])
            ("nsm" include nil nil [1579 1593])
            ("puny" include nil nil [1594 1609])
            ("gnutls-negotiate" function (:prototype-flag t) nil [1611 1648])
            ("open-gnutls-stream" function (:prototype-flag t) nil [1649 1688])
            ("open-network-stream" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [1705 7756])
            ("network-stream-certificate" function (:arguments ("host" "service" "parameters")) nil [7758 8231])
            ("defalias" code nil nil [8248 8301])
            ("define-obsolete-function-alias" code nil nil [8302 8386])
            ("network-stream-open-plain" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [8388 8977])
            ("network-stream-open-starttls" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [8979 14602])
            ("network-stream-command" function (:arguments ("stream" "command" "eoc")) nil [14604 14846])
            ("network-stream-get-response" function (:arguments ("stream" "start" "end-of-command")) nil [14848 15325])
            ("network-stream-open-tls" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [15327 16865])
            ("network-stream-open-shell" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [16867 17589])
            ("network-stream" package nil nil [17591 17616]))          
      :file "network-stream.el"
      :pointmax 17650
      :fsize 17649
      :lastmodtime '(23525 29576 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "starttls.el"
      :fsize 11399
      :lastmodtime '(23525 29578 0 0))
    (semanticdb-table "semanticdb-table"
      :file "nsm.el"
      :fsize 17389
      :lastmodtime '(23525 29576 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("seq" include nil nil [1044 1058])
            ("puny-encode-domain" function (:arguments ("domain")) nil [1060 1460])
            ("puny-encode-string" function (:arguments ("string")) nil [1462 2001])
            ("puny-decode-domain" function (:arguments ("domain")) nil [2003 2213])
            ("puny-decode-string" function (:arguments ("string")) nil [2215 2447])
            ("puny-initial-n" variable
               (:constant-flag t
                :default-value 128)
                nil [2449 2478])
            ("puny-initial-bias" variable
               (:constant-flag t
                :default-value 72)
                nil [2479 2510])
            ("puny-base" variable
               (:constant-flag t
                :default-value 36)
                nil [2511 2534])
            ("puny-damp" variable
               (:constant-flag t
                :default-value 700)
                nil [2535 2559])
            ("puny-tmin" variable
               (:constant-flag t
                :default-value 1)
                nil [2560 2582])
            ("puny-tmax" variable
               (:constant-flag t
                :default-value 26)
                nil [2583 2606])
            ("puny-skew" variable
               (:constant-flag t
                :default-value 28)
                nil [2607 2630])
            ("puny-encode-digit" function (:arguments ("d")) nil [2658 2738])
            ("puny-adapt" function (:arguments ("delta" "num-points" "first-time")) nil [2740 3235])
            ("puny-encode-complex" function (:arguments ("insertion-points" "string")) nil [3237 4950])
            ("puny-decode-digit" function (:arguments ("cp")) nil [4952 5109])
            ("puny-decode-string-internal" function (:arguments ("string")) nil [5111 6705])
            ("puny-highly-restrictive-string-p" function (:arguments ("string")) nil [6872 9019])
            ("puny-highly-restrictive-domain-p" function (:arguments ("domain")) nil [9021 9284])
            ("puny" package nil nil [9286 9301]))          
      :file "puny.el"
      :pointmax 9325
      :fsize 9328
      :lastmodtime '(23525 29576 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1246 1259])
            ("mail-utils" include nil nil [1262 1283])
            ("parse-time-months" variable nil nil [1284 1310])
            ("pop3" customgroup (:user-visible-flag t) nil [1312 1394])
            ("pop3-maildrop" variable (:default-value (or (user-login-name) (getenv "LOGNAME") (getenv "USER"))) nil [1396 1576])
            ("pop3-mailhost" variable (:default-value (or (getenv "MAILHOST") "pop3")) nil [1578 1743])
            ("pop3-port" variable (:default-value 110) nil [1745 1847])
            ("pop3-password-required" variable (:default-value t) nil [1849 2017])
            ("pop3-password" variable nil nil [2051 2183])
            ("pop3-authentication-scheme" variable (:default-value (quote pass)) nil [2185 2491])
            ("pop3-stream-length" variable (:default-value 100) nil [2493 2772])
            ("pop3-leave-mail-on-server" variable nil nil [2774 3806])
            ("pop3-uidl-file" variable (:default-value "~/.pop3-uidl") nil [3808 3924])
            ("pop3-uidl-file-backup" variable (:default-value (quote (0 9))) nil [3926 4811])
            ("pop3-timestamp" variable nil nil [4813 4937])
            ("pop3-read-point" variable nil nil [4939 4967])
            ("pop3-debug" variable nil nil [4968 4991])
            ("if" code nil nil [5140 5799])
            ("pop3-uidl" variable nil nil [5802 5820])
            ("pop3-uidl-saved" variable nil nil [5918 5942])
            ("pop3-movemail" function (:arguments ("file")) nil [6493 7718])
            ("pop3-send-streaming-command" function (:arguments ("process" "command" "messages" "total-size")) nil [7720 8358])
            ("pop3-wait-for-messages" function (:arguments ("process" "count" "total-size" "start-point")) nil [8360 9209])
            ("pop3-write-to-file" function (:arguments ("file" "messages")) nil [9211 10308])
            ("pop3-logon" function (:arguments ("process")) nil [10310 10890])
            ("pop3-get-message-count" function nil nil [10892 11693])
            ("pop3-uidl-stat" function (:arguments ("process")) nil [11695 13285])
            ("pop3-uidl-dele" function (:arguments ("process")) nil [13287 15195])
            ("pop3-uidl-load" function nil nil [15197 15564])
            ("pop3-uidl-save" function nil nil [15566 16650])
            ("pop3-uidl-add-xheader" function (:arguments ("start" "msgno")) nil [16652 17166])
            ("pop3-stream-type" variable nil nil [17168 17641])
            ("pop3-open-server" function (:arguments ("mailhost" "port")) nil [17643 18965])
            ("pop3-send-command" function (:arguments ("process" "command")) nil [18989 19317])
            ("pop3-read-response" function (:arguments ("process" "return")) nil [19319 20120])
            ("pop3-clean-region" function (:arguments ("start" "end")) nil [20122 20501])
            ("pop3-make-date" function (:arguments ("now")) nil [20537 21089])
            ("pop3-munge-message-separator" function (:arguments ("start" "end")) nil [21091 22865])
            ("pop3-user" function (:arguments ("process" "user")) nil [22911 23185])
            ("pop3-pass" function (:arguments ("process")) nil [23187 23461])
            ("pop3-apop" function (:arguments ("process" "user")) nil [23463 23998])
            ("pop3-stat" function (:arguments ("process")) nil [24022 24342])
            ("pop3-list" function (:arguments ("process" "msg")) nil [24344 25223])
            ("pop3-retr" function (:arguments ("process" "msg" "crashbuf")) nil [25225 26333])
            ("pop3-dele" function (:arguments ("process" "msg")) nil [26335 26486])
            ("pop3-noop" function (:arguments ("process" "msg")) nil [26488 26605])
            ("pop3-last" function (:arguments ("process")) nil [26607 26850])
            ("pop3-rset" function (:arguments ("process")) nil [26852 26998])
            ("pop3-quit" function (:arguments ("process")) nil [27011 27365])
            ("pop3" package nil nil [29593 29608]))          
      :file "pop3.el"
      :pointmax 29632
      :fsize 29631
      :lastmodtime '(23525 29576 0 0)
      :unmatched-syntax '((close-paren 5799 . 5800) (symbol 5121 . 5137) (open-paren 5120 . 5121) (close-paren 1259 . 1260) (symbol 1228 . 1245) (open-paren 1227 . 1228)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("net-utils--executable-find-sbin" function (:arguments ("command")) nil [1692 1901])
            ("net-utils" customgroup (:user-visible-flag t) nil [2053 2164])
            ("traceroute-program" variable (:default-value (if (eq system-type (quote windows-nt)) "tracert" "traceroute")) nil [2166 2354])
            ("traceroute-program-options" variable nil nil [2356 2484])
            ("ping-program" variable (:default-value "ping") nil [2486 2606])
            ("ping-program-options" variable (:default-value (and (eq system-type (quote gnu/linux)) (list "-c" "4"))) nil [2720 2961])
            ("define-obsolete-variable-alias" code nil nil [2963 3038])
            ("ifconfig-program" variable (:default-value (cond ((eq system-type (quote windows-nt)) "ipconfig") ((executable-find "ifconfig") "ifconfig") ((net-utils--executable-find-sbin "ifconfig")) ((net-utils--executable-find-sbin "ip")) (t "ip"))) nil [3040 3432])
            ("define-obsolete-variable-alias" code nil nil [3434 3527])
            ("ifconfig-program-options" variable (:default-value (cond ((string-match "ipconfig\\'" ifconfig-program) (quote ("/all"))) ((string-match "ifconfig\\'" ifconfig-program) (quote ("-a"))) ((string-match "ip\\'" ifconfig-program) (quote ("addr"))))) nil [3529 3891])
            ("iwconfig-program" variable (:default-value (cond ((executable-find "iwconfig") "iwconfig") ((net-utils--executable-find-sbin "iw") "iw") (t "iw"))) nil [3893 4162])
            ("iwconfig-program-options" variable (:default-value (cond ((string-match-p "iw\\'" iwconfig-program) (list "dev")) (t nil))) nil [4164 4379])
            ("netstat-program" variable (:default-value (cond ((executable-find "netstat") "netstat") ((net-utils--executable-find-sbin "ss")) (t "ss"))) nil [4381 4619])
            ("netstat-program-options" variable (:default-value (list "-a")) nil [4621 4753])
            ("arp-program" variable (:default-value (or (net-utils--executable-find-sbin "arp") "arp")) nil [4755 4921])
            ("arp-program-options" variable (:default-value (list "-a")) nil [4923 5047])
            ("route-program" variable (:default-value (cond ((eq system-type (quote windows-nt)) "route") ((executable-find "netstat") "netstat") ((net-utils--executable-find-sbin "netstat")) ((executable-find "ip") "ip") ((net-utils--executable-find-sbin "ip")) (t "ip"))) nil [5049 5420])
            ("route-program-options" variable (:default-value (cond ((eq system-type (quote windows-nt)) (list "print")) ((string-match-p "netstat\\'" route-program) (list "-r")) (t (list "route")))) nil [5422 5702])
            ("nslookup-program" variable (:default-value "nslookup") nil [5704 5832])
            ("nslookup-program-options" variable nil nil [5834 5958])
            ("nslookup-prompt-regexp" variable (:default-value "^> ") nil [5960 6161])
            ("dig-program" variable (:default-value "dig") nil [6163 6267])
            ("dig-program-options" variable nil nil [6269 6400])
            ("ftp-program" variable (:default-value "ftp") nil [6402 6508])
            ("ftp-program-options" variable nil nil [6510 6624])
            ("ftp-prompt-regexp" variable (:default-value "^ftp>") nil [6626 6834])
            ("smbclient-program" variable (:default-value "smbclient") nil [6836 6937])
            ("smbclient-program-options" variable nil nil [6939 7065])
            ("smbclient-prompt-regexp" variable (:default-value "^smb: >") nil [7067 7289])
            ("dns-lookup-program" variable (:default-value "host") nil [7291 7417])
            ("dns-lookup-program-options" variable nil nil [7419 7547])
            ("network-connection-service" variable nil nil [7571 7610])
            ("network-connection-host" variable nil nil [7611 7650])
            ("nslookup-font-lock-keywords" variable (:default-value (list (list "^[A-Za-z0-9 _]+:" 0 (quote font-lock-type-face)) (list "\\<\\(SOA\\|NS\\|MX\\|A\\|CNAME\\)\\>" 1 (quote font-lock-keyword-face)) (list (mapconcat (quote identity) (make-list 4 "[0-9]+") "\\.") 0 (quote font-lock-variable-name-face)) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat (quote identity) (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 (quote font-lock-variable-name-face)))) nil [7795 8434])
            ("net-utils-font-lock-keywords" variable (:default-value (list (list (mapconcat (quote identity) (make-list 4 "[0-9]+") "\\.") 0 (quote font-lock-variable-name-face)) (list (concat "\\( \\([[:xdigit:]]+\\(:\\|::\\)\\)+[[:xdigit:]]+\\)" "\\|" "\\(::[[:xdigit:]]+\\)") 0 (quote font-lock-variable-name-face)) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat (quote identity) (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 (quote font-lock-variable-name-face)))) nil [8593 9227])
            ("define-derived-mode" code nil nil [9229 9515])
            ("net-utils-machine-at-point" function nil nil [9779 10071])
            ("net-utils-url-at-point" function nil nil [10073 10426])
            ("net-utils-remove-ctrl-m-filter" function (:arguments ("process" "output-string")) nil [10428 10999])
            ("declare-function" code nil nil [11001 11066])
            ("net-utils-run-program" function (:arguments ("name" "header" "program" "args")) nil [11068 11775])
            ("net-utils--revert-cmd" variable nil nil [11991 12025])
            ("net-utils-run-simple" function (:arguments ("buffer" "program-name" "args" "nodisplay")) nil [12027 13184])
            ("net-utils--revert-function" function (:arguments ("ignore-auto" "noconfirm")) nil [13186 13623])
            ("ifconfig" function (:user-visible-flag t) nil [13640 13842])
            ("defalias" code nil nil [13844 13874])
            ("iwconfig" function (:user-visible-flag t) nil [13891 14093])
            ("netstat" function (:user-visible-flag t) nil [14110 14307])
            ("arp" function (:user-visible-flag t) nil [14324 14501])
            ("route" function (:user-visible-flag t) nil [14518 14705])
            ("traceroute" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [14887 15213])
            ("ping" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [15230 15705])
            ("nslookup-host" function
               (:user-visible-flag t
                :arguments ("host" "name-server"))
                nil [15986 16791])
            ("nslookup" function (:user-visible-flag t) nil [16808 16952])
            ("comint-prompt-regexp" variable nil nil [16954 16983])
            ("comint-input-autoexpand" variable nil nil [16984 17016])
            ("comint-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17018 17056])
            ("nslookup-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote completion-at-point)) map)) nil [17058 17176])
            ("define-derived-mode" code nil nil [17232 17525])
            ("dns-lookup-host" function
               (:user-visible-flag t
                :arguments ("host" "name-server"))
                nil [17542 18381])
            ("run-dig" function
               (:user-visible-flag t
                :arguments ("host" "name-server"))
                nil [18398 19176])
            ("comint-exec" function (:prototype-flag t) nil [19178 19210])
            ("ftp" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [19282 19721])
            ("ftp-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote completion-at-point)) map)) nil [19723 19863])
            ("define-derived-mode" code nil nil [19865 20604])
            ("smbclient" function
               (:user-visible-flag t
                :arguments ("host" "service"))
                nil [20606 21285])
            ("smbclient-list-shares" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [21287 21740])
            ("define-derived-mode" code nil nil [21742 22505])
            ("network-connection-service-alist" variable (:default-value (list (cons (quote echo) 7) (cons (quote active-users) 11) (cons (quote daytime) 13) (cons (quote chargen) 19) (cons (quote ftp) 21) (cons (quote telnet) 23) (cons (quote smtp) 25) (cons (quote time) 37) (cons (quote whois) 43) (cons (quote gopher) 70) (cons (quote finger) 79) (cons (quote www) 80) (cons (quote pop2) 109) (cons (quote pop3) 110) (cons (quote sun-rpc) 111) (cons (quote nntp) 119) (cons (quote ntp) 123) (cons (quote netbios-name) 137) (cons (quote netbios-data) 139) (cons (quote irc) 194) (cons (quote https) 443) (cons (quote rlogin) 513))) nil [22732 23407])
            ("run-network-program" function (:arguments ("process-name" "host" "port" "initial-string")) nil [23430 24047])
            ("finger-X.500-host-regexps" variable nil nil [24192 24545])
            ("finger" function
               (:user-visible-flag t
                :arguments ("user" "host"))
                nil [24581 25765])
            ("whois-server-name" variable (:default-value "rs.internic.net") nil [25767 25896])
            ("whois-server-list" variable (:default-value (quote (("whois.arin.net") ("rs.internic.net") ("whois.publicinterestregistry.net") ("whois.abuse.net") ("whois.apnic.net") ("nic.ddn.mil") ("whois.nic.mil") ("whois.nic.gov") ("whois.ripe.net")))) nil [25898 26326])
            ("whois-server-tld" variable (:default-value (quote (("rs.internic.net" . "com") ("whois.publicinterestregistry.net" . "org") ("whois.ripe.net" . "be") ("whois.ripe.net" . "de") ("whois.ripe.net" . "dk") ("whois.ripe.net" . "it") ("whois.ripe.net" . "fi") ("whois.ripe.net" . "fr") ("whois.ripe.net" . "uk") ("whois.apnic.net" . "au") ("whois.apnic.net" . "ch") ("whois.apnic.net" . "hk") ("whois.apnic.net" . "jp") ("whois.nic.gov" . "gov") ("whois.nic.mil" . "mil")))) nil [26503 27119])
            ("whois-guess-server" variable (:default-value t) nil [27121 27387])
            ("whois-get-tld" function (:arguments ("host")) nil [27389 27705])
            ("whois" function
               (:user-visible-flag t
                :arguments ("arg" "search-string"))
                nil [27740 28562])
            ("whois-reverse-lookup-server" variable (:default-value "whois.arin.net") nil [28564 28704])
            ("whois-reverse-lookup" function nil nil [28721 28858])
            ("define-derived-mode" code nil nil [29068 29216])
            ("network-connection-mode-setup" function (:arguments ("host" "service")) nil [29218 29453])
            ("network-connection-to-service" function
               (:user-visible-flag t
                :arguments ("host" "service"))
                nil [29470 29995])
            ("network-connection" function
               (:user-visible-flag t
                :arguments ("host" "port"))
                nil [30012 30192])
            ("network-service-connection" function (:arguments ("host" "service")) nil [30194 30773])
            ("comint-input-ring" variable nil nil [30775 30801])
            ("network-connection-reconnect" function (:user-visible-flag t) nil [30803 31571])
            ("net-utils" package nil nil [31573 31593]))          
      :file "net-utils.el"
      :pointmax 31622
      :fsize 31621
      :lastmodtime '(23525 29576 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1228 1244])
            ("tramp-adb-program" variable (:default-value "adb") nil [1267 1416])
            ("tramp-adb-connect-if-not-connected" variable nil nil [1439 1665])
            ("tramp-adb-method" variable
               (:constant-flag t
                :default-value "adb")
                nil [1688 1799])
            ("tramp-adb-prompt" variable (:default-value "^\\(?:[[:digit:]]*|?\\)?\\(?:[[:alnum:];[]*@?[[:alnum:]]*[^#\\$]*\\)?[#\\$][[:space:]]") nil [1822 2056])
            ("tramp-adb-ls-date-regexp" variable
               (:constant-flag t
                :default-value "[[:space:]][0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9][[:space:]][0-9][0-9]:[0-9][0-9][[:space:]]")
                nil [2058 2227])
            ("tramp-adb-ls-toolbox-regexp" variable
               (:constant-flag t
                :default-value (concat "^[[:space:]]*\\([-[:alpha:]]+\\)" "\\(?:[[:space:]]+[[:digit:]]+\\)?" "[[:space:]]*\\([^[:space:]]+\\)" "[[:space:]]+\\([^[:space:]]+\\)" "[[:space:]]+\\([[:digit:]]+\\)" "[[:space:]]+\\([-[:digit:]]+[[:space:]][:[:digit:]]+\\)" "[[:space:]]\\(.*\\)$"))
                nil [2229 2683])
            ("add-to-list" code nil nil [2706 2843])
            ("add-to-list" code nil nil [2866 2933])
            ("eval-after-load" code nil nil [2956 3073])
            ("tramp-adb-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((access-file . ignore) (add-name-to-file . tramp-handle-add-name-to-file) (copy-file . tramp-adb-handle-copy-file) (delete-directory . tramp-adb-handle-delete-directory) (delete-file . tramp-adb-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-adb-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (expand-file-name . tramp-adb-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . ignore) (file-attributes . tramp-adb-handle-file-attributes) (file-directory-p . tramp-adb-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-handle-file-exists-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-adb-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-adb-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-handle-file-exists-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-adb-handle-file-system-info) (file-truename . tramp-adb-handle-file-truename) (file-writable-p . tramp-adb-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-adb-handle-make-directory) (make-directory-internal . ignore) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-handle-make-symbolic-link) (process-file . tramp-adb-handle-process-file) (rename-file . tramp-adb-handle-rename-file) (set-file-acl . ignore) (set-file-modes . tramp-adb-handle-set-file-modes) (set-file-selinux-context . ignore) (set-file-times . tramp-adb-handle-set-file-times) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . tramp-adb-handle-shell-command) (start-file-process . tramp-adb-handle-start-file-process) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-adb-handle-write-region))))
                nil [3096 7156])
            ("tramp-adb-file-name-p" function (:arguments ("filename")) nil [7315 7503])
            ("tramp-adb-file-name-handler" function (:arguments ("operation" "args")) nil [7526 7887])
            ("tramp-register-foreign-file-name-handler" code nil nil [7910 8005])
            ("tramp-adb-parse-device-names" function (:arguments ("_ignore")) nil [8028 9132])
            ("tramp-adb-handle-expand-file-name" function (:arguments ("name" "dir")) nil [9134 10258])
            ("tramp-adb-handle-file-directory-p" function (:arguments ("filename")) nil [10260 10457])
            ("tramp-adb-handle-file-system-info" function (:arguments ("filename")) nil [10459 11502])
            ("tramp-adb-handle-file-truename" function (:arguments ("filename")) nil [11597 14676])
            ("tramp-adb-handle-file-attributes" function (:arguments ("filename" "id-format")) nil [14678 15287])
            ("tramp-do-parse-file-attributes-with-ls" function (:arguments ("vec" "id-format")) nil [15289 16466])
            ("tramp-adb-handle-directory-files-and-attributes" function (:arguments ("directory" "full" "match" "nosort" "id-format")) nil [16468 18139])
            ("tramp-adb-get-ls-command" function (:arguments ("vec")) nil [18141 18806])
            ("tramp-adb--gnu-switches-to-ash" function (:arguments ("switches")) nil [18808 19320])
            ("tramp-adb-sh-fix-ls-output" function (:arguments ("sort-by-time")) nil [19322 20297])
            ("tramp-adb-ls-output-time-less-p" function (:arguments ("a" "b")) nil [20299 20692])
            ("tramp-adb-ls-output-name-less-p" function (:arguments ("a" "b")) nil [20694 21040])
            ("tramp-adb-handle-make-directory" function (:arguments ("dir" "parents")) nil [21042 21694])
            ("tramp-adb-handle-delete-directory" function (:arguments ("directory" "recursive" "_trash")) nil [21696 22386])
            ("tramp-adb-handle-delete-file" function (:arguments ("filename" "_trash")) nil [22388 22824])
            ("tramp-adb-handle-file-name-all-completions" function (:arguments ("filename" "directory")) nil [22826 23821])
            ("tramp-adb-handle-file-local-copy" function (:arguments ("filename")) nil [23823 24726])
            ("tramp-adb-handle-file-writable-p" function (:arguments ("filename")) nil [24728 25614])
            ("tramp-adb-handle-write-region" function (:arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew")) nil [25616 27246])
            ("tramp-adb-handle-set-file-modes" function (:arguments ("filename" "mode")) nil [27248 27580])
            ("tramp-adb-handle-set-file-times" function (:arguments ("filename" "time")) nil [27582 28168])
            ("tramp-adb-handle-copy-file" function (:arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "_preserve-uid-gid" "_preserve-extended-attributes")) nil [28170 30807])
            ("tramp-adb-handle-rename-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [30809 32355])
            ("tramp-adb-handle-process-file" function (:arguments ("program" "infile" "destination" "display" "args")) nil [32357 36113])
            ("tramp-adb-handle-shell-command" function (:arguments ("command" "output-buffer" "error-buffer")) nil [36115 38698])
            ("tramp-adb-handle-start-file-process" function (:arguments ("name" "buffer" "program" "args")) nil [38863 41670])
            ("tramp-adb-get-device" function (:arguments ("vec")) nil [41672 43431])
            ("tramp-adb-execute-adb-command" function (:arguments ("vec" "args")) nil [43433 43984])
            ("tramp-adb-find-test-command" function (:arguments ("vec")) nil [43986 44221])
            ("tramp-adb-send-command" function (:arguments ("vec" "command")) nil [44248 45055])
            ("tramp-adb-send-command-and-check" function (:arguments ("vec" "command")) nil [45057 45855])
            ("tramp-adb-barf-unless-okay" function (:arguments ("vec" "command" "fmt" "args")) nil [45857 46137])
            ("tramp-adb-wait-for-output" function (:arguments ("proc" "timeout")) nil [46139 47505])
            ("tramp-adb-maybe-open-connection" function (:arguments ("vec")) nil [47507 51630])
            ("add-hook" code nil nil [51632 51716])
            ("tramp-adb" package nil nil [51718 51738]))          
      :file "tramp-adb.el"
      :pointmax 51767
      :fsize 51768
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp-compat" include nil nil [2135 2158])
            ("cl-lib" include nil nil [2185 2202])
            ("auto-save-file-name-transforms" variable nil nil [2203 2242])
            ("eshell-path-env" variable nil nil [2243 2267])
            ("ls-lisp-use-insert-directory-program" variable nil nil [2268 2313])
            ("outline-regexp" variable nil nil [2314 2337])
            ("tramp" customgroup (:user-visible-flag t) nil [2382 2548])
            ("tramp-mode" variable (:default-value t) nil [2629 2797])
            ("tramp-verbose" variable (:default-value 3) nil [2799 3236])
            ("tramp-backup-directory-alist" variable nil nil [3238 3908])
            ("tramp-auto-save-directory" variable nil nil [3910 4267])
            ("tramp-encoding-shell" variable (:default-value (or (tramp-compat-funcall (quote w32-shell-name)) "/bin/sh")) nil [4269 5238])
            ("tramp-encoding-command-switch" variable (:default-value (if (tramp-compat-funcall (quote w32-shell-dos-semantics)) "/c" "-c")) nil [5240 5535])
            ("tramp-encoding-command-interactive" variable (:default-value (unless (tramp-compat-funcall (quote w32-shell-dos-semantics)) "-i")) nil [5537 5879])
            ("tramp-methods" variable nil nil [5902 12041])
            ("tramp-default-method" variable (:default-value (cond ((and (eq system-type (quote windows-nt)) (executable-find "pscp")) "pscp") ((executable-find "scp") "scp") (t "ftp"))) nil [12043 13150])
            ("tramp-default-method-alist" variable nil nil [13173 13972])
            ("tramp-default-method-marker" variable
               (:constant-flag t
                :default-value "-")
                nil [13974 14068])
            ("tramp-default-user" variable nil nil [14070 14436])
            ("tramp-default-user-alist" variable nil nil [14459 15201])
            ("tramp-default-host" variable (:default-value (system-name)) nil [15203 15384])
            ("tramp-default-host-alist" variable nil nil [15407 16167])
            ("tramp-default-proxies-alist" variable nil nil [16169 17116])
            ("tramp-save-ad-hoc-proxies" variable nil nil [17118 17277])
            ("tramp-restricted-shell-hosts-alist" variable (:default-value (when (memq system-type (quote (windows-nt))) (list (concat "\\`" (regexp-quote (system-name)) "\\'")))) nil [17279 17834])
            ("tramp-local-host-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`" (regexp-opt (list "localhost" "localhost6" (system-name) "127.0.0.1" "::1") t) "\\'"))
                nil [17857 18055])
            ("tramp-completion-function-alist" variable nil nil [18057 19137])
            ("tramp-echo-mark-marker" variable
               (:constant-flag t
                :default-value "_echo")
                nil [19139 19227])
            ("tramp-echo-mark-marker-length" variable
               (:constant-flag t
                :default-value (length tramp-echo-mark-marker))
                nil [19229 19348])
            ("tramp-echo-mark" variable
               (:constant-flag t
                :default-value (concat tramp-echo-mark-marker (make-string tramp-echo-mark-marker-length 8)))
                nil [19350 19901])
            ("tramp-echoed-echo-mark-regexp" variable
               (:constant-flag t
                :default-value (format "%s\\(\\( \\)?\\)\\{%d\\}" tramp-echo-mark-marker tramp-echo-mark-marker-length))
                nil [19903 20123])
            ("tramp-local-end-of-line" variable (:default-value (if (memq system-type (quote (windows-nt))) "
" "
")) nil [20125 20332])
            ("tramp-rsh-end-of-line" variable (:default-value "
") nil [20334 20574])
            ("tramp-login-prompt-regexp" variable (:default-value ".*\\(user\\|login\\)\\( .*\\)?: *") nil [20576 20845])
            ("tramp-shell-prompt-pattern" variable (:default-value (concat "\\(?:^\\|\\)" "[^]#$%>
]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) nil [20847 21908])
            ("tramp-password-prompt-regexp" variable (:default-value (format "^.*\\(%s\\).*: ? *" (regexp-opt (or (bound-and-true-p password-word-equivalents) (quote ("password" "passphrase")))))) nil [21910 22406])
            ("tramp-wrong-passwd-regexp" variable (:default-value (concat "^.*" (regexp-opt (quote ("Permission denied" "Login incorrect" "Login Incorrect" "Connection refused" "Connection closed" "Timeout, server not responding." "Sorry, try again." "Name or service not known" "Host key verification failed." "No supported authentication methods left to try!")) t) ".*" "\\|" "^.*\\(" "Received signal [0-9]+" "\\).*")) nil [22408 23086])
            ("tramp-yesno-prompt-regexp" variable (:default-value (concat (regexp-opt (quote ("Are you sure you want to continue connecting (yes/no)?")) t) "\\s-*")) nil [23088 23479])
            ("tramp-yn-prompt-regexp" variable (:default-value (concat (regexp-opt (quote ("Store key in cache? (y/n)" "Update cached key? (y/n, Return cancels connection)")) t) "\\s-*")) nil [23481 23909])
            ("tramp-terminal-prompt-regexp" variable (:default-value (concat "\\(" "TERM = (.*)" "\\|" "Terminal type\\? \\[.*\\]" "\\)\\s-*")) nil [23911 24260])
            ("tramp-operation-not-permitted-regexp" variable (:default-value (concat "\\(" "preserving times.*" "\\|" "set mode" "\\)" ":\\s-*" (regexp-opt (quote ("Operation not permitted")) t))) nil [24262 24637])
            ("tramp-copy-failed-regexp" variable (:default-value (concat "\\(.+: " (regexp-opt (quote ("Permission denied" "not a regular file" "is a directory" "No such file or directory")) t) "\\)\\s-*")) nil [24639 25042])
            ("tramp-process-alive-regexp" variable nil nil [25044 25420])
            ("tramp-temp-name-prefix" variable
               (:constant-flag t
                :default-value "tramp.")
                nil [25422 25786])
            ("tramp-temp-buffer-name" variable
               (:constant-flag t
                :default-value " *tramp temp*")
                nil [25788 25942])
            ("tramp-temp-buffer-file-name" variable nil nil [25944 26071])
            ("make-variable-buffer-local" code nil nil [26072 26129])
            ("put" code nil nil [26130 26183])
            ("tramp-syntax" variable (:default-value (quote default)) nil [26206 26824])
            ("tramp-set-syntax" function (:arguments ("symbol" "value")) nil [26826 28389])
            ("eval-after-load" code nil nil [28658 28746])
            ("tramp-syntax-values" function nil nil [28748 28960])
            ("tramp-lookup-syntax" function (:arguments ("alist")) nil [28962 29228])
            ("tramp-prefix-format-alist" variable
               (:constant-flag t
                :default-value (quote ((default . "/") (simplified . "/") (separate . "/["))))
                nil [29230 29407])
            ("tramp-build-prefix-format" function nil nil [29409 29495])
            ("tramp-prefix-format" variable (:default-value (tramp-build-prefix-format)) nil [29497 29651])
            ("tramp-build-prefix-regexp" function nil nil [29653 29739])
            ("tramp-prefix-regexp" variable (:default-value (tramp-build-prefix-regexp)) nil [29741 29925])
            ("tramp-method-regexp-alist" variable
               (:constant-flag t
                :default-value (quote ((default . "[a-zA-Z0-9-]+") (simplified . "") (separate . "[a-zA-Z0-9-]*"))))
                nil [29927 30128])
            ("tramp-build-method-regexp" function nil nil [30130 30216])
            ("tramp-method-regexp" variable (:default-value (tramp-build-method-regexp)) nil [30218 30358])
            ("tramp-postfix-method-format-alist" variable
               (:constant-flag t
                :default-value (quote ((default . ":") (simplified . "") (separate . "/"))))
                nil [30360 30539])
            ("tramp-build-postfix-method-format" function nil nil [30541 30643])
            ("tramp-postfix-method-format" variable (:default-value (tramp-build-postfix-method-format)) nil [30645 30867])
            ("tramp-build-postfix-method-regexp" function nil nil [30869 30958])
            ("tramp-postfix-method-regexp" variable (:default-value (tramp-build-postfix-method-regexp)) nil [30960 31145])
            ("tramp-user-regexp" variable
               (:constant-flag t
                :default-value "[^/|: 	]+")
                nil [31147 31220])
            ("tramp-prefix-domain-format" variable
               (:constant-flag t
                :default-value "%")
                nil [31243 31345])
            ("tramp-prefix-domain-regexp" variable
               (:constant-flag t
                :default-value (regexp-quote tramp-prefix-domain-format))
                nil [31368 31551])
            ("tramp-domain-regexp" variable
               (:constant-flag t
                :default-value "[a-zA-Z0-9_.-]+")
                nil [31553 31635])
            ("tramp-user-with-domain-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(" tramp-user-regexp "\\)" tramp-prefix-domain-regexp "\\(" tramp-domain-regexp "\\)"))
                nil [31637 31839])
            ("tramp-postfix-user-format" variable
               (:constant-flag t
                :default-value "@")
                nil [31841 31978])
            ("tramp-postfix-user-regexp" variable
               (:constant-flag t
                :default-value (regexp-quote tramp-postfix-user-format))
                nil [31980 32158])
            ("tramp-host-regexp" variable
               (:constant-flag t
                :default-value "[a-zA-Z0-9_.%-]+")
                nil [32160 32239])
            ("tramp-prefix-ipv6-format-alist" variable
               (:constant-flag t
                :default-value (quote ((default . "[") (simplified . "[") (separate . ""))))
                nil [32241 32419])
            ("tramp-build-prefix-ipv6-format" function nil nil [32421 32517])
            ("tramp-prefix-ipv6-format" variable (:default-value (tramp-build-prefix-ipv6-format)) nil [32519 32677])
            ("tramp-build-prefix-ipv6-regexp" function nil nil [32679 32762])
            ("tramp-prefix-ipv6-regexp" variable (:default-value (tramp-build-prefix-ipv6-regexp)) nil [32764 32925])
            ("tramp-ipv6-regexp" variable
               (:constant-flag t
                :default-value "\\(?:\\(?:[a-zA-Z0-9]+\\)?:\\)+[a-zA-Z0-9.]+")
                nil [33082 33193])
            ("tramp-postfix-ipv6-format-alist" variable
               (:constant-flag t
                :default-value (quote ((default . "]") (simplified . "]") (separate . ""))))
                nil [33195 33367])
            ("tramp-build-postfix-ipv6-format" function nil nil [33369 33467])
            ("tramp-postfix-ipv6-format" variable (:default-value (tramp-build-postfix-ipv6-format)) nil [33469 33630])
            ("tramp-build-postfix-ipv6-regexp" function nil nil [33632 33717])
            ("tramp-postfix-ipv6-regexp" variable (:default-value (tramp-build-postfix-ipv6-regexp)) nil [33719 33884])
            ("tramp-prefix-port-format" variable
               (:constant-flag t
                :default-value "#")
                nil [33886 33992])
            ("tramp-prefix-port-regexp" variable
               (:constant-flag t
                :default-value (regexp-quote tramp-prefix-port-format))
                nil [33994 34177])
            ("tramp-port-regexp" variable
               (:constant-flag t
                :default-value "[0-9]+")
                nil [34179 34250])
            ("tramp-host-with-port-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(" tramp-host-regexp "\\)" tramp-prefix-port-regexp "\\(" tramp-port-regexp "\\)"))
                nil [34252 34448])
            ("tramp-postfix-hop-format" variable
               (:constant-flag t
                :default-value "|")
                nil [34450 34549])
            ("tramp-postfix-hop-regexp" variable
               (:constant-flag t
                :default-value (regexp-quote tramp-postfix-hop-format))
                nil [34551 34727])
            ("tramp-postfix-host-format-alist" variable
               (:constant-flag t
                :default-value (quote ((default . ":") (simplified . ":") (separate . "]"))))
                nil [34729 34913])
            ("tramp-build-postfix-host-format" function nil nil [34915 35013])
            ("tramp-postfix-host-format" variable (:default-value (tramp-build-postfix-host-format)) nil [35015 35186])
            ("tramp-build-postfix-host-regexp" function nil nil [35188 35273])
            ("tramp-postfix-host-regexp" variable (:default-value (tramp-build-postfix-host-regexp)) nil [35275 35450])
            ("tramp-localname-regexp" variable
               (:constant-flag t
                :default-value ".*$")
                nil [35452 35523])
            ("tramp-unknown-id-string" variable
               (:constant-flag t
                :default-value "UNKNOWN")
                nil [35525 35620])
            ("tramp-unknown-id-integer" variable
               (:constant-flag t
                :default-value -1)
                nil [35622 35712])
            ("tramp-build-remote-file-name-spec-regexp" function nil nil [35737 36308])
            ("tramp-remote-file-name-spec-regexp" variable (:default-value (tramp-build-remote-file-name-spec-regexp)) nil [36310 36476])
            ("tramp-build-file-name-structure" function nil nil [36478 36947])
            ("tramp-file-name-structure" variable (:default-value (tramp-build-file-name-structure)) nil [36949 37843])
            ("tramp-build-file-name-regexp" function nil nil [37845 37918])
            ("tramp-initial-file-name-regexp" variable
               (:constant-flag t
                :default-value "\\`/.+:.*:")
                nil [37935 38093])
            ("tramp-file-name-regexp" variable (:default-value tramp-initial-file-name-regexp) nil [38110 38427])
            ("tramp-completion-file-name-regexp-default" variable
               (:constant-flag t
                :default-value (concat "\\`/\\(" "\\([^/|:]+:[^/|:]*|\\)*" (if (memq system-type (quote (cygwin windows-nt))) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") "\\(:[^/|:]*\\)?" "\\)?\\'"))
                nil [38429 39042])
            ("tramp-completion-file-name-regexp-simplified" variable
               (:constant-flag t
                :default-value (concat "\\`/\\(" "\\([^/|:]*|\\)*" (if (memq system-type (quote (cygwin windows-nt))) "[^/|:]\\{2,\\}" "[^/|:]+") "\\)?\\'"))
                nil [39044 39541])
            ("tramp-completion-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\(\\[[^]]*\\)?\\'")
                nil [39543 39751])
            ("tramp-completion-file-name-regexp-alist" variable
               (:constant-flag t
                :default-value (\` ((default \, tramp-completion-file-name-regexp-default) (simplified \, tramp-completion-file-name-regexp-simplified) (separate \, tramp-completion-file-name-regexp-separate))))
                nil [39753 40041])
            ("tramp-build-completion-file-name-regexp" function nil nil [40043 40157])
            ("tramp-completion-file-name-regexp" variable (:default-value (tramp-build-completion-file-name-regexp)) nil [40159 40670])
            ("tramp-autoload-file-name-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`/" (if (memq system-type (quote (cygwin windows-nt))) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") ":"))
                nil [40687 41185])
            ("tramp-chunksize" variable (:default-value (when (memq system-type (quote (hpux))) 500)) nil [41541 44413])
            ("tramp-process-connection-type" variable (:default-value t) nil [44664 44969])
            ("tramp-connection-timeout" variable (:default-value 60) nil [44971 45290])
            ("tramp-connection-min-time-diff" variable (:default-value 5) nil [45292 45883])
            ("tramp-completion-reread-directory-timeout" variable (:default-value 10) nil [45885 46547])
            ("tramp-current-method" variable nil nil [46574 46654])
            ("tramp-current-user" variable nil nil [46656 46734])
            ("tramp-current-domain" variable nil nil [46736 46817])
            ("tramp-current-host" variable nil nil [46819 46891])
            ("tramp-current-port" variable nil nil [46893 46965])
            ("tramp-current-connection" variable nil nil [46967 47035])
            ("tramp-completion-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((file-name-all-completions . tramp-completion-handle-file-name-all-completions) (file-name-completion . tramp-completion-handle-file-name-completion))))
                nil [47037 47478])
            ("tramp-foreign-file-name-handler-alist" variable nil nil [47574 47800])
            ("cl-defstruct" code nil nil [48112 48209])
            ("tramp-file-name-user-domain" function (:arguments ("vec")) nil [48211 48512])
            ("tramp-file-name-host-port" function (:arguments ("vec")) nil [48514 48803])
            ("tramp-file-name-port-or-default" function (:arguments ("vec")) nil [48805 49014])
            ("tramp-file-name-equal-p" function (:arguments ("vec1" "vec2")) nil [49016 49468])
            ("tramp-get-method-parameter" function (:arguments ("vec" "param")) nil [49470 50128])
            ("tramp-file-name-unquote-localname" function (:arguments ("vec")) nil [50187 50349])
            ("tramp-tramp-file-p" function (:arguments ("name")) nil [50372 50749])
            ("tramp-find-method" function (:arguments ("method" "user" "host")) nil [50751 51577])
            ("tramp-find-user" function (:arguments ("method" "user" "host")) nil [51579 52252])
            ("tramp-find-host" function (:arguments ("method" "user" "host")) nil [52254 52761])
            ("tramp-dissect-file-name" function (:arguments ("name" "nodefault")) nil [52763 54487])
            ("tramp-buffer-name" function (:arguments ("vec")) nil [54489 54854])
            ("tramp-make-tramp-file-name" function (:arguments ("method" "user" "domain" "host" "port" "localname" "hop")) nil [54856 55703])
            ("tramp-completion-make-tramp-file-name" function (:arguments ("method" "user" "host" "localname")) nil [55705 56513])
            ("tramp-get-buffer" function (:arguments ("vec")) nil [56515 57240])
            ("tramp-get-connection-buffer" function (:arguments ("vec")) nil [57242 57529])
            ("tramp-get-connection-name" function (:arguments ("vec")) nil [57531 57810])
            ("tramp-get-connection-process" function (:arguments ("vec")) nil [57812 58083])
            ("tramp-set-connection-local-variables" function (:arguments ("vec")) nil [58085 58693])
            ("tramp-set-connection-local-variables-for-buffer" function nil nil [58695 59307])
            ("tramp-debug-buffer-name" function (:arguments ("vec")) nil [59309 59691])
            ("tramp-debug-outline-regexp" variable
               (:constant-flag t
                :default-value "[0-9]+:[0-9]+:[0-9]+\\.[0-9]+ [a-z0-9-]+ (\\([0-9]+\\)) #")
                nil [59693 59857])
            ("tramp-debug-outline-level" function nil nil [59859 60122])
            ("tramp-get-debug-buffer" function (:arguments ("vec")) nil [60124 61075])
            ("tramp-debug-message" function (:arguments ("vec" "fmt-string" "arguments")) nil [61077 63069])
            ("tramp-message-show-message" variable (:default-value t) nil [63071 63273])
            ("tramp-message" function (:arguments ("vec-or-proc" "level" "fmt-string" "arguments")) nil [63275 64992])
            ("tramp-backtrace" function (:arguments ("vec-or-proc")) nil [64994 65381])
            ("tramp-error" function (:arguments ("vec-or-proc" "signal" "fmt-string" "arguments")) nil [65383 66240])
            ("tramp-error-with-buffer" function (:arguments ("buf" "vec-or-proc" "signal" "fmt-string" "arguments")) nil [66242 67676])
            ("tramp-with-demoted-errors" function (:arguments ("vec-or-proc" "format" "body")) nil [67678 68197])
            ("with-parsed-tramp-file-name" function (:arguments ("filename" "var" "body")) nil [68199 69658])
            ("put" code nil nil [69660 69718])
            ("put" code nil nil [69719 69792])
            ("font-lock-add-keywords" code nil nil [69793 69873])
            ("tramp-progress-reporter-update" function (:arguments ("reporter" "value")) nil [69875 70166])
            ("with-tramp-progress-reporter" function (:arguments ("vec" "level" "message" "body")) nil [70168 71176])
            ("font-lock-add-keywords" code nil nil [71178 71260])
            ("with-tramp-file-property" function (:arguments ("vec" "file" "property" "body")) nil [71262 71837])
            ("put" code nil nil [71839 71894])
            ("put" code nil nil [71895 71946])
            ("font-lock-add-keywords" code nil nil [71947 72024])
            ("with-tramp-connection-property" function (:arguments ("key" "property" "body")) nil [72026 72509])
            ("put" code nil nil [72511 72572])
            ("put" code nil nil [72573 72630])
            ("font-lock-add-keywords" code nil nil [72631 72715])
            ("tramp-drop-volume-letter" function (:arguments ("name")) nil [72717 73345])
            ("tramp-set-completion-function" function (:arguments ("method" "function-list")) nil [73404 74920])
            ("tramp-get-completion-function" function (:arguments ("method")) nil [74922 75382])
            ("tramp-rfn-eshadow-overlay" variable nil nil [75425 75459])
            ("make-variable-buffer-local" code nil nil [75460 75515])
            ("tramp-rfn-eshadow-setup-minibuffer" function nil nil [75517 76254])
            ("add-hook" code nil nil [76256 76340])
            ("add-hook" code nil nil [76341 76479])
            ("tramp-rfn-eshadow-update-overlay-regexp" function nil nil [76481 76590])
            ("tramp-rfn-eshadow-update-overlay" function nil nil [76592 77675])
            ("add-hook" code nil nil [77677 77757])
            ("add-hook" code nil nil [77758 77892])
            ("tramp-inodes" variable nil nil [78175 78232])
            ("tramp-devices" variable nil nil [78604 78662])
            ("tramp-default-file-modes" function (:arguments ("filename")) nil [78664 78969])
            ("tramp-replace-environment-variables" function (:arguments ("filename")) nil [78971 79669])
            ("tramp-find-file-name-coding-system-alist" function (:arguments ("filename" "tmpname")) nil [79671 80391])
            ("tramp-run-real-handler" function (:arguments ("operation" "args")) nil [80393 80969])
            ("tramp-file-name-for-operation" function (:arguments ("operation" "args")) nil [81410 84425])
            ("tramp-find-foreign-file-name-handler" function (:arguments ("filename" "_operation")) nil [84427 84823])
            ("tramp-debug-on-error" variable nil nil [84825 84909])
            ("tramp-condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [84911 85164])
            ("tramp-locked" variable nil nil [86219 86393])
            ("tramp-locker" variable nil nil [86395 86571])
            ("tramp-file-name-handler" function (:arguments ("operation" "args")) nil [86591 90420])
            ("tramp-completion-file-name-handler" function (:arguments ("operation" "args")) nil [90422 90801])
            ("progn" code nil nil [90818 91122])
            ("progn" code nil nil [91332 91657])
            ("tramp-use-absolute-autoload-file-names" function nil nil [91720 92524])
            ("eval-after-load" code nil nil [92526 92591])
            ("tramp-register-file-name-handlers" function nil nil [92593 94073])
            ("eval-after-load" code nil nil [94075 94135])
            ("progn" code nil nil [94158 94857])
            ("tramp-exists-file-name-handler" function (:arguments ("operation" "args")) nil [94859 95602])
            ("progn" code nil nil [95619 95979])
            ("add-hook" code nil nil [95981 96043])
            ("tramp-completion-mode" variable nil nil [96114 96228])
            ("make-obsolete-variable" code nil nil [96229 96298])
            ("tramp-completion-mode-p" function nil nil [96300 96534])
            ("tramp-connectable-p" function (:arguments ("filename")) nil [96536 96959])
            ("tramp-completion-handle-file-name-all-completions" function (:arguments ("filename" "directory")) nil [97151 99183])
            ("tramp-completion-handle-file-name-completion" function (:arguments ("filename" "directory" "predicate")) nil [99243 99651])
            ("tramp-completion-dissect-file-name" function (:arguments ("name")) nil [100334 102756])
            ("tramp-completion-dissect-file-name1" function (:arguments ("structure" "name")) nil [102758 103327])
            ("tramp-get-completion-methods" function (:arguments ("partial-method")) nil [103428 103747])
            ("tramp-get-completion-user-host" function (:arguments ("method" "partial-user" "partial-host" "user" "host")) nil [103816 104735])
            ("tramp-parse-default-user-host" function (:arguments ("method")) nil [104737 105061])
            ("tramp-parse-group" function (:arguments ("regexp" "match-level" "skip-regexp")) nil [105084 105436])
            ("tramp-parse-file" function (:arguments ("filename" "function")) nil [105459 105928])
            ("tramp-parse-rhosts" function (:arguments ("filename")) nil [105951 106135])
            ("tramp-parse-rhosts-group" function nil nil [106137 106547])
            ("tramp-parse-shosts" function (:arguments ("filename")) nil [106570 106742])
            ("tramp-parse-shosts-group" function nil nil [106744 106919])
            ("tramp-parse-sconfig" function (:arguments ("filename")) nil [106942 107116])
            ("tramp-parse-sconfig-group" function nil nil [107118 107317])
            ("tramp-parse-shostkeys-sknownhosts" function (:arguments ("dirname" "regexp")) nil [107340 107860])
            ("tramp-parse-shostkeys" function (:arguments ("dirname")) nil [107883 108108])
            ("tramp-parse-sknownhosts" function (:arguments ("dirname")) nil [108131 108372])
            ("tramp-parse-hosts" function (:arguments ("filename")) nil [108395 108565])
            ("tramp-parse-hosts-group" function nil nil [108567 108771])
            ("tramp-parse-passwd" function (:arguments ("filename")) nil [108794 109269])
            ("tramp-parse-passwd-group" function nil nil [109271 109606])
            ("tramp-parse-etc-group" function (:arguments ("filename")) nil [109629 110109])
            ("tramp-parse-etc-group-group" function nil nil [110111 110488])
            ("tramp-parse-netrc" function (:arguments ("filename")) nil [110511 110678])
            ("tramp-parse-netrc-group" function nil nil [110680 111098])
            ("tramp-parse-putty" function (:arguments ("registry-or-dirname")) nil [111121 111702])
            ("tramp-parse-putty-group" function (:arguments ("registry")) nil [111704 112035])
            ("tramp-handle-file-local-copy-hook" variable nil nil [112101 112221])
            ("tramp-handle-write-region-hook" variable nil nil [112223 112337])
            ("tramp-handle-add-name-to-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [112339 113365])
            ("tramp-handle-directory-file-name" function (:arguments ("directory")) nil [113367 113882])
            ("tramp-handle-directory-files" function (:arguments ("directory" "full" "match" "nosort")) nil [113884 114427])
            ("tramp-handle-directory-files-and-attributes" function (:arguments ("directory" "full" "match" "nosort" "id-format")) nil [114429 114759])
            ("tramp-handle-dired-uncache" function (:arguments ("dir")) nil [114761 114992])
            ("tramp-handle-file-accessible-directory-p" function (:arguments ("filename")) nil [114994 115179])
            ("tramp-handle-file-equal-p" function (:arguments ("filename1" "filename2")) nil [115181 115653])
            ("tramp-handle-file-exists-p" function (:arguments ("filename")) nil [115655 115784])
            ("tramp-handle-file-in-directory-p" function (:arguments ("filename" "directory")) nil [115786 116280])
            ("tramp-handle-file-modes" function (:arguments ("filename")) nil [116282 116562])
            ("tramp-handle-file-name-as-directory" function (:arguments ("file")) nil [116630 117407])
            ("tramp-handle-file-name-case-insensitive-p" function (:arguments ("filename")) nil [117409 119606])
            ("tramp-handle-file-name-completion" function (:arguments ("filename" "directory" "predicate")) nil [119608 120428])
            ("tramp-handle-file-name-directory" function (:arguments ("file")) nil [120430 121186])
            ("tramp-handle-file-name-nondirectory" function (:arguments ("file")) nil [121188 121409])
            ("tramp-handle-file-newer-than-file-p" function (:arguments ("file1" "file2")) nil [121411 121782])
            ("tramp-handle-file-regular-p" function (:arguments ("filename")) nil [121784 122000])
            ("tramp-handle-file-remote-p" function (:arguments ("filename" "identification" "connected")) nil [122002 123000])
            ("tramp-handle-file-selinux-context" function (:arguments ("_filename")) nil [123002 123150])
            ("tramp-handle-file-symlink-p" function (:arguments ("filename")) nil [123152 123341])
            ("tramp-handle-file-truename" function (:arguments ("filename")) nil [123343 124867])
            ("tramp-handle-find-backup-file-name" function (:arguments ("filename")) nil [124869 125489])
            ("tramp-handle-insert-directory" function (:arguments ("filename" "switches" "wildcard" "full-directory-p")) nil [125491 126697])
            ("tramp-handle-insert-file-contents" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [126699 130745])
            ("tramp-handle-load" function (:arguments ("file" "noerror" "nomessage" "nosuffix" "must-suffix")) nil [130747 131883])
            ("tramp-handle-make-symbolic-link" function (:arguments ("target" "linkname" "ok-if-already-exists")) nil [131885 132502])
            ("tramp-handle-shell-command" function (:arguments ("command" "output-buffer" "error-buffer")) nil [132504 135494])
            ("tramp-handle-substitute-in-file-name" function (:arguments ("filename")) nil [135496 136510])
            ("tramp-handle-set-visited-file-modtime" function (:arguments ("time-list")) nil [136512 137163])
            ("tramp-handle-verify-visited-file-modtime" function (:arguments ("buf")) nil [137165 138700])
            ("tramp-handle-file-notify-add-watch" function (:arguments ("filename" "_flags" "_callback")) nil [138702 139099])
            ("tramp-handle-file-notify-rm-watch" function (:arguments ("proc")) nil [139101 139410])
            ("tramp-handle-file-notify-valid-p" function (:arguments ("proc")) nil [139412 139816])
            ("tramp-action-login" function (:arguments ("_proc" "vec")) nil [140047 140651])
            ("tramp-action-password" function (:arguments ("proc" "vec")) nil [140653 141580])
            ("tramp-action-succeed" function (:arguments ("_proc" "_vec")) nil [141582 141695])
            ("tramp-action-permission-denied" function (:arguments ("proc" "_vec")) nil [141697 141842])
            ("tramp-action-yesno" function (:arguments ("proc" "vec")) nil [141844 142460])
            ("tramp-action-yn" function (:arguments ("proc" "vec")) nil [142462 143068])
            ("tramp-action-terminal" function (:arguments ("_proc" "vec")) nil [143070 143491])
            ("tramp-action-process-alive" function (:arguments ("proc" "_vec")) nil [143493 143655])
            ("tramp-action-out-of-band" function (:arguments ("proc" "vec")) nil [143657 144656])
            ("tramp-process-one-action" function (:arguments ("proc" "vec" "actions")) nil [144701 145450])
            ("tramp-process-actions" function (:arguments ("proc" "vec" "pos" "actions" "timeout")) nil [145452 147567])
            ("tramp-accept-process-output" function (:arguments ("proc" "timeout")) nil [147593 148325])
            ("tramp-check-for-regexp" function (:arguments ("proc" "regexp")) nil [148327 149901])
            ("tramp-wait-for-regexp" function (:arguments ("proc" "timeout" "regexp")) nil [149903 151083])
            ("tramp-send-string" function (:arguments ("vec" "string")) nil [151335 152912])
            ("tramp-get-inode" function (:arguments ("vec")) nil [152914 153137])
            ("tramp-get-device" function (:arguments ("vec")) nil [153139 153382])
            ("tramp-equal-remote" function (:arguments ("file1" "file2")) nil [153384 154034])
            ("tramp-mode-string-to-int" function (:arguments ("mode-string")) nil [154057 156779])
            ("tramp-file-mode-type-map" variable
               (:constant-flag t
                :default-value (quote ((0 . "-") (1 . "p") (2 . "c") (3 . "m") (4 . "d") (5 . "?") (6 . "b") (7 . "?") (8 . "-") (9 . "n") (10 . "l") (11 . "?") (12 . "s") (13 . "D") (14 . "w"))))
                nil [156781 157511])
            ("tramp-file-mode-from-int" function (:arguments ("mode")) nil [157534 158174])
            ("tramp-file-mode-permissions" function (:arguments ("perm" "suid" "suid-text")) nil [158176 158601])
            ("tramp-get-local-uid" function (:arguments ("id-format")) nil [158632 158830])
            ("tramp-get-local-gid" function (:arguments ("id-format")) nil [158853 159219])
            ("tramp-get-local-locale" function (:arguments ("vec")) nil [159221 160069])
            ("tramp-check-cached-permissions" function (:arguments ("vec" "access")) nil [160092 162358])
            ("tramp-local-host-p" function (:arguments ("vec")) nil [162381 163465])
            ("tramp-get-remote-tmpdir" function (:arguments ("vec")) nil [163467 164094])
            ("tramp-make-tramp-temp-file" function (:arguments ("vec")) nil [164117 164912])
            ("tramp-delete-temp-file-function" function nil nil [164914 165119])
            ("add-hook" code nil nil [165121 165182])
            ("add-hook" code nil nil [165183 165301])
            ("tramp-handle-make-auto-save-file-name" function nil nil [165303 166535])
            ("tramp-subst-strs-in-string" function (:arguments ("alist" "string")) nil [166537 166974])
            ("tramp-handle-temporary-file-directory" function nil nil [166976 167363])
            ("tramp-handle-make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [167365 167624])
            ("tramp-call-process" function (:arguments ("vec" "program" "infile" "destination" "display" "args")) nil [167664 169002])
            ("tramp-call-process-region" function (:arguments ("vec" "start" "end" "program" "delete" "buffer" "display" "args")) nil [169004 170333])
            ("tramp-read-passwd" function (:arguments ("proc" "prompt")) nil [170356 172439])
            ("tramp-clear-passwd" function (:arguments ("vec")) nil [172462 173336])
            ("tramp-half-a-year" variable
               (:constant-flag t
                :default-value (quote (241 17024)))
                nil [173374 173454])
            ("tramp-time-diff" function (:arguments ("t1" "t2")) nil [173477 173775])
            ("tramp-unquote-shell-quote-argument" function (:arguments ("s")) nil [173777 173962])
            ("tramp-shell-quote-argument" function (:arguments ("s")) nil [175089 175658])
            ("tramp-interrupt-process" function (:arguments ("process" "_current-group")) nil [175770 177049])
            ("when" code nil nil [177109 177343])
            ("tramp-eshell-directory-change" function nil nil [177497 178082])
            ("eval-after-load" code nil nil [178084 178498])
            ("tramp-unload-tramp" function (:user-visible-flag t) nil [178726 178989])
            ("tramp" package nil nil [178991 179007]))          
      :file "tramp.el"
      :pointmax 180116
      :fsize 180116
      :lastmodtime '(23525 29579 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("auth-source" include nil nil [1091 1113])
            ("advice" include nil nil [1114 1131])
            ("cl-lib" include nil nil [1132 1149])
            ("custom" include nil nil [1150 1167])
            ("format-spec" include nil nil [1168 1190])
            ("parse-time" include nil nil [1191 1212])
            ("password-cache" include nil nil [1213 1238])
            ("shell" include nil nil [1239 1255])
            ("timer" include nil nil [1256 1272])
            ("ucs-normalize" include nil nil [1273 1297])
            ("trampver" include nil nil [1299 1318])
            ("tramp-loaddefs" include nil nil [1319 1344])
            ("tramp-compat-funcall" function (:arguments ("function" "arguments")) nil [1527 1738])
            ("tramp-compat-temporary-file-directory" function nil nil [1740 2051])
            ("tramp-compat-make-temp-file" function (:arguments ("f" "dir-flag")) nil [2053 2443])
            ("defalias" code nil nil [2518 2694])
            ("tramp-compat-process-running-p" function (:arguments ("process-name")) nil [2696 3814])
            ("tramp-compat-user-error" function (:arguments ("vec-or-proc" "format" "args")) nil [3860 4051])
            ("unless" code nil nil [4114 4207])
            ("if" code nil nil [4262 4603])
            ("if" code nil nil [4605 4904])
            ("if" code nil nil [4906 5307])
            ("if" code nil nil [5309 5714])
            ("if" code nil nil [5716 6178])
            ("if" code nil nil [6180 6511])
            ("if" code nil nil [6513 6825])
            ("unless" code nil nil [6869 6940])
            ("if" code nil nil [6986 7431])
            ("tramp-file-missing" variable
               (:constant-flag t
                :default-value (if (get (quote file-missing) (quote error-conditions)) (quote file-missing) (quote file-error)))
                nil [7480 7631])
            ("add-hook" code nil nil [7633 7765])
            ("if" code nil nil [8635 9205])
            ("if" code nil nil [8228 8631])
            ("if" code nil nil [7885 8224])
            ("tramp-compat-tramp-syntax" function nil nil [9298 9477])
            ("tramp-compat-tramp-file-name-slots" function nil nil [9539 9756])
            ("tramp-compat" package nil nil [9758 9781]))          
      :file "tramp-compat.el"
      :pointmax 9824
      :fsize 9823
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax '((close-paren 9205 . 9206) (symbol 7866 . 7882) (open-paren 7865 . 7866)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1125 1141])
            ("dired" include nil nil [1189 1205])
            ("declare-function" code nil nil [1208 1256])
            ("dired-compress-file-suffixes" variable nil nil [1257 1294])
            ("vc-handled-backends" variable nil nil [1295 1323])
            ("vc-bzr-program" variable nil nil [1324 1347])
            ("vc-git-program" variable nil nil [1348 1371])
            ("vc-hg-program" variable nil nil [1372 1394])
            ("tramp-inline-compress-start-size" variable (:default-value 4096) nil [1417 1773])
            ("tramp-copy-size-limit" variable (:default-value 10240) nil [1796 2064])
            ("tramp-terminal-type" variable (:default-value "dumb") nil [2087 2464])
            ("tramp-histfile-override" variable (:default-value "~/.tramp_history") nil [2487 3251])
            ("tramp-display-escape-sequence-regexp" variable
               (:constant-flag t
                :default-value "[[;0-9]+m")
                nil [3274 3397])
            ("tramp-device-escape-sequence-regexp" variable
               (:constant-flag t
                :default-value "[[0-9]+n")
                nil [3420 3536])
            ("tramp-end-of-output" variable (:default-value (format "///%s#$" (md5 (concat (prin1-to-string process-environment) (current-time-string))))) nil [3740 4039])
            ("tramp-initial-end-of-output" variable
               (:constant-flag t
                :default-value "#$ ")
                nil [4062 4149])
            ("tramp-end-of-heredoc" variable
               (:constant-flag t
                :default-value (md5 tramp-end-of-output))
                nil [4151 4261])
            ("tramp-use-ssh-controlmaster-options" variable (:default-value t) nil [4284 4456])
            ("tramp-ssh-controlmaster-options" variable nil nil [4458 4977])
            ("add-to-list" code nil nil [5058 5476])
            ("add-to-list" code nil nil [5498 5878])
            ("add-to-list" code nil nil [5900 6424])
            ("add-to-list" code nil nil [6446 7000])
            ("add-to-list" code nil nil [7022 7642])
            ("add-to-list" code nil nil [7664 7919])
            ("add-to-list" code nil nil [7941 8200])
            ("add-to-list" code nil nil [8222 8557])
            ("add-to-list" code nil nil [8579 8939])
            ("add-to-list" code nil nil [8961 9233])
            ("add-to-list" code nil nil [9255 9980])
            ("add-to-list" code nil nil [10002 10285])
            ("add-to-list" code nil nil [10307 10545])
            ("add-to-list" code nil nil [10567 11206])
            ("add-to-list" code nil nil [11228 11481])
            ("add-to-list" code nil nil [11503 11789])
            ("add-to-list" code nil nil [11811 12081])
            ("add-to-list" code nil nil [12103 12630])
            ("add-to-list" code nil nil [12652 13080])
            ("add-to-list" code nil nil [13102 13765])
            ("add-to-list" code nil nil [13787 14410])
            ("add-to-list" code nil nil [14432 14827])
            ("add-to-list" code nil nil [14850 14943])
            ("add-to-list" code nil nil [14966 15096])
            ("add-to-list" code nil nil [15269 15449])
            ("tramp-completion-function-alist-rsh" variable
               (:constant-flag t
                :default-value (quote ((tramp-parse-rhosts "/etc/hosts.equiv") (tramp-parse-rhosts "~/.rhosts"))))
                nil [15472 15674])
            ("tramp-completion-function-alist-ssh" variable
               (:constant-flag t
                :default-value (quote ((tramp-parse-rhosts "/etc/hosts.equiv") (tramp-parse-rhosts "/etc/shosts.equiv") (tramp-parse-shosts "/etc/ssh_known_hosts") (tramp-parse-sconfig "/etc/ssh_config") (tramp-parse-shostkeys "/etc/ssh2/hostkeys") (tramp-parse-sknownhosts "/etc/ssh2/knownhosts") (tramp-parse-rhosts "~/.rhosts") (tramp-parse-rhosts "~/.shosts") (tramp-parse-shosts "~/.ssh/known_hosts") (tramp-parse-sconfig "~/.ssh/config") (tramp-parse-shostkeys "~/.ssh2/hostkeys") (tramp-parse-sknownhosts "~/.ssh2/knownhosts"))))
                nil [15697 16403])
            ("tramp-completion-function-alist-telnet" variable
               (:constant-flag t
                :default-value (quote ((tramp-parse-hosts "/etc/hosts"))))
                nil [16426 16590])
            ("tramp-completion-function-alist-su" variable
               (:constant-flag t
                :default-value (quote ((tramp-parse-passwd "/etc/passwd"))))
                nil [16613 16771])
            ("tramp-completion-function-alist-sg" variable
               (:constant-flag t
                :default-value (quote ((tramp-parse-etc-group "/etc/group"))))
                nil [16794 16954])
            ("tramp-completion-function-alist-putty" variable
               (:constant-flag t
                :default-value (\` ((tramp-parse-putty (\, (if (memq system-type (quote (windows-nt))) "HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions" "~/.putty/sessions"))))))
                nil [16977 17258])
            ("eval-after-load" code nil nil [17281 19097])
            ("tramp-remote-path" variable (:default-value (quote (tramp-default-remote-path "/bin" "/usr/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin" "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin" "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin" "/opt/local/bin"))) nil [19488 20941])
            ("tramp-remote-process-environment" variable (:default-value (quote ("ENV=''" "TMOUT=0" "LC_CTYPE=''" "CDPATH=" "HISTORY=" "MAIL=" "MAILCHECK=" "MAILPATH=" "PAGER=cat" "autocorrect=" "correct="))) nil [20964 21846])
            ("tramp-sh-extra-args" variable (:default-value (quote (("/bash\\'" . "-norc -noprofile")))) nil [21869 22407])
            ("tramp-actions-before-shell" variable
               (:constant-flag t
                :default-value (quote ((tramp-login-prompt-regexp tramp-action-login) (tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (shell-prompt-pattern tramp-action-succeed) (tramp-shell-prompt-pattern tramp-action-succeed) (tramp-yesno-prompt-regexp tramp-action-yesno) (tramp-yn-prompt-regexp tramp-action-yn) (tramp-terminal-prompt-regexp tramp-action-terminal) (tramp-process-alive-regexp tramp-action-process-alive))))
                nil [22409 23412])
            ("tramp-actions-copy-out-of-band" variable
               (:constant-flag t
                :default-value (quote ((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-copy-failed-regexp tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-out-of-band))))
                nil [23414 23844])
            ("tramp-uudecode" variable
               (:constant-flag t
                :default-value "(echo begin 600 %t; tail -n +2) | uudecode
cat %t
rm -f %t")
                nil [23846 24156])
            ("tramp-perl-file-truename" variable
               (:constant-flag t
                :default-value "%s -e '
use File::Spec;
use Cwd \"realpath\";

sub myrealpath {
    my ($file) = @_;
    return realpath($file) if (-e $file || -l $file);
}

sub recursive {
    my ($volume, @dirs) = @_;
    my $real = myrealpath(File::Spec->catpath(
                   $volume, File::Spec->catdir(@dirs), \"\"));
    if ($real) {
        my ($vol, $dir) = File::Spec->splitpath($real, 1);
        return ($vol, File::Spec->splitdir($dir));
    }
    else {
        my $last = pop(@dirs);
        ($volume, @dirs) = recursive($volume, @dirs);
        push(@dirs, $last);
        return ($volume, @dirs);
    }
}

$result = myrealpath($ARGV[0]);
if (!$result) {
    my ($vol, $dir) = File::Spec->splitpath($ARGV[0], 1);
    ($vol, @dirs) = recursive($vol, File::Spec->splitdir($dir));

    $result = File::Spec->catpath($vol, File::Spec->catdir(@dirs), \"\");
}

$result =~ s/\"/\\\\\"/g;
print \"\\\"$result\\\"\\n\";
' \"$1\" 2>/dev/null")
                nil [24158 25353])
            ("tramp-perl-file-name-all-completions" variable
               (:constant-flag t
                :default-value "%s -e '
opendir(d, $ARGV[0]) || die(\"$ARGV[0]: $!\\nfail\\n\");
@files = readdir(d); closedir(d);
foreach $f (@files) {
 if (-d \"$ARGV[0]/$f\") {
  print \"$f/\\n\";
 }
 else {
  print \"$f\\n\";
 }
}
print \"ok\\n\"
' \"$1\" 2>/dev/null")
                nil [25355 25893])
            ("tramp-perl-file-attributes" variable
               (:constant-flag t
                :default-value "%s -e '
@stat = lstat($ARGV[0]);
if (!@stat) {
    print \"nil\\n\";
    exit 0;
}
if (($stat[2] & 0170000) == 0120000)
{
    $type = readlink($ARGV[0]);
    $type =~ s/\"/\\\\\"/g;
    $type = \"\\\"$type\\\"\";
}
elsif (($stat[2] & 0170000) == 040000)
{
    $type = \"t\";
}
else
{
    $type = \"nil\"
};
$uid = ($ARGV[1] eq \"integer\") ? $stat[4] : \"\\\"\" . getpwuid($stat[4]) . \"\\\"\";
$gid = ($ARGV[1] eq \"integer\") ? $stat[5] : \"\\\"\" . getgrgid($stat[5]) . \"\\\"\";
printf(
    \"(%%s %%u %%s %%s (%%u %%u) (%%u %%u) (%%u %%u) %%u.0 %%u t (%%u . %%u) -1)\\n\",
    $type,
    $stat[3],
    $uid,
    $gid,
    $stat[8] >> 16 & 0xffff,
    $stat[8] & 0xffff,
    $stat[9] >> 16 & 0xffff,
    $stat[9] & 0xffff,
    $stat[10] >> 16 & 0xffff,
    $stat[10] & 0xffff,
    $stat[7],
    $stat[2],
    $stat[1] >> 16 & 0xffff,
    $stat[1] & 0xffff
);' \"$1\" \"$2\" 2>/dev/null")
                nil [26241 27407])
            ("tramp-perl-directory-files-and-attributes" variable
               (:constant-flag t
                :default-value "%s -e '
chdir($ARGV[0]) or printf(\"\\\"Cannot change to $ARGV[0]: $''!''\\\"\\n\"), exit();
opendir(DIR,\".\") or printf(\"\\\"Cannot open directory $ARGV[0]: $''!''\\\"\\n\"), exit();
@list = readdir(DIR);
closedir(DIR);
$n = scalar(@list);
printf(\"(\\n\");
for($i = 0; $i < $n; $i++)
{
    $filename = $list[$i];
    @stat = lstat($filename);
    if (($stat[2] & 0170000) == 0120000)
    {
        $type = readlink($filename);
        $type =~ s/\"/\\\\\"/g;
        $type = \"\\\"$type\\\"\";
    }
    elsif (($stat[2] & 0170000) == 040000)
    {
        $type = \"t\";
    }
    else
    {
        $type = \"nil\"
    };
    $uid = ($ARGV[1] eq \"integer\") ? $stat[4] : \"\\\"\" . getpwuid($stat[4]) . \"\\\"\";
    $gid = ($ARGV[1] eq \"integer\") ? $stat[5] : \"\\\"\" . getgrgid($stat[5]) . \"\\\"\";
    $filename =~ s/\"/\\\\\"/g;
    printf(
        \"(\\\"%%s\\\" %%s %%u %%s %%s (%%u %%u) (%%u %%u) (%%u %%u) %%u.0 %%u t (%%u . %%u) (%%u . %%u))\\n\",
        $filename,
        $type,
        $stat[3],
        $uid,
        $gid,
        $stat[8] >> 16 & 0xffff,
        $stat[8] & 0xffff,
        $stat[9] >> 16 & 0xffff,
        $stat[9] & 0xffff,
        $stat[10] >> 16 & 0xffff,
        $stat[10] & 0xffff,
        $stat[7],
        $stat[2],
        $stat[1] >> 16 & 0xffff,
        $stat[1] & 0xffff,
        $stat[0] >> 16 & 0xffff,
        $stat[0] & 0xffff);
}
printf(\")\\n\");' \"$1\" \"$2\" 2>/dev/null")
                nil [27409 29118])
            ("tramp-perl-encode-with-module" variable
               (:constant-flag t
                :default-value "%s -MMIME::Base64 -0777 -ne 'print encode_base64($_)' 2>/dev/null")
                nil [29154 29537])
            ("tramp-perl-decode-with-module" variable
               (:constant-flag t
                :default-value "%s -MMIME::Base64 -0777 -ne 'print decode_base64($_)' 2>/dev/null")
                nil [29539 29922])
            ("tramp-perl-encode" variable
               (:constant-flag t
                :default-value "%s -e '
# This script contributed by Juanma Barranquero <lektu@terra.es>.
# Copyright (C) 2002-2018 Free Software Foundation, Inc.
use strict;

my %%trans = do {
    my $i = 0;
    map {(substr(unpack(q(B8), chr $i++), 2, 6), $_)}
      split //, q(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/);
};
my $data;

# We read in chunks of 54 bytes, to generate output lines
# of 72 chars (plus end of line)
while (read STDIN, $data, 54) {
    my $pad = q();

    # Only for the last chunk, and only if did not fill the last three-byte packet
    if (eof) {
        my $mod = length($data) %% 3;
        $pad = q(=) x (3 - $mod) if $mod;
    }

    # Not the fastest method, but it is simple: unpack to binary string, split
    # by groups of 6 bits and convert back from binary to byte; then map into
    # the translation table
    print
      join q(),
        map($trans{$_},
            (substr(unpack(q(B*), $data) . q(00000), 0, 432) =~ /....../g)),
              $pad,
                qq(\\n);
}' 2>/dev/null")
                nil [29924 31165])
            ("tramp-perl-decode" variable
               (:constant-flag t
                :default-value "%s -e '
# This script contributed by Juanma Barranquero <lektu@terra.es>.
# Copyright (C) 2002-2018 Free Software Foundation, Inc.
use strict;

my %%trans = do {
    my $i = 0;
    map {($_, substr(unpack(q(B8), chr $i++), 2, 6))}
      split //, q(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/)
};

my %%bytes = map {(unpack(q(B8), chr $_), chr $_)} 0 .. 255;

binmode(\\*STDOUT);

# We are going to accumulate into $pending to accept any line length
# (we do not check they are <= 76 chars as the RFC says)
my $pending = q();

while (my $data = <STDIN>) {
    chomp $data;

    # If we find one or two =, we have reached the end and
    # any following data is to be discarded
    my $finished = $data =~ s/(==?).*/$1/;
    $pending .= $data;

    my $len = length($pending);
    my $chunk = substr($pending, 0, $len & ~3);
    $pending = substr($pending, $len & ~3 + 1);

    # Easy method: translate from chars to (pregenerated) six-bit packets, join,
    # split in 8-bit chunks and convert back to char.
    print join q(),
      map $bytes{$_},
        ((join q(), map {$trans{$_} || q()} split //, $chunk) =~ /......../g);

    last if $finished;
}' 2>/dev/null")
                nil [31167 32567])
            ("tramp-perl-pack" variable
               (:constant-flag t
                :default-value "%s -e 'binmode STDIN; binmode STDOUT; print pack(q{u*}, join q{}, <>)'")
                nil [32569 32772])
            ("tramp-perl-unpack" variable
               (:constant-flag t
                :default-value "%s -e 'binmode STDIN; binmode STDOUT; print unpack(q{u*}, join q{}, <>)'")
                nil [32774 32981])
            ("tramp-awk-encode" variable
               (:constant-flag t
                :default-value "od -v -t x1 -A n | busybox awk '\\
BEGIN {
  b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"
  b16 = \"0123456789abcdef\"
}
{
  for (c=1; c<=length($0); c++) {
    d=index(b16, substr($0,c,1))
    if (d--) {
      for (b=1; b<=4; b++) {
        o=o*2+int(d/8); d=(d*2)%%16
        if (++obc==6) {
          printf substr(b64,o+1,1)
          if (++rc>75) { printf \"\\n\"; rc=0 }
          obc=0; o=0
        }
      }
    }
  }
}
END {
  if (obc) {
    tail=(obc==2) ? \"==\\n\" : \"=\\n\"
    while (obc++<6) { o=o*2 }
    printf \"%%c\", substr(b64,o+1,1)
  } else {
    tail=\"\\n\"
  }
  printf tail
}'")
                nil [32983 33770])
            ("tramp-awk-decode" variable
               (:constant-flag t
                :default-value "busybox awk '\\
BEGIN {
  b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"
}
{
  for (i=1; i<=length($0); i++) {
    c=index(b64, substr($0,i,1))
    if(c--) {
      for(b=0; b<6; b++) {
        o=o*2+int(c/32); c=(c*2)%%64
        if(++obc==8) {
          if (o) {
            printf \"%%c\", o
          } else {
            system(\"dd if=/dev/zero bs=1 count=1 2>/dev/null\")
          }
          obc=0; o=0
        }
      }
    }
  }
}'")
                nil [33772 34394])
            ("tramp-awk-coding-test" variable
               (:constant-flag t
                :default-value "test -c /dev/zero && od -v -t x1 -A n </dev/null && busybox awk '{}' </dev/null")
                nil [34396 34589])
            ("tramp-stat-marker" variable
               (:constant-flag t
                :default-value "/////")
                nil [34591 34676])
            ("tramp-stat-quoted-marker" variable
               (:constant-flag t
                :default-value "\\/\\/\\/\\/\\/")
                nil [34678 34787])
            ("tramp-vc-registered-read-file-names" variable
               (:constant-flag t
                :default-value "echo \"(\"
while read file; do
    if %s \"$file\"; then
	echo \"(\\\"$file\\\" \\\"file-exists-p\\\" t)\"
    else
	echo \"(\\\"$file\\\" \\\"file-exists-p\\\" nil)\"
    fi
    if %s \"$file\"; then
	echo \"(\\\"$file\\\" \\\"file-readable-p\\\" t)\"
    else
	echo \"(\\\"$file\\\" \\\"file-readable-p\\\" nil)\"
    fi
done
echo \")\"")
                nil [34789 35432])
            ("tramp-sh-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((add-name-to-file . tramp-sh-handle-add-name-to-file) (copy-directory . tramp-sh-handle-copy-directory) (copy-file . tramp-sh-handle-copy-file) (delete-directory . tramp-sh-handle-delete-directory) (delete-file . tramp-sh-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-sh-handle-directory-files-and-attributes) (dired-compress-file . tramp-sh-handle-dired-compress-file) (dired-uncache . tramp-handle-dired-uncache) (expand-file-name . tramp-sh-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . tramp-sh-handle-file-acl) (file-attributes . tramp-sh-handle-file-attributes) (file-directory-p . tramp-sh-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-sh-handle-file-executable-p) (file-exists-p . tramp-sh-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-sh-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-sh-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-sh-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-sh-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . tramp-sh-handle-file-ownership-preserved-p) (file-readable-p . tramp-sh-handle-file-readable-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-sh-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-sh-handle-file-system-info) (file-truename . tramp-sh-handle-file-truename) (file-writable-p . tramp-sh-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-sh-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-sh-handle-make-directory) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-sh-handle-make-symbolic-link) (process-file . tramp-sh-handle-process-file) (rename-file . tramp-sh-handle-rename-file) (set-file-acl . tramp-sh-handle-set-file-acl) (set-file-modes . tramp-sh-handle-set-file-modes) (set-file-selinux-context . tramp-sh-handle-set-file-selinux-context) (set-file-times . tramp-sh-handle-set-file-times) (set-visited-file-modtime . tramp-sh-handle-set-visited-file-modtime) (shell-command . tramp-handle-shell-command) (start-file-process . tramp-sh-handle-start-file-process) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . tramp-sh-handle-vc-registered) (verify-visited-file-modtime . tramp-sh-handle-verify-visited-file-modtime) (write-region . tramp-sh-handle-write-region))))
                nil [35493 39800])
            ("tramp-sh-handle-make-symbolic-link" function (:arguments ("target" "linkname" "ok-if-already-exists")) nil [39836 42370])
            ("tramp-sh-handle-file-truename" function (:arguments ("filename")) nil [42372 46235])
            ("tramp-sh-handle-file-exists-p" function (:arguments ("filename")) nil [46258 46827])
            ("tramp-sh-handle-file-attributes" function (:arguments ("filename" "id-format")) nil [46829 47713])
            ("tramp-do-file-attributes-with-ls" function (:arguments ("vec" "localname" "id-format")) nil [47715 51942])
            ("tramp-do-file-attributes-with-perl" function (:arguments ("vec" "localname" "id-format")) nil [51944 52389])
            ("tramp-do-file-attributes-with-stat" function (:arguments ("vec" "localname" "id-format")) nil [52391 53672])
            ("tramp-sh-handle-set-visited-file-modtime" function (:arguments ("time-list")) nil [53674 54965])
            ("tramp-sh-handle-verify-visited-file-modtime" function (:arguments ("buf")) nil [55060 56958])
            ("tramp-sh-handle-set-file-modes" function (:arguments ("filename" "mode")) nil [56960 57431])
            ("tramp-sh-handle-set-file-times" function (:arguments ("filename" "time")) nil [57433 58113])
            ("tramp-set-file-uid-gid" function (:arguments ("filename" "uid" "gid")) nil [58115 59703])
            ("tramp-remote-selinux-p" function (:arguments ("vec")) nil [59705 59937])
            ("tramp-sh-handle-file-selinux-context" function (:arguments ("filename")) nil [59939 60783])
            ("tramp-sh-handle-set-file-selinux-context" function (:arguments ("filename" "context")) nil [60785 61775])
            ("tramp-remote-acl-p" function (:arguments ("vec")) nil [61777 61992])
            ("tramp-sh-handle-file-acl" function (:arguments ("filename")) nil [61994 62525])
            ("tramp-sh-handle-set-file-acl" function (:arguments ("filename" "acl-string")) nil [62527 63217])
            ("tramp-sh-handle-file-executable-p" function (:arguments ("filename")) nil [63266 63666])
            ("tramp-sh-handle-file-readable-p" function (:arguments ("filename")) nil [63668 64062])
            ("tramp-sh-handle-file-newer-than-file-p" function (:arguments ("file1" "file2")) nil [64375 65889])
            ("tramp-sh-handle-file-directory-p" function (:arguments ("filename")) nil [65950 66480])
            ("tramp-sh-handle-file-writable-p" function (:arguments ("filename")) nil [66482 67092])
            ("tramp-sh-handle-file-ownership-preserved-p" function (:arguments ("filename" "group")) nil [67094 67778])
            ("tramp-sh-handle-directory-files-and-attributes" function (:arguments ("directory" "full" "match" "nosort" "id-format")) nil [67804 69179])
            ("tramp-do-directory-files-and-attributes-with-perl" function (:arguments ("vec" "localname" "id-format")) nil [69181 69814])
            ("tramp-do-directory-files-and-attributes-with-stat" function (:arguments ("vec" "localname" "id-format")) nil [69816 71399])
            ("tramp-sh-handle-file-name-all-completions" function (:arguments ("filename" "directory")) nil [71479 73701])
            ("tramp-sh-handle-add-name-to-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [73721 75012])
            ("tramp-sh-handle-copy-file" function (:arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes")) nil [75014 75658])
            ("tramp-sh-handle-copy-directory" function (:arguments ("dirname" "newname" "keep-date" "parents" "copy-contents")) nil [75660 77455])
            ("tramp-sh-handle-rename-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [77457 78120])
            ("tramp-do-copy-or-rename-file" function (:arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes")) nil [78122 82647])
            ("tramp-do-copy-or-rename-file-via-buffer" function (:arguments ("op" "filename" "newname" "keep-date")) nil [82649 84397])
            ("tramp-do-copy-or-rename-file-directly" function (:arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid")) nil [84399 89792])
            ("tramp-do-copy-or-rename-file-out-of-band" function (:arguments ("op" "filename" "newname" "keep-date")) nil [89794 97766])
            ("tramp-sh-handle-make-directory" function (:arguments ("dir" "parents")) nil [97768 98215])
            ("tramp-sh-handle-delete-directory" function (:arguments ("directory" "recursive" "trash")) nil [98217 98782])
            ("tramp-sh-handle-delete-file" function (:arguments ("filename" "trash")) nil [98784 99282])
            ("tramp-sh-handle-dired-compress-file" function (:arguments ("file")) nil [99295 100770])
            ("tramp-sh-handle-insert-directory" function (:arguments ("filename" "switches" "wildcard" "full-directory-p")) nil [100772 105554])
            ("tramp-sh-handle-expand-file-name" function (:arguments ("name" "dir")) nil [105592 108296])
            ("tramp-process-sentinel" function (:arguments ("proc" "event")) nil [108320 108662])
            ("tramp-sh-handle-start-file-process" function (:arguments ("name" "buffer" "program" "args")) nil [108826 114156])
            ("tramp-sh-handle-process-file" function (:arguments ("program" "infile" "destination" "display" "args")) nil [114158 118690])
            ("tramp-sh-handle-file-local-copy" function (:arguments ("filename")) nil [118692 121583])
            ("tramp-sh-handle-write-region" function (:arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew")) nil [121606 130872])
            ("tramp-vc-registered-file-names" variable nil nil [130874 130996])
            ("tramp-sh-handle-vc-registered" function (:arguments ("file")) nil [131832 135266])
            ("tramp-sh-file-name-handler" function (:arguments ("operation" "args")) nil [135289 135626])
            ("tramp-register-foreign-file-name-handler" code nil nil [135716 135805])
            ("tramp-vc-file-name-handler" function (:arguments ("operation" "args")) nil [135807 137005])
            ("tramp-sh-handle-file-notify-add-watch" function (:arguments ("file-name" "flags" "_callback")) nil [137007 139720])
            ("tramp-sh-gvfs-monitor-dir-process-filter" function (:arguments ("proc" "string")) nil [139722 141895])
            ("tramp-sh-inotifywait-process-filter" function (:arguments ("proc" "string")) nil [141897 143152])
            ("tramp-sh-handle-file-system-info" function (:arguments ("filename")) nil [143154 144127])
            ("tramp-maybe-send-script" function (:arguments ("vec" "script" "name")) nil [144154 145339])
            ("tramp-run-test" function (:arguments ("switch" "filename")) nil [145341 145703])
            ("tramp-run-test2" function (:arguments ("format-string" "file1" "file2")) nil [145705 146489])
            ("tramp-find-executable" function (:arguments ("vec" "progname" "dirlist" "ignore-tilde" "ignore-path")) nil [146491 148563])
            ("tramp-set-remote-path" function (:arguments ("vec")) nil [148565 148984])
            ("tramp-find-file-exists-command" function (:arguments ("vec")) nil [149158 151711])
            ("tramp-open-shell" function (:arguments ("vec" "shell")) nil [151713 154378])
            ("tramp-find-shell" function (:arguments ("vec")) nil [154380 155814])
            ("tramp-barf-if-no-shell-prompt" function (:arguments ("proc" "timeout" "error-args")) nil [155839 156463])
            ("tramp-open-connection-setup-interactive-shell" function (:arguments ("proc" "vec")) nil [156465 163322])
            ("uudecode-decode-region" function (:prototype-flag t) nil [163957 164002])
            ("tramp-local-coding-commands" variable
               (:constant-flag t
                :default-value (\` ((b64 base64-encode-region base64-decode-region) (uu tramp-uuencode-region uudecode-decode-region) (pack (\, (format tramp-perl-pack "perl")) (\, (format tramp-perl-unpack "perl"))))))
                nil [164004 165031])
            ("tramp-remote-coding-commands" variable
               (:constant-flag t
                :default-value (\` ((b64 "base64" "base64 -d -i") (b64 "base64" "base64 -d") (b64 "openssl enc -base64" "openssl enc -d -base64") (b64 "mimencode -b" "mimencode -u -b") (b64 "mmencode -b" "mmencode -u -b") (b64 "recode data..base64" "recode base64..data") (b64 tramp-perl-encode-with-module tramp-perl-decode-with-module) (b64 tramp-perl-encode tramp-perl-decode) (b64 tramp-awk-encode tramp-awk-decode (\, tramp-awk-coding-test)) (uu "uuencode xxx" "uudecode -o /dev/stdout" "test -c /dev/stdout") (uu "uuencode xxx" "uudecode -o -") (uu "uuencode xxx" "uudecode -p") (uu "uuencode xxx" tramp-uudecode) (pack tramp-perl-pack tramp-perl-unpack))))
                nil [165033 166992])
            ("tramp-find-inline-encoding" function (:arguments ("vec")) nil [166994 171971])
            ("tramp-call-local-coding-command" function (:arguments ("cmd" "input" "output")) nil [171973 172687])
            ("tramp-inline-compress-commands" variable
               (:constant-flag t
                :default-value (quote (("gzip" "gzip -d") ("bzip2" "bzip2 -d") ("xz" "xz -d") ("compress" "compress -d"))))
                nil [172689 173027])
            ("tramp-find-inline-compress" function (:arguments ("vec")) nil [173029 174968])
            ("tramp-compute-multi-hops" function (:arguments ("vec")) nil [174970 178081])
            ("tramp-ssh-controlmaster-options" function (:arguments ("vec")) nil [178083 179912])
            ("tramp-maybe-open-connection" function (:arguments ("vec")) nil [179914 188983])
            ("tramp-send-command" function (:arguments ("vec" "command" "neveropen" "nooutput")) nil [188985 190569])
            ("tramp-wait-for-output" function (:arguments ("proc" "timeout")) nil [190571 192253])
            ("tramp-send-command-and-check" function (:arguments ("vec" "command" "subshell" "dont-suppress-err")) nil [192255 193331])
            ("tramp-barf-unless-okay" function (:arguments ("vec" "command" "fmt" "args")) nil [193333 193682])
            ("tramp-send-command-and-read" function (:arguments ("vec" "command" "noerror" "marker")) nil [193684 194814])
            ("tramp-convert-file-attributes" function (:arguments ("vec" "attr")) nil [194816 198649])
            ("tramp-shell-case-fold" function (:arguments ("string")) nil [198651 198908])
            ("tramp-make-copy-program-file-name" function (:arguments ("vec")) nil [198910 199681])
            ("tramp-method-out-of-band-p" function (:arguments ("vec" "size")) nil [199683 200226])
            ("tramp-get-remote-path" function (:arguments ("vec")) nil [200263 203024])
            ("tramp-get-remote-locale" function (:arguments ("vec")) nil [203026 203665])
            ("tramp-get-ls-command" function (:arguments ("vec")) nil [203667 204786])
            ("tramp-get-ls-command-with-dired" function (:arguments ("vec")) nil [204788 205321])
            ("tramp-get-ls-command-with-quoting-style" function (:arguments ("vec")) nil [205323 205747])
            ("tramp-get-ls-command-with-w-option" function (:arguments ("vec")) nil [205749 206289])
            ("tramp-get-test-command" function (:arguments ("vec")) nil [206291 206602])
            ("tramp-get-test-nt-command" function (:arguments ("vec")) nil [206604 207429])
            ("tramp-get-file-exists-command" function (:arguments ("vec")) nil [207431 207690])
            ("tramp-get-remote-ln" function (:arguments ("vec")) nil [207692 207929])
            ("tramp-get-remote-perl" function (:arguments ("vec")) nil [207931 208815])
            ("tramp-get-remote-stat" function (:arguments ("vec")) nil [208817 209792])
            ("tramp-get-remote-readlink" function (:arguments ("vec")) nil [209794 210205])
            ("tramp-get-remote-trash" function (:arguments ("vec")) nil [210207 210567])
            ("tramp-get-remote-touch" function (:arguments ("vec")) nil [210569 211361])
            ("tramp-get-remote-df" function (:arguments ("vec")) nil [211363 211763])
            ("tramp-get-remote-gvfs-monitor-dir" function (:arguments ("vec")) nil [211765 212353])
            ("tramp-get-remote-inotifywait" function (:arguments ("vec")) nil [212355 212641])
            ("tramp-get-remote-id" function (:arguments ("vec")) nil [212643 213154])
            ("tramp-get-remote-uid-with-id" function (:arguments ("vec" "id-format")) nil [213156 213493])
            ("tramp-get-remote-uid-with-perl" function (:arguments ("vec" "id-format")) nil [213495 213829])
            ("tramp-get-remote-python" function (:arguments ("vec")) nil [213831 214241])
            ("tramp-get-remote-uid-with-python" function (:arguments ("vec" "id-format")) nil [214243 214624])
            ("tramp-get-remote-uid" function (:arguments ("vec" "id-format")) nil [214626 215415])
            ("tramp-get-remote-gid-with-id" function (:arguments ("vec" "id-format")) nil [215417 215754])
            ("tramp-get-remote-gid-with-perl" function (:arguments ("vec" "id-format")) nil [215756 216102])
            ("tramp-get-remote-gid-with-python" function (:arguments ("vec" "id-format")) nil [216104 216485])
            ("tramp-get-remote-gid" function (:arguments ("vec" "id-format")) nil [216487 217276])
            ("tramp-get-env-with-u-option" function (:arguments ("vec")) nil [217278 217639])
            ("tramp-get-inline-compress" function (:arguments ("vec" "prop" "size")) nil [217683 218255])
            ("tramp-get-inline-coding" function (:arguments ("vec" "prop" "size")) nil [218257 221393])
            ("add-hook" code nil nil [221395 221478])
            ("tramp-sh" package nil nil [221480 221499]))          
      :file "tramp-sh.el"
      :pointmax 225842
      :fsize 225846
      :lastmodtime '(23525 29579 0 0)
      :unmatched-syntax '((close-paren 1205 . 1206) (symbol 1169 . 1186) (open-paren 1168 . 1169)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [2298 2314])
            ("time-stamp-string" function (:prototype-flag t) nil [2315 2357])
            ("tramp-cache-data" variable (:default-value (make-hash-table :test (quote equal))) nil [2397 2497])
            ("tramp-connection-properties" variable nil nil [2520 3113])
            ("tramp-persistency-file-name" variable (:default-value (expand-file-name (locate-user-emacs-file "tramp"))) nil [3136 3340])
            ("tramp-cache-data-changed" variable nil nil [3342 3432])
            ("tramp-get-hash-table" function (:arguments ("key")) nil [3434 4140])
            ("tramp-get-file-property" function (:arguments ("key" "file" "property" "default")) nil [4163 5591])
            ("tramp-set-file-property" function (:arguments ("key" "file" "property" "value")) nil [5614 6500])
            ("tramp-flush-file-property" function (:arguments ("key" "file")) nil [6523 7277])
            ("tramp-flush-directory-property" function (:arguments ("key" "directory")) nil [7300 8212])
            ("tramp-flush-file-function" function nil nil [8548 9040])
            ("add-hook" code nil nil [9042 9099])
            ("add-hook" code nil nil [9100 9162])
            ("add-hook" code nil nil [9163 9218])
            ("add-hook" code nil nil [9219 9482])
            ("tramp-get-connection-property" function (:arguments ("key" "property" "default")) nil [9527 10525])
            ("tramp-set-connection-property" function (:arguments ("key" "property" "value")) nil [10548 11372])
            ("tramp-connection-property-p" function (:arguments ("key" "property")) nil [11395 11757])
            ("tramp-flush-connection-property" function (:arguments ("key")) nil [11780 12630])
            ("tramp-cache-print" function (:arguments ("table")) nil [12653 13999])
            ("tramp-list-connections" function nil nil [14022 14416])
            ("tramp-dump-connection-properties" function nil nil [14418 16150])
            ("unless" code nil nil [16152 16239])
            ("add-hook" code nil nil [16240 16364])
            ("tramp-parse-connection-properties" function (:arguments ("method")) nil [16387 16950])
            ("tramp-cache-read-persistent-data" variable (:default-value (or init-file-user site-run-file)) nil [17122 17250])
            ("when" code nil nil [17291 18370])
            ("add-hook" code nil nil [18372 18458])
            ("tramp-cache" package nil nil [18460 18482]))          
      :file "tramp-cache.el"
      :pointmax 18513
      :fsize 18512
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ange-ftp.el"
      :fsize 241276
      :lastmodtime '(23525 29574 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [4025 4077])
            ("tramp" include nil nil [4079 4095])
            ("dbus" include nil nil [4097 4112])
            ("url-parse" include nil nil [4113 4133])
            ("url-util" include nil nil [4134 4153])
            ("zeroconf" include nil nil [4154 4173])
            ("custom" include nil nil [4221 4238])
            ("tramp-gvfs-methods" variable (:default-value (quote ("afp" "dav" "davs" "gdrive" "obex" "sftp" "synce"))) nil [4262 4650])
            ("when" code nil nil [4752 5063])
            ("add-to-list" code nil nil [5085 5149])
            ("tramp-gvfs-zeroconf-domain" variable (:default-value "local") nil [5172 5360])
            ("when" code nil nil [5466 5618])
            ("tramp-gvfs-path-tramp" variable
               (:constant-flag t
                :default-value (concat dbus-path-emacs "/Tramp"))
                nil [5620 5733])
            ("tramp-gvfs-service-daemon" variable
               (:constant-flag t
                :default-value "org.gtk.vfs.Daemon")
                nil [5735 5836])
            ("tramp-gvfs-enabled" variable
               (:constant-flag t
                :default-value (ignore-errors (and (featurep (quote dbusbind)) (tramp-compat-funcall (quote dbus-get-unique-name) :system) (tramp-compat-funcall (quote dbus-get-unique-name) :session) (or (tramp-compat-process-running-p "gvfs-fuse-daemon") (tramp-compat-process-running-p "gvfsd-fuse")))))
                nil [5901 6237])
            ("tramp-gvfs-path-mounttracker" variable
               (:constant-flag t
                :default-value "/org/gtk/vfs/mounttracker")
                nil [6239 6346])
            ("tramp-gvfs-interface-mounttracker" variable
               (:constant-flag t
                :default-value "org.gtk.vfs.MountTracker")
                nil [6348 6472])
            ("tramp-gvfs-methods-mounttracker" variable
               (:constant-flag t
                :default-value (and tramp-gvfs-enabled (dbus-introspect-get-method-names :session tramp-gvfs-service-daemon tramp-gvfs-path-mounttracker tramp-gvfs-interface-mounttracker)))
                nil [6582 6860])
            ("tramp-gvfs-listmounts" variable
               (:constant-flag t
                :default-value (if (member "ListMounts" tramp-gvfs-methods-mounttracker) "ListMounts" "listMounts"))
                nil [6862 7068])
            ("tramp-gvfs-mountlocation" variable
               (:constant-flag t
                :default-value (if (member "MountLocation" tramp-gvfs-methods-mounttracker) "MountLocation" "mountLocation"))
                nil [7070 7291])
            ("tramp-gvfs-mountlocation-signature" variable
               (:constant-flag t
                :default-value (and tramp-gvfs-enabled (dbus-introspect-get-signature :session tramp-gvfs-service-daemon tramp-gvfs-path-mounttracker tramp-gvfs-interface-mounttracker tramp-gvfs-mountlocation)))
                nil [7293 7620])
            ("tramp-gvfs-interface-mountoperation" variable
               (:constant-flag t
                :default-value "org.gtk.vfs.MountOperation")
                nil [8985 9125])
            ("tramp-gvfs-password-need-password" variable
               (:constant-flag t
                :default-value 1)
                nil [10342 10423])
            ("tramp-gvfs-password-need-username" variable
               (:constant-flag t
                :default-value 2)
                nil [10425 10506])
            ("tramp-gvfs-password-need-domain" variable
               (:constant-flag t
                :default-value 4)
                nil [10508 10585])
            ("tramp-gvfs-password-saving-supported" variable
               (:constant-flag t
                :default-value 8)
                nil [10587 10676])
            ("tramp-gvfs-password-anonymous-supported" variable
               (:constant-flag t
                :default-value 16)
                nil [10678 10771])
            ("tramp-bluez-service" variable
               (:constant-flag t
                :default-value "org.bluez")
                nil [10773 10861])
            ("tramp-bluez-interface-manager" variable
               (:constant-flag t
                :default-value "org.bluez.Manager")
                nil [10863 10970])
            ("tramp-bluez-interface-adapter" variable
               (:constant-flag t
                :default-value "org.bluez.Adapter")
                nil [11560 11667])
            ("tramp-bluez-discover-devices-timeout" variable (:default-value 60) nil [13594 13952])
            ("tramp-bluez-discovery" variable nil nil [13954 14086])
            ("tramp-bluez-devices" variable nil nil [14088 14199])
            ("tramp-hal-service" variable
               (:constant-flag t
                :default-value "org.freedesktop.Hal")
                nil [14201 14295])
            ("tramp-hal-path-manager" variable
               (:constant-flag t
                :default-value "/org/freedesktop/Hal/Manager")
                nil [14297 14408])
            ("tramp-hal-interface-manager" variable
               (:constant-flag t
                :default-value "org.freedesktop.Hal.Manager")
                nil [14410 14523])
            ("tramp-hal-interface-device" variable
               (:constant-flag t
                :default-value "org.freedesktop.Hal.Device")
                nil [14525 14635])
            ("tramp-gvfs-gio-mapping" variable
               (:constant-flag t
                :default-value (quote (("gvfs-copy" . "copy") ("gvfs-info" . "info") ("gvfs-ls" . "list") ("gvfs-mkdir" . "mkdir") ("gvfs-monitor-file" . "monitor") ("gvfs-move" . "move") ("gvfs-rm" . "remove") ("gvfs-trash" . "trash"))))
                nil [14750 15086])
            ("tramp-gvfs-file-attributes" variable
               (:constant-flag t
                :default-value (quote ("name" "type" "standard::display-name" "standard::symlink-target" "unix::nlink" "unix::uid" "owner::user" "unix::gid" "owner::group" "time::access" "time::modified" "time::changed" "standard::size" "unix::mode" "access::can-read" "access::can-write" "access::can-execute" "unix::inode" "unix::device")))
                nil [15088 15529])
            ("tramp-gvfs-file-attributes-with-gvfs-ls-regexp" variable
               (:constant-flag t
                :default-value (concat "[[:blank:]]" (regexp-opt tramp-gvfs-file-attributes t) "=\\(.+?\\)"))
                nil [15531 15725])
            ("tramp-gvfs-file-attributes-with-gvfs-info-regexp" variable
               (:constant-flag t
                :default-value (concat "^[[:blank:]]*" (regexp-opt tramp-gvfs-file-attributes t) ":[[:blank:]]+\\(.*\\)$"))
                nil [15727 15945])
            ("tramp-gvfs-file-system-attributes" variable
               (:constant-flag t
                :default-value (quote ("filesystem::free" "filesystem::size" "filesystem::used")))
                nil [15947 16094])
            ("tramp-gvfs-file-system-attributes-regexp" variable
               (:constant-flag t
                :default-value (concat "^[[:blank:]]*" (regexp-opt tramp-gvfs-file-system-attributes t) ":[[:blank:]]+\\(.*\\)$"))
                nil [16096 16320])
            ("tramp-gvfs-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((access-file . ignore) (add-name-to-file . tramp-handle-add-name-to-file) (copy-file . tramp-gvfs-handle-copy-file) (delete-directory . tramp-gvfs-handle-delete-directory) (delete-file . tramp-gvfs-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-handle-directory-files) (directory-files-and-attributes . tramp-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (expand-file-name . tramp-gvfs-handle-expand-file-name) (file-accessible-directory-p . tramp-handle-file-accessible-directory-p) (file-acl . ignore) (file-attributes . tramp-gvfs-handle-file-attributes) (file-directory-p . tramp-gvfs-handle-file-directory-p) (file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-gvfs-handle-file-executable-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-gvfs-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-gvfs-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-gvfs-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-gvfs-handle-file-readable-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-gvfs-handle-file-system-info) (file-truename . tramp-handle-file-truename) (file-writable-p . tramp-gvfs-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-gvfs-handle-make-directory) (make-directory-internal . ignore) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-handle-make-symbolic-link) (process-file . ignore) (rename-file . tramp-gvfs-handle-rename-file) (set-file-acl . ignore) (set-file-modes . ignore) (set-file-selinux-context . ignore) (set-file-times . ignore) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . ignore) (start-file-process . ignore) (substitute-in-file-name . tramp-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-gvfs-handle-write-region))))
                nil [16383 20390])
            ("tramp-gvfs-file-name-p" function (:arguments ("filename")) nil [20549 20839])
            ("tramp-gvfs-file-name-handler" function (:arguments ("operation" "args")) nil [20862 21323])
            ("when" code nil nil [21346 21475])
            ("tramp-gvfs-dbus-string-to-byte-array" function (:arguments ("string")) nil [21506 21770])
            ("tramp-gvfs-dbus-byte-array-to-string" function (:arguments ("byte-array")) nil [21772 22253])
            ("tramp-gvfs-stringify-dbus-message" function (:arguments ("message")) nil [22255 22648])
            ("with-tramp-dbus-call-method" function (:arguments ("vec" "synchronous" "bus" "service" "path" "interface" "method" "args")) nil [22650 23494])
            ("put" code nil nil [23496 23554])
            ("put" code nil nil [23555 23628])
            ("font-lock-add-keywords" code nil nil [23629 23709])
            ("tramp-gvfs-dbus-event-vector" variable nil nil [23711 23913])
            ("tramp-gvfs-dbus-event-error" function (:arguments ("event" "err")) nil [23915 24219])
            ("add-hook" code nil nil [24316 24456])
            ("tramp-gvfs-do-copy-or-rename-file" function (:arguments ("op" "filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes")) nil [24486 28052])
            ("tramp-gvfs-handle-copy-file" function (:arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "preserve-uid-gid" "preserve-extended-attributes")) nil [28054 28750])
            ("tramp-gvfs-handle-delete-directory" function (:arguments ("directory" "recursive" "trash")) nil [28752 29854])
            ("tramp-gvfs-handle-delete-file" function (:arguments ("filename" "trash")) nil [29856 30455])
            ("tramp-gvfs-handle-expand-file-name" function (:arguments ("name" "dir")) nil [30457 32481])
            ("tramp-gvfs-get-directory-attributes" function (:arguments ("directory")) nil [32483 34011])
            ("tramp-gvfs-get-root-attributes" function (:arguments ("filename" "file-system")) nil [34013 35189])
            ("tramp-gvfs-get-file-attributes" function (:arguments ("filename")) nil [35191 35798])
            ("tramp-gvfs-handle-file-attributes" function (:arguments ("filename" "id-format")) nil [35800 39234])
            ("tramp-gvfs-handle-file-directory-p" function (:arguments ("filename")) nil [39236 39423])
            ("tramp-gvfs-handle-file-executable-p" function (:arguments ("filename")) nil [39425 39677])
            ("tramp-gvfs-handle-file-local-copy" function (:arguments ("filename")) nil [39679 40116])
            ("tramp-gvfs-handle-file-name-all-completions" function (:arguments ("filename" "directory")) nil [40118 40795])
            ("tramp-gvfs-handle-file-notify-add-watch" function (:arguments ("file-name" "flags" "_callback")) nil [40797 42664])
            ("tramp-gvfs-monitor-file-process-filter" function (:arguments ("proc" "string")) nil [42666 44544])
            ("tramp-gvfs-handle-file-readable-p" function (:arguments ("filename")) nil [44546 44792])
            ("tramp-gvfs-handle-file-system-info" function (:arguments ("filename")) nil [44794 45581])
            ("tramp-gvfs-handle-file-writable-p" function (:arguments ("filename")) nil [45583 46033])
            ("tramp-gvfs-handle-make-directory" function (:arguments ("dir" "parents")) nil [46035 46807])
            ("tramp-gvfs-handle-rename-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [46809 47479])
            ("tramp-gvfs-handle-write-region" function (:arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew")) nil [47481 49059])
            ("tramp-gvfs-url-file-name" function (:arguments ("filename")) nil [49090 50137])
            ("tramp-gvfs-object-path" function (:arguments ("filename")) nil [50139 50306])
            ("tramp-gvfs-file-name" function (:arguments ("object-path")) nil [50308 50498])
            ("tramp-bluez-address" function (:arguments ("device")) nil [50500 50763])
            ("tramp-bluez-device" function (:arguments ("address")) nil [50765 51216])
            ("tramp-gvfs-handler-askpassword" function (:arguments ("message" "user" "domain" "flags")) nil [51246 52996])
            ("tramp-gvfs-handler-askquestion" function (:arguments ("message" "choices")) nil [52998 54495])
            ("tramp-gvfs-handler-mounted-unmounted" function (:arguments ("mount-info")) nil [54497 57053])
            ("when" code nil nil [57055 57717])
            ("tramp-gvfs-connection-mounted-p" function (:arguments ("vec")) nil [57719 60617])
            ("tramp-gvfs-mount-spec-entry" function (:arguments ("key" "value")) nil [60619 61010])
            ("tramp-gvfs-mount-spec" function (:arguments ("vec")) nil [61012 63440])
            ("tramp-gvfs-get-remote-uid" function (:arguments ("vec" "id-format")) nil [63470 64319])
            ("tramp-gvfs-get-remote-gid" function (:arguments ("vec" "id-format")) nil [64321 65120])
            ("tramp-gvfs-get-remote-uid-gid-in-progress" variable nil nil [65122 65246])
            ("tramp-gvfs-maybe-open-connection" function (:arguments ("vec")) nil [65248 70268])
            ("tramp-gvfs-gio-tool-p" function (:arguments ("vec")) nil [70270 70466])
            ("tramp-gvfs-send-command" function (:arguments ("vec" "command" "args")) nil [70468 71436])
            ("tramp-bluez-list-devices" function nil nil [71467 72776])
            ("tramp-bluez-property-changed" function (:arguments ("property" "value")) nil [72778 73400])
            ("when" code nil nil [73402 73552])
            ("tramp-bluez-device-found" function (:arguments ("device" "args")) nil [73554 74029])
            ("when" code nil nil [74031 74173])
            ("tramp-bluez-parse-device-names" function (:arguments ("_ignore")) nil [74175 74357])
            ("when" code nil nil [74403 74582])
            ("tramp-zeroconf-parse-device-names" function (:arguments ("service")) nil [74616 75223])
            ("tramp-gvfs-parse-device-names" function (:arguments ("service")) nil [75362 76173])
            ("when" code nil nil [76245 77649])
            ("tramp-synce-list-devices" function nil nil [77680 78586])
            ("tramp-synce-parse-device-names" function (:arguments ("_ignore")) nil [78588 78764])
            ("when" code nil nil [78811 78920])
            ("add-hook" code nil nil [78922 79007])
            ("tramp-gvfs" package nil nil [79009 79030]))          
      :file "tramp-gvfs.el"
      :pointmax 79414
      :fsize 79413
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax '((close-paren 4238 . 4239) (symbol 4201 . 4218) (open-paren 4200 . 4201)))
    (semanticdb-table "semanticdb-table"
      :file "dbus.el"
      :fsize 68851
      :lastmodtime '(23525 29574 0 0))
    (semanticdb-table "semanticdb-table"
      :file "zeroconf.el"
      :fsize 24976
      :lastmodtime '(23525 29579 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp-version" variable
               (:constant-flag t
                :default-value "2.3.3.26.1")
                nil [1408 1472])
            ("tramp-bug-report-address" variable
               (:constant-flag t
                :default-value "tramp-devel@gnu.org")
                nil [1495 1594])
            ("tramp-repository-get-version" function nil nil [1596 2073])
            ("let" code nil nil [2103 2344])
            ("add-to-list" code nil nil [2387 2837])
            ("add-hook" code nil nil [2839 2922])
            ("trampver" package nil nil [2924 2943]))          
      :file "trampver.el"
      :pointmax 3037
      :fsize 3037
      :lastmodtime '(23525 29579 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "tramp-loaddefs.el"
      :fsize 57247
      :lastmodtime '(23525 29579 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1022 1038])
            ("declare-function" code nil nil [1065 1098])
            ("declare-function" code nil nil [1099 1144])
            ("declare-function" code nil nil [1145 1197])
            ("reporter-eval-buffer" variable nil nil [1198 1227])
            ("reporter-prompt-for-summary-p" variable nil nil [1228 1266])
            ("tramp-change-syntax" function
               (:user-visible-flag t
                :arguments ("syntax"))
                nil [1289 1744])
            ("tramp-list-tramp-buffers" function nil nil [1746 2019])
            ("tramp-list-remote-buffers" function nil nil [2021 2262])
            ("tramp-cleanup-connection" function
               (:user-visible-flag t
                :arguments ("vec" "keep-debug" "keep-password"))
                nil [2285 4371])
            ("tramp-cleanup-this-connection" function (:user-visible-flag t) nil [4394 4663])
            ("tramp-cleanup-all-connections" function (:user-visible-flag t) nil [4686 5135])
            ("tramp-cleanup-all-buffers" function (:user-visible-flag t) nil [5158 5479])
            ("tramp-version" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5557 5732])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [5857 5906])
            ("tramp-bug" function (:user-visible-flag t) nil [5929 7763])
            ("tramp-reporter-dump-variable" function (:arguments ("varsym" "mailbuf")) nil [7765 9173])
            ("tramp-load-report-modules" function nil nil [9175 9282])
            ("tramp-append-tramp-buffers" function nil nil [9284 12706])
            ("defalias" code nil nil [12708 12747])
            ("add-hook" code nil nil [12749 12829])
            ("tramp-cmds" package nil nil [12831 12852]))          
      :file "tramp-cmds.el"
      :pointmax 13337
      :fsize 13336
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [2115 2132])
            ("telnet-host-properties" variable nil nil [2134 2471])
            ("telnet-new-line" variable (:default-value "") nil [2473 2502])
            ("telnet-mode-map" variable (:default-value (let ((map (nconc (make-sparse-keymap) comint-mode-map))) (define-key map "" (quote telnet-send-input)) (define-key map "" (quote send-process-next-char)) (define-key map "" (quote telnet-interrupt-subjob)) (define-key map "" (quote telnet-c-z)) map)) nil [2503 2850])
            ("telnet-prompt-pattern" variable (:default-value "^[^#$%>
]*[#$%>] *") nil [2852 2904])
            ("telnet-replace-c-g" variable nil nil [2905 2936])
            ("make-variable-buffer-local" code nil nil [2937 3047])
            ("make-variable-buffer-local" code nil nil [3048 3139])
            ("telnet-count" variable nil nil [3141 3241])
            ("make-variable-buffer-local" code nil nil [3242 3284])
            ("telnet-program" variable (:default-value "telnet") nil [3286 3366])
            ("telnet-initial-count" variable (:default-value -50) nil [3368 3551])
            ("telnet-maximum-count" variable (:default-value 4) nil [3553 3824])
            ("telnet-interrupt-subjob" function (:user-visible-flag t) nil [3826 3997])
            ("telnet-c-z" function nil nil [3999 4071])
            ("send-process-next-char" function nil nil [4073 4334])
            ("telnet-check-software-type-initialize" function (:arguments ("string")) nil [4388 4992])
            ("telnet-initial-filter" function (:arguments ("proc" "string")) nil [4994 5846])
            ("telnet-simple-send" function (:arguments ("proc" "string")) nil [5941 6164])
            ("telnet-filter" function (:arguments ("proc" "string")) nil [6166 7212])
            ("telnet-send-input" function nil nil [7214 7443])
            ("telnet" function
               (:user-visible-flag t
                :arguments ("host" "port"))
                nil [7460 9496])
            ("put" code nil nil [9498 9537])
            ("define-derived-mode" code nil nil [9539 10088])
            ("rsh" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [10105 10605])
            ("telnet" package nil nil [10607 10624]))          
      :file "telnet.el"
      :pointmax 10650
      :fsize 10649
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1053 1069])
            ("custom" include nil nil [1117 1134])
            ("ange-ftp-ftp-name-arg" variable nil nil [1136 1166])
            ("ange-ftp-ftp-name-res" variable nil nil [1167 1197])
            ("ange-ftp-name-format" variable nil nil [1198 1227])
            ("tramp-disable-ange-ftp" function nil nil [1279 1917])
            ("eval-after-load" code nil nil [1919 2023])
            ("tramp-ftp-enable-ange-ftp" function nil nil [2040 3207])
            ("add-hook" code nil nil [3209 3269])
            ("tramp-ftp-method" variable
               (:constant-flag t
                :default-value "ftp")
                nil [3317 3416])
            ("add-to-list" code nil nil [3477 3533])
            ("add-to-list" code nil nil [3611 3698])
            ("add-to-list" code nil nil [3720 3825])
            ("eval-after-load" code nil nil [3891 4011])
            ("tramp-ftp-file-name-handler" function (:arguments ("operation" "args")) nil [4034 6959])
            ("tramp-ftp-file-name-p" function (:arguments ("filename")) nil [7118 7321])
            ("add-to-list" code nil nil [7344 7461])
            ("add-hook" code nil nil [7463 7547])
            ("tramp-ftp" package nil nil [7549 7569]))          
      :file "tramp-ftp.el"
      :pointmax 7655
      :fsize 7654
      :lastmodtime '(23525 29578 0 0)
      :unmatched-syntax '((close-paren 1134 . 1135) (symbol 1097 . 1114) (open-paren 1096 . 1097)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tramp" include nil nil [1021 1037])
            ("tramp-smb-method" variable
               (:constant-flag t
                :default-value "smb")
                nil [1085 1166])
            ("unless" code nil nil [1227 1797])
            ("add-to-list" code nil nil [1928 2023])
            ("eval-after-load" code nil nil [2089 2207])
            ("tramp-smb-program" variable (:default-value "smbclient") nil [2230 2352])
            ("tramp-smb-acl-program" variable (:default-value "smbcacls") nil [2375 2516])
            ("tramp-smb-conf" variable (:default-value "/dev/null") nil [2539 2810])
            ("tramp-smb-version" variable nil nil [2812 2880])
            ("tramp-smb-server-version" variable
               (:constant-flag t
                :default-value "Domain=\\[[^]]*\\] OS=\\[[^]]*\\] Server=\\[[^]]*\\]")
                nil [2882 3015])
            ("tramp-smb-prompt" variable
               (:constant-flag t
                :default-value "^\\(smb:\\|PS\\) .+> \\|^\\s-+Server\\s-+Comment$")
                nil [3017 3150])
            ("tramp-smb-wrong-passwd-regexp" variable
               (:constant-flag t
                :default-value (regexp-opt (quote ("NT_STATUS_LOGON_FAILURE" "NT_STATUS_WRONG_PASSWORD"))))
                nil [3152 3322])
            ("tramp-smb-errors" variable
               (:constant-flag t
                :default-value (mapconcat (quote identity) (\` ("Connection\\( to \\S-+\\)? failed" "Read from server failed, maybe it closed the connection" "Call timed out: server did not respond" "\\S-+: command not found" "Server doesn't support UNIX CIFS calls" (\, (regexp-opt (quote ("ERRDOS" "ERRHRD" "ERRSRV" "ERRbadfile" "ERRbadpw" "ERRfilexists" "ERRnoaccess" "ERRnomem" "ERRnosuchshare" "NT_STATUS_ACCESS_DENIED" "NT_STATUS_ACCOUNT_LOCKED_OUT" "NT_STATUS_BAD_NETWORK_NAME" "NT_STATUS_CANNOT_DELETE" "NT_STATUS_CONNECTION_DISCONNECTED" "NT_STATUS_CONNECTION_REFUSED" "NT_STATUS_DIRECTORY_NOT_EMPTY" "NT_STATUS_DUPLICATE_NAME" "NT_STATUS_FILE_IS_A_DIRECTORY" "NT_STATUS_HOST_UNREACHABLE" "NT_STATUS_IMAGE_ALREADY_LOADED" "NT_STATUS_INVALID_LEVEL" "NT_STATUS_INVALID_PARAMETER_MIX" "NT_STATUS_IO_TIMEOUT" "NT_STATUS_LOGON_FAILURE" "NT_STATUS_NETWORK_ACCESS_DENIED" "NT_STATUS_NOT_IMPLEMENTED" "NT_STATUS_NO_LOGON_SERVERS" "NT_STATUS_NO_SUCH_FILE" "NT_STATUS_NO_SUCH_USER" "NT_STATUS_OBJECT_NAME_COLLISION" "NT_STATUS_OBJECT_NAME_INVALID" "NT_STATUS_OBJECT_NAME_NOT_FOUND" "NT_STATUS_OBJECT_PATH_SYNTAX_BAD" "NT_STATUS_PASSWORD_MUST_CHANGE" "NT_STATUS_SHARING_VIOLATION" "NT_STATUS_TRUSTED_RELATIONSHIP_FAILURE" "NT_STATUS_UNSUCCESSFUL" "NT_STATUS_WRONG_PASSWORD")))))) "\\|"))
                nil [3324 5107])
            ("tramp-smb-actions-with-share" variable
               (:constant-flag t
                :default-value (quote ((tramp-smb-prompt tramp-action-succeed) (tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-process-alive))))
                nil [5109 5554])
            ("tramp-smb-actions-without-share" variable
               (:constant-flag t
                :default-value (quote ((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-action-out-of-band))))
                nil [5556 5958])
            ("tramp-smb-actions-with-tar" variable
               (:constant-flag t
                :default-value (quote ((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-with-tar))))
                nil [5960 6366])
            ("tramp-smb-actions-get-acl" variable
               (:constant-flag t
                :default-value (quote ((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-get-acl))))
                nil [6368 6760])
            ("tramp-smb-actions-set-acl" variable
               (:constant-flag t
                :default-value (quote ((tramp-password-prompt-regexp tramp-action-password) (tramp-wrong-passwd-regexp tramp-action-permission-denied) (tramp-smb-errors tramp-action-permission-denied) (tramp-process-alive-regexp tramp-smb-action-set-acl))))
                nil [6762 7154])
            ("tramp-smb-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((add-name-to-file . tramp-smb-handle-add-name-to-file) (copy-directory . tramp-smb-handle-copy-directory) (copy-file . tramp-smb-handle-copy-file) (delete-directory . tramp-smb-handle-delete-directory) (delete-file . tramp-smb-handle-delete-file) (directory-file-name . tramp-handle-directory-file-name) (directory-files . tramp-smb-handle-directory-files) (directory-files-and-attributes . tramp-handle-directory-files-and-attributes) (dired-compress-file . ignore) (dired-uncache . tramp-handle-dired-uncache) (expand-file-name . tramp-smb-handle-expand-file-name) (file-accessible-directory-p . tramp-smb-handle-file-directory-p) (file-acl . tramp-smb-handle-file-acl) (file-attributes . tramp-smb-handle-file-attributes) (file-directory-p . tramp-smb-handle-file-directory-p) (file-file-equal-p . tramp-handle-file-equal-p) (file-executable-p . tramp-handle-file-exists-p) (file-exists-p . tramp-handle-file-exists-p) (file-in-directory-p . tramp-handle-file-in-directory-p) (file-local-copy . tramp-smb-handle-file-local-copy) (file-modes . tramp-handle-file-modes) (file-name-all-completions . tramp-smb-handle-file-name-all-completions) (file-name-as-directory . tramp-handle-file-name-as-directory) (file-name-case-insensitive-p . tramp-handle-file-name-case-insensitive-p) (file-name-completion . tramp-handle-file-name-completion) (file-name-directory . tramp-handle-file-name-directory) (file-name-nondirectory . tramp-handle-file-name-nondirectory) (file-newer-than-file-p . tramp-handle-file-newer-than-file-p) (file-notify-add-watch . tramp-handle-file-notify-add-watch) (file-notify-rm-watch . tramp-handle-file-notify-rm-watch) (file-notify-valid-p . tramp-handle-file-notify-valid-p) (file-ownership-preserved-p . ignore) (file-readable-p . tramp-handle-file-exists-p) (file-regular-p . tramp-handle-file-regular-p) (file-remote-p . tramp-handle-file-remote-p) (file-selinux-context . tramp-handle-file-selinux-context) (file-symlink-p . tramp-handle-file-symlink-p) (file-system-info . tramp-smb-handle-file-system-info) (file-truename . tramp-handle-file-truename) (file-writable-p . tramp-smb-handle-file-writable-p) (find-backup-file-name . tramp-handle-find-backup-file-name) (insert-directory . tramp-smb-handle-insert-directory) (insert-file-contents . tramp-handle-insert-file-contents) (load . tramp-handle-load) (make-auto-save-file-name . tramp-handle-make-auto-save-file-name) (make-directory . tramp-smb-handle-make-directory) (make-directory-internal . tramp-smb-handle-make-directory-internal) (make-nearby-temp-file . tramp-handle-make-nearby-temp-file) (make-symbolic-link . tramp-smb-handle-make-symbolic-link) (process-file . tramp-smb-handle-process-file) (rename-file . tramp-smb-handle-rename-file) (set-file-acl . tramp-smb-handle-set-file-acl) (set-file-modes . tramp-smb-handle-set-file-modes) (set-file-selinux-context . ignore) (set-file-times . ignore) (set-visited-file-modtime . tramp-handle-set-visited-file-modtime) (shell-command . tramp-handle-shell-command) (start-file-process . tramp-smb-handle-start-file-process) (substitute-in-file-name . tramp-smb-handle-substitute-in-file-name) (temporary-file-directory . tramp-handle-temporary-file-directory) (unhandled-file-name-directory . ignore) (vc-registered . ignore) (verify-visited-file-modtime . tramp-handle-verify-visited-file-modtime) (write-region . tramp-smb-handle-write-region))))
                nil [7215 11403])
            ("tramp-smb-winexe-program" variable (:default-value "winexe") nil [11470 11737])
            ("tramp-smb-winexe-shell-command" variable (:default-value "powershell.exe") nil [11760 11981])
            ("tramp-smb-winexe-shell-command-switch" variable (:default-value "-file -") nil [12004 12241])
            ("tramp-smb-file-name-p" function (:arguments ("filename")) nil [12400 12582])
            ("tramp-smb-file-name-handler" function (:arguments ("operation" "args")) nil [12605 12962])
            ("unless" code nil nil [12985 13133])
            ("tramp-smb-handle-add-name-to-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [13161 14765])
            ("tramp-smb-action-with-tar" function (:arguments ("proc" "vec")) nil [14767 15277])
            ("tramp-smb-handle-copy-directory" function (:arguments ("dirname" "newname" "keep-date" "parents" "copy-contents")) nil [15279 20830])
            ("tramp-smb-handle-copy-file" function (:arguments ("filename" "newname" "ok-if-already-exists" "keep-date" "_preserve-uid-gid" "_preserve-extended-attributes")) nil [20832 22940])
            ("tramp-smb-handle-delete-directory" function (:arguments ("directory" "recursive" "_trash")) nil [22942 24126])
            ("tramp-smb-handle-delete-file" function (:arguments ("filename" "_trash")) nil [24128 24979])
            ("tramp-smb-handle-directory-files" function (:arguments ("directory" "full" "match" "nosort")) nil [24981 25602])
            ("tramp-smb-handle-expand-file-name" function (:arguments ("name" "dir")) nil [25604 26929])
            ("tramp-smb-action-get-acl" function (:arguments ("proc" "vec")) nil [26931 27600])
            ("tramp-smb-handle-file-acl" function (:arguments ("filename")) nil [27602 29729])
            ("tramp-smb-handle-file-attributes" function (:arguments ("filename" "id-format")) nil [29731 31235])
            ("tramp-smb-do-file-attributes-with-stat" function (:arguments ("vec" "id-format")) nil [31260 34521])
            ("tramp-smb-handle-file-directory-p" function (:arguments ("filename")) nil [34523 34747])
            ("tramp-smb-handle-file-local-copy" function (:arguments ("filename")) nil [34749 35507])
            ("tramp-smb-handle-file-name-all-completions" function (:arguments ("filename" "directory")) nil [35587 36100])
            ("tramp-smb-handle-file-system-info" function (:arguments ("filename")) nil [36102 37439])
            ("tramp-smb-handle-file-writable-p" function (:arguments ("filename")) nil [37441 37785])
            ("tramp-smb-handle-insert-directory" function (:arguments ("filename" "switches" "wildcard" "full-directory-p")) nil [37787 41968])
            ("tramp-smb-handle-make-directory" function (:arguments ("dir" "parents")) nil [41970 42669])
            ("tramp-smb-handle-make-directory-internal" function (:arguments ("directory")) nil [42671 43658])
            ("tramp-smb-handle-make-symbolic-link" function (:arguments ("target" "linkname" "ok-if-already-exists")) nil [43660 45713])
            ("tramp-smb-handle-process-file" function (:arguments ("program" "infile" "destination" "display" "args")) nil [45715 49574])
            ("tramp-smb-handle-rename-file" function (:arguments ("filename" "newname" "ok-if-already-exists")) nil [49576 51467])
            ("tramp-smb-action-set-acl" function (:arguments ("proc" "vec")) nil [51469 51812])
            ("tramp-smb-handle-set-file-acl" function (:arguments ("filename" "acl-string")) nil [51814 54564])
            ("tramp-smb-handle-set-file-modes" function (:arguments ("filename" "mode")) nil [54566 54990])
            ("tramp-smb-handle-start-file-process" function (:arguments ("name" "buffer" "program" "args")) nil [55154 56931])
            ("tramp-smb-handle-substitute-in-file-name" function (:arguments ("filename")) nil [56933 57709])
            ("tramp-smb-handle-write-region" function (:arguments ("start" "end" "filename" "append" "visit" "lockname" "mustbenew")) nil [57711 59398])
            ("tramp-smb-get-share" function (:arguments ("vec")) nil [59435 59677])
            ("tramp-smb-get-localname" function (:arguments ("vec")) nil [59679 60548])
            ("tramp-smb-get-file-entries" function (:arguments ("directory")) nil [60655 62304])
            ("tramp-smb-read-file-entry" function (:arguments ("share")) nil [64412 67157])
            ("tramp-smb-get-cifs-capabilities" function (:arguments ("vec")) nil [67159 67808])
            ("tramp-smb-get-stat-capability" function (:arguments ("vec")) nil [67810 68198])
            ("tramp-smb-send-command" function (:arguments ("vec" "command")) nil [68227 68519])
            ("tramp-smb-maybe-open-connection" function (:arguments ("vec" "argument")) nil [68521 74861])
            ("tramp-smb-wait-for-output" function (:arguments ("vec")) nil [74931 76470])
            ("tramp-smb-kill-winexe-function" function nil nil [76472 76698])
            ("tramp-smb-call-winexe" function (:arguments ("vec")) nil [76700 77982])
            ("tramp-smb-shell-quote-argument" function (:arguments ("s")) nil [77984 78169])
            ("add-hook" code nil nil [78171 78255])
            ("tramp-smb" package nil nil [78257 78277]))          
      :file "tramp-smb.el"
      :pointmax 78555
      :fsize 78554
      :lastmodtime '(23525 29579 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!net!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
