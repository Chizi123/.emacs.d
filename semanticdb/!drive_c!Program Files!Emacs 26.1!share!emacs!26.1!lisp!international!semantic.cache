;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mule-version" variable
               (:constant-flag t
                :default-value "6.0 (HANACHIRUSATO)")
                nil [1316 1441])
            ("mule-version-date" variable
               (:constant-flag t
                :default-value "2003.9.1")
                nil [1443 1556])
            ("private-char-area-1-min" variable (:default-value 983040) nil [1638 1678])
            ("private-char-area-1-max" variable (:default-value 1048574) nil [1679 1719])
            ("private-char-area-2-min" variable (:default-value 1048576) nil [1720 1761])
            ("private-char-area-2-max" variable (:default-value 1114110) nil [1762 1803])
            ("emacs-mule-charset-table" variable (:default-value (make-vector 256 nil)) nil [1869 1924])
            ("aset" code nil nil [1925 1965])
            ("convert-define-charset-argument" function (:arguments ("emacs-mule-id" "info-vector")) nil [2226 3604])
            ("define-charset" function (:arguments ("name" "docstring" "props")) nil [3606 10440])
            ("load-with-code-conversion" function (:arguments ("fullname" "file" "noerror" "nomessage")) nil [10443 12942])
            ("charset-info" function (:arguments ("charset")) nil [12944 14478])
            ("charset-id" function (:arguments ("_charset")) nil [14649 14783])
            ("charset-bytes" function (:arguments ("_charset")) nil [14785 14925])
            ("get-charset-property" function (:arguments ("charset" "propname")) nil [14927 15157])
            ("put-charset-property" function (:arguments ("charset" "propname" "value")) nil [15159 15477])
            ("charset-description" function (:arguments ("charset")) nil [15479 15607])
            ("charset-dimension" function (:arguments ("charset")) nil [15609 15726])
            ("charset-chars" function (:arguments ("charset" "dimension")) nil [15728 16096])
            ("charset-iso-final-char" function (:arguments ("charset")) nil [16098 16298])
            ("charset-short-name" function (:arguments ("charset")) nil [16300 16423])
            ("charset-long-name" function (:arguments ("charset")) nil [16425 16545])
            ("charset-list" function nil nil [16547 16674])
            ("define-obsolete-function-alias" code nil nil [16692 16757])
            ("generic-char-p" function (:arguments ("_char")) nil [16759 16898])
            ("make-char-internal" function (:arguments ("charset-id" "code1" "code2")) nil [16900 17133])
            ("ascii-case-table" variable (:default-value (let ((tbl (copy-sequence (standard-case-table))) (up (char-table-extra-slot (standard-case-table) 0))) (if up (set-char-table-extra-slot tbl 0 (copy-sequence up))) (set-char-table-extra-slot tbl 1 nil) (set-char-table-extra-slot tbl 2 nil) tbl)) nil [17342 17748])
            ("coding-system-iso-2022-flags" variable
               (:constant-flag t
                :default-value (quote (long-form ascii-at-eol ascii-at-cntl 7-bit locking-shift single-shift designation revision direction init-at-bol designate-at-bol safe latin-extra composition euc-tw-shift use-roman use-oldjis 8-bit-level-4)))
                nil [17870 20840])
            ("define-coding-system" function (:arguments ("name" "docstring" "props")) nil [20842 33014])
            ("coding-system-doc-string" function (:arguments ("coding-system")) nil [33016 33180])
            ("coding-system-mnemonic" function (:arguments ("coding-system")) nil [33182 33471])
            ("coding-system-type" function (:arguments ("coding-system")) nil [33473 33755])
            ("coding-system-charset-list" function (:arguments ("coding-system")) nil [33757 34067])
            ("coding-system-category" function (:arguments ("coding-system")) nil [34069 34222])
            ("coding-system-get" function (:arguments ("coding-system" "prop")) nil [34224 34840])
            ("coding-system-eol-type-mnemonic" function (:arguments ("coding-system")) nil [34842 35249])
            ("coding-system-lessp" function (:arguments ("x" "y")) nil [35251 35634])
            ("coding-system-equal" function (:arguments ("coding-system-1" "coding-system-2")) nil [35636 36224])
            ("add-to-coding-system-list" function (:arguments ("coding-system")) nil [36226 36838])
            ("coding-system-list" function (:arguments ("base-only")) nil [36840 37488])
            ("char-coding-system-table" variable (:constant-flag t) nil [37490 37605])
            ("make-obsolete-variable" code nil nil [37606 37667])
            ("transform-make-coding-system-args" function (:arguments ("name" "type" "doc-string" "props")) nil [37669 40644])
            ("make-coding-system" function (:arguments ("coding-system" "type" "mnemonic" "doc-string" "flags" "properties" "eol-type")) nil [40646 43996])
            ("merge-coding-systems" function (:arguments ("first" "second")) nil [43998 44677])
            ("autoload-coding-system" function (:arguments ("symbol" "form")) nil [44679 45206])
            ("buffer-file-coding-system-explicit" variable nil nil [45930 46153])
            ("make-variable-buffer-local" code nil nil [46154 46218])
            ("put" code nil nil [46219 46279])
            ("read-buffer-file-coding-system" function nil nil [46281 49116])
            ("set-buffer-file-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force" "nomodify"))
                nil [49118 51248])
            ("revert-buffer-with-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force"))
                nil [51250 52177])
            ("set-file-name-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [52179 52769])
            ("default-terminal-coding-system" variable nil nil [52771 52984])
            ("set-terminal-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [52986 54074])
            ("default-keyboard-coding-system" variable nil nil [54076 54288])
            ("set-keyboard-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [54290 56832])
            ("keyboard-coding-system" variable nil nil [56834 57696])
            ("set-buffer-process-coding-system" function
               (:user-visible-flag t
                :arguments ("decoding" "encoding"))
                nil [57698 58416])
            ("defalias" code nil nil [58418 58486])
            ("set-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [58488 58865])
            ("last-next-selection-coding-system" variable nil nil [58953 58999])
            ("set-next-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [59001 59711])
            ("set-coding-priority" function (:arguments ("arg")) nil [59713 60055])
            ("ctext-non-standard-encodings-alist" variable (:default-value (mapcar (quote purecopy) (quote (("big5-0" big5 2 big5) ("ISO8859-14" iso-8859-14 1 latin-iso8859-14) ("ISO8859-15" iso-8859-15 1 latin-iso8859-15) ("gbk-0" gbk 2 chinese-gbk) ("koi8-r" koi8-r 1 koi8-r) ("microsoft-cp1251" windows-1251 1 windows-1251))))) nil [60075 61400])
            ("ctext-non-standard-encodings" variable nil nil [61402 61630])
            ("ctext-non-standard-encodings-regexp" variable (:default-value (purecopy (string-to-multibyte (concat "\\(%/[0-4][\200-\377][\200-\377]\\([^]+\\)\\)" "\\|" "\\(%G[^]*%@\\)")))) nil [61632 61886])
            ("ctext-post-read-conversion" function (:arguments ("len")) nil [62127 63771])
            ("ctext-standard-encodings" variable (:default-value (quote (ascii latin-jisx0201 katakana-jisx0201 latin-iso8859-1 latin-iso8859-2 latin-iso8859-3 latin-iso8859-4 greek-iso8859-7 arabic-iso8859-6 hebrew-iso8859-8 cyrillic-iso8859-5 latin-iso8859-9 chinese-gb2312 japanese-jisx0208 korean-ksc5601))) nil [63773 64503])
            ("ctext-non-standard-encodings-table" function nil nil [65081 65801])
            ("ctext-pre-write-conversion" function (:arguments ("from" "to")) nil [65803 68388])
            ("auto-coding-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . no-conversion-multibyte) ("\\.\\(exe\\|EXE\\)\\'" . no-conversion) ("\\.\\(sx[dmicw]\\|odt\\|tar\\|t[bg]z\\)\\'" . no-conversion) ("\\.\\(gz\\|Z\\|bz\\|bz2\\|xz\\|gpg\\)\\'" . no-conversion) ("\\.\\(jpe?g\\|png\\|gif\\|tiff?\\|p[bpgn]m\\)\\'" . no-conversion) ("\\.pdf\\'" . no-conversion) ("/#[^/]+#\\'" . utf-8-emacs-unix))))) nil [68484 69698])
            ("auto-coding-regexp-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\`BABYL OPTIONS:[ 	]*-\\*-[ 	]*rmail[ 	]*-\\*-" . no-conversion) ("\\`\376\377" . utf-16be-with-signature) ("\\`\377\376" . utf-16le-with-signature) ("\\`\357\273\277" . utf-8-with-signature) ("\\`;ELC   " . emacs-mule))))) nil [69700 70534])
            ("auto-coding-regexp-alist-lookup" function (:arguments ("from" "to")) nil [70536 71147])
            ("auto-coding-functions" variable (:default-value (quote (sgml-xml-auto-coding-function sgml-html-meta-auto-coding-function))) nil [71216 71997])
            ("set-auto-coding-for-load" variable nil nil [71999 72190])
            ("auto-coding-alist-lookup" function (:arguments ("filename")) nil [72192 72605])
            ("put" code nil nil [72607 72661])
            ("put" code nil nil [72662 72728])
            ("find-auto-coding" function (:arguments ("filename" "size")) nil [72730 79063])
            ("set-auto-coding" function (:arguments ("filename" "size")) nil [79065 79495])
            ("setq" code nil nil [79497 79545])
            ("after-insert-file-set-coding" function (:arguments ("inserted" "visit")) nil [79547 80414])
            ("find-new-buffer-file-coding-system" function (:arguments ("coding")) nil [80604 82639])
            ("modify-coding-system-alist" function (:arguments ("target-type" "regexp" "coding-system")) nil [82641 84927])
            ("decode-coding-inserted-region" function (:arguments ("from" "to" "filename" "visit" "beg" "end" "replace")) nil [84929 86926])
            ("recode-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "new-coding" "coding"))
                nil [86928 87737])
            ("make-translation-table" function (:arguments ("args")) nil [87739 89226])
            ("make-translation-table-from-vector" function (:arguments ("vec")) nil [89228 89843])
            ("make-translation-table-from-alist" function (:arguments ("alist")) nil [89845 91583])
            ("define-translation-table" function (:arguments ("symbol" "args")) nil [91585 92980])
            ("translate-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "table"))
                nil [92982 94018])
            ("with-category-table" function (:arguments ("table" "body")) nil [94020 94659])
            ("define-translation-hash-table" function (:arguments ("symbol" "table")) nil [94661 95615])
            ("put" code nil nil [95649 95700])
            ("setq" code nil nil [95701 95764])
            ("put" code nil nil [95765 95825])
            ("setq" code nil nil [95826 95913])
            ("sgml-xml-auto-coding-function" function (:arguments ("size")) nil [95952 98131])
            ("sgml-html-meta-auto-coding-function" function (:arguments ("size")) nil [98133 99332])
            ("xml-find-file-coding-system" function (:arguments ("args")) nil [99334 100664])
            ("mule" package nil nil [100670 100685]))          
      :file "mule.el"
      :pointmax 100709
      :fsize 100708
      :lastmodtime '(23525 29560 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1273 4295])
            ("font-encoding-charset-alist" variable nil nil [4297 4333])
            ("setq" code nil nil [4335 5044])
            ("setq" code nil nil [5046 7390])
            ("otf-script-alist" variable nil nil [7392 7417])
            ("setq" code nil nil [7552 10732])
            ("declare-function" code nil nil [11644 11702])
            ("declare-function" code nil nil [11703 11798])
            ("build-default-fontset-data" function nil nil [12286 14270])
            ("setup-default-fontset" function nil nil [14274 29162])
            ("create-default-fontset" function nil nil [29164 29463])
            ("set-font-encoding" function (:arguments ("pattern" "charset")) nil [34815 35092])
            ("x-pixel-size-width-font-regexp" variable nil nil [35094 35133])
            ("vertical-centering-font-regexp" variable nil nil [35134 35173])
            ("setq" code nil nil [35231 35349])
            ("setq" code nil nil [35394 35523])
            ("put" code nil nil [35524 35620])
            ("setq" code nil nil [35682 35757])
            ("x-font-name-charset-alist" variable nil nil [35759 35874])
            ("xlfd-regexp-family-subnum" variable (:constant-flag t) nil [35983 36021])
            ("xlfd-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [36044 36082])
            ("xlfd-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [36098 36135])
            ("xlfd-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [36145 36183])
            ("xlfd-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [36201 36240])
            ("xlfd-regexp-pixelsize-subnum" variable
               (:constant-flag t
                :default-value 5)
                nil [36259 36300])
            ("xlfd-regexp-pointsize-subnum" variable
               (:constant-flag t
                :default-value 6)
                nil [36314 36355])
            ("xlfd-regexp-resx-subnum" variable
               (:constant-flag t
                :default-value 7)
                nil [36369 36405])
            ("xlfd-regexp-resy-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [36422 36458])
            ("xlfd-regexp-spacing-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [36475 36514])
            ("xlfd-regexp-avgwidth-subnum" variable
               (:constant-flag t
                :default-value 10)
                nil [36526 36567])
            ("xlfd-regexp-registry-subnum" variable
               (:constant-flag t
                :default-value 11)
                nil [36584 36625])
            ("xlfd-tight-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*-[^-]*\\)$")
                nil [36845 37042])
            ("xlfd-style-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-.*-\\([^-]*-[^-]*\\)$")
                nil [37289 37415])
            ("xlfd-regexp-numeric-subnums" variable
               (:constant-flag t
                :default-value (list xlfd-regexp-pixelsize-subnum xlfd-regexp-pointsize-subnum xlfd-regexp-resx-subnum xlfd-regexp-resy-subnum xlfd-regexp-avgwidth-subnum))
                nil [37476 37681])
            ("x-decompose-font-name" function (:arguments ("pattern")) nil [37683 38352])
            ("x-compose-font-name" function (:arguments ("fields" "_reduce")) nil [38354 38696])
            ("x-must-resolve-font-name" function (:arguments ("xlfd-fields")) nil [38699 39493])
            ("x-complement-fontset-spec" function (:arguments ("default-spec" "fontlist")) nil [39496 40166])
            ("fontset-name-p" function (:arguments ("fontset")) nil [40168 40738])
            ("declare-function" code nil nil [40740 40786])
            ("generate-fontset-menu" function nil nil [40788 41197])
            ("declare-function" code nil nil [41199 41271])
            ("fontset-plain-name" function (:arguments ("fontset")) nil [41273 42791])
            ("charset-script-alist" variable (:default-value (quote ((ascii . latin) (latin-iso8859-1 . latin) (latin-iso8859-2 . latin) (latin-iso8859-3 . latin) (latin-iso8859-4 . latin) (latin-iso8859-9 . latin) (latin-iso8859-10 . latin) (latin-iso8859-13 . latin) (latin-iso8859-14 . latin) (latin-iso8859-15 . latin) (latin-iso8859-16 . latin) (latin-jisx0201 . latin) (thai-tis620 . thai) (cyrillic-iso8859-5 . cyrillic) (arabic-iso8859-6 . arabic) (greek-iso8859-7 . latin) (hebrew-iso8859-8 . latin) (katakana-jisx0201 . kana) (chinese-gb2312 . han) (chinese-gbk . han) (gb18030-2-byte . han) (gb18030-4-byte-bmp . han) (gb18030-4-byte-ext-1 . han) (gb18030-4-byte-ext-2 . han) (gb18030-4-byte-smp . han) (chinese-big5-1 . han) (chinese-big5-2 . han) (chinese-cns11643-1 . han) (chinese-cns11643-2 . han) (chinese-cns11643-3 . han) (chinese-cns11643-4 . han) (chinese-cns11643-5 . han) (chinese-cns11643-6 . han) (chinese-cns11643-7 . han) (japanese-jisx0208 . han) (japanese-jisx0208-1978 . han) (japanese-jisx0212 . han) (japanese-jisx0213-1 . han) (japanese-jisx0213-2 . han) (korean-ksc5601 . hangul) (chinese-sisheng . bopomofo) (vietnamese-viscii-lower . latin) (vietnamese-viscii-upper . latin) (arabic-digit . arabic) (arabic-1-column . arabic) (arabic-2-column . arabic) (indian-is13194 . devanagari) (indian-glyph . devanagari) (indian-1-column . devanagari) (indian-2-column . devanagari) (tibetan-1-column . tibetan)))) nil [42793 44564])
            ("create-fontset-from-fontset-spec" function (:arguments ("fontset-spec" "_style-variant" "_noerror")) nil [44566 46647])
            ("create-fontset-from-ascii-font" function (:arguments ("font" "resolved-font" "fontset-name")) nil [46649 47843])
            ("standard-fontset-spec" variable (:default-value (purecopy "-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard")) nil [48072 48417])
            ("declare-function" code nil nil [48623 48717])
            ("create-fontset-from-x-resource" function nil nil [48719 49131])
            ("fontset" package nil nil [49136 49154]))          
      :file "fontset.el"
      :pointmax 49181
      :fsize 49180
      :lastmodtime '(23525 29559 0 0)
      :unmatched-syntax '((close-paren 14271 . 14272) (symbol 11801 . 11818) (open-paren 11800 . 11801)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1259 1276])
            ("dos-codepage" variable nil nil [1279 1300])
            ("widget-value" function (:prototype-flag t) nil [1301 1336])
            ("mule-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote set-buffer-file-coding-system)) (define-key map "r" (quote revert-buffer-with-coding-system)) (define-key map "F" (quote set-file-name-coding-system)) (define-key map "t" (quote set-terminal-coding-system)) (define-key map "k" (quote set-keyboard-coding-system)) (define-key map "p" (quote set-buffer-process-coding-system)) (define-key map "x" (quote set-selection-coding-system)) (define-key map "X" (quote set-next-selection-coding-system)) (define-key map "" (quote set-input-method)) (define-key map "c" (quote universal-coding-system-argument)) (define-key map "l" (quote set-language-environment)) map)) nil [1380 2115])
            ("define-key" code nil nil [2167 2208])
            ("describe-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Describe Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" describe-specified-language-support))) map)) nil [2210 2435])
            ("setup-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Set Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" setup-specified-language-environment))) map)) nil [2437 2655])
            ("set-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap "Set Coding System"))) (bindings--define-key map [set-buffer-process-coding-system] (quote (menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote make-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer"))) (bindings--define-key map [set-next-selection-coding-system] (quote (menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation"))) (bindings--define-key map [set-selection-coding-system] (quote (menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard"))) (bindings--define-key map [separator-3] menu-bar-separator) (bindings--define-key map [set-terminal-coding-system] (quote (menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output"))) (bindings--define-key map [set-keyboard-coding-system] (quote (menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input"))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [set-file-name-coding-system] (quote (menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names"))) (bindings--define-key map [revert-buffer-with-coding-system] (quote (menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system"))) (bindings--define-key map [set-buffer-file-coding-system] (quote (menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved"))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [universal-coding-system-argument] (quote (menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command"))) map)) nil [2657 4976])
            ("mule-menu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Mule (Multilingual Environment)"))) (bindings--define-key map [mule-diag] (quote (menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings"))) (bindings--define-key map [list-character-sets] (quote (menu-item "List Character Sets" list-character-sets :help "Show table of available character sets"))) (bindings--define-key map [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system))) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for a specific input method"))) (bindings--define-key map [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map) :help "Show multilingual settings for a specific language"))) (bindings--define-key map [separator-coding-system] menu-bar-separator) (bindings--define-key map [view-hello-file] (quote (menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets"))) (bindings--define-key map [set-various-coding-system] (\` (menu-item "Set Coding Systems" (\, set-coding-system-map) :enable (default-value (quote enable-multibyte-characters))))) (bindings--define-key map [separator-input-method] menu-bar-separator) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method" describe-input-method))) (bindings--define-key map [set-input-method] (quote (menu-item "Select Input Method..." set-input-method))) (bindings--define-key map [toggle-input-method] (quote (menu-item "Toggle Input Method" toggle-input-method))) (bindings--define-key map [separator-mule] menu-bar-separator) (bindings--define-key map [set-language-environment] (\` (menu-item "Set Language Environment" (\, setup-language-environment-map)))) map)) nil [4978 7169])
            ("define-key" code nil nil [7551 7603])
            ("help-xref-mule-regexp-template" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(" "\\(coding system\\)\\|" "\\(input method\\)\\|" "\\(character set\\)\\|" "\\(charset\\)" "\\)\\s-+\\)?" "['`‘]\\(\\sw\\(\\sw\\|\\s_\\)+\\)['’]")))
                nil [7846 8153])
            ("coding-system-change-eol-conversion" function (:arguments ("coding-system" "eol-type")) nil [8155 9394])
            ("coding-system-change-text-conversion" function (:arguments ("coding-system" "coding")) nil [9396 9946])
            ("canonicalize-coding-system-name" function (:arguments ("name")) nil [10096 10869])
            ("coding-system-from-name" function (:arguments ("name")) nil [10871 11608])
            ("toggle-enable-multibyte-characters" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11610 12413])
            ("view-hello-file" function (:user-visible-flag t) nil [12415 12688])
            ("universal-coding-system-argument" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [12690 14622])
            ("set-default-coding-systems" function (:arguments ("coding-system")) nil [14624 16540])
            ("prefer-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [16542 18461])
            ("sort-coding-systems-predicate" variable nil nil [18463 18715])
            ("sort-coding-systems" function (:arguments ("codings")) nil [18717 21402])
            ("find-coding-systems-region" function (:arguments ("from" "to")) nil [21404 22090])
            ("find-coding-systems-string" function (:arguments ("string")) nil [22092 22415])
            ("find-coding-systems-for-charsets" function (:arguments ("charsets")) nil [22417 23667])
            ("find-multibyte-characters" function (:arguments ("from" "to" "maxcount" "excludes")) nil [23669 25420])
            ("search-unencodable-char" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [25422 26172])
            ("last-coding-system-specified" variable nil nil [26174 26567])
            ("select-safe-coding-system-accept-default-p" variable nil nil [26569 26857])
            ("sanitize-coding-system-list" function (:arguments ("codings")) nil [26859 28027])
            ("select-safe-coding-system-interactively" function (:arguments ("from" "to" "codings" "unsafe" "rejected" "default")) nil [28029 33249])
            ("select-safe-coding-system" function (:arguments ("from" "to" "default-coding-system" "accept-default-p" "file")) nil [33251 42938])
            ("setq" code nil nil [42940 43008])
            ("select-message-coding-system" function nil nil [43010 44104])
            ("language-info-alist" variable nil nil [44136 46451])
            ("get-language-info" function (:arguments ("lang-env" "key")) nil [46453 46893])
            ("set-language-info" function (:arguments ("lang-env" "key" "info")) nil [46895 48043])
            ("set-language-info-internal" function (:arguments ("lang-env" "key" "info")) nil [48045 48893])
            ("set-language-info-alist" function (:arguments ("lang-env" "alist" "parents")) nil [48895 51359])
            ("read-language-name" function (:arguments ("key" "prompt" "default")) nil [51361 51956])
            ("leim" customgroup (:user-visible-flag t) nil [51991 52069])
            ("leim-list-file-name" variable
               (:constant-flag t
                :default-value "leim-list.el")
                nil [52071 52320])
            ("leim-list-header" variable
               (:constant-flag t
                :default-value (format-message ";;; %s -- list of LEIM (Library of Emacs Input Method) -*-coding: utf-8;-*-
;;
;; This file is automatically generated.
;;
;; This file contains a list of LEIM (Library of Emacs Input Method)
;; methods in the same directory as this file.  Loading this file
;; registers all the input methods in Emacs.
;;
;; Each entry has the form:
;;   (register-input-method
;;    INPUT-METHOD LANGUAGE-NAME ACTIVATE-FUNC
;;    TITLE DESCRIPTION
;;    ARG ...)
;; See the function `register-input-method' for the meanings of the arguments.
;;
;; If this directory is included in `load-path', Emacs automatically
;; loads this file at startup time.

" leim-list-file-name))
                nil [52322 53075])
            ("leim-list-entry-regexp" variable
               (:constant-flag t
                :default-value "^(register-input-method")
                nil [53077 53236])
            ("update-leim-list-functions" variable (:default-value (quote (quail-update-leim-list-file))) nil [53238 53421])
            ("update-leim-list-file" function (:arguments ("dirs")) nil [53423 53587])
            ("current-input-method" variable nil nil [53589 53727])
            ("make-variable-buffer-local" code nil nil [53728 53778])
            ("put" code nil nil [53779 53825])
            ("current-input-method-title" variable nil nil [53827 53931])
            ("make-variable-buffer-local" code nil nil [53932 53988])
            ("put" code nil nil [53989 54041])
            ("define-widget" code nil nil [54043 54337])
            ("default-input-method" variable nil nil [54339 54728])
            ("put" code nil nil [54730 54777])
            ("input-method-history" variable nil nil [54779 54967])
            ("make-variable-buffer-local" code nil nil [54968 55018])
            ("put" code nil nil [55019 55065])
            ("define-obsolete-variable-alias" code nil nil [55067 55194])
            ("deactivate-current-input-method-function" variable nil nil [55195 55561])
            ("make-variable-buffer-local" code nil nil [55562 55632])
            ("put" code nil nil [55633 55699])
            ("describe-current-input-method-function" variable nil nil [55701 55856])
            ("make-variable-buffer-local" code nil nil [55857 55925])
            ("put" code nil nil [55926 55990])
            ("input-method-alist" variable nil nil [55992 56248])
            ("put" code nil nil [56264 56313])
            ("register-input-method" function (:arguments ("input-method" "lang-env" "args")) nil [56315 58037])
            ("read-input-method-name" function (:arguments ("prompt" "default" "inhibit-null")) nil [58039 59211])
            ("activate-input-method" function (:arguments ("input-method")) nil [59213 60478])
            ("deactivate-input-method" function nil nil [60480 61143])
            ("define-obsolete-function-alias" code nil nil [61145 61238])
            ("set-input-method" function
               (:user-visible-flag t
                :arguments ("input-method" "interactive"))
                nil [61240 62309])
            ("toggle-input-method-active" variable nil nil [62311 62392])
            ("toggle-input-method" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [62394 64118])
            ("help-buffer" function (:prototype-flag t) nil [64120 64155])
            ("describe-input-method" function
               (:user-visible-flag t
                :arguments ("input-method"))
                nil [64157 65275])
            ("describe-current-input-method" function nil nil [65277 65759])
            ("read-multilingual-string" function (:arguments ("prompt" "initial-input" "input-method")) nil [65761 66685])
            ("input-method-verbose-flag" variable (:default-value (quote default)) nil [66794 67723])
            ("input-method-highlight-flag" variable (:default-value t) nil [67725 68132])
            ("input-method-activate-hook" variable nil nil [68134 68347])
            ("define-obsolete-variable-alias" code nil nil [68349 68452])
            ("input-method-deactivate-hook" variable nil nil [68454 68697])
            ("input-method-after-insert-chunk-hook" variable nil nil [68699 68854])
            ("input-method-exit-on-first-char" variable nil nil [68856 69233])
            ("input-method-use-echo-area" variable nil nil [69235 69611])
            ("input-method-exit-on-invalid-key" variable nil nil [69613 70009])
            ("set-language-environment-hook" variable nil nil [70013 70374])
            ("exit-language-environment-hook" variable nil nil [70376 70740])
            ("put" code nil nil [70742 70804])
            ("setup-specified-language-environment" function (:user-visible-flag t) nil [70806 71284])
            ("current-language-environment" variable (:default-value "English") nil [71286 72176])
            ("reset-language-environment" function (:user-visible-flag t) nil [72178 74981])
            ("reset-language-environment" code nil nil [74983 75011])
            ("set-display-table-and-terminal-coding-system" function (:arguments ("language-name" "coding-system" "display")) nil [75013 75796])
            ("set-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [75798 78047])
            ("define-widget" code nil nil [78049 78528])
            ("language-info-custom-alist" variable nil nil [78530 80333])
            ("declare-function" code nil nil [80335 80399])
            ("declare-function" code nil nil [80400 80465])
            ("standard-display-european-internal" function nil nil [80467 81830])
            ("set-language-environment-coding-systems" function (:arguments ("language-name")) nil [81832 83314])
            ("set-language-environment-input-method" function (:arguments ("language-name")) nil [83316 83732])
            ("set-language-environment-nonascii-translation" function (:arguments ("language-name")) nil [83734 84489])
            ("set-language-environment-charset" function (:arguments ("language-name")) nil [84491 85064])
            ("set-language-environment-unibyte" function (:arguments ("language-name")) nil [85066 85260])
            ("princ-list" function (:arguments ("args")) nil [85262 85448])
            ("put" code nil nil [85450 85511])
            ("describe-specified-language-support" function (:user-visible-flag t) nil [85800 86267])
            ("describe-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [86269 89745])
            ("locale-translation-file-name" variable nil nil [89762 89879])
            ("locale-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote (("aa_DJ" . "Latin-1") ("aa" . "UTF-8") ("af" . "Latin-1") ("am" "Ethiopic" utf-8) ("an" . "Latin-9") ("ar" . "Arabic") ("az" . "UTF-8") ("be" "Belarusian" cp1251) ("bg" "Bulgarian" cp1251) ("bn" . "UTF-8") ("bo" . "Tibetan") ("br" . "Latin-1") ("bs" . "Latin-2") ("byn" . "UTF-8") ("ca" "Catalan" iso-8859-1) ("cs" "Czech" iso-8859-2) ("cy" "Welsh" iso-8859-14) ("da" . "Latin-1") ("de" "German" iso-8859-1) ("el" "Greek" iso-8859-7) ("en_IN" "English" utf-8) ("en" "English" iso-8859-1) ("eo" . "Esperanto") ("es" "Spanish" iso-8859-1) ("et" . "Latin-1") ("eu" . "Latin-1") ("fa" . "UTF-8") ("fi" . "Latin-1") ("fj" . "Latin-1") ("fo" . "Latin-1") ("fr" "French" iso-8859-1) ("fy" . "Latin-1") ("ga" . "Latin-1") ("gd" . "Latin-9") ("gez" "Ethiopic" utf-8) ("gl" . "Latin-1") ("gu" . "UTF-8") ("gv" . "Latin-1") ("he" "Hebrew" iso-8859-8) ("hi" "Devanagari" utf-8) ("hr" "Croatian" iso-8859-2) ("hu" . "Latin-2") ("id" . "Latin-1") ("is" . "Latin-1") ("it" "Italian" iso-8859-1) ("iw" "Hebrew" iso-8859-8) ("ja" "Japanese" euc-jp) ("ka" "Georgian" georgian-ps) ("kl" . "Latin-1") ("kn" "Kannada" utf-8) ("ko" "Korean" euc-kr) ("kw" . "Latin-1") ("la" . "Latin-1") ("lb" . "Latin-1") ("lg" . "Laint-6") ("lo" "Lao" utf-8) ("lt" "Lithuanian" iso-8859-13) ("lv" . "Latvian") ("mi" . "Latin-7") ("mk" "Cyrillic-ISO" iso-8859-5) ("ml" "Malayalam" utf-8) ("mn" . "UTF-8") ("mr" "Devanagari" utf-8) ("ms" . "Latin-1") ("mt" . "Latin-3") ("nb" . "Latin-1") ("ne" "Devanagari" utf-8) ("nl" "Dutch" iso-8859-1) ("no" . "Latin-1") ("oc" . "Latin-1") ("om_ET" . "UTF-8") ("om" . "Latin-1") ("pa" . "UTF-8") ("pl" . "Latin-2") ("pt" . "Latin-1") ("rm" . "Latin-1") ("ro" "Romanian" iso-8859-2) ("ru_RU" "Russian" iso-8859-5) ("ru_UA" "Russian" koi8-u) ("sa" . "Devanagari") ("se" . "UTF-8") ("sh" . "Latin-2") ("sid" . "UTF-8") ("sk" "Slovak" iso-8859-2) ("sl" "Slovenian" iso-8859-2) ("so_ET" "UTF-8") ("so" "Latin-1") ("sq" . "Latin-1") ("sr" . "Latin-2") ("st" . "Latin-1") ("sv" "Swedish" iso-8859-1) ("sw" . "Latin-1") ("ta" "Tamil" utf-8) ("te" . "UTF-8") ("tg" "Tajik" koi8-t) ("th" "Thai" tis-620) ("ti" "Ethiopic" utf-8) ("tig_ER" . "UTF-8") ("tl" . "Latin-1") ("tr" "Turkish" iso-8859-9) ("tt" . "UTF-8") ("uk" "Ukrainian" koi8-u) ("ur" . "UTF-8") ("uz_UZ@cyrillic" . "UTF-8") ("uz" . "Latin-1") ("vi" "Vietnamese" utf-8) ("wa" . "Latin-1") ("xh" . "Latin-1") ("yi" . "Windows-1255") ("zh_HK" . "Chinese-Big5") ("zh_TW" . "Chinese-Big5") ("zh_CN.GB2312" "Chinese-GB") ("zh_CN.GBK" "Chinese-GBK") ("zh_CN.GB18030" "Chinese-GB18030") ("zh_CN.UTF-8" . "Chinese-GBK") ("zh_CN" . "Chinese-GB") ("zh" . "Chinese-GB") ("zu" . "Latin-1") ("c$" . "ASCII") ("posix$" . "ASCII") ("ipa$" . "IPA") ("cz" . "Czech") ("ee" . "Latin-4") ("iw" . "Hebrew") ("sp" . "Cyrillic-ISO") ("su" . "Latin-1") ("jp" . "Japanese") ("chs" . "Chinese-GBK") ("cht" . "Chinese-BIG5") ("gbz" . "UTF-8") ("div" . "UTF-8") ("wee" . "Latin-2") ("wen" . "Latin-2")))))
                nil [90071 97657])
            ("locale-charset-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . "Latin-1") (".*8859[-_]?2\\>" . "Latin-2") (".*8859[-_]?3\\>" . "Latin-3") (".*8859[-_]?4\\>" . "Latin-4") (".*8859[-_]?9\\>" . "Latin-5") (".*8859[-_]?14\\>" . "Latin-8") (".*8859[-_]?15\\>" . "Latin-9") (".*utf\\(?:-?8\\)?\\>" . "UTF-8") (".*@euro\\>" . "Latin-9")))))
                nil [97659 98459])
            ("locale-preferred-coding-systems" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . iso-8859-1) (".*8859[-_]?2\\>" . iso-8859-2) (".*8859[-_]?3\\>" . iso-8859-3) (".*8859[-_]?4\\>" . iso-8859-4) (".*8859[-_]?9\\>" . iso-8859-9) (".*8859[-_]?14\\>" . iso-8859-14) (".*8859[-_]?15\\>" . iso-8859-15) (".*utf\\(?:-?8\\)?" . utf-8) (".*@euro" . iso-8859-15) ("koi8-?r" . koi8-r) ("koi8-?u" . koi8-u) ("tcvn" . tcvn) ("big5[-_]?hkscs" . big5-hkscs) ("big5" . big5) ("euc-?tw" . euc-tw) ("euc-?cn" . euc-cn) ("gb2312" . gb2312) ("gbk" . gbk) ("gb18030" . gb18030) ("ja.*[._]euc" . japanese-iso-8bit) ("ja.*[._]jis7" . iso-2022-jp) ("ja.*[._]pck" . japanese-shift-jis) ("ja.*[._]sjis" . japanese-shift-jis) ("jpn" . japanese-shift-jis)))))
                nil [98461 99737])
            ("locale-name-match" function (:arguments ("key" "alist")) nil [99739 100173])
            ("locale-charset-match-p" function (:arguments ("charset1" "charset2")) nil [100175 100626])
            ("locale-charset-alist" variable nil nil [100628 100764])
            ("locale-charset-to-coding-system" function (:arguments ("charset")) nil [100766 101554])
            ("declare-function" code nil nil [101723 101781])
            ("declare-function" code nil nil [101782 101847])
            ("locale-translate" function (:arguments ("locale")) nil [101849 102360])
            ("set-locale-environment" function
               (:user-visible-flag t
                :arguments ("locale-name" "frame"))
                nil [102362 111653])
            ("put" code nil nil [111680 111737])
            ("define-char-code-property" function (:arguments ("name" "table" "docstring")) nil [111739 113377])
            ("char-code-property-table" variable (:default-value (make-char-table (quote char-code-property-table))) nil [113379 113685])
            ("get-char-code-property" function (:arguments ("char" "propname")) nil [113687 114095])
            ("put-char-code-property" function (:arguments ("char" "propname" "value")) nil [114097 114681])
            ("char-code-property-description" function (:arguments ("prop" "value")) nil [114683 115037])
            ("iso-2022-control-alist" variable
               (:constant-flag t
                :default-value (quote ((27 . "ESC") (14 . "SO") (15 . "SI") (142 . "SS2") (143 . "SS3") (155 . "CSI"))))
                nil [115154 115306])
            ("encoded-string-description" function (:arguments ("str" "coding-system")) nil [115308 115796])
            ("encode-coding-char" function (:arguments ("char" "coding-system" "charset")) nil [115798 117263])
            ("define-minor-mode" code nil nil [117363 117482])
            ("make-obsolete" code nil nil [117550 117617])
            ("define-minor-mode" code nil nil [117619 117738])
            ("make-obsolete" code nil nil [117806 117873])
            ("nonascii-insert-offset" variable nil nil [117875 117908])
            ("make-obsolete-variable" code nil nil [117909 117981])
            ("nonascii-translation-table" variable nil nil [117982 118021])
            ("make-obsolete-variable" code nil nil [118022 118098])
            ("ucs-names" variable nil nil [118100 118183])
            ("ucs-names" function nil nil [118185 120216])
            ("mule--ucs-names-annotation" function (:arguments ("name")) nil [120218 120574])
            ("char-from-name" function (:arguments ("string" "ignore-case")) nil [120576 121715])
            ("read-char-by-name" function (:arguments ("prompt")) nil [121717 123282])
            ("define-obsolete-function-alias" code nil nil [123284 123348])
            ("define-key" code nil nil [123349 123390]))          
      :file "mule-cmds.el"
      :pointmax 123419
      :fsize 123422
      :lastmodtime '(23525 29559 0 0)
      :unmatched-syntax '((close-paren 1276 . 1277) (symbol 1241 . 1258) (open-paren 1240 . 1241)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-category" code nil nil [1329 1412])
            ("define-category" code nil nil [1413 1441])
            ("define-category" code nil nil [1442 1469])
            ("define-category" code nil nil [1470 1498])
            ("define-category" code nil nil [1499 1528])
            ("define-category" code nil nil [1529 1558])
            ("define-category" code nil nil [1559 1590])
            ("define-category" code nil nil [1591 1640])
            ("define-category" code nil nil [1641 1684])
            ("define-category" code nil nil [1685 1715])
            ("define-category" code nil nil [1716 1747])
            ("define-category" code nil nil [1748 1777])
            ("define-category" code nil nil [1778 1826])
            ("define-category" code nil nil [1827 1865])
            ("define-category" code nil nil [1866 1895])
            ("define-category" code nil nil [1896 1922])
            ("define-category" code nil nil [1923 1953])
            ("define-category" code nil nil [2006 2091])
            ("define-category" code nil nil [2092 2175])
            ("define-category" code nil nil [2176 2253])
            ("define-category" code nil nil [2254 2346])
            ("define-category" code nil nil [2347 2439])
            ("define-category" code nil nil [2440 2526])
            ("define-category" code nil nil [2527 2610])
            ("define-category" code nil nil [2611 2647])
            ("define-category" code nil nil [2683 2715])
            ("define-category" code nil nil [2716 2774])
            ("define-category" code nil nil [2775 2860])
            ("define-category" code nil nil [2861 2946])
            ("define-category" code nil nil [2947 3004])
            ("define-category" code nil nil [3005 3034])
            ("define-category" code nil nil [3035 3063])
            ("define-category" code nil nil [3064 3135])
            ("define-category" code nil nil [3136 3170])
            ("define-category" code nil nil [3171 3209])
            ("define-category" code nil nil [3227 3318])
            ("define-category" code nil nil [3352 3453])
            ("define-category" code nil nil [3535 3624])
            ("define-category" code nil nil [3625 3708])
            ("define-category" code nil nil [3732 3813])
            ("define-category" code nil nil [3814 3903])
            ("define-category" code nil nil [3919 4079])
            ("define-category" code nil nil [4081 4237])
            ("modify-category-entry" code nil nil [4356 4394])
            ("modify-category-entry" code nil nil [4395 4433])
            ("modify-category-entry" code nil nil [4684 4729])
            ("modify-category-entry" code nil nil [4730 4775])
            ("modify-category-entry" code nil nil [4776 4821])
            ("modify-category-entry" code nil nil [4822 4867])
            ("modify-category-entry" code nil nil [4868 4913])
            ("modify-category-entry" code nil nil [4914 4959])
            ("modify-category-entry" code nil nil [4960 5005])
            ("modify-category-entry" code nil nil [5006 5051])
            ("modify-category-entry" code nil nil [5052 5097])
            ("modify-category-entry" code nil nil [5098 5145])
            ("modify-category-entry" code nil nil [5146 5193])
            ("modify-category-entry" code nil nil [5194 5241])
            ("modify-category-entry" code nil nil [5242 5289])
            ("map-charset-chars" code nil nil [5327 5402])
            ("map-charset-chars" code nil nil [5403 5478])
            ("map-charset-chars" code nil nil [5479 5554])
            ("map-charset-chars" code nil nil [5556 5618])
            ("map-charset-chars" code nil nil [5619 5695])
            ("map-charset-chars" code nil nil [5696 5772])
            ("map-charset-chars" code nil nil [5773 5849])
            ("map-charset-chars" code nil nil [5850 5926])
            ("map-charset-chars" code nil nil [5927 6003])
            ("map-charset-chars" code nil nil [6004 6080])
            ("map-charset-chars" code nil nil [6081 6157])
            ("map-charset-chars" code nil nil [6158 6234])
            ("map-charset-chars" code nil nil [6269 6321])
            ("map-charset-chars" code nil nil [6322 6388])
            ("map-charset-chars" code nil nil [6389 6455])
            ("map-charset-chars" code nil nil [6456 6522])
            ("dolist" code nil nil [6561 6928])
            ("map-charset-chars" code nil nil [6998 7063])
            ("map-charset-chars" code nil nil [7065 7127])
            ("dolist" code nil nil [7129 7378])
            ("modify-category-entry" code nil nil [7404 7450])
            ("let" code nil nil [7492 7633])
            ("modify-category-entry" code nil nil [7653 7698])
            ("modify-category-entry" code nil nil [7699 7744])
            ("modify-category-entry" code nil nil [7745 7790])
            ("modify-category-entry" code nil nil [7791 7837])
            ("modify-category-entry" code nil nil [7838 7872])
            ("modify-category-entry" code nil nil [7892 7937])
            ("modify-category-entry" code nil nil [7938 7984])
            ("modify-category-entry" code nil nil [7985 8019])
            ("modify-category-entry" code nil nil [8020 8053])
            ("modify-category-entry" code nil nil [8054 8087])
            ("modify-category-entry" code nil nil [8089 8136])
            ("map-charset-chars" code nil nil [8151 8229])
            ("map-charset-chars" code nil nil [8230 8308])
            ("let" code nil nil [8309 8420])
            ("map-charset-chars" code nil nil [8422 8501])
            ("map-charset-chars" code nil nil [8502 8581])
            ("map-charset-chars" code nil nil [8582 8661])
            ("map-charset-chars" code nil nil [8662 8741])
            ("map-charset-chars" code nil nil [8742 8821])
            ("map-charset-chars" code nil nil [8822 8901])
            ("let" code nil nil [8902 9020])
            ("map-charset-chars" code nil nil [9035 9113])
            ("let" code nil nil [9133 9247])
            ("modify-syntax-entry" code nil nil [9249 9279])
            ("modify-syntax-entry" code nil nil [9280 9310])
            ("map-charset-chars" code nil nil [9347 9409])
            ("map-charset-chars" code nil nil [9411 9486])
            ("map-charset-chars" code nil nil [9487 9562])
            ("map-charset-chars" code nil nil [9563 9638])
            ("map-charset-chars" code nil nil [9639 9714])
            ("map-charset-chars" code nil nil [9715 9791])
            ("map-charset-chars" code nil nil [9792 9868])
            ("map-charset-chars" code nil nil [9869 9945])
            ("map-charset-chars" code nil nil [9946 10022])
            ("map-charset-chars" code nil nil [10023 10099])
            ("map-charset-chars" code nil nil [10100 10176])
            ("map-charset-chars" code nil nil [10177 10253])
            ("let" code nil nil [10294 10617])
            ("let" code nil nil [10644 10859])
            ("modify-category-entry" code nil nil [10860 10903])
            ("modify-category-entry" code nil nil [10904 10947])
            ("modify-category-entry" code nil nil [10948 10993])
            ("modify-category-entry" code nil nil [10994 11039])
            ("modify-syntax-entry" code nil nil [11081 11109])
            ("modify-category-entry" code nil nil [11138 11183])
            ("modify-category-entry" code nil nil [11184 11229])
            ("let" code nil nil [11230 11359])
            ("map-charset-chars" code nil nil [11360 11416])
            ("modify-syntax-entry" code nil nil [11456 11487])
            ("modify-syntax-entry" code nil nil [11496 11527])
            ("modify-syntax-entry" code nil nil [11536 11567])
            ("modify-syntax-entry" code nil nil [11580 11611])
            ("modify-syntax-entry" code nil nil [11621 11652])
            ("modify-category-entry" code nil nil [11743 11786])
            ("map-charset-chars" code nil nil [11787 11849])
            ("map-charset-chars" code nil nil [11850 11913])
            ("modify-category-entry" code nil nil [11937 11980])
            ("map-charset-chars" code nil nil [11981 12032])
            ("let" code nil nil [12034 12844])
            ("modify-category-entry" code nil nil [12878 12921])
            ("map-charset-chars" code nil nil [12922 12981])
            ("let" code nil nil [12983 13796])
            ("modify-category-entry" code nil nil [13824 13867])
            ("map-charset-chars" code nil nil [13868 13923])
            ("map-charset-chars" code nil nil [13924 13988])
            ("let" code nil nil [13990 15138])
            ("map-charset-chars" code nil nil [15209 15280])
            ("map-charset-chars" code nil nil [15281 15352])
            ("map-charset-chars" code nil nil [15354 15425])
            ("map-charset-chars" code nil nil [15426 15497])
            ("let" code nil nil [15499 15942])
            ("let" code nil nil [15956 16622])
            ("let" code nil nil [16717 17001])
            ("unicode-property-table-internal" code nil nil [17324 17368])
            ("unicode-property-table-internal" code nil nil [17369 17416])
            ("modify-category-entry" code nil nil [17428 17471])
            ("let" code nil nil [17473 25185])
            ("let" code nil nil [25187 26718])
            ("let" code nil nil [26891 28825])
            ("set-char-table-range" code nil nil [28939 28998])
            ("set-char-table-range" code nil nil [28999 29058])
            ("set-char-table-range" code nil nil [29059 29118])
            ("set-char-table-range" code nil nil [29119 29178])
            ("set-char-table-range" code nil nil [29179 29238])
            ("set-char-table-range" code nil nil [29239 29300])
            ("let" code nil nil [29453 35654])
            ("let" code nil nil [35705 37864])
            ("map-charset-chars" code nil nil [38109 38220])
            ("map-charset-chars" code nil nil [38221 38332])
            ("cjk-char-width-table-list" variable (:default-value (quote ((ja_JP nil (japanese-jisx0208 (8481 . 10366)) (cp932-2-byte (33088 . 34719))) (zh_CN nil (chinese-gb2312 (8481 . 10622))) (zh_HK nil (big5-hkscs (41280 . 41982) (50848 . 51454))) (zh_TW nil (big5 (41280 . 41982)) (chinese-cns11643-1 (8481 . 17022))) (ko_KR nil (korean-ksc5601 (8481 . 11390)))))) nil [38764 39149])
            ("use-cjk-char-width-table" function (:arguments ("locale-name")) nil [39281 40086])
            ("use-default-char-width-table" function nil nil [40088 40331])
            ("optimize-char-table" code nil nil [40333 40376])
            ("optimize-char-table" code nil nil [40377 40422])
            ("if" code nil nil [40456 40624])
            ("map-charset-chars" code nil nil [40626 40744])
            ("when" code nil nil [40785 41177])
            ("optimize-char-table" code nil nil [41179 41226])
            ("char-acronym-table" variable (:default-value (make-char-table (quote char-acronym-table) nil)) nil [41267 41393])
            ("let" code nil nil [41395 41740])
            ("let" code nil nil [41742 42101])
            ("aset" code nil nil [42103 42143])
            ("aset" code nil nil [42172 42212])
            ("aset" code nil nil [42241 42280])
            ("aset" code nil nil [42303 42342])
            ("aset" code nil nil [42370 42408])
            ("aset" code nil nil [42432 42470])
            ("aset" code nil nil [42495 42533])
            ("aset" code nil nil [42558 42596])
            ("aset" code nil nil [42626 42664])
            ("aset" code nil nil [42694 42732])
            ("aset" code nil nil [42765 42803])
            ("aset" code nil nil [42832 42870])
            ("aset" code nil nil [42899 42936])
            ("aset" code nil nil [42954 42992])
            ("aset" code nil nil [43025 43063])
            ("aset" code nil nil [43097 43136])
            ("aset" code nil nil [43170 43209])
            ("aset" code nil nil [43244 43283])
            ("aset" code nil nil [43311 43350])
            ("aset" code nil nil [43377 43418])
            ("aset" code nil nil [43448 43486])
            ("aset" code nil nil [43522 43560])
            ("aset" code nil nil [43600 43638])
            ("aset" code nil nil [43679 43720])
            ("aset" code nil nil [43750 43791])
            ("aset" code nil nil [43819 43861])
            ("aset" code nil nil [43889 43928])
            ("aset" code nil nil [43957 43999])
            ("aset" code nil nil [44028 44070])
            ("aset" code nil nil [44097 44139])
            ("aset" code nil nil [44170 44212])
            ("aset" code nil nil [44241 44283])
            ("aset" code nil nil [44299 44341])
            ("dotimes" code nil nil [44354 44440])
            ("aset" code nil nil [44441 44483])
            ("update-glyphless-char-display" function (:arguments ("variable" "value")) nil [44498 46248])
            ("glyphless-set-char-table-range" function (:arguments ("chartable" "from" "to" "method")) nil [46250 46529])
            ("glyphless-char-display-control" variable (:default-value (quote ((format-control . thin-space) (no-font . hex-code)))) nil [46579 49471])
            ("setq" code nil nil [49503 49589])
            ("setq" code nil nil [49591 49696]))          
      :file "characters.el"
      :pointmax 49772
      :fsize 50486
      :lastmodtime '(23525 29558 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!international!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
