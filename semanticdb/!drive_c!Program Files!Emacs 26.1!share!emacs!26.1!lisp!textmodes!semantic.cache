;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("enriched" package nil nil [1607 1626])
            ("enriched" customgroup (:user-visible-flag t) nil [1675 1762])
            ("enriched-verbose" variable (:default-value t) nil [1764 1899])
            ("fixed" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [2108 2397])
            ("excerpt" variable
               (:default-value (quote ((t (:slant italic))))
                :type "face")
                nil [2399 2597])
            ("enriched-display-table" variable
               (:constant-flag t
                :default-value (or (copy-sequence standard-display-table) (make-display-table)))
                nil [2599 2706])
            ("aset" code nil nil [2707 2776])
            ("enriched-par-props" variable
               (:constant-flag t
                :default-value (quote (left-margin right-margin justification)))
                nil [2778 2972])
            ("enriched-initial-annotation" variable
               (:constant-flag t
                :default-value (lambda nil (format "Content-Type: text/enriched
Text-Width: %d

" fill-column)))
                nil [3043 3369])
            ("enriched-annotation-format" variable
               (:constant-flag t
                :default-value "<%s%s>")
                nil [3371 3466])
            ("enriched-annotation-regexp" variable
               (:constant-flag t
                :default-value "<\\(/\\)?\\([-A-Za-z0-9]+\\)>")
                nil [3468 3596])
            ("enriched-translations" variable (:default-value (quote ((face (bold-italic "bold" "italic") (bold "bold") (italic "italic") (underline "underline") (fixed "fixed") (excerpt "excerpt") (default) (nil enriched-encode-other-face)) (left-margin (4 "indent")) (right-margin (4 "indentright")) (justification (none "nofill") (right "flushright") (left "flushleft") (full "flushboth") (center "center")) (PARAMETER (t "param")) (FUNCTION (enriched-decode-foreground "x-color") (enriched-decode-background "x-bg-color") (enriched-decode-display-prop "x-display")) (read-only (t "x-read-only")) (display (nil enriched-handle-display-prop)) (unknown (nil format-annotate-value))))) nil [3598 4829])
            ("enriched-ignore" variable
               (:constant-flag t
                :default-value (quote (front-sticky rear-nonsticky hard)))
                nil [4831 5074])
            ("enriched-mode-hook" variable nil nil [5100 5428])
            ("enriched-allow-eval-in-display-props" variable nil nil [5430 6138])
            ("enriched-old-bindings" variable nil nil [6140 6289])
            ("make-variable-buffer-local" code nil nil [6290 6341])
            ("enriched-default-text-properties-local-flag" variable (:default-value t) nil [6608 6662])
            ("enriched-rerun-flag" variable nil nil [6859 6891])
            ("enriched-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line-text)) (define-key map "" (quote reindent-then-newline-and-indent)) (define-key map [remap newline-and-indent] (quote reindent-then-newline-and-indent)) (define-key map "\352" (quote facemenu-justification-menu)) (define-key map "\323" (quote set-justification-center)) (define-key map "	" (quote increase-left-margin)) (define-key map "[" (quote set-left-margin)) (define-key map "]" (quote set-right-margin)) map)) nil [6918 7501])
            ("put" code nil nil [7532 7571])
            ("define-minor-mode" code nil nil [7587 9950])
            ("enriched-before-change-major-mode" function nil nil [9952 10121])
            ("enriched-after-change-major-mode" function nil nil [10123 10249])
            ("add-hook" code nil nil [10251 10325])
            ("fset" code nil nil [10328 10371])
            ("enriched-map-property-regions" function (:arguments ("prop" "func" "from" "to")) nil [10454 11444])
            ("put" code nil nil [11446 11502])
            ("enriched-insert-indentation" function (:arguments ("from" "to")) nil [11504 11935])
            ("enriched-encode" function (:arguments ("from" "to" "orig-buf")) nil [11980 13149])
            ("enriched-make-annotation" function (:arguments ("internal-ann" "positive")) nil [13151 13874])
            ("enriched-encode-other-face" function (:arguments ("old" "new")) nil [13876 14120])
            ("enriched-face-ans" function (:arguments ("face")) nil [14122 15194])
            ("enriched-decode" function (:arguments ("from" "to")) nil [15239 16305])
            ("enriched-next-annotation" function nil nil [16307 17165])
            ("enriched-get-file-width" function nil nil [17167 17355])
            ("enriched-remove-header" function nil nil [17357 17563])
            ("enriched-decode-foreground" function (:arguments ("from" "to" "color")) nil [17565 17757])
            ("enriched-decode-background" function (:arguments ("from" "to" "color")) nil [17759 17954])
            ("enriched-handle-display-prop" function (:arguments ("old" "new")) nil [17996 18547])
            ("enriched-decode-display-prop" function (:arguments ("start" "end" "param")) nil [18549 19202]))          
      :file "enriched.el"
      :pointmax 19230
      :fsize 19229
      :lastmodtime '(23525 29607 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4484 4501])
            ("subr-x" include nil nil [4522 4539])
            ("mail-yank-prefix" variable nil nil [4542 4567])
            ("ispell" customgroup (:user-visible-flag t) nil [4569 4660])
            ("defalias" code nil nil [4662 4716])
            ("ispell-highlight-p" variable (:default-value (quote block)) nil [5034 5270])
            ("ispell-lazy-highlight" variable (:default-value (boundp (quote lazy-highlight-cleanup))) nil [5272 5665])
            ("ispell-highlight-face" variable (:default-value (if ispell-lazy-highlight (quote isearch) (quote highlight))) nil [5667 5969])
            ("ispell-check-comments" variable (:default-value t) nil [5971 6332])
            ("put" code nil nil [6348 6443])
            ("ispell-query-replace-choices" variable nil nil [6445 6634])
            ("ispell-skip-tib" variable nil nil [6636 7069])
            ("ispell-tib-ref-beginning" variable (:default-value "[[<]\\.") nil [7071 7168])
            ("ispell-tib-ref-end" variable (:default-value "\\.[]>]") nil [7170 7255])
            ("ispell-keep-choices-win" variable (:default-value t) nil [7257 7441])
            ("ispell-choices-win-default-height" variable (:default-value 2) nil [7443 7621])
            ("ispell-program-name" variable (:default-value (or (executable-find "aspell") (executable-find "ispell") (executable-find "hunspell") "ispell")) nil [7891 8289])
            ("ispell-alternate-dictionary" variable (:default-value (cond ((file-readable-p "/usr/dict/web2") "/usr/dict/web2") ((file-readable-p "/usr/share/dict/web2") "/usr/share/dict/web2") ((file-readable-p "/usr/dict/words") "/usr/dict/words") ((file-readable-p "/usr/lib/dict/words") "/usr/lib/dict/words") ((file-readable-p "/usr/share/dict/words") "/usr/share/dict/words") ((file-readable-p "/usr/share/lib/dict/words") "/usr/share/lib/dict/words") ((file-readable-p "/sys/dict") "/sys/dict"))) nil [8291 8899])
            ("ispell-complete-word-dict" variable nil nil [8901 9111])
            ("ispell-message-dictionary-alist" variable nil nil [9113 9615])
            ("ispell-message-fcc-skip" variable (:default-value 50000) nil [9618 9848])
            ("ispell-grep-command" variable (:default-value "grep") nil [9851 9975])
            ("ispell-grep-options" variable (:default-value "-Ei") nil [9977 10157])
            ("ispell-look-command" variable (:default-value (cond ((file-exists-p "/bin/look") "/bin/look") ((file-exists-p "/usr/local/bin/look") "/usr/local/bin/look") ((file-exists-p "/usr/bin/look") "/usr/bin/look") (t "look"))) nil [10159 10485])
            ("ispell-look-p" variable (:default-value (file-exists-p ispell-look-command)) nil [10487 10689])
            ("ispell-have-new-look" variable nil nil [10691 10829])
            ("ispell-look-options" variable (:default-value (if ispell-have-new-look "-dfr" "-df")) nil [10831 10991])
            ("ispell-use-ptys-p" variable nil nil [10993 11150])
            ("ispell-following-word" variable nil nil [11152 11345])
            ("ispell-help-in-bufferp" variable nil nil [11347 11931])
            ("ispell-quietly" variable nil nil [11933 12051])
            ("ispell-format-word-function" variable (:default-value (function upcase)) nil [12053 12274])
            ("defvaralias" code nil nil [12275 12337])
            ("ispell-use-framepop-p" variable nil nil [12339 12711])
            ("ispell-personal-dictionary" variable nil nil [12728 12975])
            ("ispell-silently-savep" variable nil nil [12977 13124])
            ("ispell-local-dictionary-overridden" variable nil nil [13126 13252])
            ("make-variable-buffer-local" code nil nil [13253 13317])
            ("ispell-local-dictionary" variable nil nil [13319 13968])
            ("put" code nil nil [13984 14053])
            ("make-variable-buffer-local" code nil nil [14055 14108])
            ("ispell-dictionary" variable nil nil [14110 14282])
            ("ispell-extra-args" variable nil nil [14284 14605])
            ("ispell-skip-html" variable (:default-value (quote use-mode-name)) nil [14609 15021])
            ("make-variable-buffer-local" code nil nil [15023 15069])
            ("ispell-local-dictionary-alist" variable nil nil [15072 16047])
            ("ispell-dictionary-base-alist" variable (:default-value (quote ((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[^A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[']" nil nil nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("castellano" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B") "~tex" iso-8859-1) ("castellano8" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "[^A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "" nil ("-B") nil iso-8859-2) ("dansk" "[A-Z\306\330\305a-z\346\370\345]" "[^A-Z\306\330\305a-z\346\370\345]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[^A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[-']" t ("-C") "~latin3" iso-8859-3) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-3) ("finnish" "[A-Za-z\345\344\366\305\304\326]" "[^A-Za-z\345\344\366\305\304\326]" "[:]" nil ("-C") "~list" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^-]" t nil nil iso-8859-1) ("francais" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[-'.@]" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[-'^`\".@]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[^A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[-.]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[^A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[\"]" nil nil "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[^A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[.]" nil nil nil iso-8859-2) ("portugues" "[a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[^a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[']" t ("-C") "~latin1" iso-8859-1) ("russiannil nil nil koi8-r) ("russianw" "[\300\301\302\303\304\305\250\306\307\310\311\312\313\314\315\316\317\320\321\322\323\324\325\326\327\330\331\334\333\332\335\336\337\340\341\342\343\344\345\270\346\347\350\351\352\353\354\355\356\357\360\361\362\363\364\365\366\367\370\371\374\373\372\375\376\377]" "[^\300\301\302\303\304\305\250\306\307\310\311\312\313\314\315\316\317\320\321\322\323\324\325\326\327\330\331\334\333\332\335\336\337\340\341\342\343\344\345\270\346\347\350\351\352\353\354\355\356\357\360\361\362\363\364\365\366\367\370\371\374\373\372\375\376\377]" "" nil nil nil windows-1251) ("slovak" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B") nil iso-8859-2) ("slovenian" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B" "-d" "slovenian") nil iso-8859-2) ("svenska" "[A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[^A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[']" nil ("-C") "~list" iso-8859-1) ("hebrew" "[\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "[^\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "" nil ("-B") nil cp1255)))) nil [16050 24588])
            ("ispell-dictionary-alist" variable nil nil [24590 27149])
            ("ispell-really-aspell" variable nil nil [27151 27229])
            ("ispell-really-hunspell" variable nil nil [27230 27312])
            ("ispell-really-enchant" variable nil nil [27313 27393])
            ("ispell-encoding8-command" variable nil nil [27394 28053])
            ("ispell-aspell-supports-utf8" variable nil nil [28055 28354])
            ("make-obsolete-variable" code nil nil [28356 28466])
            ("ispell-dicts-name2locale-equivs-alist" variable (:default-value (quote (("american" "en_US") ("brasileiro" "pt_BR") ("british" "en_GB") ("castellano" "es_ES") ("castellano8" "es_ES") ("czech" "cs_CZ") ("dansk" "da_DK") ("deutsch" "de_DE") ("deutsch8" "de_DE") ("english" "en_US") ("esperanto" "eo") ("esperanto-tex" "eo") ("finnish" "fi_FI") ("francais7" "fr_FR") ("francais" "fr_FR") ("francais-tex" "fr_FR") ("german" "de_DE") ("german8" "de_DE") ("italiano" "it_IT") ("nederlands" "nl_NL") ("nederlands8" "nl_NL") ("norsk" "nn_NO") ("norsk7-tex" "nn_NO") ("polish" "pl_PL") ("portugues" "pt_PT") ("russian" "ru_RU") ("russianw" "ru_RU") ("slovak" "sk_SK") ("slovenian" "sl_SI") ("svenska" "sv_SE") ("hebrew" "he_IL")))) nil [28468 29538])
            ("ispell-check-version" function
               (:user-visible-flag t
                :arguments ("interactivep"))
                nil [29757 34062])
            ("ispell-call-process" function (:arguments ("args")) nil [34064 34367])
            ("ispell-call-process-region" function (:arguments ("args")) nil [34369 34693])
            ("ispell-debug-buffer" variable nil nil [34695 34723])
            ("ispell-create-debug-buffer" function (:arguments ("append")) nil [34725 35264])
            ("ispell-print-if-debug" function (:arguments ("format" "args")) nil [35266 35551])
            ("ispell-menu-map" variable nil nil [35771 35826])
            ("setq" code nil nil [35892 35918])
            ("ispell-menu-map-needed" variable (:default-value (unless ispell-menu-map (quote reload))) nil [35957 36023])
            ("ispell-library-directory" variable (:default-value (condition-case nil (ispell-check-version) (error nil))) nil [36025 36177])
            ("ispell-process" variable nil nil [36179 36241])
            ("ispell-async-processp" variable (:default-value (and (fboundp (quote delete-process)) (fboundp (quote process-send-string)) (fboundp (quote accept-process-output)))) nil [36243 36446])
            ("ispell-aspell-dictionary-alist" variable nil nil [36492 36612])
            ("ispell-find-aspell-dictionaries" function nil nil [36614 37637])
            ("ispell-aspell-data-dir" variable nil nil [37639 37704])
            ("ispell-aspell-dict-dir" variable nil nil [37706 37777])
            ("ispell-get-aspell-config-value" function (:arguments ("key")) nil [37779 38050])
            ("ispell-aspell-find-dictionary" function (:arguments ("dict-name")) nil [38052 40602])
            ("ispell-aspell-add-aliases" function (:arguments ("alist")) nil [40604 41802])
            ("ispell-hunspell-dict-paths-alist" variable nil nil [41850 42107])
            ("ispell-hunspell-dictionary-alist" variable nil nil [42109 42361])
            ("ispell-hunspell-fill-dictionary-entry" function (:arguments ("dict")) nil [42363 43987])
            ("ispell-parse-hunspell-affix-file" function (:arguments ("dict-key")) nil [43989 46743])
            ("ispell-hunspell-add-multi-dic" function
               (:user-visible-flag t
                :arguments ("dict"))
                nil [46745 47684])
            ("ispell-find-hunspell-dictionaries" function nil nil [47686 51644])
            ("ispell-enchant-dictionary-alist" variable nil nil [51691 51813])
            ("ispell--call-enchant-lsmod" function (:arguments ("args")) nil [51815 52109])
            ("ispell--get-extra-word-characters" function (:arguments ("lang")) nil [52111 52522])
            ("ispell-find-enchant-dictionaries" function nil nil [52524 53554])
            ("ispell-last-program-name" variable nil nil [53610 53703])
            ("ispell-base-dicts-override-alist" variable nil nil [53842 53883])
            ("ispell-initialize-spellchecker-hook" variable nil nil [53885 54428])
            ("ispell-set-spellchecker-params" function nil nil [54430 59619])
            ("ispell-valid-dictionary-list" function nil nil [59621 61047])
            ("if" code nil nil [61134 63135])
            ("if" code nil nil [63152 63917])
            ("if" code nil nil [63934 64627])
            ("ispell-current-dictionary" variable nil nil [64706 64952])
            ("ispell-current-personal-dictionary" variable nil nil [64954 65134])
            ("ispell-get-decoded-string" function (:arguments ("n")) nil [65207 65725])
            ("ispell-get-casechars" function nil nil [65727 65790])
            ("ispell-get-not-casechars" function nil nil [65791 65858])
            ("ispell-get-otherchars" function nil nil [65859 65923])
            ("ispell-get-many-otherchars-p" function nil nil [65924 66106])
            ("ispell-get-ispell-args" function nil nil [66107 66283])
            ("ispell-get-extended-character-mode" function nil nil [66284 66630])
            ("ispell-get-coding-system" function nil nil [66631 66809])
            ("ispell-pdict-modified-p" variable nil nil [66812 66917])
            ("ispell-quit" variable nil nil [67124 67148])
            ("ispell-process-directory" variable nil nil [67150 67241])
            ("ispell-filter" variable nil nil [67243 67315])
            ("ispell-filter-continue" variable nil nil [67317 67401])
            ("ispell-output-buffer" variable nil nil [67403 67507])
            ("ispell-session-buffer" variable nil nil [67509 67613])
            ("ispell-cmd-args" variable nil nil [67615 67714])
            ("ispell-query-replace-marker" variable (:default-value (make-marker)) nil [67716 67809])
            ("ispell-recursive-edit-marker" variable (:default-value (make-marker)) nil [67811 67911])
            ("ispell-checking-message" variable nil nil [67913 68056])
            ("ispell-choices-buffer" variable
               (:constant-flag t
                :default-value "*Choices*")
                nil [68058 68102])
            ("ispell-overlay" variable nil nil [68104 68175])
            ("ispell-words-keyword" variable
               (:constant-flag t
                :default-value "LocalWords: ")
                nil [68215 68447])
            ("ispell-dictionary-keyword" variable
               (:constant-flag t
                :default-value "Local IspellDict: ")
                nil [68449 68753])
            ("ispell-pdict-keyword" variable
               (:constant-flag t
                :default-value "Local IspellPersDict: ")
                nil [68755 68992])
            ("ispell-parsing-keyword" variable
               (:constant-flag t
                :default-value "Local IspellParsing: ")
                nil [68994 69429])
            ("ispell--\\w-filter" function (:arguments ("char")) nil [69431 69659])
            ("ispell--make-\\w-expression" function (:arguments ("chars")) nil [69661 70421])
            ("ispell--make-filename-or-URL-re" function nil nil [70423 70959])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage"))))) nil [70976 72929])
            ("put" code nil nil [72930 72985])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [73003 74390])
            ("put" code nil nil [74391 74443])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [74461 75110])
            ("put" code nil nil [75111 75165])
            ("ispell-local-pdict" variable (:default-value ispell-personal-dictionary) nil [75167 75662])
            ("make-variable-buffer-local" code nil nil [75664 75712])
            ("ispell-buffer-local-name" variable nil nil [75784 75952])
            ("ispell-buffer-session-localwords" variable nil nil [75954 76054])
            ("make-variable-buffer-local" code nil nil [76056 76118])
            ("ispell-parser" variable (:default-value (quote use-mode-name)) nil [76120 76516])
            ("ispell-region-end" variable (:default-value (make-marker)) nil [76518 76605])
            ("ispell-check-only" variable nil nil [76607 76701])
            ("ispell-accept-output" function (:arguments ("timeout-secs" "timeout-msecs")) nil [76912 77686])
            ("ispell-send-replacement" function (:arguments ("misspelled" "replacement")) nil [77688 78056])
            ("ispell-send-string" function (:arguments ("string")) nil [78059 81072])
            ("ispell-word" function
               (:user-visible-flag t
                :arguments ("following" "quietly" "continue" "region"))
                nil [81090 86446])
            ("ispell-get-word" function (:arguments ("following" "extra-otherchars")) nil [86449 89112])
            ("ispell-pdict-save" function
               (:user-visible-flag t
                :arguments ("no-query" "force-save"))
                nil [89357 90091])
            ("ispell-update-post-hook" variable nil nil [90094 90259])
            ("ispell-command-loop" function (:arguments ("miss" "guess" "word" "start" "end")) nil [90261 100323])
            ("ispell-show-choices" function nil nil [100327 100777])
            ("ispell-help" function nil nil [100795 104198])
            ("define-obsolete-function-alias" code nil nil [104200 104274])
            ("ispell-lookup-words" function (:arguments ("word" "lookup-dict")) nil [104276 107365])
            ("ispell-filter" function (:arguments ("_process" "output")) nil [108035 109238])
            ("ispell-highlight-spelling-error-generic" function (:arguments ("start" "end" "highlight" "refresh")) nil [109369 111090])
            ("ispell-highlight-spelling-error-overlay" function (:arguments ("start" "end" "highlight")) nil [111093 112337])
            ("ispell-highlight-spelling-error" function (:arguments ("start" "end" "highlight" "refresh")) nil [112340 112586])
            ("ispell-display-buffer" function (:arguments ("buffer")) nil [112588 114126])
            ("ispell-parse-output" function (:arguments ("output" "accept-list" "shift")) nil [114181 116750])
            ("ispell-process-status" function nil nil [116753 117000])
            ("ispell-start-process" function nil nil [117003 119440])
            ("ispell-init-process" function nil nil [119442 124227])
            ("ispell-kill-ispell" function
               (:user-visible-flag t
                :arguments ("no-error" "clear"))
                nil [124244 125288])
            ("ispell-change-dictionary" function
               (:user-visible-flag t
                :arguments ("dict" "arg"))
                nil [125460 127285])
            ("ispell-internal-change-dictionary" function nil nil [127287 127912])
            ("ispell-start" variable nil nil [127982 128003])
            ("ispell-end" variable nil nil [128004 128023])
            ("ispell-region" function
               (:user-visible-flag t
                :arguments ("reg-start" "reg-end" "recheckp" "shift"))
                nil [128116 134530])
            ("ispell-begin-skip-region-regexp" function nil nil [134533 136203])
            ("ispell-begin-skip-region" function (:arguments ("skip-alist")) nil [136206 136526])
            ("ispell-begin-tex-skip-regexp" function nil nil [136529 136999])
            ("ispell-skip-region-list" function nil nil [137002 138093])
            ("ispell-tex-arg-end" function (:arguments ("arg")) nil [138096 138399])
            ("ispell-ignore-fcc" function (:arguments ("start" "end")) nil [138402 139336])
            ("ispell-skip-region" function (:arguments ("key")) nil [139339 141170])
            ("ispell-get-line" function (:arguments ("start" "end" "in-comment")) nil [141173 141917])
            ("ispell-looking-at" function (:arguments ("string")) nil [141920 142223])
            ("ispell-process-line" function (:arguments ("string" "shift")) nil [142225 150153])
            ("ispell-comments-and-strings" function (:user-visible-flag t) nil [150171 150815])
            ("ispell-buffer" function (:user-visible-flag t) nil [150833 150979])
            ("ispell-buffer-with-debug" function
               (:user-visible-flag t
                :arguments ("append"))
                nil [150996 151295])
            ("ispell-continue" function (:user-visible-flag t) nil [151312 151869])
            ("ispell-horiz-scroll" function nil nil [151897 152351])
            ("ispell-complete-word" function
               (:user-visible-flag t
                :arguments ("interior-frag"))
                nil [152478 154847])
            ("ispell-complete-word-interior-frag" function (:user-visible-flag t) nil [154865 155015])
            ("ispell" function (:user-visible-flag t) nil [155033 155646])
            ("ispell-minor-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote ispell-minor-check)) (define-key map "" (quote ispell-minor-check)) map)) nil [155825 156028])
            ("define-minor-mode" code nil nil [156045 156700])
            ("ispell-minor-check" function (:user-visible-flag t) nil [156702 157272])
            ("ispell-message-text-end" variable (:default-value (mapconcat (function identity) (quote ("^-- $" "^#! /bin/[ck]?sh" "\\(\\(^cd .*
\\)?diff -c .*\\)?
\\*\\*\\* .*
--- .*
\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" "\\(diff -u .*\\)?
--- .*
\\+\\+\\+ .*
@@ [-+][0-9]+,[0-9]+ [-+][0-9]+,[0-9]+ @@" "^current state:
==============
" "^\\(- \\)?[-=_]+\\s ?\\(cut here\\|Environment Follows\\)")) "\\|")) nil [157448 158537])
            ("put" code nil nil [158538 158592])
            ("ispell-mime-multipartp" function (:arguments ("limit")) nil [158595 159360])
            ("ispell-mime-skip-part" function (:arguments ("boundary")) nil [159363 161808])
            ("ispell-message" function (:user-visible-flag t) nil [161826 167602])
            ("ispell-non-empty-string" function (:arguments ("string")) nil [167605 167779])
            ("ispell-accept-buffer-local-defs" function nil nil [167964 168233])
            ("ispell-buffer-local-parsing" function nil nil [168236 170469])
            ("ispell-buffer-local-dict" function (:arguments ("no-reload")) nil [170512 171860])
            ("ispell-buffer-local-words" function nil nil [171863 173337])
            ("declare-function" code nil nil [173458 173532])
            ("ispell-add-per-file-word-list" function (:arguments ("word")) nil [173534 175082])
            ("ispell" package nil nil [175084 175101]))          
      :file "ispell.el"
      :pointmax 176461
      :fsize 176460
      :lastmodtime '(23525 29607 0 0)
      :unmatched-syntax '((close-paren 4539 . 4540) (symbol 4504 . 4521) (open-paren 4503 . 4504) (close-paren 4501 . 4502) (symbol 4466 . 4483) (open-paren 4465 . 4466)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paragraphs" customgroup (:user-visible-flag t) nil [1007 1086])
            ("put" code nil nil [1088 1131])
            ("define-minor-mode" code nil nil [1132 3126])
            ("paragraph-start" variable (:default-value "\\|[ 	]*$") nil [3128 3928])
            ("put" code nil nil [3929 3981])
            ("paragraph-separate" variable (:default-value "[ 	]*$") nil [4316 4786])
            ("put" code nil nil [4787 4842])
            ("sentence-end-double-space" variable (:default-value t) nil [4844 5274])
            ("put" code nil nil [5275 5338])
            ("sentence-end-without-period" variable nil nil [5340 5758])
            ("put" code nil nil [5759 5824])
            ("sentence-end-without-space" variable (:default-value "。．？！") nil [5826 6184])
            ("put" code nil nil [6185 6248])
            ("sentence-end" variable nil nil [6250 6682])
            ("put" code nil nil [6683 6741])
            ("sentence-end-base" variable (:default-value "[.?!…‽][]\"'”’)}]*") nil [6743 6928])
            ("put" code nil nil [6929 6983])
            ("sentence-end" function nil nil [6985 8002])
            ("page-delimiter" variable (:default-value "^") nil [8004 8134])
            ("put" code nil nil [8135 8186])
            ("paragraph-ignore-fill-prefix" variable nil nil [8188 8421])
            ("put" code nil nil [8422 8488])
            ("forward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8490 13713])
            ("backward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13715 14279])
            ("mark-paragraph" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [14281 15308])
            ("kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15310 15573])
            ("backward-kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15575 15843])
            ("transpose-paragraphs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15845 16316])
            ("start-of-paragraph-text" function nil nil [16318 16840])
            ("end-of-paragraph-text" function nil nil [16842 17101])
            ("forward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17103 18519])
            ("repunctuate-sentences" function (:user-visible-flag t) nil [18521 18770])
            ("backward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18773 19001])
            ("kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19003 19239])
            ("backward-kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19241 19495])
            ("mark-end-of-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19497 19874])
            ("transpose-sentences" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19876 20339]))          
      :file "paragraphs.el"
      :pointmax 20369
      :fsize 20384
      :lastmodtime '(23525 29608 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("fill" customgroup (:user-visible-flag t) nil [992 1103])
            ("fill-individual-varying-indent" variable nil nil [1105 1516])
            ("colon-double-space" variable nil nil [1518 1645])
            ("put" code nil nil [1646 1702])
            ("fill-separate-heterogeneous-words-with-space" variable nil nil [1704 2097])
            ("fill-paragraph-function" variable nil nil [2099 2509])
            ("fill-paragraph-handle-comment" variable (:default-value t) nil [2511 2626])
            ("enable-kinsoku" variable (:default-value t) nil [2628 2941])
            ("set-fill-prefix" function (:user-visible-flag t) nil [2943 3530])
            ("adaptive-fill-mode" variable (:default-value t) nil [3532 3665])
            ("adaptive-fill-regexp" variable (:default-value (purecopy "[ 	]*\\([-–!|#%;>*·•‣⁃◦]+[ 	]*\\)*")) nil [3667 4387])
            ("adaptive-fill-first-line-regexp" variable (:default-value (purecopy "\\`[ 	]*\\'")) nil [4389 4932])
            ("adaptive-fill-function" variable nil nil [4934 5163])
            ("fill-indent-according-to-mode" variable nil nil [5165 5319])
            ("current-fill-column" function nil nil [5321 6357])
            ("canonically-space-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [6359 8610])
            ("fill-common-string-prefix" function (:arguments ("s1" "s2")) nil [8612 8889])
            ("fill-match-adaptive-prefix" function nil nil [8891 9277])
            ("fill-context-prefix" function (:arguments ("from" "to" "first-line-regexp")) nil [9279 12596])
            ("fill-single-word-nobreak-p" function nil nil [12598 13125])
            ("fill-french-nobreak-p" function nil nil [13127 13824])
            ("fill-single-char-nobreak-p" function nil nil [13826 14237])
            ("fill-nobreak-predicate" variable nil nil [14239 14620])
            ("fill-nobreak-invisible" variable nil nil [14622 14767])
            ("fill-nobreak-p" function nil nil [14769 16167])
            ("fill-find-break-point-function-table" variable (:default-value (make-char-table nil)) nil [16169 16301])
            ("fill-nospace-between-words-table" variable (:default-value (make-char-table nil)) nil [16303 16431])
            ("progn" code nil nil [16433 17116])
            ("fill-find-break-point" function (:arguments ("limit")) nil [17118 17805])
            ("fill-delete-prefix" function (:arguments ("from" "to" "prefix")) nil [17807 18728])
            ("add-to-list" code nil nil [18998 19062])
            ("fill-delete-newlines" function (:arguments ("from" "to" "justify" "nosqueeze" "squeeze-after")) nil [19064 21527])
            ("fill-move-to-break-point" function (:arguments ("linebeg")) nil [21529 23894])
            ("fill-text-properties-at" function (:arguments ("pos")) nil [23965 24211])
            ("fill-newline" function nil nil [24213 25529])
            ("fill-indent-to-left-margin" function nil nil [25531 25756])
            ("fill-region-as-paragraph" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "squeeze-after"))
                nil [25758 30929])
            ("skip-line-prefix" function (:arguments ("prefix")) nil [30931 31258])
            ("fill-minibuffer-function" function (:arguments ("arg")) nil [31260 31464])
            ("fill-forward-paragraph-function" variable (:default-value (quote forward-paragraph)) nil [31466 31756])
            ("fill-forward-paragraph" function (:arguments ("arg")) nil [31758 31842])
            ("fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "region"))
                nil [31844 36385])
            ("declare-function" code nil nil [36387 36467])
            ("declare-function" code nil nil [36468 36541])
            ("fill-comment-paragraph" function (:arguments ("justify")) nil [36544 41971])
            ("fill-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "to-eop"))
                nil [41973 44149])
            ("default-justification" variable (:default-value (quote left)) nil [44153 44584])
            ("make-variable-buffer-local" code nil nil [44585 44636])
            ("current-justification" function nil nil [44638 45187])
            ("set-justification" function
               (:user-visible-flag t
                :arguments ("begin" "end" "style" "whole-par"))
                nil [45189 46964])
            ("set-justification-none" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46966 47274])
            ("set-justification-left" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [47276 47719])
            ("set-justification-right" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [47721 48092])
            ("set-justification-full" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [48094 48467])
            ("set-justification-center" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [48469 48765])
            ("justify-current-line" function
               (:user-visible-flag t
                :arguments ("how" "eop" "nosqueeze"))
                nil [49580 54390])
            ("unjustify-current-line" function nil nil [54392 55426])
            ("unjustify-region" function (:arguments ("begin" "end")) nil [55428 56023])
            ("fill-nonuniform-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justifyp" "citation-regexp"))
                nil [56027 57048])
            ("fill-individual-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justify" "citation-regexp"))
                nil [57050 61118])
            ("fill-individual-paragraphs-prefix" function (:arguments ("citation-regexp")) nil [61120 62509])
            ("fill-individual-paragraphs-citation" function (:arguments ("string" "citation-regexp")) nil [62511 62693]))          
      :file "fill.el"
      :pointmax 62717
      :fsize 62729
      :lastmodtime '(23525 29607 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bibtex-style-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 46 "_" st) (modify-syntax-entry 39 "'" st) (modify-syntax-entry 35 "'" st) (modify-syntax-entry 42 "." st) (modify-syntax-entry 61 "." st) (modify-syntax-entry 36 "_" st) st)) nil [1018 1509])
            ("bibtex-style-commands" variable
               (:constant-flag t
                :default-value (quote ("ENTRY" "EXECUTE" "FUNCTION" "INTEGERS" "ITERATE" "MACRO" "READ" "REVERSE" "SORT" "STRINGS")))
                nil [1512 1645])
            ("bibtex-style-functions" variable
               (:constant-flag t
                :default-value (quote ("<" ">" "=" "+" "-" "*" ":=" "add.period$" "call.type$" "change.case$" "chr.to.int$" "cite$" "duplicate$" "empty$" "format.name$" "if$" "int.to.chr$" "int.to.str$" "missing$" "newline$" "num.names$" "pop$" "preamble$" "purify$" "quote$" "skip$" "stack$" "substring$" "swap$" "text.length$" "text.prefix$" "top$" "type$" "warning$" "while$" "width$" "write$")))
                nil [1647 2141])
            ("bibtex-style-font-lock-keywords" variable (:default-value (\` (((\, (regexp-opt bibtex-style-commands (quote words))) . font-lock-keyword-face) ("\\w+\\$" . font-lock-keyword-face) ("\\<\\(FUNCTION\\|MACRO\\)\\s-+{\\([^}
]+\\)}" (2 font-lock-function-name-face))))) nil [2143 2391])
            ("define-derived-mode" code nil nil [2408 2959])
            ("bibtex-style-indent-line" function (:user-visible-flag t) nil [2961 3409])
            ("bibtex-style-indent-basic" variable (:default-value 2) nil [3411 3563])
            ("bibtex-style-calculate-indentation" function (:arguments ("virt")) nil [3565 5360])
            ("bibtex-style" package nil nil [5363 5386]))          
      :file "bibtex-style.el"
      :pointmax 5417
      :fsize 5416
      :lastmodtime '(23525 29606 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [1444 1461])
            ("bibtex" customgroup (:user-visible-flag t) nil [1483 1555])
            ("bibtex-autokey" customgroup (:user-visible-flag t) nil [1557 1708])
            ("bibtex-mode-hook" variable nil nil [1710 1828])
            ("bibtex-field-delimiters" variable (:default-value (quote braces)) nil [1830 2041])
            ("bibtex-entry-delimiters" variable (:default-value (quote braces)) nil [2043 2250])
            ("bibtex-include-OPTcrossref" variable (:default-value (quote ("InProceedings" "InCollection"))) nil [2252 2424])
            ("bibtex-include-OPTkey" variable (:default-value t) nil [2426 2848])
            ("put" code nil nil [2849 2901])
            ("bibtex-user-optional-fields" variable (:default-value (quote (("annote" "Personal annotation (ignored)")))) nil [2903 3392])
            ("put" code nil nil [3393 3451])
            ("bibtex-entry-format" variable (:default-value (quote (opts-or-alts required-fields numerical-fields))) nil [3453 6091])
            ("put" code nil nil [6092 6646])
            ("bibtex-field-braces-alist" variable nil nil [6648 7121])
            ("bibtex-field-strings-alist" variable nil nil [7123 7676])
            ("bibtex-clean-entry-hook" variable nil nil [7678 7908])
            ("bibtex-maintain-sorted-entries" variable nil nil [7910 8733])
            ("put" code nil nil [8734 8855])
            ("bibtex-sort-entry-class" variable (:default-value (quote (("String") (catch-all) ("Book" "Proceedings")))) nil [8857 9436])
            ("put" code nil nil [9437 9882])
            ("bibtex-sort-ignore-string-entries" variable (:default-value t) nil [9884 10170])
            ("bibtex-field-kill-ring-max" variable (:default-value 20) nil [10172 10325])
            ("bibtex-entry-kill-ring-max" variable (:default-value 20) nil [10327 10480])
            ("bibtex-parse-keys-timeout" variable (:default-value 60) nil [10482 10696])
            ("bibtex-parse-keys-fast" variable (:default-value t) nil [10698 10894])
            ("define-widget" code nil nil [10896 12737])
            ("define-obsolete-variable-alias" code nil nil [12739 12833])
            ("bibtex-BibTeX-entry-alist" variable (:default-value (quote (("Article" "Article in Journal" (("author") ("title" "Title of the article (BibTeX converts it to lowercase)")) (("journal") ("year")) (("volume" "Volume of the journal") ("number" "Number of the journal (only allowed if entry contains volume)") ("pages" "Pages in the journal") ("month") ("note"))) ("InProceedings" "Article in Conference Proceedings" (("author") ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)")) (("booktitle" "Name of the conference proceedings") ("year")) (("editor") ("volume" "Volume of the conference proceedings in the series") ("number" "Number of the conference proceedings in a small series (overwritten by volume)") ("series" "Series in which the conference proceedings appeared") ("pages" "Pages in the conference proceedings") ("month") ("address") ("organization" "Sponsoring organization of the conference") ("publisher" "Publishing company, its location") ("note"))) ("Conference" "Article in Conference Proceedings" (("author") ("title" "Title of the article in proceedings (BibTeX converts it to lowercase)")) (("booktitle" "Name of the conference proceedings") ("year")) (("editor") ("volume" "Volume of the conference proceedings in the series") ("number" "Number of the conference proceedings in a small series (overwritten by volume)") ("series" "Series in which the conference proceedings appeared") ("pages" "Pages in the conference proceedings") ("month") ("address") ("organization" "Sponsoring organization of the conference") ("publisher" "Publishing company, its location") ("note"))) ("InCollection" "Article in a Collection" (("author") ("title" "Title of the article in book (BibTeX converts it to lowercase)") ("booktitle" "Name of the book")) (("publisher") ("year")) (("editor") ("volume" "Volume of the book in the series") ("number" "Number of the book in a small series (overwritten by volume)") ("series" "Series in which the book appeared") ("type" "Word to use instead of \"chapter\"") ("chapter" "Chapter in the book") ("pages" "Pages in the book") ("edition" "Edition of the book as a capitalized English word") ("month") ("address") ("note"))) ("InBook" "Chapter or Pages in a Book" (("author" nil nil 0) ("editor" nil nil 0) ("title" "Title of the book") ("chapter" "Chapter in the book")) (("publisher") ("year")) (("volume" "Volume of the book in the series") ("number" "Number of the book in a small series (overwritten by volume)") ("series" "Series in which the book appeared") ("type" "Word to use instead of \"chapter\"") ("address") ("edition" "Edition of the book as a capitalized English word") ("month") ("pages" "Pages in the book") ("note"))) ("Proceedings" "Conference Proceedings" (("title" "Title of the conference proceedings") ("year")) nil (("booktitle" "Title of the proceedings for cross references") ("editor") ("volume" "Volume of the conference proceedings in the series") ("number" "Number of the conference proceedings in a small series (overwritten by volume)") ("series" "Series in which the conference proceedings appeared") ("address") ("month") ("organization" "Sponsoring organization of the conference") ("publisher" "Publishing company, its location") ("note"))) ("Book" "Book" (("author" nil nil 0) ("editor" nil nil 0) ("title" "Title of the book")) (("publisher") ("year")) (("volume" "Volume of the book in the series") ("number" "Number of the book in a small series (overwritten by volume)") ("series" "Series in which the book appeared") ("address") ("edition" "Edition of the book as a capitalized English word") ("month") ("note"))) ("Booklet" "Booklet (Bound, but no Publisher)" (("title" "Title of the booklet (BibTeX converts it to lowercase)")) nil (("author") ("howpublished" "The way in which the booklet was published") ("address") ("month") ("year") ("note"))) ("PhdThesis" "PhD. Thesis" (("author") ("title" "Title of the PhD. thesis") ("school" "School where the PhD. thesis was written") ("year")) nil (("type" "Type of the PhD. thesis") ("address" "Address of the school (if not part of field \"school\") or country") ("month") ("note"))) ("MastersThesis" "Master's Thesis" (("author") ("title" "Title of the master's thesis (BibTeX converts it to lowercase)") ("school" "School where the master's thesis was written") ("year")) nil (("type" "Type of the master's thesis (if other than \"Master's thesis\")") ("address" "Address of the school (if not part of field \"school\") or country") ("month") ("note"))) ("TechReport" "Technical Report" (("author") ("title" "Title of the technical report (BibTeX converts it to lowercase)") ("institution" "Sponsoring institution of the report") ("year")) nil (("type" "Type of the report (if other than \"technical report\")") ("number" "Number of the technical report") ("address") ("month") ("note"))) ("Manual" "Technical Manual" (("title" "Title of the manual")) nil (("author") ("organization" "Publishing organization of the manual") ("address") ("edition" "Edition of the manual as a capitalized English word") ("month") ("year") ("note"))) ("Unpublished" "Unpublished" (("author") ("title" "Title of the unpublished work (BibTeX converts it to lowercase)") ("note")) nil (("month") ("year"))) ("Misc" "Miscellaneous" nil nil (("author") ("title" "Title of the work (BibTeX converts it to lowercase)") ("howpublished" "The way in which the work was published") ("month") ("year") ("note")))))) nil [12834 20114])
            ("put" code nil nil [20115 20171])
            ("bibtex-biblatex-entry-alist" variable (:default-value (quote (("Article" "Article in Journal" (("author") ("title") ("journaltitle") ("year" nil nil 0) ("date" nil nil 0)) nil (("translator") ("annotator") ("commentator") ("subtitle") ("titleaddon") ("editor") ("editora") ("editorb") ("editorc") ("journalsubtitle") ("issuetitle") ("issuesubtitle") ("language") ("origlanguage") ("series") ("volume") ("number") ("eid") ("issue") ("month") ("pages") ("version") ("note") ("issn") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Book" "Single-Volume Book" (("author") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("MVBook" "Multi-Volume Book" (("author") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("language") ("origlanguage") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("InBook" "Chapter or Pages in a Book" (("title") ("year" nil nil 0) ("date" nil nil 0)) (("author") ("booktitle")) (("bookauthor") ("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("BookInBook" "Book in Collection" (("title") ("year" nil nil 0) ("date" nil nil 0)) (("author") ("booktitle")) (("bookauthor") ("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("SuppBook" "Supplemental Material in a Book" (("title") ("year" nil nil 0) ("date" nil nil 0)) (("author") ("booktitle")) (("bookauthor") ("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Booklet" "Booklet (Bound, but no Publisher)" (("author" nil nil 0) ("editor" nil nil 0) ("title") ("year" nil nil 1) ("date" nil nil 1)) nil (("subtitle") ("titleaddon") ("language") ("howpublished") ("type") ("note") ("location") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Collection" "Single-Volume Collection" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("MVCollection" "Multi-Volume Collection" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("language") ("origlanguage") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("InCollection" "Article in a Collection" (("author") ("title") ("year" nil nil 0) ("date" nil nil 0)) (("booktitle")) (("editor") ("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("SuppCollection" "Supplemental Material in a Collection" (("author") ("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) (("booktitle")) (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Manual" "Technical Manual" (("author" nil nil 0) ("editor" nil nil 0) ("title") ("year" nil nil 1) ("date" nil nil 1)) nil (("subtitle") ("titleaddon") ("language") ("edition") ("type") ("series") ("number") ("version") ("note") ("organization") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Misc" "Miscellaneous" (("author" nil nil 0) ("editor" nil nil 0) ("title") ("year" nil nil 1) ("date" nil nil 1)) nil (("subtitle") ("titleaddon") ("language") ("howpublished") ("type") ("version") ("note") ("organization") ("location") ("date") ("month") ("year") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Online" "Online Resource" (("author" nil nil 0) ("editor" nil nil 0) ("title") ("year" nil nil 1) ("date" nil nil 1) ("url")) nil (("subtitle") ("titleaddon") ("language") ("version") ("note") ("organization") ("date") ("month") ("year") ("addendum") ("pubstate") ("urldate"))) ("Patent" "Patent" (("author") ("title") ("number") ("year" nil nil 0) ("date" nil nil 0)) nil (("holder") ("subtitle") ("titleaddon") ("type") ("version") ("location") ("note") ("date") ("month") ("year") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Periodical" "Complete Issue of a Periodical" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editora") ("editorb") ("editorc") ("subtitle") ("issuetitle") ("issuesubtitle") ("language") ("series") ("volume") ("number") ("issue") ("date") ("month") ("year") ("note") ("issn") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("SuppPeriodical" "Supplemental Material in a Periodical" (("author") ("title") ("journaltitle") ("year" nil nil 0) ("date" nil nil 0)) nil (("translator") ("annotator") ("commentator") ("subtitle") ("titleaddon") ("editor") ("editora") ("editorb") ("editorc") ("journalsubtitle") ("issuetitle") ("issuesubtitle") ("language") ("origlanguage") ("series") ("volume") ("number") ("eid") ("issue") ("month") ("pages") ("version") ("note") ("issn") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Proceedings" "Single-Volume Conference Proceedings" (("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("eventtitle") ("eventdate") ("venue") ("language") ("editor") ("volume") ("part") ("volumes") ("series") ("number") ("note") ("organization") ("publisher") ("location") ("month") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("MVProceedings" "Multi-Volume Conference Proceedings" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("subtitle") ("titleaddon") ("eventtitle") ("eventdate") ("venue") ("language") ("volumes") ("series") ("number") ("note") ("organization") ("publisher") ("location") ("month") ("isbn") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("InProceedings" "Article in Conference Proceedings" (("author") ("title") ("year" nil nil 0) ("date" nil nil 0)) (("booktitle")) (("editor") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("eventtitle") ("eventdate") ("venue") ("language") ("volume") ("part") ("volumes") ("series") ("number") ("note") ("organization") ("publisher") ("location") ("month") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Reference" "Single-Volume Work of Reference" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("MVReference" "Multi-Volume Work of Reference" (("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("language") ("origlanguage") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("InReference" "Article in a Work of Reference" (("author") ("editor") ("title") ("year" nil nil 0) ("date" nil nil 0)) (("booktitle")) (("editora") ("editorb") ("editorc") ("translator") ("annotator") ("commentator") ("introduction") ("foreword") ("afterword") ("subtitle") ("titleaddon") ("maintitle") ("mainsubtitle") ("maintitleaddon") ("booksubtitle") ("booktitleaddon") ("language") ("origlanguage") ("volume") ("part") ("edition") ("volumes") ("series") ("number") ("note") ("publisher") ("location") ("isbn") ("chapter") ("pages") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Report" "Technical or Research Report" (("author") ("title") ("type") ("institution") ("year" nil nil 0) ("date" nil nil 0)) nil (("subtitle") ("titleaddon") ("language") ("number") ("version") ("note") ("location") ("month") ("isrn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Thesis" "PhD. or Master's Thesis" (("author") ("title") ("type") ("institution") ("year" nil nil 0) ("date" nil nil 0)) nil (("subtitle") ("titleaddon") ("language") ("note") ("location") ("month") ("isbn") ("chapter") ("pages") ("pagetotal") ("addendum") ("pubstate") ("doi") ("eprint") ("eprintclass") ("eprinttype") ("url") ("urldate"))) ("Unpublished" "Unpublished" (("author") ("title") ("year" nil nil 0) ("date" nil nil 0)) nil (("subtitle") ("titleaddon") ("language") ("howpublished") ("note") ("location") ("isbn") ("date") ("month") ("year") ("addendum") ("pubstate") ("url") ("urldate")))))) nil [20173 34759])
            ("put" code nil nil [34760 34818])
            ("define-widget" code nil nil [34820 35017])
            ("bibtex-BibTeX-field-alist" variable (:default-value (quote (("author" "Author1 [and Author2 ...] [and others]") ("editor" "Editor1 [and Editor2 ...] [and others]") ("journal" "Name of the journal (use string, remove braces)") ("year" "Year of publication") ("month" "Month of the publication as a string (remove braces)") ("note" "Remarks to be put at the end of the \\bibitem") ("publisher" "Publishing company") ("address" "Address of the publisher")))) nil [35019 35713])
            ("bibtex-biblatex-field-alist" variable (:default-value (quote (("abstract" "Abstract of the work") ("addendum" "Miscellaneous bibliographic data") ("afterword" "Author(s) of an afterword to the work") ("annotation" "Annotation") ("annotator" "Author(s) of annotations to the work") ("author" "Author(s) of the title") ("bookauthor" "Author(s) of the booktitle.") ("bookpagination" "Pagination scheme of the enclosing work") ("booksubtitle" "Subtitle related to the booktitle") ("booktitle" "Title of the book") ("booktitleaddon" "Annex to the booktitle") ("chapter" "Chapter, section, or any other unit of a work") ("commentator" "Author(s) of a commentary to the work") ("date" "Publication date") ("doi" "Digital Object Identifier") ("edition" "Edition of a printed publication") ("editor" "Editor(s) of the title, booktitle, or maintitle") ("editora" "Secondary editor") ("editorb" "Secondary editor") ("editorc" "Secondary editor") ("editortype" "Type of editorial role performed by the editor") ("editoratype" "Type of editorial role performed by editora") ("editorbtype" "Type of editorial role performed by editorb") ("editorctype" "Type of editorial role performed by editorc") ("eid" "Electronic identifier of an article") ("eprint" "Electronic identifier of an online publication") ("eprintclass" "Additional information related to the eprinttype") ("eprinttype" "Type of eprint identifier") ("eventdate" "Date of a conference or some other event") ("eventtitle" "Title of a conference or some other event") ("file" "Local link to an electronic version of the work") ("foreword" "Author(s) of a foreword to the work") ("holder" "Holder(s) of a patent") ("howpublished" "Publication notice for unusual publications") ("indextitle" "Title to use for indexing instead of the regular title") ("institution" "Name of a university or some other institution") ("introduction" "Author(s) of an introduction to the work") ("isan" "International Standard Audiovisual Number of an audiovisual work") ("isbn" "International Standard Book Number of a book.") ("ismn" "International Standard Music Number for printed music") ("isrn" "International Standard Technical Report Number") ("issn" "International Standard Serial Number of a periodical.") ("issue" "Issue of a journal") ("issuesubtitle" "Subtitle of a specific issue of a journal or other periodical.") ("issuetitle" "Title of a specific issue of a journal or other periodical.") ("iswc" "International Standard Work Code of a musical work") ("journalsubtitle" "Subtitle of a journal, a newspaper, or some other periodical.") ("journaltitle" "Name of a journal, a newspaper, or some other periodical.") ("label" "Substitute for the regular label to be used by the citation style") ("language" "Language(s) of the work") ("library" "Library name and a call number") ("location" "Place(s) of publication") ("mainsubtitle" "Subtitle related to the maintitle") ("maintitle" "Main title of a multi-volume book, such as Collected Works") ("maintitleaddon" "Annex to the maintitle") ("month" "Publication month") ("nameaddon" "Addon to be printed immediately after the author name") ("note" "Miscellaneous bibliographic data") ("number" "Number of a journal or the volume/number of a book in a series") ("organization" "Organization(s) that published a work") ("origdate" "Publication date of the original edition") ("origlanguage" "Original publication language of a translated edition") ("origlocation" "Location of the original edition") ("origpublisher" "Publisher of the original edition") ("origtitle" "Title of the original work") ("pages" "Page number(s) or page range(s)") ("pagetotal" "Total number of pages of the work.") ("pagination" "Pagination of the work") ("part" "Number of a partial volume") ("publisher" "Name(s) of the publisher(s)") ("pubstate" "Publication state of the work, e. g.,'in press'") ("reprinttitle" "Title of a reprint of the work") ("series" "Name of a publication series") ("shortauthor" "Author(s) of the work, given in an abbreviated form") ("shorteditor" "Editor(s) of the work, given in an abbreviated form") ("shortjournal" "Short version or an acronym of the journal title") ("shortseries" "Short version or an acronym of the series field") ("shorttitle" "Title in an abridged form") ("subtitle" "Subtitle of the work") ("title" "Title of the work") ("titleaddon" "Annex to the title") ("translator" "Translator(s) of the work") ("type" "Type of a manual, patent, report, or thesis") ("url" " URL of an online publication.") ("urldate" "Access date of the address specified in the url field") ("venue" "Location of a conference, a symposium, or some other event") ("version" "Revision number of a piece of software, a manual, etc.") ("volume" "Volume of a multi-volume book or a periodical") ("volumes" "Total number of volumes of a multi-volume work") ("year" "Year of publication")))) nil [35715 41104])
            ("bibtex-dialect-list" variable (:default-value (quote (BibTeX biblatex))) nil [41106 41484])
            ("bibtex-dialect" variable (:default-value (quote BibTeX)) nil [41486 42041])
            ("put" code nil nil [42042 42093])
            ("bibtex-no-opt-remove-re" variable (:default-value "\\`option") nil [42095 42324])
            ("bibtex-comment-start" variable (:default-value "@Comment") nil [42326 42440])
            ("bibtex-add-entry-hook" variable nil nil [42442 42577])
            ("bibtex-predefined-month-strings" variable (:default-value (quote (("jan" . "January") ("feb" . "February") ("mar" . "March") ("apr" . "April") ("may" . "May") ("jun" . "June") ("jul" . "July") ("aug" . "August") ("sep" . "September") ("oct" . "October") ("nov" . "November") ("dec" . "December")))) nil [42579 43165])
            ("bibtex-predefined-strings" variable (:default-value (append bibtex-predefined-month-strings (quote (("acmcs" . "ACM Computing Surveys") ("acta" . "Acta Informatica") ("cacm" . "Communications of the ACM") ("ibmjrd" . "IBM Journal of Research and Development") ("ibmsj" . "IBM Systems Journal") ("ieeese" . "IEEE Transactions on Software Engineering") ("ieeetc" . "IEEE Transactions on Computers") ("ieeetcad" . "IEEE Transactions on Computer-Aided Design of Integrated Circuits") ("ipl" . "Information Processing Letters") ("jacm" . "Journal of the ACM") ("jcss" . "Journal of Computer and System Sciences") ("scp" . "Science of Computer Programming") ("sicomp" . "SIAM Journal on Computing") ("tcs" . "Theoretical Computer Science") ("tocs" . "ACM Transactions on Computer Systems") ("tods" . "ACM Transactions on Database Systems") ("tog" . "ACM Transactions on Graphics") ("toms" . "ACM Transactions on Mathematical Software") ("toois" . "ACM Transactions on Office Information Systems") ("toplas" . "ACM Transactions on Programming Languages and Systems"))))) nil [43167 44625])
            ("bibtex-string-files" variable nil nil [44627 44881])
            ("bibtex-string-file-path" variable (:default-value (getenv "BIBINPUTS")) nil [44883 45043])
            ("bibtex-files" variable nil nil [45045 45590])
            ("bibtex-file-path" variable (:default-value (getenv "BIBINPUTS")) nil [45592 45738])
            ("bibtex-search-entry-globally" variable nil nil [45740 45966])
            ("bibtex-help-message" variable (:default-value t) nil [45968 46112])
            ("bibtex-autokey-prefix-string" variable nil nil [46114 46303])
            ("bibtex-autokey-names" variable (:default-value 1) nil [46305 46668])
            ("bibtex-autokey-names-stretch" variable nil nil [46670 46922])
            ("bibtex-autokey-additional-names" variable nil nil [46924 47128])
            ("bibtex-autokey-expand-strings" variable nil nil [47130 47338])
            ("bibtex-autokey-transcriptions" variable (:default-value (quote (("\\\\aa" . "a") ("\\\\AA" . "A") ("\\\"a\\|\\\\\\\"a\\|\\\\ae" . "ae") ("\\\"A\\|\\\\\\\"A\\|\\\\AE" . "Ae") ("\\\\i" . "i") ("\\\\j" . "j") ("\\\\l" . "l") ("\\\\L" . "L") ("\\\"o\\|\\\\\\\"o\\|\\\\o\\|\\\\oe" . "oe") ("\\\"O\\|\\\\\\\"O\\|\\\\O\\|\\\\OE" . "Oe") ("\\\"s\\|\\\\\\\"s\\|\\\\3" . "ss") ("\\\"u\\|\\\\\\\"u" . "ue") ("\\\"U\\|\\\\\\\"U" . "Ue") ("\\\\`\\|\\\\'\\|\\\\\\^\\|\\\\~\\|\\\\=\\|\\\\\\.\\|\\\\u\\|\\\\v\\|\\\\H\\|\\\\t\\|\\\\c\\|\\\\d\\|\\\\b" . "") ("[`'\"{}#]" . "") ("\\\\-" . "") ("\\\\?[ 	
]+\\|~" . " ")))) nil [47340 48845])
            ("bibtex-autokey-name-change-strings" variable (:default-value bibtex-autokey-transcriptions) nil [48847 49298])
            ("bibtex-autokey-name-case-convert-function" variable (:default-value (quote downcase)) nil [49300 49754])
            ("put" code nil nil [49755 49890])
            ("defvaralias" code nil nil [49891 49983])
            ("bibtex-autokey-name-length" variable (:default-value (quote infty)) nil [49985 50292])
            ("bibtex-autokey-name-separator" variable nil nil [50294 50478])
            ("bibtex-autokey-year-length" variable (:default-value 2) nil [50480 50681])
            ("bibtex-autokey-use-crossref" variable (:default-value t) nil [50683 51011])
            ("bibtex-autokey-titlewords" variable (:default-value 5) nil [51013 51429])
            ("bibtex-autokey-title-terminators" variable (:default-value "[.!?:;]\\|--") nil [51431 51674])
            ("bibtex-autokey-titlewords-stretch" variable (:default-value 2) nil [51676 51949])
            ("bibtex-autokey-titleword-ignore" variable (:default-value (quote ("A" "An" "On" "The" "Eine?" "Der" "Die" "Das" "[^[:upper:]].*" ".*[^[:upper:][:lower:]0-9].*"))) nil [51951 52425])
            ("bibtex-autokey-titleword-case-convert-function" variable (:default-value (quote downcase)) nil [52427 52891])
            ("defvaralias" code nil nil [52892 52994])
            ("bibtex-autokey-titleword-abbrevs" variable nil nil [52996 53394])
            ("bibtex-autokey-titleword-change-strings" variable (:default-value bibtex-autokey-transcriptions) nil [53396 53858])
            ("bibtex-autokey-titleword-length" variable (:default-value 5) nil [53860 54174])
            ("bibtex-autokey-titleword-separator" variable (:default-value "_") nil [54176 54356])
            ("bibtex-autokey-name-year-separator" variable nil nil [54358 54552])
            ("bibtex-autokey-year-title-separator" variable (:default-value ":_") nil [54554 54752])
            ("bibtex-autokey-edit-before-use" variable (:default-value t) nil [54754 54917])
            ("bibtex-autokey-before-presentation-function" variable nil nil [54919 55224])
            ("bibtex-entry-offset" variable nil nil [55226 55391])
            ("bibtex-field-indentation" variable (:default-value 2) nil [55393 55521])
            ("bibtex-text-indentation" variable (:default-value (+ bibtex-field-indentation (length "organization = "))) nil [55523 55774])
            ("bibtex-contline-indentation" variable (:default-value (+ bibtex-text-indentation 1)) nil [55776 55942])
            ("bibtex-align-at-equal-sign" variable nil nil [55944 56180])
            ("bibtex-comma-after-last-field" variable nil nil [56182 56336])
            ("bibtex-autoadd-commas" variable (:default-value t) nil [56338 56480])
            ("bibtex-autofill-types" variable (:default-value (quote ("Proceedings"))) nil [56482 56646])
            ("bibtex-summary-function" variable (:default-value (quote bibtex-summary)) nil [56648 57039])
            ("bibtex-generate-url-list" variable (:default-value (quote ((("url" . ".*:.*")) (("doi" . "10\\.[0-9]+/.+") "http://dx.doi.org/%s" ("doi" ".*" 0))))) nil [57041 59704])
            ("put" code nil nil [59705 59760])
            ("bibtex-cite-matcher-alist" variable (:default-value (quote (("\\\\cite[ 	
]*{\\([^}]+\\)}" . 1)))) nil [59762 60286])
            ("bibtex-expand-strings" variable nil nil [60288 60437])
            ("bibtex-search-buffer" variable (:default-value "*BibTeX Search*") nil [60439 60578])
            ("bibtex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 36 "$$  " st) (modify-syntax-entry 37 "<   " st) (modify-syntax-entry 39 "w   " st) (modify-syntax-entry 64 "w   " st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 12 ">   " st) (modify-syntax-entry 10 ">   " st) (modify-syntax-entry 61 "." st) (modify-syntax-entry 126 " " st) st)) nil [60794 61409])
            ("bibtex-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "	" (quote bibtex-find-text)) (define-key km "
" (quote bibtex-next-field)) (define-key km "\211" (quote completion-at-point)) (define-key km "\"" (quote bibtex-remove-delimiters)) (define-key km "{" (quote bibtex-remove-delimiters)) (define-key km "}" (quote bibtex-remove-delimiters)) (define-key km "" (quote bibtex-clean-entry)) (define-key km "" (quote bibtex-fill-entry)) (define-key km "" (quote bibtex-search-entry)) (define-key km "" (quote bibtex-search-crossref)) (define-key km "" (quote bibtex-copy-summary-as-kill)) (define-key km "?" (quote bibtex-print-help-message)) (define-key km "" (quote bibtex-pop-previous)) (define-key km "" (quote bibtex-pop-next)) (define-key km "" (quote bibtex-kill-field)) (define-key km "\353" (quote bibtex-copy-field-as-kill)) (define-key km "" (quote bibtex-kill-entry)) (define-key km "\367" (quote bibtex-copy-entry-as-kill)) (define-key km "" (quote bibtex-yank)) (define-key km "\371" (quote bibtex-yank-pop)) (define-key km "" (quote bibtex-empty-field)) (define-key km "" (quote bibtex-make-field)) (define-key km "" (quote bibtex-entry-update)) (define-key km "$" (quote bibtex-ispell-abstract)) (define-key km "\201" (quote bibtex-beginning-of-entry)) (define-key km "\205" (quote bibtex-end-of-entry)) (define-key km "\214" (quote bibtex-reposition-window)) (define-key km "\210" (quote bibtex-mark-entry)) (define-key km "" (quote bibtex-entry)) (define-key km "n" (quote bibtex-narrow-to-entry)) (define-key km "w" (quote widen)) (define-key km "" (quote bibtex-url)) (define-key km "" (quote bibtex-search-entries)) (define-key km "" (quote bibtex-remove-OPT-or-ALT)) (define-key km "	" (quote bibtex-InProceedings)) (define-key km "i" (quote bibtex-InCollection)) (define-key km "I" (quote bibtex-InBook)) (define-key km "" (quote bibtex-Article)) (define-key km "" (quote bibtex-InBook)) (define-key km "b" (quote bibtex-Book)) (define-key km "B" (quote bibtex-Booklet)) (define-key km "" (quote bibtex-InCollection)) (define-key km "" (quote bibtex-Manual)) (define-key km "m" (quote bibtex-MastersThesis)) (define-key km "M" (quote bibtex-Misc)) (define-key km "" (quote bibtex-InProceedings)) (define-key km "p" (quote bibtex-Proceedings)) (define-key km "P" (quote bibtex-PhdThesis)) (define-key km "\360" (quote bibtex-Preamble)) (define-key km "" (quote bibtex-String)) (define-key km "" (quote bibtex-TechReport)) (define-key km "" (quote bibtex-Unpublished)) km)) nil [61411 64226])
            ("easy-menu-define" code nil nil [64228 66851])
            ("bibtex-entry-alist" variable nil nil [66878 66989])
            ("bibtex-field-alist" variable nil nil [66991 67102])
            ("bibtex-field-braces-opt" variable nil nil [67104 67274])
            ("bibtex-field-strings-opt" variable nil nil [67276 67493])
            ("bibtex-pop-previous-search-point" variable nil nil [67495 67619])
            ("bibtex-pop-next-search-point" variable nil nil [67621 67737])
            ("bibtex-field-kill-ring" variable nil nil [67739 67874])
            ("bibtex-field-kill-ring-yank-pointer" variable nil nil [67876 68000])
            ("bibtex-entry-kill-ring" variable nil nil [68002 68138])
            ("bibtex-entry-kill-ring-yank-pointer" variable nil nil [68140 68264])
            ("bibtex-last-kill-command" variable nil nil [68266 68366])
            ("bibtex-strings" variable (:default-value (lazy-completion-table bibtex-strings (lambda nil (bibtex-parse-strings (bibtex-string-files-init))))) nil [68368 68663])
            ("make-variable-buffer-local" code nil nil [68664 68708])
            ("put" code nil nil [68709 68754])
            ("bibtex-reference-keys" variable (:default-value (lazy-completion-table bibtex-reference-keys (lambda nil (bibtex-parse-keys nil t)))) nil [68756 69019])
            ("make-variable-buffer-local" code nil nil [69020 69071])
            ("put" code nil nil [69072 69124])
            ("bibtex-buffer-last-parsed-tick" variable nil nil [69126 69243])
            ("bibtex-parse-idle-timer" variable nil nil [69245 69323])
            ("bibtex-progress-lastperc" variable nil nil [69325 69417])
            ("bibtex-progress-lastmes" variable nil nil [69419 69491])
            ("bibtex-progress-interval" variable nil nil [69493 69566])
            ("bibtex-key-history" variable nil nil [69568 69634])
            ("bibtex-entry-type-history" variable nil nil [69636 69716])
            ("bibtex-field-history" variable nil nil [69718 69793])
            ("bibtex-reformat-previous-options" variable nil nil [69795 69873])
            ("bibtex-reformat-previous-reference-keys" variable nil nil [69875 69974])
            ("bibtex-field-name" variable
               (:constant-flag t
                :default-value "[^\"#%'(),={} 	
0-9][^\"#%'(),={} 	
]*")
                nil [69976 70097])
            ("bibtex-name-part" variable
               (:constant-flag t
                :default-value (concat ",[ 	
]*\\(" bibtex-field-name "\\)"))
                nil [70099 70229])
            ("bibtex-reference-key" variable
               (:constant-flag t
                :default-value "[][[:alnum:].:;?!`'/*@+|()<>&_^$-]+")
                nil [70231 70362])
            ("bibtex-field-const" variable
               (:constant-flag t
                :default-value "[][[:alnum:].:;?!`'/*@+=|<>&_^$-]+")
                nil [70364 70475])
            ("bibtex-entry-type" variable nil nil [70477 70592])
            ("bibtex-entry-head" variable nil nil [70594 70732])
            ("bibtex-entry-maybe-empty-head" variable nil nil [70734 70891])
            ("bibtex-any-entry-maybe-empty-head" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(@[ 	]*" bibtex-field-name "\\)[ 	]*[({][ 	
]*\\(" bibtex-reference-key "\\)?"))
                nil [70893 71131])
            ("bibtex-any-valid-entry-type" variable nil nil [71133 71286])
            ("bibtex-type-in-head" variable
               (:constant-flag t
                :default-value 1)
                nil [71288 71393])
            ("bibtex-key-in-head" variable
               (:constant-flag t
                :default-value 2)
                nil [71395 71498])
            ("bibtex-string-type" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(@[ 	]*String\\)[ 	]*[({][ 	
]*")
                nil [71500 71632])
            ("bibtex-string-maybe-empty-head" variable
               (:constant-flag t
                :default-value (concat bibtex-string-type "\\(" bibtex-reference-key "\\)?"))
                nil [71634 71801])
            ("bibtex-preamble-prefix" variable
               (:constant-flag t
                :default-value "[ 	]*\\(@[ 	]*Preamble\\)[ 	]*[({][ 	
]*")
                nil [71803 71950])
            ("bibtex-font-lock-syntactic-keywords" variable
               (:constant-flag t
                :default-value (\` (((\, (concat "^[ 	]*\\(" (substring bibtex-comment-start 0 1) "\\)" (substring bibtex-comment-start 1) "\\>")) 1 (quote (11))))))
                nil [71952 72139])
            ("bibtex-font-lock-keywords" variable (:default-value (\` (((\, bibtex-any-entry-maybe-empty-head) ((\, bibtex-type-in-head) font-lock-function-name-face) ((\, bibtex-key-in-head) font-lock-constant-face nil t)) ((\, (concat "^[ 	]*\\(OPT" bibtex-field-name "\\)[ 	]*=")) 1 font-lock-comment-face) ((\, (concat "^[ 	]*\\(" bibtex-field-name "\\)[ 	]*=")) 1 font-lock-variable-name-face) (bibtex-font-lock-url) (bibtex-font-lock-crossref) (\,@ (mapcar (lambda (matcher) (\` ((lambda (bound) (bibtex-font-lock-cite (quote (\, matcher)) bound))))) bibtex-cite-matcher-alist))))) nil [72141 72904])
            ("bibtex-font-lock-url-regexp" variable (:default-value (concat "^[ 	]*" (regexp-opt (delete-dups (mapcar (quote caar) bibtex-generate-url-list)) t) "[ 	]*=[ 	]*")) nil [72906 73210])
            ("bibtex-string-empty-key" variable nil nil [73212 73305])
            ("bibtex-sort-entry-class-alist" variable nil nil [73307 73511])
            ("bibtex-parse-association" function (:arguments ("parse-lhs" "parse-rhs")) nil [73515 74206])
            ("bibtex-parse-field-name" function nil nil [74208 75295])
            ("bibtex-braced-string-syntax-table" variable
               (:constant-flag t
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 91 "." st) (modify-syntax-entry 93 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) (modify-syntax-entry 92 "." st) (modify-syntax-entry 34 "." st) st))
                nil [75297 75723])
            ("bibtex-quoted-string-syntax-table" variable
               (:constant-flag t
                :default-value (let ((st (make-syntax-table))) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 34 "\"" st) st))
                nil [75725 75929])
            ("bibtex-parse-field-string" function nil nil [75931 76702])
            ("bibtex-parse-field-text" function nil nil [76704 77642])
            ("bibtex-parse-field" function nil nil [77644 77992])
            ("bibtex-start-of-field" function (:arguments ("bounds")) nil [77994 78058])
            ("bibtex-start-of-name-in-field" function (:arguments ("bounds")) nil [78059 78131])
            ("bibtex-end-of-name-in-field" function (:arguments ("bounds")) nil [78132 78202])
            ("bibtex-start-of-text-in-field" function (:arguments ("bounds")) nil [78203 78269])
            ("bibtex-end-of-text-in-field" function (:arguments ("bounds")) nil [78270 78334])
            ("bibtex-end-of-field" function (:arguments ("bounds")) nil [78335 78391])
            ("bibtex-search-forward-field" function (:arguments ("name" "bound")) nil [78393 80524])
            ("bibtex-search-backward-field" function (:arguments ("name" "bound")) nil [80526 81987])
            ("bibtex-name-in-field" function (:arguments ("bounds" "remove-opt-alt")) nil [81989 82575])
            ("bibtex-text-in-field-bounds" function (:arguments ("bounds" "content")) nil [82577 83910])
            ("bibtex-text-in-field" function (:arguments ("field" "follow-crossref")) nil [83912 84911])
            ("bibtex-parse-string-prefix" function nil nil [84913 85819])
            ("bibtex-parse-string-postfix" function nil nil [85821 86436])
            ("bibtex-parse-string" function (:arguments ("empty-key")) nil [86438 86920])
            ("bibtex-search-forward-string" function (:arguments ("empty-key")) nil [86922 87565])
            ("bibtex-reference-key-in-string" function (:arguments ("bounds")) nil [87567 87788])
            ("bibtex-text-in-string" function (:arguments ("bounds" "content")) nil [87790 88136])
            ("bibtex-start-of-text-in-string" function (:arguments ("bounds")) nil [88138 88211])
            ("bibtex-end-of-text-in-string" function (:arguments ("bounds")) nil [88212 88283])
            ("bibtex-end-of-string" function (:arguments ("bounds")) nil [88284 88347])
            ("bibtex-type-in-head" function nil nil [88349 88602])
            ("bibtex-key-in-head" function (:arguments ("empty")) nil [88604 88794])
            ("bibtex-parse-preamble" function nil nil [88796 89256])
            ("bibtex-string=" function (:arguments ("str1" "str2")) nil [89279 89423])
            ("bibtex-delete-whitespace" function nil nil [89425 89580])
            ("bibtex-current-line" function nil nil [89582 89739])
            ("bibtex-valid-entry" function (:arguments ("empty-key")) nil [89741 91179])
            ("bibtex-skip-to-valid-entry" function
               (:user-visible-flag t
                :arguments ("backward"))
                nil [91181 92465])
            ("bibtex-map-entries" function (:arguments ("fun")) nil [92467 93467])
            ("bibtex-progress-message" function (:arguments ("flag" "interval")) nil [93469 94621])
            ("bibtex-field-left-delimiter" function nil nil [94623 94784])
            ("bibtex-field-right-delimiter" function nil nil [94786 94948])
            ("bibtex-entry-left-delimiter" function nil nil [94950 95110])
            ("bibtex-entry-right-delimiter" function nil nil [95112 95273])
            ("bibtex-flash-head" function (:arguments ("prompt")) nil [95275 95913])
            ("bibtex-make-optional-field" function (:arguments ("field")) nil [95915 96159])
            ("bibtex-move-outside-of-entry" function nil nil [96161 96739])
            ("bibtex-beginning-of-first-entry" function nil nil [96741 97005])
            ("bibtex-enclosing-field" function (:arguments ("comma" "noerr")) nil [97007 98117])
            ("bibtex-beginning-first-field" function (:arguments ("beg")) nil [98119 98387])
            ("bibtex-insert-kill" function (:arguments ("n" "comma")) nil [98389 100123])
            ("bibtex-vec-push" function (:arguments ("vec" "idx" "newelt")) nil [100125 100269])
            ("bibtex-vec-incr" function (:arguments ("vec" "idx")) nil [100271 100412])
            ("bibtex-format-entry" function nil nil [100414 118221])
            ("bibtex-field-re-init" function (:arguments ("regexp-alist" "type")) nil [118223 119321])
            ("bibtex-autokey-abbrev" function (:arguments ("string" "len")) nil [119325 120080])
            ("bibtex-autokey-get-field" function (:arguments ("field" "change-list")) nil [120082 120804])
            ("bibtex-autokey-get-names" function nil nil [120806 122201])
            ("bibtex-autokey-demangle-name" function (:arguments ("fullname")) nil [122203 123753])
            ("bibtex-autokey-get-year" function nil nil [123755 124045])
            ("bibtex-autokey-get-title" function nil nil [124047 126158])
            ("bibtex-autokey-demangle-title" function (:arguments ("titleword")) nil [126160 126787])
            ("bibtex-generate-autokey" function nil nil [126789 131195])
            ("bibtex-global-key-alist" function nil nil [131199 131651])
            ("bibtex-read-key" function (:arguments ("prompt" "key" "global")) nil [131653 132090])
            ("bibtex-read-string-key" function (:arguments ("key")) nil [132092 132342])
            ("bibtex-parse-keys" function (:arguments ("abortable" "verbose")) nil [132344 135824])
            ("bibtex-parse-strings" function (:arguments ("add" "abortable")) nil [135826 137234])
            ("bibtex-strings" function nil nil [137236 137439])
            ("bibtex-string-files-init" function nil nil [137441 139098])
            ("bibtex-parse-buffers-stealthily" function nil nil [139100 140327])
            ("bibtex-initialize" function
               (:user-visible-flag t
                :arguments ("current" "force" "select"))
                nil [140344 144074])
            ("bibtex-complete-string-cleanup" function (:arguments ("compl")) nil [144076 144559])
            ("bibtex-complete-crossref-cleanup" function (:arguments ("buf")) nil [144561 145062])
            ("bibtex-copy-summary-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [145064 145692])
            ("bibtex-summary" function nil nil [145694 147269])
            ("bibtex-pop" function (:arguments ("arg" "direction")) nil [147271 149763])
            ("bibtex-beginning-of-field" function nil nil [149765 150163])
            ("bibtex-font-lock-url" function (:arguments ("bound" "no-button")) nil [150165 151611])
            ("bibtex-font-lock-crossref" function (:arguments ("bound")) nil [151613 152323])
            ("bibtex-font-lock-cite" function (:arguments ("matcher" "bound")) nil [152325 152847])
            ("bibtex-button-action" function (:arguments ("button")) nil [152849 153010])
            ("define-button-type" code nil nil [153012 153158])
            ("define-button-type" code nil nil [153160 153335])
            ("bibtex-button" function (:arguments ("beg" "end" "type" "args")) nil [153337 153519])
            ("define-derived-mode" code nil nil [153565 158170])
            ("bibtex-entry-alist" function (:arguments ("dialect")) nil [158172 159560])
            ("bibtex-set-dialect" function
               (:user-visible-flag t
                :arguments ("dialect" "local"))
                nil [159562 161875])
            ("let" code nil nil [162053 163803])
            ("bibtex-field-list" function (:arguments ("entry-type")) nil [163805 165268])
            ("bibtex-entry" function
               (:user-visible-flag t
                :arguments ("entry-type"))
                nil [165270 166512])
            ("bibtex-entry-update" function
               (:user-visible-flag t
                :arguments ("entry-type"))
                nil [166514 168524])
            ("bibtex-parse-entry" function (:arguments ("content")) nil [168526 169368])
            ("bibtex-autofill-entry" function (:user-visible-flag t) nil [169370 172610])
            ("bibtex-print-help-message" function
               (:user-visible-flag t
                :arguments ("field" "comma"))
                nil [172612 173838])
            ("bibtex-make-field" function
               (:user-visible-flag t
                :arguments ("field" "move" "interactive" "nodelim"))
                nil [173840 176246])
            ("bibtex-beginning-of-entry" function (:user-visible-flag t) nil [176248 176706])
            ("bibtex-end-of-entry" function (:user-visible-flag t) nil [176708 177639])
            ("bibtex-goto-line" function (:arguments ("arg")) nil [177641 177912])
            ("bibtex-reposition-window" function (:user-visible-flag t) nil [177914 178704])
            ("bibtex-mark-entry" function (:user-visible-flag t) nil [178706 178893])
            ("bibtex-count-entries" function
               (:user-visible-flag t
                :arguments ("count-string-entries"))
                nil [178895 179589])
            ("bibtex-ispell-entry" function (:user-visible-flag t) nil [179591 179800])
            ("bibtex-ispell-abstract" function (:user-visible-flag t) nil [179802 180226])
            ("bibtex-narrow-to-entry" function (:user-visible-flag t) nil [180228 180446])
            ("bibtex-entry-index" function nil nil [180448 181510])
            ("bibtex-init-sort-entry-class-alist" function nil nil [181512 182089])
            ("bibtex-lessp" function (:arguments ("index1" "index2")) nil [182091 184129])
            ("bibtex-sort-buffer" function (:user-visible-flag t) nil [184131 185061])
            ("bibtex-search-crossref" function
               (:user-visible-flag t
                :arguments ("crossref-key" "pnt" "split" "noerror"))
                nil [185089 188619])
            ("defalias" code nil nil [188646 188702])
            ("bibtex-dist" function (:arguments ("pos" "beg" "end")) nil [188704 188909])
            ("bibtex-search-entry" function
               (:user-visible-flag t
                :arguments ("key" "global" "start" "display"))
                nil [188926 191265])
            ("defalias" code nil nil [191292 191342])
            ("bibtex-prepare-new-entry" function (:arguments ("index")) nil [191344 194285])
            ("bibtex-validate" function
               (:user-visible-flag t
                :arguments ("test-thoroughly"))
                nil [194287 202901])
            ("bibtex-validate-globally" function
               (:user-visible-flag t
                :arguments ("strings"))
                nil [202938 205538])
            ("bibtex-next-field" function
               (:user-visible-flag t
                :arguments ("begin" "comma"))
                nil [205575 206514])
            ("bibtex-find-text" function
               (:user-visible-flag t
                :arguments ("begin" "noerror" "help" "comma"))
                nil [206516 207557])
            ("bibtex-find-text-internal" function (:arguments ("noerror" "subfield" "comma")) nil [207559 211397])
            ("bibtex-remove-OPT-or-ALT" function
               (:user-visible-flag t
                :arguments ("comma"))
                nil [211399 212691])
            ("bibtex-remove-delimiters" function
               (:user-visible-flag t
                :arguments ("comma"))
                nil [212693 213111])
            ("bibtex-kill-field" function
               (:user-visible-flag t
                :arguments ("copy-only" "comma"))
                nil [213113 214397])
            ("bibtex-copy-field-as-kill" function
               (:user-visible-flag t
                :arguments ("comma"))
                nil [214399 214655])
            ("bibtex-kill-entry" function
               (:user-visible-flag t
                :arguments ("copy-only"))
                nil [214657 216013])
            ("bibtex-copy-entry-as-kill" function (:user-visible-flag t) nil [216015 216163])
            ("bibtex-yank" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [216165 216531])
            ("bibtex-yank-pop" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [216533 217791])
            ("bibtex-empty-field" function
               (:user-visible-flag t
                :arguments ("comma"))
                nil [217793 218325])
            ("bibtex-pop-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [218327 218613])
            ("bibtex-pop-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [218615 218909])
            ("bibtex-clean-entry" function
               (:user-visible-flag t
                :arguments ("new-key" "called-by-reformat"))
                nil [218911 224178])
            ("bibtex-fill-field-bounds" function (:arguments ("bounds" "justify" "move")) nil [224180 225417])
            ("bibtex-fill-field" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [225419 225809])
            ("bibtex-fill-entry" function (:user-visible-flag t) nil [225811 226672])
            ("bibtex-realign" function nil nil [226674 227485])
            ("bibtex-reformat" function
               (:user-visible-flag t
                :arguments ("read-options"))
                nil [227487 231495])
            ("bibtex-convert-alien" function
               (:user-visible-flag t
                :arguments ("read-options"))
                nil [231497 232429])
            ("define-obsolete-function-alias" code nil nil [232431 232508])
            ("bibtex-completion-at-point-function" function nil nil [232509 236358])
            ("bibtex-String" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [236360 237214])
            ("bibtex-Preamble" function (:user-visible-flag t) nil [237216 237634])
            ("bibtex-url" function
               (:user-visible-flag t
                :arguments ("pos" "no-browse"))
                nil [237636 242692])
            ("bibtex-search-entries" function
               (:user-visible-flag t
                :arguments ("field" "regexp" "global" "display"))
                nil [242934 246837])
            ("bibtex-display-entries" function (:arguments ("entries" "append")) nil [246839 248075])
            ("bibtex" package nil nil [248105 248122]))          
      :file "bibtex.el"
      :pointmax 248147
      :fsize 248146
      :lastmodtime '(23525 29606 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("forward-page" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [1003 2074])
            ("backward-page" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [2076 2349])
            ("mark-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2351 2792])
            ("narrow-to-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2794 4443])
            ("put" code nil nil [4444 4477])
            ("count-lines-page" function (:user-visible-flag t) nil [4479 5038])
            ("what-page" function (:user-visible-flag t) nil [5040 5470])
            ("page" package nil nil [5511 5526]))          
      :file "page.el"
      :pointmax 5550
      :fsize 5549
      :lastmodtime '(23525 29608 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode-hook" variable (:default-value (quote (text-mode-hook-identify))) nil [1155 1354])
            ("text-mode-variant" variable nil nil [1356 1497])
            ("text-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 ".   " st) (modify-syntax-entry 92 ".   " st) (modify-syntax-entry 39 "w p" st) (modify-syntax-entry 1523 "w   ") (modify-syntax-entry 1524 "w   ") (modify-syntax-entry 183 "w   ") (modify-syntax-entry 8231 "w   ") (modify-syntax-entry 65306 "w   ") st)) nil [1499 2783])
            ("text-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ispell-complete-word)) (define-key map [menu-bar text] (cons "Text" (make-sparse-keymap "Text"))) (bindings--define-key map [menu-bar text toggle-text-mode-auto-fill] (quote (menu-item "Auto Fill" toggle-text-mode-auto-fill :button (:toggle memq (quote turn-on-auto-fill) text-mode-hook) :help "Automatically fill text while typing in text modes (Auto Fill mode)"))) (bindings--define-key map [menu-bar text paragraph-indent-minor-mode] (quote (menu-item "Paragraph Indent" paragraph-indent-minor-mode :button (:toggle bound-and-true-p paragraph-indent-minor-mode) :help "Toggle paragraph indent minor mode"))) (bindings--define-key map [menu-bar text sep] menu-bar-separator) (bindings--define-key map [menu-bar text center-region] (quote (menu-item "Center Region" center-region :help "Center the marked region" :enable (region-active-p)))) (bindings--define-key map [menu-bar text center-paragraph] (quote (menu-item "Center Paragraph" center-paragraph :help "Center the current paragraph"))) (bindings--define-key map [menu-bar text center-line] (quote (menu-item "Center Line" center-line :help "Center the current line"))) map)) nil [2785 4336])
            ("define-derived-mode" code nil nil [4340 4892])
            ("define-derived-mode" code nil nil [4894 5468])
            ("define-minor-mode" code nil nil [5470 6653])
            ("defalias" code nil nil [6655 6696])
            ("text-mode-hook-identify" function nil nil [6912 7123])
            ("toggle-text-mode-auto-fill" function (:user-visible-flag t) nil [7125 7832])
            ("define-key" code nil nil [7836 7888])
            ("center-paragraph" function (:user-visible-flag t) nil [7890 8190])
            ("center-region" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [8192 8616])
            ("define-key" code nil nil [8618 8665])
            ("center-line" function
               (:user-visible-flag t
                :arguments ("nlines"))
                nil [8667 9564])
            ("text-mode" package nil nil [9566 9586]))          
      :file "text-mode.el"
      :pointmax 9615
      :fsize 9614
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [1165 1184])
            ("cl-lib" include nil nil [1145 1162])
            ("compare-w" include nil nil [1122 1142])
            ("font-lock-comment-face" variable nil nil [1187 1218])
            ("font-lock-doc-face" variable nil nil [1219 1246])
            ("shell" include nil nil [1248 1264])
            ("compile" include nil nil [1265 1283])
            ("tex-file" customgroup (:user-visible-flag t) nil [1285 1370])
            ("tex-run" customgroup (:user-visible-flag t) nil [1372 1470])
            ("tex-view" customgroup (:user-visible-flag t) nil [1472 1562])
            ("tex-flymake" customgroup (:user-visible-flag t) nil [1564 1664])
            ("tex-shell-file-name" variable nil nil [1681 1862])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1879 2207])
            ("tex-first-line-header-regexp" variable nil nil [2224 2589])
            ("tex-main-file" variable nil nil [2606 2883])
            ("tex-offer-save" variable (:default-value t) nil [2900 3042])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [3059 3257])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [3274 3480])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [3497 3707])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [3724 4075])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [4092 4564])
            ("latex-standard-block-names" variable (:default-value (quote ("abstract" "array" "center" "description" "displaymath" "document" "enumerate" "eqnarray" "eqnarray*" "equation" "figure" "figure*" "flushleft" "flushright" "itemize" "letter" "list" "minipage" "picture" "quotation" "quote" "slide" "sloppypar" "tabbing" "table" "table*" "tabular" "tabular*" "thebibliography" "theindex*" "titlepage" "trivlist" "verbatim" "verbatim*" "verse" "math"))) nil [4566 5063])
            ("latex-block-names" variable nil nil [5080 5262])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [5279 5575])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5592 5880])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5897 6601])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [6618 7186])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [7203 7417])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [7434 7767])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [7784 7968])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [7985 8171])
            ("tex-fontify-script" variable (:default-value t) nil [8173 8313])
            ("put" code nil nil [8314 8370])
            ("tex-font-script-display" variable (:default-value (quote (-0.2 0.2))) nil [8372 8827])
            ("tex-chktex-program" variable (:default-value "chktex") nil [8829 9012])
            ("tex-chktex-extra-flags" variable nil nil [9014 9172])
            ("tex-last-temp-file" variable nil nil [9174 9376])
            ("tex-command" variable (:default-value "tex") nil [9378 9736])
            ("tex-trailer" variable nil nil [9738 9839])
            ("tex-start-of-header" variable nil nil [9841 9951])
            ("tex-end-of-header" variable nil nil [9953 10059])
            ("tex-shell-cd-command" variable (:default-value "cd") nil [10061 10229])
            ("tex-zap-file" variable nil nil [10231 10397])
            ("tex-last-buffer-texed" variable nil nil [10399 10466])
            ("tex-print-file" variable nil nil [10468 10593])
            ("tex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 12 ">" st) (modify-syntax-entry 0 "w" st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 9 " " st) (modify-syntax-entry 126 "." st) (modify-syntax-entry 36 "$$" st) (modify-syntax-entry 92 "/" st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 95 "." st) (modify-syntax-entry 94 "." st) st)) nil [10595 11399])
            ("latex-imenu-indent-string" variable (:default-value ". ") nil [11432 11650])
            ("latex-section-alist" variable (:default-value (quote (("part" . 0) ("chapter" . 1) ("section" . 2) ("subsection" . 3) ("subsubsection" . 4) ("paragraph" . 5) ("subparagraph" . 6)))) nil [11652 11822])
            ("latex-metasection-list" variable (:default-value (quote ("documentstyle" "documentclass" "begin{document}" "end{document}" "appendix" "frontmatter" "mainmatter" "backmatter"))) nil [11824 11985])
            ("latex-imenu-create-index" function nil nil [11987 14128])
            ("latex-outline-regexp" variable (:default-value (concat "\\\\" (regexp-opt (append latex-metasection-list (mapcar (function car) latex-section-alist)) t))) nil [14163 14326])
            ("latex-outline-level" function nil nil [14328 14478])
            ("tex-current-defun-name" function nil nil [14480 14857])
            ("tex-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((headings (regexp-opt (quote ("title" "begin" "end" "chapter" "part" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "subsubparagraph" "newcommand" "renewcommand" "providecommand" "newenvironment" "renewenvironment" "newtheorem" "renewtheorem")) t)) (variables (regexp-opt (quote ("newcounter" "newcounter*" "setcounter" "addtocounter" "setlength" "addtolength" "settowidth")) t)) (includes (regexp-opt (quote ("input" "include" "includeonly" "bibliography" "epsfig" "psfig" "epsf" "nofiles" "usepackage" "documentstyle" "documentclass" "verbatiminput" "includegraphics" "includegraphics*")) t)) (verbish (regexp-opt (quote ("url" "nolinkurl" "path")) t)) (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (inbraces-re (lambda (re) (concat "\\(?:[^{}\\]\\|\\\\.\\|" re "\\)"))) (arg (concat "{\\(" (funcall inbraces-re "{[^}]*}") "+\\)"))) (\` (((\, (concat "\\$\\$?\\(?:[^$\\{}]\\|\\\\.\\|{" (funcall inbraces-re (concat "{" (funcall inbraces-re "{[^}]*}") "*}")) "*}\\)+\\$?\\$")) (0 (quote tex-math))) ((\, (concat slash headings "\\*?" opt arg)) 3 font-lock-function-name-face keep) ((\, (concat slash "\\(?:provide\\|\\(?:re\\)?new\\)command\\** *\\(\\\\[A-Za-z@]+\\)")) 1 font-lock-function-name-face keep) ((\, (concat slash variables " *" arg)) 2 font-lock-variable-name-face) ((\, (concat slash includes opt arg)) 3 font-lock-builtin-face) ((\, (concat slash verbish opt arg)) 3 (quote tex-verbatim)) ("^[ 	]*\\\\def *\\\\\\(\\(\\w\\|@\\)+\\)" 1 font-lock-function-name-face))))))
                nil [16616 19834])
            ("tex-font-lock-append-prop" function (:arguments ("prop")) nil [19836 19984])
            ("tex-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-1 (eval-when-compile (let* ((bold (regexp-opt (quote ("textbf" "textsc" "textup" "boldsymbol" "pmb")) t)) (italic (regexp-opt (quote ("textit" "textsl" "emph")) t)) (citations (regexp-opt (quote ("label" "ref" "pageref" "vref" "eqref" "cite" "nocite" "index" "glossary" "bibitem" "citep" "citet")) t)) (specials-1 (regexp-opt (quote ("\\" "\\*")) t)) (specials-2 (regexp-opt (quote ("linebreak" "nolinebreak" "pagebreak" "nopagebreak" "newline" "newpage" "clearpage" "cleardoublepage" "displaybreak" "allowdisplaybreaks" "enlargethispage")) t)) (general "\\([a-zA-Z@]+\\**\\|[^ 	
]\\)") (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (args "\\(\\(?:[^{}&\\]+\\|\\\\.\\|{[^}]*}\\)+\\)") (arg "{\\(\\(?:[^{}\\]+\\|\\\\.\\|{[^}]*}\\)+\\)")) (list (list (concat slash citations opt arg) 3 (quote font-lock-constant-face)) (cons (concat (regexp-opt (\` ("``" "\"<" "\"`" "<<" "«")) t) "[^'\">{]+" (regexp-opt (\` ("''" "\">" "\"'" ">>" "»")) t)) (quote font-lock-string-face)) (cons (concat slash specials-1) (quote font-lock-warning-face)) (list (concat "\\(" slash specials-2 "\\)\\([^a-zA-Z@]\\|\\'\\)") 1 (quote font-lock-warning-face)) (concat slash general) (list (concat slash bold " *" arg) 2 (quote (tex-font-lock-append-prop (quote bold))) (quote append)) (list (concat slash italic " *" arg) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(em\\|it\\|sl\\)\\>" args) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(bf\\(series\\)?\\)\\>" args) 3 (quote (tex-font-lock-append-prop (quote bold))) (quote append)))))))
                nil [19986 22834])
            ("tex-font-lock-suscript" function (:arguments ("pos")) nil [22836 23359])
            ("tex-font-lock-match-suscript" function (:arguments ("limit")) nil [23361 23935])
            ("tex-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-2 (quote ((tex-font-lock-match-suscript (1 (tex-font-lock-suscript (match-beginning 0)) append))))))
                nil [23937 24163])
            ("tex-font-lock-keywords" variable
               (:constant-flag t
                :default-value tex-font-lock-keywords-1)
                nil [24165 24274])
            ("tex-verbatim-environments" variable (:default-value (quote ("verbatim" "verbatim*"))) nil [24276 24338])
            ("put" code nil nil [24339 24447])
            ("latex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules tex-syntax-propertize-rules ("\\\\\\(?:end\\|begin\\) *\\({[^
{}]*}\\)" (1 (ignore (tex-env-mark (match-beginning 0) (match-beginning 1) (match-end 1)))))))
                nil [24708 24995])
            ("tex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\\\verb\\**\\([^a-z@*]\\)" (1 (prog1 "\"" (tex-font-lock-verb (match-beginning 0) (char-after (match-beginning 1))))))))
                nil [24470 24704])
            ("tex-env-mark" function (:arguments ("cmd" "start" "end")) nil [24998 26246])
            ("define-minor-mode" code nil nil [26248 26891])
            ("latex-env-before-change" function (:arguments ("start" "end")) nil [26893 28721])
            ("tex-font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [28723 29155])
            ("tex-suscript-height-ratio" variable (:default-value 0.8) nil [29157 29445])
            ("tex-suscript-height-minimum" variable nil nil [29447 29859])
            ("tex-suscript-height" function (:arguments ("height")) nil [29861 30353])
            ("superscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30355 30473])
            ("subscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30474 30589])
            ("tex-math" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [30591 30712])
            ("tex-verbatim" variable
               (:default-value (quote ((t :inherit fixed-pitch-serif)))
                :type "face")
                nil [30714 30840])
            ("tex-font-lock-verb" function (:arguments ("start" "delim")) nil [30842 31891])
            ("tex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [31939 32199])
            ("tex-define-common-keys" function (:arguments ("keymap")) nil [32203 33443])
            ("tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (tex-define-common-keys map) (define-key map "\"" (quote tex-insert-quote)) (define-key map "
" (quote tex-handle-newline)) (define-key map "\215" (quote latex-insert-item)) (define-key map "}" (quote up-list)) (define-key map "{" (quote tex-insert-braces)) (define-key map "" (quote tex-region)) (define-key map "" (quote tex-buffer)) (define-key map "" (quote tex-file)) (define-key map "" (quote tex-compile)) (define-key map "	" (quote tex-bibtex-file)) (define-key map "" (quote latex-insert-block)) (define-key map "" (quote latex-insert-block)) (define-key map "]" (quote latex-close-block)) (define-key map "/" (quote latex-close-block)) (define-key map "" (quote latex-close-block)) (define-key map "" (quote tex-goto-last-unclosed-latex-block)) (define-key map "" (quote tex-feed-input)) (define-key map [(control return)] (quote tex-feed-input)) (define-key map [menu-bar tex tex-bibtex-file] (quote ("BibTeX File" . tex-bibtex-file))) (define-key map [menu-bar tex tex-validate-region] (quote (menu-item "Validate Region" tex-validate-region :enable mark-active))) (define-key map [menu-bar tex tex-validate-buffer] (quote ("Validate Buffer" . tex-validate-buffer))) (define-key map [menu-bar tex tex-region] (quote (menu-item "TeX Region" tex-region :enable mark-active))) (define-key map [menu-bar tex tex-buffer] (quote ("TeX Buffer" . tex-buffer))) (define-key map [menu-bar tex tex-file] (quote ("TeX File" . tex-file))) map)) nil [33445 35145])
            ("latex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) (define-key map "" (quote latex-split-block)) map)) nil [35147 35362])
            ("plain-tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) map)) nil [35364 35536])
            ("tex-shell-map" variable (:default-value (let ((m (make-sparse-keymap))) (set-keymap-parent m shell-mode-map) (tex-define-common-keys m) m)) nil [35538 35751])
            ("tex-face-alist" variable (:default-value (quote ((bold . "{\\bf ") (italic . "{\\it ") (bold-italic . "{\\bi ") (underline . "\\underline{") (default . "{\\rm ")))) nil [35753 35976])
            ("tex-latex-face-alist" variable (:default-value (\` ((italic . "{\\em ") (\,@ tex-face-alist)))) nil [35978 36105])
            ("tex-facemenu-add-face-function" function (:arguments ("face" "_end")) nil [36107 36629])
            ("tex-guess-mode" function nil nil [36729 37658])
            ("define-derived-mode" code nil nil [37913 37997])
            ("defalias" code nil nil [38289 38346])
            ("if" code nil nil [38551 38768])
            ("tex-mode" function (:user-visible-flag t) nil [38786 39336])
            ("defalias" code nil nil [39798 39828])
            ("defalias" code nil nil [39844 39886])
            ("defalias" code nil nil [39902 39936])
            ("define-derived-mode" code nil nil [39953 41895])
            ("define-derived-mode" code nil nil [41912 45525])
            ("define-derived-mode" code nil nil [45542 47446])
            ("tildify-space-string" variable nil nil [47448 47477])
            ("tildify-foreach-region-function" variable nil nil [47478 47518])
            ("declare-function" code nil nil [47519 47627])
            ("tex--prettify-symbols-alist" variable nil nil [47628 47664])
            ("tex-common-initialization" function nil nil [47666 50661])
            ("tex-categorize-whitespace" function (:arguments ("backward-limit")) nil [50663 51624])
            ("tex-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51626 54124])
            ("tex-validate-buffer" function (:user-visible-flag t) nil [54126 56865])
            ("tex-validate-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [56867 58025])
            ("tex-handle-newline" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58027 58600])
            ("tex-terminate-paragraph" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58602 59285])
            ("define-skeleton" code nil nil [59287 59403])
            ("latex-fill-nobreak-predicate" function nil nil [59556 60005])
            ("latex-block-default" variable (:default-value "enumerate") nil [60007 60047])
            ("latex-block-args-alist" variable (:default-value (quote (("array" nil 123 (skeleton-read "Format: ") 125) ("tabular" nil 123 (skeleton-read "Format: ") 125) ("minipage" nil 123 (skeleton-read "Size: ") 125) ("picture" nil 40 (skeleton-read "SizeX,SizeY: ") 41)))) nil [60049 60669])
            ("latex-block-body-alist" variable (:default-value (quote (("enumerate" nil (quote (latex-insert-item)) > _) ("itemize" nil (quote (latex-insert-item)) > _) ("table" nil "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))) n _) ("figure" nil > _ n "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))))))) nil [60671 61345])
            ("defalias" code nil nil [61389 61436])
            ("define-skeleton" code nil nil [61437 62205])
            ("define-skeleton" code nil nil [62207 62293])
            ("latex-complete-bibtex-cache" variable nil nil [62321 62361])
            ("define-obsolete-function-alias" code nil nil [62363 62444])
            ("bibtex-reference-key" variable nil nil [62446 62475])
            ("declare-function" code nil nil [62476 62538])
            ("latex-complete-bibtex-keys" function nil nil [62540 63794])
            ("latex-complete-envnames" function nil nil [63796 64589])
            ("latex-complete-refkeys" function nil nil [64591 64710])
            ("latex-complete-alist" variable (:default-value (\` (("\\`\\\\\\(short\\)?cite\\'" \, (function latex-complete-bibtex-keys)) ("\\`\\\\\\(begin\\|end\\)\\'" \, (function latex-complete-envnames)) ("\\`\\\\[vf]?ref\\'" \, (function latex-complete-refkeys))))) nil [64712 64929])
            ("latex-complete-data" function nil nil [64931 66431])
            ("tex-search-noncomment" function (:arguments ("body")) nil [66473 66868])
            ("tex-last-unended-begin" function nil nil [66870 67216])
            ("tex-next-unmatched-end" function nil nil [67218 67540])
            ("tex-next-unmatched-eparen" function (:arguments ("otype")) nil [67542 68249])
            ("tex-last-unended-eparen" function (:arguments ("ctype")) nil [68251 68898])
            ("tex-goto-last-unclosed-latex-block" function (:user-visible-flag t) nil [68900 69178])
            ("latex-handle-escaped-parens" variable (:default-value t) nil [69180 69218])
            ("latex-backward-sexp-1" function nil nil [69396 70249])
            ("latex-forward-sexp-1" function nil nil [70532 71627])
            ("latex-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71629 72134])
            ("latex-syntax-after" function nil nil [72136 72303])
            ("latex-skip-close-parens" function nil nil [72305 72549])
            ("latex-down-list" function nil nil [72551 72912])
            ("defalias" code nil nil [72914 72966])
            ("define-skeleton" code nil nil [72967 73234])
            ("define-skeleton" code nil nil [73236 73720])
            ("tex-discount-args-cmds" variable
               (:constant-flag t
                :default-value (quote ("begin" "end" "input" "special" "cite" "ref" "include" "includeonly" "documentclass" "usepackage" "label")))
                nil [73722 73934])
            ("tex-count-words" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [73936 75000])
            ("tex-error-parse-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 123 "_" st) (modify-syntax-entry 125 "_" st) (modify-syntax-entry 91 "_" st) (modify-syntax-entry 93 "_" st) (modify-syntax-entry 34 "_" st) st)) nil [75185 75665])
            ("tex-old-error-file-name" function nil nil [75667 76426])
            ("tex-error-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (gnu ("^l\\.\\([1-9][0-9]*\\) \\(?:\\.\\.\\.\\)?\\(.*\\)$" tex-old-error-file-name 1 nil nil nil (2 compilation-error-face)) ("^\\(?:Und\\|Ov\\)erfull \\\\[hv]box .* at lines? \\(\\([1-9][0-9]*\\)\\(?:--\\([1-9][0-9]*\\)\\)?\\)$" tex-old-error-file-name (2 . 3) nil 1 nil (1 compilation-warning-face)) ("^(Font) *\\([^ 
].* on input line \\([1-9][0-9]*\\)\\)\\.$" tex-old-error-file-name 2 nil 1 1 (2 compilation-warning-face)))))
                nil [76428 77595])
            ("define-derived-mode" code nil nil [77624 77782])
            ("tex-start-shell" function nil nil [77799 78258])
            ("tex-feed-input" function (:user-visible-flag t) nil [78260 78572])
            ("tex-display-shell" function nil nil [78574 78723])
            ("tex-shell-sentinel" function (:arguments ("proc" "_msg")) nil [78725 78991])
            ("tex-set-buffer-directory" function (:arguments ("buffer" "directory")) nil [78993 79333])
            ("tex-send-command-modified-tick" variable nil nil [79335 79376])
            ("make-variable-buffer-local" code nil nil [79377 79437])
            ("tex-shell-proc" function nil nil [79439 79519])
            ("tex-shell-buf" function nil nil [79520 79580])
            ("tex-shell-buf-no-error" function nil nil [79581 79688])
            ("tex-send-command" function (:arguments ("command" "file" "background")) nil [79690 81194])
            ("tex-delete-last-temp-files" function (:arguments ("not-all")) nil [81196 81824])
            ("add-hook" code nil nil [81826 81881])
            ("tex-compile-history" variable nil nil [81956 81988])
            ("tex-input-files-re" variable (:default-value (eval-when-compile (concat "\\." (regexp-opt (quote ("tex" "texi" "texinfo" "bbl" "ind" "sty" "cls")) t) "\\'\\|\\`[^.]+\\'"))) nil [81990 82206])
            ("tex-use-reftex" variable (:default-value t) nil [82208 82344])
            ("tex-compile-commands" variable (:default-value (\` ((\,@ (mapcar (lambda (prefix) (\` ((concat (\, prefix) tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.pdf"))) (quote ("pdf" "xe" "lua")))) ((concat tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.dvi") ("xdvi %r &" "%r.dvi") ("\\doc-view \"%r.pdf\"" "%r.pdf") ("xpdf %r.pdf &" "%r.pdf") ("gv %r.ps &" "%r.ps") ("yap %r &" "%r.dvi") ("advi %r &" "%r.dvi") ("gv %r.pdf &" "%r.pdf") ("bibtex %r" "%r.aux" "%r.bbl") ("makeindex %r" "%r.idx" "%r.ind") ("texindex %r.??") ("dvipdfm %r" "%r.dvi" "%r.pdf") ("dvipdf %r" "%r.dvi" "%r.pdf") ("dvips -o %r.ps %r" "%r.dvi" "%r.ps") ("ps2pdf %r.ps" "%r.ps" "%r.pdf") ("lpr %r.ps" "%r.ps")))) nil [82346 83892])
            ("define-obsolete-function-alias" code nil nil [83894 83971])
            ("tex-guess-main-file" function (:arguments ("all")) nil [83973 85316])
            ("tex-main-file" function nil nil [85318 86321])
            ("tex-summarize-command" function (:arguments ("cmd")) nil [86323 86535])
            ("tex-uptodate-p" function (:arguments ("file")) nil [86537 88841])
            ("format-spec" function (:prototype-flag t) nil [88844 88881])
            ("tex-executable-cache" variable nil nil [88883 88916])
            ("tex-executable-exists-p" function (:arguments ("name")) nil [88917 89393])
            ("tex-command-executable" function (:arguments ("cmd")) nil [89395 89536])
            ("tex-command-active-p" function (:arguments ("cmd" "fspec")) nil [89538 89943])
            ("tex-cmd-bibtex-args" variable (:default-value "--min-crossref=100") nil [89945 90096])
            ("tex-format-cmd" function (:arguments ("format" "fspec")) nil [90098 90733])
            ("tex-compile-default" function (:arguments ("fspec")) nil [90735 93696])
            ("tex-cmd-doc-view" function (:arguments ("file")) nil [93698 93773])
            ("tex-compile" function
               (:user-visible-flag t
                :arguments ("dir" "cmd"))
                nil [93775 95210])
            ("tex-start-tex" function (:arguments ("command" "file" "dir")) nil [95212 95762])
            ("tex-send-tex-command" function (:arguments ("cmd" "dir")) nil [95764 96418])
            ("tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [96440 99127])
            ("tex-region-header" function (:arguments ("file" "beg")) nil [99129 100801])
            ("tex-buffer" function (:user-visible-flag t) nil [100803 101064])
            ("tex-file" function (:user-visible-flag t) nil [101066 101636])
            ("tex-generate-zap-file-name" function nil nil [101638 102094])
            ("tex-expand-files" function (:arguments ("s")) nil [102216 102590])
            ("tex-shell-running" function nil nil [102592 103041])
            ("tex-kill-job" function (:user-visible-flag t) nil [103043 103474])
            ("tex-recenter-output-buffer" function
               (:user-visible-flag t
                :arguments ("linenum"))
                nil [103476 104060])
            ("tex-print-file-extension" variable (:default-value ".dvi") nil [104062 104357])
            ("tex-print" function
               (:user-visible-flag t
                :arguments ("alt"))
                nil [104359 105470])
            ("tex-alt-print" function (:user-visible-flag t) nil [105472 105671])
            ("tex-view" function (:user-visible-flag t) nil [105673 106297])
            ("tex-append" function (:arguments ("file-name" "suffix")) nil [106299 107282])
            ("tex-show-print-queue" function (:user-visible-flag t) nil [107284 107588])
            ("tex-bibtex-file" function (:user-visible-flag t) nil [107590 108110])
            ("tex-indent-allhanging" variable (:default-value t) nil [108147 108179])
            ("tex-indent-arg" variable (:default-value 4) nil [108180 108205])
            ("tex-indent-basic" variable (:default-value 2) nil [108206 108233])
            ("tex-indent-item" variable (:default-value tex-indent-basic) nil [108234 108275])
            ("tex-indent-item-re" variable (:default-value "\\\\\\(bib\\)?item\\>") nil [108276 108327])
            ("latex-noindent-environments" variable (:default-value (quote ("document"))) nil [108328 108378])
            ("put" code nil nil [108379 108489])
            ("tex-latex-indent-syntax-table" variable (:default-value (let ((st (make-syntax-table tex-mode-syntax-table))) (modify-syntax-entry 36 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) st)) nil [108491 108754])
            ("latex-indent" function (:arguments ("_arg")) nil [108756 109458])
            ("latex-indent-within-escaped-parens" variable nil nil [109460 109846])
            ("latex-find-indent" function (:arguments ("virtual")) nil [109848 113821])
            ("doctex-font-lock-^^A" function nil nil [113842 114596])
            ("doctex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [114598 114972])
            ("doctex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules latex-syntax-propertize-rules ("\\(\\^\\)\\^A" (1 (doctex-font-lock-^^A)))))
                nil [114995 115197])
            ("doctex-font-lock-keywords" variable (:default-value (append tex-font-lock-keywords (quote (("^%<[^>]*>" (0 font-lock-preprocessor-face t)))))) nil [115200 115322])
            ("define-derived-mode" code nil nil [115339 115844])
            ("tex--prettify-symbols-alist" variable (:default-value (quote (("\\alpha" . 945) ("\\beta" . 946) ("\\gamma" . 947) ("\\delta" . 948) ("\\epsilon" . 1013) ("\\zeta" . 950) ("\\eta" . 951) ("\\theta" . 952) ("\\iota" . 953) ("\\kappa" . 954) ("\\lambda" . 955) ("\\mu" . 956) ("\\nu" . 957) ("\\xi" . 958) ("\\pi" . 960) ("\\rho" . 961) ("\\sigma" . 963) ("\\tau" . 964) ("\\upsilon" . 965) ("\\phi" . 981) ("\\chi" . 967) ("\\psi" . 968) ("\\omega" . 969) ("\\Gamma" . 915) ("\\Delta" . 916) ("\\Lambda" . 923) ("\\Phi" . 934) ("\\Pi" . 928) ("\\Psi" . 936) ("\\Sigma" . 931) ("\\Theta" . 920) ("\\Upsilon" . 933) ("\\Xi" . 926) ("\\Omega" . 937) ("\\Box" . 9633) ("\\Bumpeq" . 8782) ("\\Cap" . 8914) ("\\Cup" . 8915) ("\\Diamond" . 9671) ("\\Downarrow" . 8659) ("\\H{o}" . 337) ("\\Im" . 8465) ("\\Join" . 8904) ("\\Leftarrow" . 8656) ("\\Leftrightarrow" . 8660) ("\\Ll" . 8920) ("\\Lleftarrow" . 8666) ("\\Longleftarrow" . 8656) ("\\Longleftrightarrow" . 8660) ("\\Longrightarrow" . 8658) ("\\Lsh" . 8624) ("\\Re" . 8476) ("\\Rightarrow" . 8658) ("\\Rrightarrow" . 8667) ("\\Rsh" . 8625) ("\\Subset" . 8912) ("\\Supset" . 8913) ("\\Uparrow" . 8657) ("\\Updownarrow" . 8661) ("\\Vdash" . 8873) ("\\Vert" . 8214) ("\\Vvdash" . 8874) ("\\aleph" . 8501) ("\\amalg" . 8720) ("\\angle" . 8736) ("\\approx" . 8776) ("\\approxeq" . 8778) ("\\ast" . 8727) ("\\asymp" . 8781) ("\\backcong" . 8780) ("\\backepsilon" . 8717) ("\\backprime" . 8245) ("\\backsim" . 8765) ("\\backsimeq" . 8909) ("\\backslash" . 92) ("\\barwedge" . 8892) ("\\because" . 8757) ("\\beth" . 8502) ("\\between" . 8812) ("\\bigcap" . 8898) ("\\bigcirc" . 9711) ("\\bigcup" . 8899) ("\\bigstar" . 9733) ("\\bigtriangledown" . 9661) ("\\bigtriangleup" . 9651) ("\\bigvee" . 8897) ("\\bigwedge" . 8896) ("\\blacklozenge" . 10022) ("\\blacksquare" . 9642) ("\\blacktriangle" . 9652) ("\\blacktriangledown" . 9662) ("\\blacktriangleleft" . 9666) ("\\blacktriangleright" . 9656) ("\\bot" . 8869) ("\\bowtie" . 8904) ("\\boxminus" . 8863) ("\\boxplus" . 8862) ("\\boxtimes" . 8864) ("\\bullet" . 8226) ("\\bumpeq" . 8783) ("\\cap" . 8745) ("\\cdots" . 8943) ("\\centerdot" . 183) ("\\checkmark" . 10003) ("\\chi" . 967) ("\\cdot" . 8901) ("\\cdots" . 8943) ("\\circ" . 8728) ("\\circeq" . 8791) ("\\circlearrowleft" . 8634) ("\\circlearrowright" . 8635) ("\\circledR" . 174) ("\\circledS" . 9416) ("\\circledast" . 8859) ("\\circledcirc" . 8858) ("\\circleddash" . 8861) ("\\clubsuit" . 9827) ("\\coloneq" . 8788) ("\\complement" . 8705) ("\\cong" . 8773) ("\\coprod" . 8720) ("\\cup" . 8746) ("\\curlyeqprec" . 8926) ("\\curlyeqsucc" . 8927) ("\\curlypreceq" . 8828) ("\\curlyvee" . 8910) ("\\curlywedge" . 8911) ("\\curvearrowleft" . 8630) ("\\curvearrowright" . 8631) ("\\dag" . 8224) ("\\dagger" . 8224) ("\\daleth" . 8504) ("\\dashv" . 8867) ("\\ddag" . 8225) ("\\ddagger" . 8225) ("\\ddots" . 8945) ("\\diamond" . 8900) ("\\diamondsuit" . 9826) ("\\divideontimes" . 8903) ("\\doteq" . 8784) ("\\doteqdot" . 8785) ("\\dotplus" . 8724) ("\\dotsquare" . 8865) ("\\downarrow" . 8595) ("\\downdownarrows" . 8650) ("\\downleftharpoon" . 8643) ("\\downrightharpoon" . 8642) ("\\ell" . 8467) ("\\emptyset" . 8709) ("\\eqcirc" . 8790) ("\\eqcolon" . 8789) ("\\eqslantgtr" . 8925) ("\\eqslantless" . 8924) ("\\equiv" . 8801) ("\\exists" . 8707) ("\\fallingdotseq" . 8786) ("\\flat" . 9837) ("\\forall" . 8704) ("\\frown" . 8994) ("\\ge" . 8805) ("\\geq" . 8805) ("\\geqq" . 8807) ("\\geqslant" . 8805) ("\\gets" . 8592) ("\\gg" . 8811) ("\\ggg" . 8921) ("\\gimel" . 8503) ("\\gnapprox" . 8935) ("\\gneq" . 8809) ("\\gneqq" . 8809) ("\\gnsim" . 8935) ("\\gtrapprox" . 8819) ("\\gtrdot" . 8919) ("\\gtreqless" . 8923) ("\\gtreqqless" . 8923) ("\\gtrless" . 8823) ("\\gtrsim" . 8819) ("\\gvertneqq" . 8809) ("\\hbar" . 8463) ("\\heartsuit" . 9829) ("\\hookleftarrow" . 8617) ("\\hookrightarrow" . 8618) ("\\iff" . 8660) ("\\imath" . 305) ("\\in" . 8712) ("\\infty" . 8734) ("\\int" . 8747) ("\\intercal" . 8890) ("\\langle" . 10216) ("\\lbrace" . 123) ("\\lbrack" . 91) ("\\lceil" . 8968) ("\\ldots" . 8230) ("\\le" . 8804) ("\\leadsto" . 8605) ("\\leftarrow" . 8592) ("\\leftarrowtail" . 8610) ("\\leftharpoondown" . 8637) ("\\leftharpoonup" . 8636) ("\\leftleftarrows" . 8647) ("\\leftrightarrow" . 8596) ("\\leftrightarrows" . 8646) ("\\leftrightharpoons" . 8651) ("\\leftrightsquigarrow" . 8621) ("\\leftthreetimes" . 8907) ("\\leq" . 8804) ("\\leqq" . 8806) ("\\leqslant" . 8804) ("\\lessapprox" . 8818) ("\\lessdot" . 8918) ("\\lesseqgtr" . 8922) ("\\lesseqqgtr" . 8922) ("\\lessgtr" . 8822) ("\\lesssim" . 8818) ("\\lfloor" . 8970) ("\\lhd" . 9665) ("\\rhd" . 9655) ("\\ll" . 8810) ("\\llcorner" . 8990) ("\\lnapprox" . 8934) ("\\lneq" . 8808) ("\\lneqq" . 8808) ("\\lnsim" . 8934) ("\\longleftarrow" . 8592) ("\\longleftrightarrow" . 8596) ("\\longmapsto" . 8614) ("\\longrightarrow" . 8594) ("\\looparrowleft" . 8619) ("\\looparrowright" . 8620) ("\\lozenge" . 10023) ("\\lq" . 8216) ("\\lrcorner" . 8991) ("\\ltimes" . 8905) ("\\lvertneqq" . 8808) ("\\maltese" . 10016) ("\\mapsto" . 8614) ("\\measuredangle" . 8737) ("\\mho" . 8487) ("\\mid" . 8739) ("\\models" . 8871) ("\\mp" . 8723) ("\\multimap" . 8888) ("\\nLeftarrow" . 8653) ("\\nLeftrightarrow" . 8654) ("\\nRightarrow" . 8655) ("\\nVDash" . 8879) ("\\nVdash" . 8878) ("\\nabla" . 8711) ("\\napprox" . 8777) ("\\natural" . 9838) ("\\ncong" . 8775) ("\\ne" . 8800) ("\\nearrow" . 8599) ("\\neg" . 172) ("\\neq" . 8800) ("\\nequiv" . 8802) ("\\newline" . 8232) ("\\nexists" . 8708) ("\\ngeq" . 8817) ("\\ngeqq" . 8817) ("\\ngeqslant" . 8817) ("\\ngtr" . 8815) ("\\ni" . 8715) ("\\nleftarrow" . 8602) ("\\nleftrightarrow" . 8622) ("\\nleq" . 8816) ("\\nleqq" . 8816) ("\\nleqslant" . 8816) ("\\nless" . 8814) ("\\nmid" . 8740) ("\\notin" . 8713) ("\\nparallel" . 8742) ("\\nprec" . 8832) ("\\npreceq" . 8928) ("\\nrightarrow" . 8603) ("\\nshortmid" . 8740) ("\\nshortparallel" . 8742) ("\\nsim" . 8769) ("\\nsimeq" . 8772) ("\\nsubset" . 8836) ("\\nsubseteq" . 8840) ("\\nsubseteqq" . 8840) ("\\nsucc" . 8833) ("\\nsucceq" . 8929) ("\\nsupset" . 8837) ("\\nsupseteq" . 8841) ("\\nsupseteqq" . 8841) ("\\ntriangleleft" . 8938) ("\\ntrianglelefteq" . 8940) ("\\ntriangleright" . 8939) ("\\ntrianglerighteq" . 8941) ("\\nvDash" . 8877) ("\\nvdash" . 8876) ("\\nwarrow" . 8598) ("\\odot" . 8857) ("\\oint" . 8750) ("\\ominus" . 8854) ("\\oplus" . 8853) ("\\oslash" . 8856) ("\\otimes" . 8855) ("\\par" . 8233) ("\\parallel" . 8741) ("\\partial" . 8706) ("\\perp" . 8869) ("\\pitchfork" . 8916) ("\\prec" . 8826) ("\\precapprox" . 8830) ("\\preceq" . 8828) ("\\precnapprox" . 8936) ("\\precnsim" . 8936) ("\\precsim" . 8830) ("\\prime" . 8242) ("\\prod" . 8719) ("\\propto" . 8733) ("\\qed" . 8718) ("\\qquad" . 10722) ("\\quad" . 9251) ("\\rangle" . 10217) ("\\rbrace" . 125) ("\\rbrack" . 93) ("\\rceil" . 8969) ("\\rfloor" . 8971) ("\\rightarrow" . 8594) ("\\rightarrowtail" . 8611) ("\\rightharpoondown" . 8641) ("\\rightharpoonup" . 8640) ("\\rightleftarrows" . 8644) ("\\rightleftharpoons" . 8652) ("\\rightrightarrows" . 8649) ("\\rightthreetimes" . 8908) ("\\risingdotseq" . 8787) ("\\rtimes" . 8906) ("\\times" . 215) ("\\sbs" . 65128) ("\\searrow" . 8600) ("\\setminus" . 8726) ("\\sharp" . 9839) ("\\shortmid" . 8739) ("\\shortparallel" . 8741) ("\\sim" . 8764) ("\\simeq" . 8771) ("\\smallamalg" . 8720) ("\\smallsetminus" . 8726) ("\\smallsmile" . 8995) ("\\smile" . 8995) ("\\spadesuit" . 9824) ("\\sphericalangle" . 8738) ("\\sqcap" . 8851) ("\\sqcup" . 8852) ("\\sqsubset" . 8847) ("\\sqsubseteq" . 8849) ("\\sqsupset" . 8848) ("\\sqsupseteq" . 8850) ("\\square" . 9633) ("\\squigarrowright" . 8669) ("\\star" . 8902) ("\\straightphi" . 966) ("\\subset" . 8834) ("\\subseteq" . 8838) ("\\subseteqq" . 8838) ("\\subsetneq" . 8842) ("\\subsetneqq" . 8842) ("\\succ" . 8827) ("\\succapprox" . 8831) ("\\succcurlyeq" . 8829) ("\\succeq" . 8829) ("\\succnapprox" . 8937) ("\\succnsim" . 8937) ("\\succsim" . 8831) ("\\sum" . 8721) ("\\supset" . 8835) ("\\supseteq" . 8839) ("\\supseteqq" . 8839) ("\\supsetneq" . 8843) ("\\supsetneqq" . 8843) ("\\surd" . 8730) ("\\swarrow" . 8601) ("\\therefore" . 8756) ("\\thickapprox" . 8776) ("\\thicksim" . 8764) ("\\to" . 8594) ("\\top" . 8868) ("\\triangle" . 9653) ("\\triangledown" . 9663) ("\\triangleleft" . 9667) ("\\trianglelefteq" . 8884) ("\\triangleq" . 8796) ("\\triangleright" . 9657) ("\\trianglerighteq" . 8885) ("\\twoheadleftarrow" . 8606) ("\\twoheadrightarrow" . 8608) ("\\ulcorner" . 8988) ("\\uparrow" . 8593) ("\\updownarrow" . 8597) ("\\upleftharpoon" . 8639) ("\\uplus" . 8846) ("\\uprightharpoon" . 8638) ("\\upuparrows" . 8648) ("\\urcorner" . 8989) ("\\u{i}" . 301) ("\\vDash" . 8872) ("\\varepsilon" . 949) ("\\varphi" . 966) ("\\varprime" . 8242) ("\\varpropto" . 8733) ("\\varrho" . 1009) ("\\varsigma" 962) ("\\vartriangleleft" . 8882) ("\\vartriangleright" . 8883) ("\\vdash" . 8866) ("\\vdots" . 8942) ("\\vee" . 8744) ("\\veebar" . 8891) ("\\vert" . 124) ("\\wedge" . 8743) ("\\wp" . 8472) ("\\wr" . 8768) ("\\Bbb{N}" . 8469) ("\\Bbb{P}" . 8473) ("\\Bbb{Q}" . 8474) ("\\Bbb{R}" . 8477) ("\\Bbb{Z}" . 8484) ("--" . 8211) ("---" . 8212) ("\\ordfeminine" . 170) ("\\ordmasculine" . 186) ("\\lambdabar" . 411) ("\\celsius" . 8451) ("\\textmu" . 181) ("\\textfractionsolidus" . 8260) ("\\textbigcircle" . 8413) ("\\textmusicalnote" . 9834) ("\\textdied" . 10013) ("\\textcolonmonetary" . 8353) ("\\textwon" . 8361) ("\\textnaira" . 8358) ("\\textpeso" . 8369) ("\\textlira" . 8356) ("\\textrecipe" . 8478) ("\\textinterrobang" . 8253) ("\\textpertenthousand" . 8241) ("\\textbaht" . 3647) ("\\textnumero" . 8470) ("\\textdiscount" . 8274) ("\\textestimated" . 8494) ("\\textopenbullet" . 9702) ("\\textlquill" . 8261) ("\\textrquill" . 8262) ("\\textcircledP" . 8471) ("\\textreferencemark" . 8251)))) nil [115876 127250])
            ("tex--prettify-symbols-compose-p" function (:arguments ("_start" "end" "_match")) nil [127252 128125])
            ("defvar-local" code nil nil [128150 128188])
            ("tex-chktex-command" function nil nil [128190 128394])
            ("tex-chktex" function (:arguments ("report-fn" "_args")) nil [128396 130195])
            ("run-hooks" code nil nil [130197 130228])
            ("tex-mode" package nil nil [130230 130249]))          
      :file "tex-mode.el"
      :pointmax 130277
      :fsize 131125
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax '((close-paren 115197 . 115198) (symbol 114975 . 114992) (open-paren 114974 . 114975) (close-paren 38768 . 38769) (symbol 38531 . 38548) (open-paren 38530 . 38531) (close-paren 24995 . 24996) (symbol 24450 . 24467) (open-paren 24449 . 24450) (close-paren 1184 . 1185) (symbol 1102 . 1119) (open-paren 1101 . 1102)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("picture" customgroup (:user-visible-flag t) nil [1194 1301])
            ("picture-rectangle-ctl" variable (:default-value 43) nil [1303 1442])
            ("picture-rectangle-ctr" variable (:default-value 43) nil [1443 1583])
            ("picture-rectangle-cbr" variable (:default-value 43) nil [1584 1727])
            ("picture-rectangle-cbl" variable (:default-value 43) nil [1728 1870])
            ("picture-rectangle-v" variable (:default-value 124) nil [1871 2008])
            ("picture-rectangle-h" variable (:default-value 45) nil [2009 2148])
            ("picture-desired-column" variable nil nil [2181 2382])
            ("picture-update-desired-column" function (:arguments ("adjust-to-current")) nil [2385 2923])
            ("picture-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2925 3267])
            ("picture-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3269 3698])
            ("picture-forward-column" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [3700 4294])
            ("picture-backward-column" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [4296 4553])
            ("picture-move-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4555 4939])
            ("picture-vertical-step" variable nil nil [4941 5041])
            ("picture-horizontal-step" variable (:default-value 1) nil [5043 5147])
            ("picture-move-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5149 5360])
            ("picture-movement-right" function (:user-visible-flag t) nil [5362 5501])
            ("picture-movement-left" function (:user-visible-flag t) nil [5503 5641])
            ("picture-movement-up" function (:user-visible-flag t) nil [5643 5777])
            ("picture-movement-down" function (:user-visible-flag t) nil [5779 5916])
            ("picture-movement-nw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5918 6142])
            ("picture-movement-ne" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6144 6368])
            ("picture-movement-sw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6370 6597])
            ("picture-movement-se" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6599 6826])
            ("picture-set-motion" function (:arguments ("vert" "horiz")) nil [6828 7277])
            ("picture-move" function nil nil [7279 7559])
            ("picture-motion" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7561 7987])
            ("picture-motion-reverse" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7989 8348])
            ("picture-mouse-set-point" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8350 9396])
            ("picture-insert" function (:arguments ("ch" "arg")) nil [9436 10322])
            ("picture-self-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10324 10768])
            ("picture-clear-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10805 11246])
            ("picture-backward-clear-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11248 11407])
            ("picture-clear-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11409 11969])
            ("picture-newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11971 12368])
            ("picture-open-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12370 12612])
            ("picture-duplicate-line" function (:user-visible-flag t) nil [12614 12906])
            ("picture-replace-match" function (:arguments ("newtext" "fixedcase" "literal")) nil [12947 13666])
            ("picture-tab-chars" variable (:default-value "!-~") nil [13686 15086])
            ("picture-set-tab-stops" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15088 16364])
            ("picture-tab-search" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16366 17259])
            ("picture-tab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17261 17757])
            ("picture-killed-rectangle" variable nil nil [17783 17959])
            ("picture-clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "killp"))
                nil [17961 18405])
            ("picture-clear-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("start" "end" "register" "killp"))
                nil [18407 18980])
            ("picture-snarf-rectangle" function (:arguments ("start" "end" "killp")) nil [18982 19341])
            ("picture-yank-rectangle" function
               (:user-visible-flag t
                :arguments ("insertp"))
                nil [19343 19879])
            ("picture-yank-at-click" function
               (:user-visible-flag t
                :arguments ("click" "arg"))
                nil [19881 20300])
            ("picture-yank-rectangle-from-register" function
               (:user-visible-flag t
                :arguments ("register" "insertp"))
                nil [20302 21046])
            ("picture-insert-rectangle" function (:arguments ("rectangle" "insertp")) nil [21048 21578])
            ("picture-current-line" function nil nil [21580 21747])
            ("picture-draw-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [21749 23205])
            ("defalias" code nil nil [23252 23296])
            ("picture-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map [remap self-insert-command] (quote picture-self-insert)) (define-key map [remap self-insert-command] (quote picture-self-insert)) (define-key map [remap completion-separator-self-insert-command] (quote picture-self-insert)) (define-key map [remap completion-separator-self-insert-autofilling] (quote picture-self-insert)) (define-key map [remap forward-char] (quote picture-forward-column)) (define-key map [remap right-char] (quote picture-forward-column)) (define-key map [remap backward-char] (quote picture-backward-column)) (define-key map [remap left-char] (quote picture-backward-column)) (define-key map [remap delete-char] (quote picture-clear-column)) (define-key map [remap backward-delete-char-untabify] (quote picture-backward-clear-column)) (define-key map [remap delete-backward-char] (quote picture-backward-clear-column)) (define-key map [remap kill-line] (quote picture-clear-line)) (define-key map [remap open-line] (quote picture-open-line)) (define-key map [remap newline] (quote picture-newline)) (define-key map [remap newline-and-indent] (quote picture-duplicate-line)) (define-key map [remap next-line] (quote picture-move-down)) (define-key map [remap previous-line] (quote picture-move-up)) (define-key map [remap move-beginning-of-line] (quote picture-beginning-of-line)) (define-key map [remap move-end-of-line] (quote picture-end-of-line)) (define-key map [remap mouse-set-point] (quote picture-mouse-set-point)) (define-key map "" (quote picture-delete-char)) (define-key map "	" (quote picture-toggle-tab-state)) (define-key map "	" (quote picture-tab)) (define-key map "	" (quote picture-tab-search)) (define-key map "	" (quote picture-set-tab-stops)) (define-key map "" (quote picture-clear-rectangle)) (define-key map "" (quote picture-clear-rectangle-to-register)) (define-key map "" (quote picture-yank-rectangle)) (define-key map "" (quote picture-yank-rectangle-from-register)) (define-key map "" (quote picture-draw-rectangle)) (define-key map "" (quote picture-mode-exit)) (define-key map "" (quote picture-motion)) (define-key map "" (quote picture-motion-reverse)) (define-key map "<" (quote picture-movement-left)) (define-key map ">" (quote picture-movement-right)) (define-key map "^" (quote picture-movement-up)) (define-key map "." (quote picture-movement-down)) (define-key map "`" (quote picture-movement-nw)) (define-key map "'" (quote picture-movement-ne)) (define-key map "/" (quote picture-movement-sw)) (define-key map "\\" (quote picture-movement-se)) (define-key map [(control 99) left] (quote picture-movement-left)) (define-key map [(control 99) right] (quote picture-movement-right)) (define-key map [(control 99) up] (quote picture-movement-up)) (define-key map [(control 99) down] (quote picture-movement-down)) (define-key map [(control 99) home] (quote picture-movement-nw)) (define-key map [(control 99) prior] (quote picture-movement-ne)) (define-key map [(control 99) end] (quote picture-movement-sw)) (define-key map [(control 99) next] (quote picture-movement-se)) map)) nil [23298 26506])
            ("picture-mode-hook" variable nil nil [26508 26692])
            ("picture-mode-old-local-map" variable nil nil [26694 26729])
            ("picture-mode-old-mode-name" variable nil nil [26730 26765])
            ("picture-mode-old-major-mode" variable nil nil [26766 26802])
            ("picture-mode-old-truncate-lines" variable nil nil [26803 26843])
            ("picture-mode" function (:user-visible-flag t) nil [26860 31743])
            ("defalias" code nil nil [31760 31798])
            ("picture-mode-exit" function
               (:user-visible-flag t
                :arguments ("nostrip"))
                nil [31800 32618])
            ("picture" package nil nil [32620 32638]))          
      :file "picture.el"
      :pointmax 32665
      :fsize 32664
      :lastmodtime '(23525 29608 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("po-content-type-charset-alist" variable
               (:constant-flag t
                :default-value (quote (("ASCII" . undecided) ("ANSI_X3.4-1968" . undecided) ("US-ASCII" . undecided))))
                nil [1180 1461])
            ("po-find-charset" function (:arguments ("filename")) nil [1463 2944])
            ("po-find-file-coding-system-guts" function (:arguments ("operation" "filename")) nil [2946 4730])
            ("po-find-file-coding-system" function (:arguments ("arg-list")) nil [4747 5017])
            ("po" package nil nil [5314 5327]))          
      :file "po.el"
      :pointmax 5349
      :fsize 5349
      :lastmodtime '(23525 29608 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dom" include nil nil [1270 1284])
            ("seq" include nil nil [1285 1299])
            ("subr-x" include nil nil [1319 1336])
            ("cl-lib" include nil nil [1381 1398])
            ("skeleton" include nil nil [1359 1378])
            ("sgml" customgroup (:user-visible-flag t) nil [1401 1537])
            ("sgml-basic-offset" variable (:default-value 2) nil [1539 1668])
            ("sgml-attribute-offset" variable nil nil [1670 2042])
            ("sgml-xml-mode" variable nil nil [2044 2268])
            ("sgml-transformation-function" variable (:default-value (quote identity)) nil [2270 2792])
            ("put" code nil nil [2794 2885])
            ("defvaralias" code nil nil [2886 2950])
            ("sgml-mode-hook" variable nil nil [2952 3079])
            ("sgml-specials" variable (:default-value (quote (34))) nil [3262 3947])
            ("sgml-quick-keys" variable nil nil [3949 4119])
            ("sgml-mode-map" variable (:default-value (let ((map (make-keymap)) (menu-map (make-sparse-keymap "SGML"))) (define-key map "	" (quote sgml-tags-invisible)) (define-key map "/" (quote sgml-slash)) (define-key map "" (quote sgml-name-char)) (define-key map "" (quote sgml-tag)) (define-key map "" (quote sgml-attributes)) (define-key map "" (quote sgml-skip-tag-backward)) (define-key map [3 left] (quote sgml-skip-tag-backward)) (define-key map "" (quote sgml-skip-tag-forward)) (define-key map [3 right] (quote sgml-skip-tag-forward)) (define-key map "" (quote sgml-delete-tag)) (define-key map "" (quote sgml-delete-tag)) (define-key map "?" (quote sgml-tag-help)) (define-key map "]" (quote sgml-close-tag)) (define-key map "/" (quote sgml-close-tag)) (define-key map "" (quote sgml-tag)) (define-key map "" (quote sgml-close-tag)) (define-key map "8" (quote sgml-name-8bit-mode)) (define-key map "" (quote sgml-validate)) (when sgml-quick-keys (define-key map "&" (quote sgml-name-char)) (define-key map "<" (quote sgml-tag)) (define-key map " " (quote sgml-auto-attributes)) (define-key map ">" (quote sgml-maybe-end-tag)) (when (memq 34 sgml-specials) (define-key map "\"" (quote sgml-name-self))) (when (memq 39 sgml-specials) (define-key map "'" (quote sgml-name-self)))) (let ((c 127) (map (nth 1 map))) (while (< (setq c (1+ c)) 256) (aset map c (quote sgml-maybe-name-self)))) (define-key map [menu-bar sgml] (cons "SGML" menu-map)) (define-key menu-map [sgml-validate] (quote ("Validate" . sgml-validate))) (define-key menu-map [sgml-name-8bit-mode] (quote ("Toggle 8 Bit Insertion" . sgml-name-8bit-mode))) (define-key menu-map [sgml-tags-invisible] (quote ("Toggle Tag Visibility" . sgml-tags-invisible))) (define-key menu-map [sgml-tag-help] (quote ("Describe Tag" . sgml-tag-help))) (define-key menu-map [sgml-delete-tag] (quote ("Delete Tag" . sgml-delete-tag))) (define-key menu-map [sgml-skip-tag-forward] (quote ("Forward Tag" . sgml-skip-tag-forward))) (define-key menu-map [sgml-skip-tag-backward] (quote ("Backward Tag" . sgml-skip-tag-backward))) (define-key menu-map [sgml-attributes] (quote ("Insert Attributes" . sgml-attributes))) (define-key menu-map [sgml-tag] (quote ("Insert Tag" . sgml-tag))) map)) nil [4121 6597])
            ("sgml-make-syntax-table" function (:arguments ("specials")) nil [6599 7113])
            ("sgml-mode-syntax-table" variable (:default-value (sgml-make-syntax-table sgml-specials)) nil [7115 7248])
            ("sgml-tag-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (sgml-make-syntax-table sgml-specials))) (dolist (char (quote (40 41 123 125 91 93 36 37 38 42 43 47))) (modify-syntax-entry char "." table)) (unless (memq 39 sgml-specials) (modify-syntax-entry 39 "w" table)) table))
                nil [7250 7650])
            ("sgml-name-8bit-mode" variable nil nil [7652 7784])
            ("sgml-char-names" variable (:default-value [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil "nbsp" "excl" "quot" "num" "dollar" "percnt" "amp" "apos" "lpar" "rpar" "ast" "plus" "comma" "hyphen" "period" "sol" nil nil nil nil nil nil nil nil nil nil "colon" "semi" "lt" "eq" "gt" "quest" "commat" nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil "lsqb" nil "rsqb" "uarr" "lowbar" "lsquo" nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil "lcub" "verbar" "rcub" "tilde" nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil "nbsp" "iexcl" "cent" "pound" "curren" "yen" "brvbar" "sect" "uml" "copy" "ordf" "laquo" "not" "shy" "reg" "macr" "ring" "plusmn" "sup2" "sup3" "acute" "micro" "para" "middot" "cedil" "sup1" "ordm" "raquo" "frac14" "frac12" "frac34" "iquest" "Agrave" "Aacute" "Acirc" "Atilde" "Auml" "Aring" "AElig" "Ccedil" "Egrave" "Eacute" "Ecirc" "Euml" "Igrave" "Iacute" "Icirc" "Iuml" "ETH" "Ntilde" "Ograve" "Oacute" "Ocirc" "Otilde" "Ouml" nil "Oslash" "Ugrave" "Uacute" "Ucirc" "Uuml" "Yacute" "THORN" "szlig" "agrave" "aacute" "acirc" "atilde" "auml" "aring" "aelig" "ccedil" "egrave" "eacute" "ecirc" "euml" "igrave" "iacute" "icirc" "iuml" "eth" "ntilde" "ograve" "oacute" "ocirc" "otilde" "ouml" "divide" "oslash" "ugrave" "uacute" "ucirc" "uuml" "yacute" "thorn" "yuml"]) nil [7786 9480])
            ("put" code nil nil [9482 9525])
            ("sgml-char-names-table" variable (:default-value (let ((table (make-char-table (quote sgml-table))) (i 32) elt) (while (< i 128) (setq elt (aref sgml-char-names i)) (if elt (aset table (make-char (quote latin-iso8859-1) i) elt)) (setq i (1+ i))) table)) nil [9527 9896])
            ("sgml-validate-command" variable (:default-value (cond ((executable-find "tidy") "tidy --gnu-emacs yes -utf8 -e -q") ((executable-find "nsgmls") "nsgmls -s") ((executable-find "onsgmls") "onsgmls -s") (t "Install (o)nsgmls, tidy, or some other SGML validator, and set `sgml-validate-command'"))) nil [9898 10821])
            ("sgml-saved-validate-command" variable nil nil [10823 10917])
            ("sgml-slash-distance" variable (:default-value 1000) nil [11016 11173])
            ("sgml-namespace-re" variable
               (:constant-flag t
                :default-value "[_[:alpha:]][-_.[:alnum:]]*")
                nil [11175 11233])
            ("sgml-name-re" variable
               (:constant-flag t
                :default-value "[_:[:alpha:]][-_.:[:alnum:]]*")
                nil [11234 11289])
            ("sgml-tag-name-re" variable
               (:constant-flag t
                :default-value (concat "<\\([!/?]?" sgml-name-re "\\)"))
                nil [11290 11358])
            ("sgml-attrs-re" variable
               (:constant-flag t
                :default-value "\\(?:[^\"'/><]\\|\"[^\"]*\"\\|'[^']*'\\)*")
                nil [11359 11427])
            ("sgml-start-tag-regex" variable
               (:constant-flag t
                :default-value (concat "<" sgml-name-re sgml-attrs-re))
                nil [11428 11601])
            ("sgml-namespace" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [11603 11759])
            ("sgml-namespace-face" variable (:default-value (quote sgml-namespace)) nil [11760 11804])
            ("sgml-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (\` (((\, (concat "<\\([!?]" sgml-name-re "\\)")) 1 font-lock-keyword-face) ((\, (concat "</?\\(" sgml-namespace-re "\\)\\(?::\\(" sgml-name-re "\\)\\)?")) (1 (if (match-end 2) sgml-namespace-face font-lock-function-name-face)) (2 font-lock-function-name-face nil t)) ((\, (concat "\\(?:^\\|[ 	]\\)\\(" sgml-namespace-re "\\)\\(?::\\(" sgml-name-re "\\)\\)?=[\"']")) (1 (if (match-end 2) sgml-namespace-face font-lock-variable-name-face)) (2 font-lock-variable-name-face nil t)) ((\, (concat "[&%]" sgml-name-re ";?")) . font-lock-variable-name-face))))
                nil [11818 12864])
            ("sgml-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append sgml-font-lock-keywords-1 (quote ((eval cons (concat "<" (regexp-opt (mapcar (quote car) sgml-tag-face-alist) t) "\\([ 	][^>]*\\)?>\\([^<]+\\)</\\1>") (quote (3 (cdr (assoc-string (match-string 1) sgml-tag-face-alist t)) prepend)))))))
                nil [12866 13168])
            ("sgml-font-lock-keywords" variable (:default-value sgml-font-lock-keywords-1) nil [13281 13410])
            ("sgml-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\(<\\)!--" (1 "< b")) ("--[ 	
]*\\(>\\)" (1 "> b")) ("\\(<\\)[?!]" (1 (prog1 "|>" (sgml-syntax-propertize-inside end)))) ("\"" (0 (if (prog1 (zerop (car (syntax-ppss (match-beginning 0)))) (goto-char (match-end 0))) (string-to-syntax "."))))))
                nil [13432 14253])
            ("sgml-syntax-propertize" function (:arguments ("start" "end")) nil [14256 14479])
            ("sgml-syntax-propertize-inside" function (:arguments ("end")) nil [14481 15043])
            ("sgml-face-tag-alist" variable nil nil [15057 15133])
            ("sgml-tag-face-alist" variable nil nil [15135 15386])
            ("sgml-display-text" variable nil nil [15388 15488])
            ("sgml-tags-invisible" variable nil nil [15502 15534])
            ("sgml-tag-alist" variable (:default-value (quote (("![" ("ignore" t) ("include" t)) ("!attlist") ("!doctype") ("!element") ("!entity")))) nil [15536 16322])
            ("put" code nil nil [16323 16368])
            ("sgml-tag-help" variable (:default-value (quote (("!" . "Empty declaration for comment") ("![" . "Embed declarations with parser directive") ("!attlist" . "Tag attributes declaration") ("!doctype" . "Document type (DTD) declaration") ("!element" . "Tag declaration") ("!entity" . "Entity (macro) declaration")))) nil [16370 16828])
            ("sgml-empty-tags" variable nil nil [16830 16913])
            ("sgml-unclosed-tags" variable nil nil [16915 17019])
            ("sgml-xml-guess" function nil nil [17021 17698])
            ("v2" variable nil nil [17700 17711])
            ("sgml-comment-indent-new-line" function (:arguments ("soft")) nil [17736 17943])
            ("sgml-mode-facemenu-add-face-function" function (:arguments ("face" "_end")) nil [17945 18630])
            ("sgml-fill-nobreak" function nil nil [18632 19069])
            ("tildify-space-string" variable nil nil [19071 19100])
            ("tildify-foreach-region-function" variable nil nil [19101 19141])
            ("define-derived-mode" code nil nil [19158 23406])
            ("sgml-comment-indent" function nil nil [23408 23480])
            ("sgml-slash" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23482 23901])
            ("sgml-slash-matching" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23903 25199])
            ("sgml-name-char" function
               (:user-visible-flag t
                :arguments ("char"))
                nil [25409 25872])
            ("sgml-namify-char" function (:user-visible-flag t) nil [25874 26382])
            ("sgml-name-self" function (:user-visible-flag t) nil [26384 26536])
            ("sgml-maybe-name-self" function (:user-visible-flag t) nil [26538 26755])
            ("sgml-name-8bit-mode" function (:user-visible-flag t) nil [26757 27056])
            ("sgml-tag-last" variable nil nil [27307 27333])
            ("sgml-tag-history" variable nil nil [27334 27363])
            ("define-skeleton" code nil nil [27364 28817])
            ("skeleton-read" function (:prototype-flag t) nil [28819 28855])
            ("sgml-attributes" function
               (:user-visible-flag t
                :arguments ("tag" "quiet"))
                nil [28857 30293])
            ("sgml-auto-attributes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30295 30848])
            ("sgml-tag-help" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [30850 31685])
            ("sgml-maybe-end-tag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31687 31952])
            ("sgml-skip-tag-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31954 32861])
            ("sgml-forward-sexp" function (:arguments ("n")) nil [32863 33684])
            ("sgml-electric-tag-pair-overlays" variable nil nil [33686 33730])
            ("sgml-electric-tag-pair-timer" variable nil nil [33731 33772])
            ("sgml-electric-tag-pair-before-change-function" function (:arguments ("_beg" "end")) nil [33774 35914])
            ("sgml-electric-tag-pair-flush-overlays" function nil nil [35916 36065])
            ("define-minor-mode" code nil nil [36067 37061])
            ("sgml-skip-tag-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [37064 38377])
            ("sgml-looking-back-at" function (:arguments ("str")) nil [38379 38611])
            ("sgml-delete-tag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38613 40195])
            ("or" code nil nil [40273 40497])
            ("sgml-tags-invisible" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40499 42033])
            ("sgml-cursor-sensor" function (:arguments ("window" "x" "dir")) nil [42035 42873])
            ("sgml-validate" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [42877 43598])
            ("sgml-at-indentation-p" function nil nil [43600 43776])
            ("sgml-lexical-context" function (:arguments ("limit")) nil [43778 46260])
            ("sgml-beginning-of-tag" function (:arguments ("only-immediate")) nil [46262 46720])
            ("sgml-value" function (:arguments ("alist")) nil [46722 47555])
            ("sgml-quote" function
               (:user-visible-flag t
                :arguments ("start" "end" "unquotep"))
                nil [47557 48349])
            ("sgml-pretty-print" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [48351 49223])
            ("cl-defstruct" code nil nil [49239 49349])
            ("sgml-parse-tag-name" function nil nil [49351 49520])
            ("sgml-tag-text-p" function (:arguments ("start" "end")) nil [49522 49913])
            ("sgml--find-<>-backward" function (:arguments ("limit")) nil [49915 50341])
            ("sgml-parse-tag-backward" function (:arguments ("limit")) nil [50343 53647])
            ("sgml-get-context" function (:arguments ("until")) nil [53649 57270])
            ("sgml-show-context" function
               (:user-visible-flag t
                :arguments ("full"))
                nil [57272 57677])
            ("sgml-close-tag" function (:user-visible-flag t) nil [57703 58342])
            ("sgml-empty-tag-p" function (:arguments ("tag-name")) nil [58344 58526])
            ("sgml-unclosed-tag-p" function (:arguments ("tag-name")) nil [58528 58731])
            ("sgml-calculate-indent" function (:arguments ("lcon")) nil [58734 62957])
            ("sgml-indent-line" function (:user-visible-flag t) nil [62959 63335])
            ("sgml-guess-indent" function (:user-visible-flag t) nil [63337 63845])
            ("sgml-parse-dtd" function nil nil [63847 64504])
            ("html-mode-hook" variable nil nil [64521 64703])
            ("html-quick-keys" variable (:default-value sgml-quick-keys) nil [64705 64909])
            ("html-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "HTML"))) (set-keymap-parent map sgml-mode-map) (define-key map "6" (quote html-headline-6)) (define-key map "5" (quote html-headline-5)) (define-key map "4" (quote html-headline-4)) (define-key map "3" (quote html-headline-3)) (define-key map "2" (quote html-headline-2)) (define-key map "1" (quote html-headline-1)) (define-key map "" (quote html-paragraph)) (define-key map "
" (quote html-line)) (define-key map "-" (quote html-horizontal-rule)) (define-key map "o" (quote html-ordered-list)) (define-key map "u" (quote html-unordered-list)) (define-key map "r" (quote html-radio-buttons)) (define-key map "c" (quote html-checkboxes)) (define-key map "l" (quote html-list-item)) (define-key map "h" (quote html-href-anchor)) (define-key map "n" (quote html-name-anchor)) (define-key map "i" (quote html-image)) (when html-quick-keys (define-key map "-" (quote html-horizontal-rule)) (define-key map "o" (quote html-ordered-list)) (define-key map "u" (quote html-unordered-list)) (define-key map "r" (quote html-radio-buttons)) (define-key map "c" (quote html-checkboxes)) (define-key map "l" (quote html-list-item)) (define-key map "h" (quote html-href-anchor)) (define-key map "n" (quote html-name-anchor)) (define-key map "i" (quote html-image))) (define-key map "" (quote html-autoview-mode)) (define-key map "" (quote browse-url-of-buffer)) (define-key map [menu-bar html] (cons "HTML" menu-map)) (define-key menu-map [html-autoview-mode] (quote ("Toggle Autoviewing" . html-autoview-mode))) (define-key menu-map [browse-url-of-buffer] (quote ("View Buffer Contents" . browse-url-of-buffer))) (define-key menu-map [nil] (quote ("--"))) (define-key menu-map "3" (quote ("Heading 3" . html-headline-3))) (define-key menu-map "2" (quote ("Heading 2" . html-headline-2))) (define-key menu-map "1" (quote ("Heading 1" . html-headline-1))) (define-key menu-map "l" (quote ("Radio Buttons" . html-radio-buttons))) (define-key menu-map "c" (quote ("Checkboxes" . html-checkboxes))) (define-key menu-map "l" (quote ("List Item" . html-list-item))) (define-key menu-map "u" (quote ("Unordered List" . html-unordered-list))) (define-key menu-map "o" (quote ("Ordered List" . html-ordered-list))) (define-key menu-map "-" (quote ("Horizontal Rule" . html-horizontal-rule))) (define-key menu-map "
" (quote ("Line Break" . html-line))) (define-key menu-map "" (quote ("Paragraph" . html-paragraph))) (define-key menu-map "i" (quote ("Image" . html-image))) (define-key menu-map "h" (quote ("Href Anchor" . html-href-anchor))) (define-key menu-map "n" (quote ("Name Anchor" . html-name-anchor))) map)) nil [64911 67909])
            ("html-face-tag-alist" variable (:default-value (quote ((bold . "b") (italic . "i") (underline . "u") (mode-line . "rev")))) nil [67911 68072])
            ("html-tag-face-alist" variable (:default-value (quote (("b" . bold) ("big" . bold) ("blink" . highlight) ("cite" . italic) ("em" . italic) ("h1" bold underline) ("h2" bold-italic underline) ("h3" italic underline) ("h4" . underline) ("h5" . underline) ("h6" . underline) ("i" . italic) ("rev" . mode-line) ("s" . underline) ("small" . default) ("strong" . bold) ("title" bold underline) ("tt" . default) ("u" . underline) ("var" . italic)))) nil [68074 68618])
            ("html-display-text" variable (:default-value (quote ((img . "[/]") (hr . "----------") (li . "o ")))) nil [68620 68753])
            ("html-tag-alist" variable (:default-value (let* ((1-7 (quote (("1") ("2") ("3") ("4") ("5") ("6") ("7")))) (1-9 (\` ((\,@ 1-7) ("8") ("9")))) (align (quote (("align" ("left") ("center") ("right"))))) (ialign (quote (("align" ("top") ("middle") ("bottom") ("left") ("right"))))) (valign (quote (("top") ("middle") ("bottom") ("baseline")))) (rel (quote (("next") ("previous") ("parent") ("subdocument") ("made")))) (href (quote ("href" ("ftp:") ("file:") ("finger:") ("gopher:") ("http:") ("mailto:") ("news:") ("rlogin:") ("telnet:") ("tn3270:") ("wais:") ("/cgi-bin/")))) (name (quote ("name"))) (link (\` ((\, href) ("rel" (\,@ rel)) ("rev" (\,@ rel)) ("title")))) (list (quote ((nil n ("List item: " "<li>" str (if sgml-xml-mode "</li>") n))))) (shape (quote (("shape" ("rect") ("circle") ("poly") ("default"))))) (cell (\` (t (\,@ align) ("valign" (\,@ valign)) ("colspan" (\,@ 1-9)) ("rowspan" (\,@ 1-9)) ("nowrap" t)))) (cellhalign (quote (("align" ("left") ("center") ("right") ("justify") ("char")) ("char") ("charoff")))) (cellvalign (quote (("valign" ("top") ("middle") ("bottom") ("baseline")))))) (\` (("a" (\, name) (\,@ link)) ("area" t (\,@ shape) ("coords") ("href") ("nohref" "nohref") ("alt") ("tabindex") ("accesskey") ("onfocus") ("onblur")) ("base" t (\,@ href)) ("col" t (\,@ cellhalign) (\,@ cellvalign) ("span") ("width")) ("colgroup" n (\,@ cellhalign) (\,@ cellvalign) ("span") ("width")) ("dir" (\,@ list)) ("figcaption") ("figure" n) ("font" nil "size" ("-1") ("+1") ("-2") ("+2") (\,@ 1-7)) ("form" (n _ n "<input type=\"submit\" value=\"\"" (if sgml-xml-mode " />" ">")) ("action" (\,@ (cdr href))) ("method" ("get") ("post"))) ("h1" (\,@ align)) ("h2" (\,@ align)) ("h3" (\,@ align)) ("h4" (\,@ align)) ("h5" (\,@ align)) ("h6" (\,@ align)) ("hr" t ("size" (\,@ 1-9)) ("width") ("noshade" t) (\,@ align)) ("iframe" n (\,@ ialign) ("longdesc") ("name") ("src") ("frameborder" ("1") ("0")) ("marginwidth") ("marginheight") ("scrolling" ("yes") ("no") ("auto")) ("height") ("width")) ("img" t ("align" (\,@ valign) ("texttop") ("absmiddle") ("absbottom")) ("src") ("alt") ("width" "1") ("height" "1") ("border" "1") ("vspace" "1") ("hspace" "1") ("ismap" t)) ("input" t (\, name) ("accept") ("alt") ("autocomplete" ("on") ("off")) ("autofocus" t) ("checked" t) ("dirname") ("disabled" t) ("form") ("formaction") ("formenctype" ("application/x-www-form-urlencoded") ("multipart/form-data") ("text/plain")) ("formmethod" ("get") ("post")) ("formnovalidate" t) ("formtarget" ("_blank") ("_self") ("_parent") ("_top")) ("height") ("inputmode") ("list") ("max") ("maxlength") ("min") ("minlength") ("multiple" t) ("pattern") ("placeholder") ("readonly" t) ("required" t) ("size") ("src") ("step") ("type" ("hidden") ("text") ("search") ("tel") ("url") ("email") ("password") ("date") ("time") ("number") ("range") ("color") ("checkbox") ("radio") ("file") ("submit") ("image") ("reset") ("button")) ("value") ("width")) ("link" t (\,@ link)) ("menu" (\,@ list)) ("ol" (\,@ list) ("type" ("A") ("a") ("I") ("i") ("1"))) ("p" t (\,@ align)) ("select" (nil n ("Text: " "<option>" str (if sgml-xml-mode "</option>") n)) (\, name) ("size" (\,@ 1-9)) ("multiple" t)) ("table" (nil n ((completing-read "Cell kind: " (quote (("td") ("th"))) nil t "t") "<tr><" str 62 _ (if sgml-xml-mode (concat "<" str "></tr>")) n)) ("border" t (\,@ 1-9)) ("width" "10") ("cellpadding")) ("tbody" n (\,@ cellhalign) (\,@ cellvalign)) ("td" (\,@ cell)) ("textarea" (\, name) ("rows" (\,@ 1-9)) ("cols" (\,@ 1-9))) ("tfoot" n (\,@ cellhalign) (\,@ cellvalign)) ("th" (\,@ cell)) ("thead" n (\,@ cellhalign) (\,@ cellvalign)) ("ul" (\,@ list) ("type" ("disc") ("circle") ("square"))) (\,@ sgml-tag-alist) ("abbr") ("acronym") ("address") ("array" (nil n ("Item: " "<item>" str (if sgml-xml-mode "</item>") n)) "align") ("article" n) ("aside" n) ("au") ("audio" n ("src") ("crossorigin" ("anonymous") ("use-credentials")) ("preload" ("none") ("metadata") ("auto")) ("autoplay" "autoplay") ("mediagroup") ("loop" "loop") ("muted" "muted") ("controls" "controls")) ("b") ("bdi") ("bdo" nil ("lang") ("dir" ("ltr") ("rtl"))) ("big") ("blink") ("blockquote" n ("cite")) ("body" n ("background" ".gif") ("bgcolor" "#") ("text" "#") ("link" "#") ("alink" "#") ("vlink" "#")) ("box" (nil _ "<over>" _ (if sgml-xml-mode "</over>"))) ("br" t ("clear" ("left") ("right"))) ("button" nil ("name") ("value") ("type" ("submit") ("reset") ("button")) ("disabled" "disabled") ("tabindex") ("accesskey") ("onfocus") ("onblur")) ("canvas" n ("width") ("height")) ("caption" ("valign" ("top") ("bottom"))) ("center" n) ("cite") ("code" n) ("datalist" n) ("dd" (\, (not sgml-xml-mode))) ("del" nil ("cite") ("datetime")) ("dfn") ("div") ("dl" (nil n ("Term: " "<dt>" str (if sgml-xml-mode "</dt>") "<dd>" _ (if sgml-xml-mode "</dd>") n))) ("dt" (t _ (if sgml-xml-mode "</dt>") "<dd>" (if sgml-xml-mode "</dd>") n)) ("em") ("embed" t ("src") ("type") ("width") ("height")) ("fieldset" n) ("fn" "id" "fn") ("footer" n) ("frame" t ("longdesc") ("name") ("src") ("frameborder" ("1") ("0")) ("marginwidth") ("marginheight") ("noresize" "noresize") ("scrolling" ("yes") ("no") ("auto"))) ("frameset" n ("rows") ("cols") ("onload") ("onunload")) ("head" n) ("header" n) ("hgroup" n) ("html" (n "<head>
" "<title>" (setq str (read-string "Title: ")) "</title>
" "</head>
" "<body>
<h1>" str "</h1>
" _ "
<address>
<a href=\"mailto:" user-mail-address "\">" (user-full-name) "</a>
</address>
" "</body>")) ("i") ("ins" nil ("cite") ("datetime")) ("isindex" t ("action") ("prompt")) ("kbd") ("label" nil ("for") ("accesskey") ("onfocus") ("onblur")) ("lang") ("legend" nil ("accesskey")) ("li" (\, (not sgml-xml-mode))) ("main" n) ("map" n ("name")) ("mark") ("math" n) ("meta" t ("http-equiv") ("name") ("content") ("scheme")) ("meter" nil ("value") ("min") ("max") ("low") ("high") ("optimum")) ("nav" n) ("nobr") ("noframes" n) ("noscript" n) ("object" n ("declare" "declare") ("classid") ("codebase") ("data") ("type") ("codetype") ("archive") ("standby") ("height") ("width") ("usemap") ("name") ("tabindex")) ("optgroup" n ("name") ("size") ("multiple" "multiple") ("disabled" "disabled") ("tabindex") ("onfocus") ("onblur") ("onchange")) ("option" t ("value") ("label") ("selected" t)) ("output" nil ("for") ("form") ("name")) ("over" t) ("param" t ("name") ("value") ("valuetype" ("data") ("ref") ("object")) ("type")) ("person") ("pre" n) ("progress" nil ("value") ("max")) ("q" nil ("cite")) ("rev") ("rp" t) ("rt" t) ("ruby") ("s") ("samp") ("script" nil ("charset") ("type") ("src") ("defer" "defer")) ("section" n) ("small") ("source" t ("src") ("type") ("media")) ("span" nil ("class" ("builtin") ("comment") ("constant") ("function-name") ("keyword") ("string") ("type") ("variable-name") ("warning"))) ("strong") ("style" n ("type") ("media") ("title")) ("sub") ("summary") ("sup") ("time" nil ("datetime")) ("title") ("tr" t) ("track" t ("kind" ("subtitles") ("captions") ("descriptions") ("chapters") ("metadata")) ("src") ("srclang") ("label") ("default")) ("tt") ("u") ("var") ("video" n ("src") ("crossorigin" ("anonymous") ("use-credentials")) ("poster") ("preload" ("none") ("metadata") ("auto")) ("autoplay" "autoplay") ("mediagroup") ("loop" "loop") ("muted" "muted") ("controls" "controls") ("width") ("height")) ("wbr" t))))) nil [68757 77555])
            ("html-tag-help" variable (:default-value (\` ((\,@ sgml-tag-help) ("a" . "Anchor of point or link elsewhere") ("abbr" . "Abbreviation") ("acronym" . "Acronym") ("address" . "Formatted mail address") ("area" . "Region of an image map") ("array" . "Math array") ("article" . "An independent part of document or site") ("aside" . "Secondary content related to surrounding content (e.g. page or article)") ("au" . "Author") ("audio" . "Sound or audio stream") ("b" . "Bold face") ("base" . "Base address for URLs") ("bdi" . "Text isolated for bidirectional formatting") ("bdo" . "Override text directionality") ("big" . "Font size") ("blink" . "Blinking text") ("blockquote" . "Indented quotation") ("body" . "Document body") ("box" . "Math fraction") ("br" . "Line break") ("button" . "Clickable button") ("canvas" . "Script generated graphics canvas") ("caption" . "Table caption") ("center" . "Centered text") ("changed" . "Change bars") ("cite" . "Citation of a document") ("code" . "Formatted source code") ("col" . "Group of attribute specifications for table columns") ("colgroup" . "Group of columns") ("datalist" . "A set of predefined options") ("dd" . "Definition of term") ("del" . "Deleted text") ("dfn" . "Defining instance of a term") ("dir" . "Directory list (obsolete)") ("div" . "Generic block-level container") ("dl" . "Definition list") ("dt" . "Term to be defined") ("em" . "Emphasized") ("embed" . "Embedded data in foreign format") ("fieldset" . "Group of related controls and labels") ("fig" . "Figure") ("figa" . "Figure anchor") ("figcaption" . "Caption for a figure") ("figd" . "Figure description") ("figt" . "Figure text") ("figure" . "Self-contained content, often with a caption") ("fn" . "Footnote") ("font" . "Font size") ("footer" . "Footer of a section") ("form" . "Form with input fields") ("frame" . "Frame in which another HTML document can be displayed") ("frameset" . "Container for frames") ("group" . "Document grouping") ("h1" . "Most important section headline") ("h2" . "Important section headline") ("h3" . "Section headline") ("h4" . "Minor section headline") ("h5" . "Unimportant section headline") ("h6" . "Least important section headline") ("head" . "Document header") ("header" . "Header of a section") ("hgroup" . "Group of headings - h1-h6 elements") ("hr" . "Horizontal rule") ("html" . "HTML Document") ("i" . "Italic face") ("iframe" . "Inline frame with a nested browsing context") ("img" . "Graphic image") ("input" . "Form input field") ("ins" . "Inserted text") ("isindex" . "Input field for index search") ("kbd" . "Keyboard example face") ("label" . "Caption for a user interface item") ("lang" . "Natural language") ("legend" . "Caption for a fieldset") ("li" . "List item") ("link" . "Link relationship") ("main" . "Main content of the document body") ("map" . "Image map (a clickable link area") ("mark" . "Highlighted text") ("math" . "Math formula") ("menu" . "List of commands") ("meta" . "Document properties") ("meter" . "Scalar measurement within a known range") ("mh" . "Form mail header") ("nav" . "Group of navigational links") ("nextid" . "Allocate new id") ("nobr" . "Text without line break") ("noframes" . "Content for user agents that don't support frames") ("noscript" . "Alternate content for when a script isn't executed") ("object" . "External resource") ("ol" . "Ordered list") ("optgroup" . "Group of options") ("option" . "Selection list item") ("output" . "Result of a calculation or user action") ("over" . "Math fraction rule") ("p" . "Paragraph start") ("panel" . "Floating panel") ("param" . "Parameters for an object") ("person" . "Person's name") ("pre" . "Preformatted fixed width text") ("progress" . "Completion progress of a task") ("q" . "Quotation") ("rev" . "Reverse video") ("rp" . "Fallback text for when ruby annotations aren't supported") ("rt" . "Ruby text component of a ruby annotation") ("ruby" . "Ruby annotation") ("s" . "Strikeout") ("samp" . "Sample text") ("script" . "Executable script within a document") ("section" . "Section of a document") ("select" . "Selection list") ("small" . "Font size") ("source" . "Media resource for media elements") ("sp" . "Nobreak space") ("span" . "Generic inline container") ("strong" . "Standout text") ("style" . "Style information") ("sub" . "Subscript") ("summary" . "Summary, caption, or legend") ("sup" . "Superscript") ("table" . "Table with rows and columns") ("tb" . "Table vertical break") ("tbody" . "Table body") ("td" . "Table data cell") ("textarea" . "Form multiline edit area") ("tfoot" . "Table foot") ("th" . "Table header cell") ("thead" . "Table head") ("time" . "Content with optional machine-readable timestamp") ("title" . "Document title") ("tr" . "Table row separator") ("track" . "Timed text track for media elements") ("tt" . "Typewriter face") ("u" . "Underlined text") ("ul" . "Unordered list") ("var" . "Math variable face") ("video" . "Video or movie") ("wbr" . "Enable <br> within <nobr>")))) nil [77557 83155])
            ("outline-regexp" variable nil nil [83157 83180])
            ("outline-heading-end-regexp" variable nil nil [83181 83216])
            ("outline-level" variable nil nil [83217 83239])
            ("html-current-defun-name" function nil nil [83241 83563])
            ("html--buffer-classes-cache" variable nil nil [83565 83830])
            ("make-variable-buffer-local" code nil nil [83831 83887])
            ("html--buffer-ids-cache" variable nil nil [83889 84146])
            ("make-variable-buffer-local" code nil nil [84147 84199])
            ("html-current-buffer-classes" function nil nil [84201 84918])
            ("html-current-buffer-ids" function nil nil [84920 85599])
            ("define-derived-mode" code nil nil [85618 88987])
            ("html-imenu-regexp" variable (:default-value "\\s-*<h\\([1-9]\\)[^
<>]*>\\(<[^
<>]*>\\)*\\s-*\\([^
<>]*\\)") nil [88989 89324])
            ("html-imenu-index" function nil nil [89326 89774])
            ("define-minor-mode" code nil nil [89776 90375])
            ("define-skeleton" code nil nil [90379 90525])
            ("define-skeleton" code nil nil [90527 90700])
            ("define-skeleton" code nil nil [90702 90792])
            ("define-skeleton" code nil nil [90794 90884])
            ("define-skeleton" code nil nil [90886 90976])
            ("define-skeleton" code nil nil [90978 91068])
            ("define-skeleton" code nil nil [91070 91160])
            ("define-skeleton" code nil nil [91162 91252])
            ("define-skeleton" code nil nil [91254 91368])
            ("define-skeleton" code nil nil [91370 91504])
            ("define-skeleton" code nil nil [91506 91604])
            ("define-skeleton" code nil nil [91606 91738])
            ("define-skeleton" code nil nil [91740 91876])
            ("define-skeleton" code nil nil [91878 92000])
            ("define-skeleton" code nil nil [92002 92122])
            ("define-skeleton" code nil nil [92124 92835])
            ("define-skeleton" code nil nil [92837 93614])
            ("define-skeleton" code nil nil [93616 93884])
            ("define-skeleton" code nil nil [93886 94339])
            ("sgml-mode" package nil nil [94341 94361]))          
      :file "sgml-mode.el"
      :pointmax 94390
      :fsize 94394
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax '((close-paren 14253 . 14254) (symbol 13413 . 13429) (open-paren 13412 . 13413) (close-paren 1398 . 1399) (symbol 1339 . 1356) (open-paren 1338 . 1339) (close-paren 1336 . 1337) (symbol 1301 . 1318) (open-paren 1300 . 1301)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ispell" include nil nil [1418 1435])
            ("cl-lib" include nil nil [1455 1472])
            ("flyspell" customgroup (:user-visible-flag t) nil [1700 1831])
            ("flyspell-highlight-flag" variable (:default-value t) nil [2058 2246])
            ("flyspell-mark-duplications-flag" variable (:default-value t) nil [2248 2576])
            ("flyspell-mark-duplications-exceptions" variable (:default-value (quote ((nil "that" "had") ("\\`francais" "nous" "vous")))) nil [2578 3316])
            ("flyspell-sort-corrections" variable nil nil [3318 3591])
            ("flyspell-sort-corrections-function" variable (:default-value (quote flyspell-sort-corrections-alphabetically)) nil [3593 3986])
            ("flyspell-sort-corrections-alphabetically" function (:arguments ("corr1" "corr2" "_")) nil [3988 4076])
            ("flyspell-sort" function (:arguments ("corrs" "word")) nil [4078 4273])
            ("flyspell-duplicate-distance" variable (:default-value 400000) nil [4275 4875])
            ("flyspell-delay" variable (:default-value 3) nil [4877 5020])
            ("flyspell-persistent-highlight" variable (:default-value t) nil [5022 5261])
            ("flyspell-highlight-properties" variable (:default-value t) nil [5263 5427])
            ("flyspell-default-delayed-commands" variable (:default-value (quote (self-insert-command delete-backward-char backward-or-forward-delete-char delete-char scrollbar-vertical-drag backward-delete-char-untabify))) nil [5429 5791])
            ("flyspell-delayed-commands" variable nil nil [5793 6057])
            ("flyspell-default-deplacement-commands" variable (:default-value (quote (next-line previous-line handle-switch-frame handle-select-window scroll-up scroll-down))) nil [6059 6382])
            ("flyspell-deplacement-commands" variable nil nil [6384 6671])
            ("flyspell-issue-welcome-flag" variable (:default-value t) nil [6673 6829])
            ("flyspell-issue-message-flag" variable (:default-value t) nil [6831 6976])
            ("flyspell-incorrect-hook" variable nil nil [6978 7459])
            ("flyspell-default-dictionary" variable nil nil [7461 8043])
            ("flyspell-tex-command-regexp" variable (:default-value "\\(\\(begin\\|end\\)[ 	]*{\\|\\(cite[a-z*]*\\|label\\|ref\\|eqref\\|usepackage\\|documentclass\\)[ 	]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)") nil [8045 8345])
            ("flyspell-check-tex-math-command" variable nil nil [8347 8648])
            ("flyspell-dictionaries-that-consider-dash-as-word-delimiter" variable (:default-value (quote ("francais" "deutsch8" "norsk"))) nil [8650 8885])
            ("flyspell-abbrev-p" variable nil nil [8887 9030])
            ("flyspell-use-global-abbrev-table-p" variable nil nil [9032 9204])
            ("flyspell-mode-line-string" variable (:default-value " Fly") nil [9206 9438])
            ("flyspell-large-region" variable (:default-value 1000) nil [9440 9987])
            ("flyspell-insert-function" variable (:default-value (function insert)) nil [9989 10141])
            ("flyspell-before-incorrect-word-string" variable nil nil [10143 10308])
            ("flyspell-after-incorrect-word-string" variable nil nil [10310 10472])
            ("flyspell-mode-map" variable nil nil [10474 10500])
            ("flyspell-use-meta-tab" variable (:default-value t) nil [10502 10800])
            ("flyspell-auto-correct-binding" variable (:default-value [(control 59)]) nil [10802 10952])
            ("flyspell-generic-check-word-predicate" variable nil nil [11765 12052])
            ("make-variable-buffer-local" code nil nil [12053 12120])
            ("define-obsolete-variable-alias" code nil nil [12121 12232])
            ("put" code nil nil [12309 12377])
            ("put" code nil nil [12378 12449])
            ("message-signature-separator" variable nil nil [12450 12486])
            ("mail-mode-flyspell-verify" function nil nil [12487 13550])
            ("put" code nil nil [13627 13701])
            ("texinfo-mode-flyspell-verify" function nil nil [13702 13897])
            ("put" code nil nil [13974 14040])
            ("tex-mode-flyspell-verify" function nil nil [14041 14477])
            ("put" code nil nil [14554 14622])
            ("put" code nil nil [14623 14691])
            ("put" code nil nil [14692 14760])
            ("sgml-lexical-context" function (:prototype-flag t) nil [14762 14806])
            ("sgml-mode-flyspell-verify" function nil nil [14808 15146])
            ("flyspell-prog-text-faces" variable (:default-value (quote (font-lock-string-face font-lock-comment-face font-lock-doc-face))) nil [15373 15536])
            ("flyspell-generic-progmode-verify" function nil nil [15538 15818])
            ("flyspell--prev-meta-tab-binding" variable nil nil [15893 15933])
            ("flyspell-prog-mode" function (:user-visible-flag t) nil [15950 16343])
            ("make-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16570 16646])
            ("overlayp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16647 16723])
            ("overlays-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16724 16800])
            ("delete-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16801 16877])
            ("overlays-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16878 16954])
            ("overlay-put" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16955 17031])
            ("overlay-get" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17032 17108])
            ("previous-overlay-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17109 17185])
            ("flyspell-mouse-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote flyspell-correct-word)) map)) nil [17412 17589])
            ("flyspell-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (if flyspell-use-meta-tab (define-key map "\211" (quote flyspell-auto-correct-word))) (define-key map flyspell-auto-correct-binding (quote flyspell-auto-correct-previous-word)) (define-key map [(control 44)] (quote flyspell-goto-next-error)) (define-key map [(control 46)] (quote flyspell-auto-correct-word)) (define-key map [3 36] (quote flyspell-correct-word-before-point)) map)) nil [17591 18099])
            ("flyspell-consider-dash-as-word-delimiter-flag" variable nil nil [18129 18258])
            ("make-variable-buffer-local" code nil nil [18259 18334])
            ("flyspell-dash-dictionary" variable nil nil [18335 18372])
            ("make-variable-buffer-local" code nil nil [18373 18427])
            ("flyspell-dash-local-dictionary" variable nil nil [18428 18471])
            ("make-variable-buffer-local" code nil nil [18472 18532])
            ("flyspell-incorrect" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "Red1")) (t :underline t :inherit error)))
                :type "face")
                nil [18759 18994])
            ("flyspell-duplicate" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "DarkOrange")) (t :underline t :inherit warning)))
                :type "face")
                nil [18996 19295])
            ("flyspell-overlay" variable nil nil [19297 19326])
            ("define-minor-mode" code nil nil [19648 21155])
            ("turn-on-flyspell" function nil nil [21172 21262])
            ("turn-off-flyspell" function nil nil [21279 21372])
            ("custom-add-option" code nil nil [21374 21427])
            ("flyspell-buffers" variable nil nil [21804 21833])
            ("flyspell-minibuffer-p" function (:arguments ("buffer")) nil [22060 22227])
            ("flyspell-last-buffer" variable nil nil [22454 22551])
            ("flyspell-accept-buffer-local-defs" function (:arguments ("force")) nil [22553 23821])
            ("flyspell-hack-local-variables-hook" function nil nil [23823 23999])
            ("flyspell-kill-ispell-hook" function nil nil [24001 24186])
            ("add-hook" code nil nil [24358 24420])
            ("flyspell-mode-on" function nil nil [24647 26735])
            ("flyspell-delay-commands" function nil nil [26962 27181])
            ("flyspell-delay-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [27408 27766])
            ("flyspell-deplacement-commands" function nil nil [27993 28242])
            ("flyspell-deplacement-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [28469 28797])
            ("flyspell-word-cache-start" variable nil nil [29024 29063])
            ("flyspell-word-cache-end" variable nil nil [29064 29103])
            ("flyspell-word-cache-word" variable nil nil [29104 29143])
            ("flyspell-word-cache-result" variable (:default-value (quote _)) nil [29144 29182])
            ("make-variable-buffer-local" code nil nil [29183 29238])
            ("make-variable-buffer-local" code nil nil [29239 29292])
            ("make-variable-buffer-local" code nil nil [29293 29347])
            ("make-variable-buffer-local" code nil nil [29348 29404])
            ("flyspell-pre-buffer" variable nil nil [29781 29857])
            ("flyspell-pre-point" variable nil nil [29858 29932])
            ("flyspell-pre-column" variable nil nil [29933 30008])
            ("flyspell-pre-pre-buffer" variable nil nil [30009 30045])
            ("flyspell-pre-pre-point" variable nil nil [30046 30082])
            ("make-variable-buffer-local" code nil nil [30083 30131])
            ("flyspell-previous-command" variable nil nil [30373 30465])
            ("flyspell-pre-command-hook" function (:user-visible-flag t) nil [30692 30945])
            ("flyspell-mode-off" function nil nil [31187 31839])
            ("flyspell-check-pre-word-p" function nil nil [32066 33923])
            ("flyspell-changes" variable nil nil [34300 34329])
            ("make-variable-buffer-local" code nil nil [34330 34376])
            ("flyspell-after-change-function" function (:arguments ("start" "stop" "_len")) nil [34603 34775])
            ("flyspell-check-changed-word-p" function (:arguments ("start" "stop")) nil [35002 35500])
            ("flyspell-check-word-p" function nil nil [35727 36847])
            ("flyspell-debug-signal-no-check" function (:arguments ("msg" "obj")) nil [37074 37303])
            ("flyspell-debug-signal-pre-word-checked" function nil nil [37530 37988])
            ("flyspell-debug-signal-word-checked" function nil nil [38215 40620])
            ("flyspell-debug-signal-changed-checked" function nil nil [40847 41125])
            ("flyspell-post-command-hook" function (:user-visible-flag t) nil [42177 44272])
            ("flyspell-notify-misspell" function (:arguments ("word" "poss")) nil [44499 44734])
            ("flyspell-word-search-backward" function (:arguments ("word" "bound" "ignore-case")) nil [44961 45958])
            ("flyspell-word-search-forward" function (:arguments ("word" "bound")) nil [46185 47050])
            ("flyspell-word" variable nil nil [47052 47074])
            ("flyspell-word" function
               (:user-visible-flag t
                :arguments ("following" "known-misspelling"))
                nil [47358 53769])
            ("flyspell-math-tex-command-p" function nil nil [54296 54484])
            ("flyspell-tex-command-p" function (:arguments ("word")) nil [54711 55071])
            ("defalias" code nil nil [55073 55129])
            ("defalias" code nil nil [55130 55194])
            ("flyspell-get-word" function (:arguments ("following" "extra-otherchars")) nil [55421 57857])
            ("flyspell-small-region" function (:arguments ("beg" "end")) nil [58084 58809])
            ("flyspell-external-ispell-process" variable (:default-value (quote nil)) nil [59036 59123])
            ("flyspell-external-ispell-buffer" variable (:default-value (quote nil)) nil [59350 59394])
            ("flyspell-large-region-buffer" variable (:default-value (quote nil)) nil [59395 59436])
            ("flyspell-large-region-beg" variable (:default-value (point-min)) nil [59437 59483])
            ("flyspell-large-region-end" variable (:default-value (point-max)) nil [59484 59530])
            ("flyspell-external-point-words" function nil nil [59757 63433])
            ("flyspell-process-localwords" function (:arguments ("misspellings-buffer")) nil [63885 65327])
            ("flyspell-check-region-doublons" function (:arguments ("beg" "end")) nil [65504 65919])
            ("flyspell-large-region" function (:arguments ("beg" "end")) nil [66146 68880])
            ("flyspell-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [69572 70018])
            ("flyspell-buffer" function (:user-visible-flag t) nil [70260 70373])
            ("flyspell-old-buffer-error" variable nil nil [70600 70638])
            ("flyspell-old-pos-error" variable nil nil [70639 70674])
            ("flyspell-goto-next-error" function (:user-visible-flag t) nil [70901 71926])
            ("flyspell-overlay-p" function (:arguments ("o")) nil [72153 72291])
            ("flyspell-delete-region-overlays" function (:arguments ("beg" "end")) nil [72668 72821])
            ("flyspell-delete-all-overlays" function nil nil [72823 72968])
            ("flyspell-unhighlight-at" function (:arguments ("pos")) nil [73195 73601])
            ("flyspell-properties-at-p" function (:arguments ("pos")) nil [73978 74488])
            ("make-flyspell-overlay" function (:arguments ("beg" "end" "face" "mouse-face")) nil [74715 75923])
            ("flyspell-highlight-incorrect-region" function (:arguments ("beg" "end" "poss")) nil [76150 77305])
            ("flyspell-highlight-duplicate-region" function (:arguments ("beg" "end" "poss")) nil [77532 78235])
            ("flyspell-auto-correct-pos" variable nil nil [78462 78500])
            ("flyspell-auto-correct-region" variable nil nil [78501 78542])
            ("flyspell-auto-correct-ring" variable nil nil [78543 78582])
            ("flyspell-auto-correct-word" variable nil nil [78583 78622])
            ("make-variable-buffer-local" code nil nil [78623 78678])
            ("make-variable-buffer-local" code nil nil [78679 78737])
            ("make-variable-buffer-local" code nil nil [78738 78794])
            ("make-variable-buffer-local" code nil nil [78795 78851])
            ("flyspell-check-previous-highlighted-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79078 80158])
            ("flyspell-display-next-corrections" function (:arguments ("corrections")) nil [80385 81008])
            ("flyspell-abbrev-table" function nil nil [81235 81383])
            ("flyspell-define-abbrev" function (:arguments ("name" "expansion")) nil [81610 81770])
            ("flyspell-auto-correct-word" function (:user-visible-flag t) nil [81997 88712])
            ("flyspell-auto-correct-previous-pos" variable nil nil [88939 89048])
            ("flyspell-auto-correct-previous-hook" function (:user-visible-flag t) nil [89275 89672])
            ("flyspell-auto-correct-previous-word" function
               (:user-visible-flag t
                :arguments ("position"))
                nil [89899 91579])
            ("flyspell-correct-word" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [91807 92086])
            ("flyspell-correct-word-before-point" function
               (:user-visible-flag t
                :arguments ("event" "opoint"))
                nil [92088 93753])
            ("flyspell-do-correct" function (:arguments ("replace" "poss" "word" "cursor-location" "start" "end" "save")) nil [93976 95512])
            ("flyspell-adjust-cursor-point" function (:arguments ("save" "cursor-location" "old-max")) nil [95740 96058])
            ("flyspell-emacs-popup" function (:arguments ("event" "poss" "word")) nil [96285 97587])
            ("flyspell-maybe-correct-transposition" function (:arguments ("beg" "end" "poss")) nil [97814 98755])
            ("flyspell-maybe-correct-doubling" function (:arguments ("beg" "end" "poss")) nil [98757 99596])
            ("flyspell-already-abbrevp" function (:arguments ("table" "word")) nil [99823 99939])
            ("flyspell-change-abbrev" function (:arguments ("table" "old" "new")) nil [100166 100250])
            ("flyspell" package nil nil [100252 100271]))          
      :file "flyspell.el"
      :pointmax 100299
      :fsize 100298
      :lastmodtime '(23525 29607 0 0)
      :unmatched-syntax '((close-paren 1472 . 1473) (symbol 1437 . 1454) (open-paren 1436 . 1437)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tex-mode" include nil nil [1070 1089])
            ("declare-function" code nil nil [1091 1134])
            ("declare-function" code nil nil [1135 1185])
            ("declare-function" code nil nil [1186 1232])
            ("declare-function" code nil nil [1233 1299])
            ("declare-function" code nil nil [1300 1355])
            ("declare-function" code nil nil [1356 1397])
            ("declare-function" code nil nil [1398 1448])
            ("declare-function" code nil nil [1449 1494])
            ("outline-heading-alist" variable nil nil [1496 1526])
            ("skeleton-end-newline" variable nil nil [1528 1557])
            ("texinfo" customgroup (:user-visible-flag t) nil [1559 1688])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1705 1861])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1878 2036])
            ("texinfo-mode-hook" variable nil nil [2038 2197])
            ("makeinfo-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2217 2516])
            ("makeinfo-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2518 2688])
            ("kill-compilation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2690 2792])
            ("makeinfo-recenter-compilation-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2794 3032])
            ("texinfo-update-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3034 3931])
            ("texinfo-every-node-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3933 4034])
            ("texinfo-sequential-node-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4036 4821])
            ("texinfo-make-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4823 5349])
            ("texinfo-all-menus-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5351 5628])
            ("texinfo-master-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5630 7137])
            ("texinfo-indent-menu-description" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7139 7445])
            ("texinfo-insert-node-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7447 7761])
            ("texinfo-start-menu-description" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7763 8166])
            ("texinfo-multiple-files-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8168 9538])
            ("texinfo-section-list" variable (:default-value (quote (("top" 1) ("chapter" 2) ("section" 3) ("subsection" 4) ("subsubsection" 5) ("unnumbered" 2) ("unnumberedsec" 3) ("unnumberedsubsec" 4) ("unnumberedsubsubsec" 5) ("appendix" 2) ("appendixsec" 3) ("appendixsection" 3) ("appendixsubsec" 4) ("appendixsubsubsec" 5) ("majorheading" 2) ("chapheading" 2) ("heading" 3) ("subheading" 4) ("subsubheading" 5)))) nil [9632 10146])
            ("texinfo-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "." st) (modify-syntax-entry 92 "." st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "(]" st) (modify-syntax-entry 93 ")[" st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 39 "w" st) st)) nil [10166 10616])
            ("texinfo-imenu-generic-expression" variable (:default-value (quote ((nil "^@\\(node\\|anchor\\)[ 	]+\\([^,
]*\\)" 2) ("Chapters" "^@chapter[ 	]+\\(.*\\)$" 1)))) nil [10793 11016])
            ("texinfo-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("\\(@\\)c\\(omment\\)?\\>" (1 "<")) ("^\\(@\\)ignore\\>" (1 "< b")) ("^@end ignore\\(
\\)" (1 "> b"))))
                nil [11018 11274])
            ("texinfo-environments" variable
               (:constant-flag t
                :default-value (quote ("cartouche" "copying" "defcv" "deffn" "defivar" "defmac" "defmethod" "defop" "defopt" "defspec" "deftp" "deftypecv" "deftypefn" "deftypefun" "deftypeivar" "deftypemethod" "deftypeop" "deftypevar" "deftypevr" "defun" "defvar" "defvr" "description" "detailmenu" "direntry" "display" "documentdescription" "enumerate" "example" "flushleft" "flushright" "format" "ftable" "group" "html" "ifclear" "ifset" "ifhtml" "ifinfo" "ifnothtml" "ifnotinfo" "ifnotplaintext" "ifnottex" "ifplaintext" "iftex" "ignore" "itemize" "lisp" "macro" "menu" "multitable" "quotation" "smalldisplay" "smallexample" "smallformat" "smalllisp" "table" "tex" "titlepage" "verbatim" "vtable")))
                nil [11276 12051])
            ("texinfo-environment-regexp" variable
               (:constant-flag t
                :default-value (concat "^@" (regexp-opt (cons "end" texinfo-environments) t) "\\>"))
                nil [12053 12286])
            ("texinfo-heading" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [12288 12434])
            ("texinfo-font-lock-keywords" variable (:default-value (\` (("@\\([a-zA-Z]+\\|[^ 	
]\\)" 1 font-lock-keyword-face) ("^\\*\\([^
:]*\\)" 1 font-lock-function-name-face t) ("@\\(emph\\|i\\|sc\\){\\([^}]+\\)" 2 (quote italic)) ("@\\(strong\\|b\\){\\([^}]+\\)" 2 (quote bold)) ("@\\(kbd\\|key\\|url\\|uref\\){\\([^}]+\\)" 2 font-lock-string-face) ("@\\(file\\|email\\){\\([^}]+\\)" 2 font-lock-string-face keep) ("@\\(samp\\|code\\|var\\|env\\|command\\|option\\){\\([^}]+\\)" 2 font-lock-variable-name-face keep) ("@math{\\([^{}]*{?[^{}]*}?[^{}]*\\)}" 1 font-lock-variable-name-face) ("@\\(cite\\|x?ref\\|pxref\\|dfn\\|inforef\\){\\([^}]+\\)" 2 font-lock-constant-face) ("@\\(anchor\\){\\([^}]+\\)" 2 font-lock-type-face) ("@\\(dmn\\|acronym\\|value\\){\\([^}]+\\)" 2 font-lock-builtin-face) ("@\\(end\\|itemx?\\) +\\(.+\\)" 2 font-lock-keyword-face keep) ((\, (concat "^@" (regexp-opt (mapcar (quote car) texinfo-section-list) t) ".*
")) 0 (quote texinfo-heading) t)))) nil [12436 14097])
            ("texinfo-clone-environment" function (:arguments ("start" "end")) nil [14099 14659])
            ("texinfo-define-common-keys" function (:arguments ("keymap")) nil [14736 15461])
            ("texinfo-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (texinfo-define-common-keys map) (define-key map "\"" (quote texinfo-insert-quote)) (define-key map "" (quote kill-compilation)) (define-key map "" (quote makeinfo-recenter-compilation-buffer)) (define-key map "" (quote makeinfo-region)) (define-key map "" (quote makeinfo-buffer)) (define-key map "" (quote texinfo-format-region)) (define-key map "" (quote texinfo-format-buffer)) (define-key map "" (quote texinfo-insert-@item)) (define-key map "m" (quote texinfo-master-menu)) (define-key map "" (quote texinfo-make-menu)) (define-key map "" (quote texinfo-update-node)) (define-key map "" (quote texinfo-every-node-update)) (define-key map "" (quote texinfo-all-menus-update)) (define-key map "" (quote texinfo-show-structure)) (define-key map "}" (quote up-list)) (define-key map "]" (quote up-list)) (define-key map "/" (quote texinfo-insert-@end)) (define-key map "{" (quote texinfo-insert-braces)) (define-key map "" (quote texinfo-insert-block)) (define-key map "" (quote texinfo-start-menu-description)) (define-key map "" (quote texinfo-insert-@strong)) (define-key map "" (quote texinfo-insert-@emph)) (define-key map "v" (quote texinfo-insert-@var)) (define-key map "u" (quote texinfo-insert-@uref)) (define-key map "t" (quote texinfo-insert-@table)) (define-key map "s" (quote texinfo-insert-@samp)) (define-key map "q" (quote texinfo-insert-@quotation)) (define-key map "o" (quote texinfo-insert-@noindent)) (define-key map "n" (quote texinfo-insert-@node)) (define-key map "m" (quote texinfo-insert-@email)) (define-key map "k" (quote texinfo-insert-@kbd)) (define-key map "i" (quote texinfo-insert-@item)) (define-key map "f" (quote texinfo-insert-@file)) (define-key map "x" (quote texinfo-insert-@example)) (define-key map "e" (quote texinfo-insert-@end)) (define-key map "d" (quote texinfo-insert-@dfn)) (define-key map "c" (quote texinfo-insert-@code)) map)) nil [15574 18134])
            ("easy-menu-define" code nil nil [18136 18940])
            ("texinfo-filter" function (:arguments ("section" "list")) nil [18944 19071])
            ("texinfo-chapter-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 2 texinfo-section-list))) nil [19073 19238])
            ("texinfo-current-defun-name" function nil nil [19240 19450])
            ("define-derived-mode" code nil nil [19485 24502])
            ("texinfo-block-default" variable (:default-value "example") nil [24535 24575])
            ("define-skeleton" code nil nil [24577 25130])
            ("texinfo-inside-macro-p" function (:arguments ("macro" "bound")) nil [25132 25541])
            ("texinfo-inside-env-p" function (:arguments ("env" "bound")) nil [25543 25768])
            ("texinfo-enable-quote-macros" variable (:default-value "@\\(code\\|samp\\|kbd\\)\\>") nil [25770 25836])
            ("texinfo-enable-quote-envs" variable (:default-value (quote ("example\\>" "smallexample\\>" "lisp\\>"))) nil [25837 25917])
            ("texinfo-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25918 27085])
            ("texinfo-last-unended-begin" function nil nil [27280 27441])
            ("texinfo-next-unmatched-end" function nil nil [27443 27662])
            ("define-skeleton" code nil nil [27664 27945])
            ("define-skeleton" code nil nil [27947 28119])
            ("define-skeleton" code nil nil [28121 28371])
            ("define-skeleton" code nil nil [28373 28620])
            ("define-skeleton" code nil nil [28622 28875])
            ("define-skeleton" code nil nil [28877 29127])
            ("define-skeleton" code nil nil [29129 29252])
            ("define-skeleton" code nil nil [29254 29504])
            ("define-skeleton" code nil nil [29506 29859])
            ("define-skeleton" code nil nil [29861 30108])
            ("define-skeleton" code nil nil [30110 30384])
            ("define-skeleton" code nil nil [30386 30509])
            ("define-skeleton" code nil nil [30511 30636])
            ("define-skeleton" code nil nil [30638 30888])
            ("define-skeleton" code nil nil [30890 31146])
            ("define-skeleton" code nil nil [31148 31265])
            ("define-skeleton" code nil nil [31267 31511])
            ("define-skeleton" code nil nil [31513 31760])
            ("defalias" code nil nil [31761 31814])
            ("texinfo-show-structure" function
               (:user-visible-flag t
                :arguments ("nodes-too"))
                nil [31845 34181])
            ("texinfo-texi2dvi-command" variable (:default-value "texi2dvi") nil [34234 34393])
            ("texinfo-tex-command" variable (:default-value "tex") nil [34395 34531])
            ("texinfo-texindex-command" variable (:default-value "texindex") nil [34533 34683])
            ("texinfo-delete-from-print-queue-command" variable (:default-value "lprm") nil [34685 34974])
            ("texinfo-tex-trailer" variable (:default-value "@bye") nil [34976 35083])
            ("texinfo-tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [35085 35858])
            ("texinfo-tex-buffer" function (:user-visible-flag t) nil [35860 36197])
            ("texinfo-texindex" function (:user-visible-flag t) nil [36199 36718])
            ("texinfo-tex-print" function (:user-visible-flag t) nil [36720 36944])
            ("texinfo-tex-view" function (:user-visible-flag t) nil [36946 37166])
            ("texinfo-quit-job" function (:user-visible-flag t) nil [37168 37373])
            ("texinfo-delete-from-print-queue" function
               (:user-visible-flag t
                :arguments ("job-number"))
                nil [37528 38183])
            ("texinfo" package nil nil [38185 38203]))          
      :file "texinfo.el"
      :pointmax 38230
      :fsize 38231
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax '((close-paren 1089 . 1090) (symbol 1052 . 1069) (open-paren 1051 . 1052)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("regexp-opt" include nil nil [32165 32186])
            ("quail-translating" variable nil nil [32283 32309])
            ("quail-converting" variable nil nil [32310 32335])
            ("flyspell-mode" variable nil nil [32336 32358])
            ("real-last-command" variable nil nil [32359 32385])
            ("delete-selection-mode" variable nil nil [32386 32416])
            ("table" customgroup (:user-visible-flag t) nil [32775 32907])
            ("table-hooks" customgroup (:user-visible-flag t) nil [32909 32995])
            ("table-time-before-update" variable (:default-value 0.2) nil [32997 33714])
            ("table-time-before-reformat" variable (:default-value 0.2) nil [33716 34021])
            ("table-command-prefix" variable (:default-value [(control c) (control c)]) nil [34023 34239])
            ("table-cell" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "gray90" :background "blue1") (((class color)) :foreground "gray90" :background "blue") (t :weight bold)))
                :type "face")
                nil [34241 34498])
            ("table-cell-horizontal-chars" variable (:default-value "-=") nil [34500 34694])
            ("table-cell-vertical-char" variable (:default-value 124) nil [34696 34873])
            ("table-cell-intersection-char" variable (:default-value 43) nil [34875 35037])
            ("table-word-continuation-char" variable (:default-value 92) nil [35039 35636])
            ("table-detect-cell-alignment" variable (:default-value t) nil [35638 36056])
            ("table-dest-buffer-name" variable (:default-value "table") nil [36058 36226])
            ("table-html-delegate-spacing-to-user-agent" variable nil nil [36228 36489])
            ("table-html-th-rows" variable nil nil [36491 36662])
            ("table-html-th-columns" variable nil nil [36664 36845])
            ("table-html-table-attribute" variable (:default-value "border=\"1\"") nil [36847 37028])
            ("table-html-cell-attribute" variable nil nil [37030 37298])
            ("table-cals-thead-rows" variable (:default-value 1) nil [37300 37454])
            ("table-cell-map-hook" variable nil nil [37456 37690])
            ("table-disable-incompatibility-warning" variable nil nil [37692 37917])
            ("table-abort-recognition-when-input-pending" variable (:default-value t) nil [37919 38273])
            ("table-load-hook" variable nil nil [38275 38410])
            ("table-point-entered-cell-hook" variable nil nil [38412 38562])
            ("table-point-left-cell-hook" variable nil nil [38564 38708])
            ("table-yank-handler" variable (:default-value (quote (nil nil t nil))) nil [38710 38783])
            ("setplist" code nil nil [38785 38838])
            ("table-disable-menu" variable (:default-value (null (and (locate-library "easymenu") (require (quote easymenu)) (fboundp (quote easy-menu-add-item))))) nil [38840 39112])
            ("table-paragraph-start" variable
               (:constant-flag t
                :default-value "[ 	
]")
                nil [39255 39371])
            ("table-cache-buffer-name" variable
               (:constant-flag t
                :default-value " *table cell cache*")
                nil [39372 39456])
            ("table-cell-info-lu-coordinate" variable nil nil [39457 39565])
            ("table-cell-info-rb-coordinate" variable nil nil [39566 39676])
            ("table-cell-info-width" variable nil nil [39677 39759])
            ("table-cell-info-height" variable nil nil [39760 39839])
            ("table-cell-info-justify" variable nil nil [39840 39926])
            ("table-cell-info-valign" variable nil nil [39927 40017])
            ("table-cell-self-insert-command-count" variable nil nil [40018 40095])
            ("table-cell-map" variable nil nil [40096 40159])
            ("table-cell-global-map-alist" variable nil nil [40160 40275])
            ("table-global-menu-map" variable nil nil [40276 40355])
            ("table-cell-menu-map" variable nil nil [40356 40433])
            ("table-cell-buffer" variable nil nil [40434 40505])
            ("table-cell-cache-point-coordinate" variable nil nil [40506 40607])
            ("table-cell-cache-mark-coordinate" variable nil nil [40608 40707])
            ("table-update-timer" variable nil nil [40708 40778])
            ("table-widen-timer" variable nil nil [40779 40848])
            ("table-heighten-timer" variable nil nil [40849 40921])
            ("table-inhibit-update" variable nil nil [40922 41114])
            ("table-inhibit-auto-fill-paragraph" variable nil nil [41115 41337])
            ("table-mode-indicator" variable nil nil [41338 41399])
            ("make-variable-buffer-local" code nil nil [41529 41579])
            ("unless" code nil nil [41580 41740])
            ("table-source-languages" variable
               (:constant-flag t
                :default-value (quote (html latex cals)))
                nil [41742 41826])
            ("table-source-info-plist" variable nil nil [41827 41939])
            ("table-cell-span-direction-history" variable (:default-value (quote ("right"))) nil [42344 42397])
            ("table-cell-split-orientation-history" variable (:default-value (quote ("horizontally"))) nil [42398 42461])
            ("table-cell-split-contents-to-history" variable (:default-value (quote ("split"))) nil [42462 42518])
            ("table-insert-row-column-history" variable (:default-value (quote ("row"))) nil [42519 42568])
            ("table-justify-history" variable (:default-value (quote ("center"))) nil [42569 42611])
            ("table-columns-history" variable (:default-value (quote ("3"))) nil [42612 42649])
            ("table-rows-history" variable (:default-value (quote ("3"))) nil [42650 42684])
            ("table-cell-width-history" variable (:default-value (quote ("5"))) nil [42685 42725])
            ("table-cell-height-history" variable (:default-value (quote ("1"))) nil [42726 42767])
            ("table-source-caption-history" variable (:default-value (quote ("Table"))) nil [42768 42816])
            ("table-sequence-string-history" variable (:default-value (quote ("0"))) nil [42817 42862])
            ("table-sequence-count-history" variable (:default-value (quote ("0"))) nil [42863 42907])
            ("table-sequence-increment-history" variable (:default-value (quote ("1"))) nil [42908 42956])
            ("table-sequence-interval-history" variable (:default-value (quote ("1"))) nil [42957 43004])
            ("table-sequence-justify-history" variable (:default-value (quote ("left"))) nil [43005 43054])
            ("table-source-language-history" variable (:default-value (quote ("html"))) nil [43055 43103])
            ("table-col-delim-regexp-history" variable (:default-value (quote (""))) nil [43104 43149])
            ("table-row-delim-regexp-history" variable (:default-value (quote (""))) nil [43150 43195])
            ("table-capture-justify-history" variable (:default-value (quote ("left"))) nil [43196 43244])
            ("table-capture-min-cell-width-history" variable (:default-value (quote ("5"))) nil [43245 43297])
            ("table-capture-columns-history" variable (:default-value (quote (""))) nil [43298 43342])
            ("table-target-history" variable (:default-value (quote ("cell"))) nil [43343 43382])
            ("table-cell-bindings" variable
               (:constant-flag t
                :default-value (quote (([(control i)] . table-forward-cell) ([(control I)] . table-backward-cell) ([tab] . table-forward-cell) ([(shift backtab)] . table-backward-cell) ([(shift iso-lefttab)] . table-backward-cell) ([(shift tab)] . table-backward-cell) ([backtab] . table-backward-cell) ([return] . *table--cell-newline) ([(control m)] . *table--cell-newline) ([(control j)] . *table--cell-newline-and-indent) ([mouse-3] . *table--present-cell-popup-menu) ([(control 62)] . table-widen-cell) ([(control 60)] . table-narrow-cell) ([(control 125)] . table-heighten-cell) ([(control 123)] . table-shorten-cell) ([(control 45)] . table-split-cell-vertically) ([(control 124)] . table-split-cell-horizontally) ([(control 42)] . table-span-cell) ([(control 43)] . table-insert-row-column) ([(control 33)] . table-fixed-width-mode) ([(control 35)] . table-query-dimension) ([(control 94)] . table-generate-source) ([(control 58)] . table-justify))))
                nil [44188 45402])
            ("table-command-remap-alist" variable (:default-value (quote ((self-insert-command . *table--cell-self-insert-command) (completion-separator-self-insert-autofilling . *table--cell-self-insert-command) (completion-separator-self-insert-command . *table--cell-self-insert-command) (delete-char . *table--cell-delete-char) (delete-backward-char . *table--cell-delete-backward-char) (backward-delete-char . *table--cell-delete-backward-char) (backward-delete-char-untabify . *table--cell-delete-backward-char) (newline . *table--cell-newline) (newline-and-indent . *table--cell-newline-and-indent) (open-line . *table--cell-open-line) (quoted-insert . *table--cell-quoted-insert) (describe-mode . *table--cell-describe-mode) (describe-bindings . *table--cell-describe-bindings) (dabbrev-expand . *table--cell-dabbrev-expand) (dabbrev-completion . *table--cell-dabbrev-completion)))) nil [45404 46401])
            ("table-command-list" variable (:default-value (mapcar (function cdr) table-command-remap-alist)) nil [46403 46589])
            ("table-global-menu" variable
               (:constant-flag t
                :default-value (quote ("Table" ("Insert" ["a Table..." table-insert :active (and (not buffer-read-only) (not (table--probe-cell))) :help "Insert a text based table at point"] ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p (quote column)) :help "Insert column(s) of cells in table"]) "----" ("Recognize" ["in Buffer" table-recognize :active t :help "Recognize all tables in the current buffer"] ["in Region" table-recognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Recognize all tables in the current region"] ["a Table" table-recognize-table :active (table--probe-cell) :help "Recognize a table at point"] ["a Cell" table-recognize-cell :active (let ((cell (table--probe-cell))) (and cell (null (table--at-cell-p (car cell))))) :help "Recognize a cell at point"]) ("Unrecognize" ["in Buffer" table-unrecognize :active t :help "Unrecognize all tables in the current buffer"] ["in Region" table-unrecognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Unrecognize all tables in the current region"] ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) "----" ["Capture Region" table-capture :active (and (not buffer-read-only) mark-active (not (eq (mark t) (point))) (not (table--probe-cell))) :help "Capture text in the current region as a table"] ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"])))
                nil [46591 48581])
            ("table-cell-menu" variable
               (:constant-flag t
                :default-value (quote ("Table" ("Insert" ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p (quote column)) :help "Insert column(s) of cells in table"]) ("Delete" ["Row" table-delete-row :active (table--editable-cell-p) :help "Delete row(s) of cells in table"] ["Column" table-delete-column :active (table--editable-cell-p) :help "Delete column(s) of cells in table"]) "----" ("Split a Cell" ["Horizontally" table-split-cell-horizontally :active (table--cell-can-split-horizontally-p) :help "Split the current cell horizontally at point"] ["Vertically" table-split-cell-vertically :active (table--cell-can-split-vertically-p) :help "Split the current cell vertical at point"]) ("Span a Cell to" ["Right" (table-span-cell (quote right)) :active (table--cell-can-span-p (quote right)) :help "Span the current cell into the right cell"] ["Left" (table-span-cell (quote left)) :active (table--cell-can-span-p (quote left)) :help "Span the current cell into the left cell"] ["Above" (table-span-cell (quote above)) :active (table--cell-can-span-p (quote above)) :help "Span the current cell into the cell above"] ["Below" (table-span-cell (quote below)) :active (table--cell-can-span-p (quote below)) :help "Span the current cell into the cell below"]) "----" ("Shrink Cells" ["Horizontally" table-narrow-cell :active (table--editable-cell-p) :help "Shrink the current cell horizontally"] ["Vertically" table-shorten-cell :active (table--editable-cell-p) :help "Shrink the current cell vertically"]) ("Expand Cells" ["Horizontally" table-widen-cell :active (table--editable-cell-p) :help "Expand the current cell horizontally"] ["Vertically" table-heighten-cell :active (table--editable-cell-p) :help "Expand the current cell vertically"]) "----" ("Justify" ("a Cell" ["Left" (table-justify-cell (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of the current cell"] ["Center" (table-justify-cell (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of the current cell"] ["Right" (table-justify-cell (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of the current cell"] "----" ["Top" (table-justify-cell (quote top)) :active (table--editable-cell-p) :help "Top align the contents of the current cell"] ["Middle" (table-justify-cell (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of the current cell"] ["Bottom" (table-justify-cell (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of the current cell"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from the current cell"]) ("a Row" ["Left" (table-justify-row (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current row"] ["Center" (table-justify-row (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current row"] ["Right" (table-justify-row (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current row"] "----" ["Top" (table-justify-row (quote top)) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current row"] ["Middle" (table-justify-row (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current row"] ["Bottom" (table-justify-row (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current row"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current row"]) ("a Column" ["Left" (table-justify-column (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current column"] ["Center" (table-justify-column (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current column"] ["Right" (table-justify-column (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current column"] "----" ["Top" (table-justify-column (quote top)) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current column"] ["Middle" (table-justify-column (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current column"] ["Bottom" (table-justify-column (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current column"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current column"]) ("a Paragraph" ["Left" (table-justify-cell (quote left) t) :active (table--editable-cell-p) :help "Left justify the current paragraph"] ["Center" (table-justify-cell (quote center) t) :active (table--editable-cell-p) :help "Center justify the current paragraph"] ["Right" (table-justify-cell (quote right) t) :active (table--editable-cell-p) :help "Right justify the current paragraph"])) "----" ["Query Dimension" table-query-dimension :active (table--probe-cell) :help "Get the dimension of the current cell and the current table"] ["Generate Source" table-generate-source :active (table--probe-cell) :help "Generate source of the current table in the specified language"] ["Insert Sequence" table-insert-sequence :active (table--editable-cell-p) :help "Travel cells forward while inserting a specified sequence string in each cell"] ("Unrecognize" ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"] ("Configure Width to" ["Auto Expand Mode" (table-fixed-width-mode -1) :active t :style radio :selected (not table-fixed-width-mode) :help "A mode that allows automatic horizontal cell expansion"] ["Fixed Width Mode" (table-fixed-width-mode 1) :active t :style radio :selected table-fixed-width-mode :help "A mode that does not allow automatic horizontal cell expansion"]) ("Navigate" ["Forward Cell" table-forward-cell :active (table--probe-cell) :help "Move point forward by cell(s)"] ["Backward Cell" table-backward-cell :active (table--probe-cell) :help "Move point backward by cell(s)"]))))
                nil [48583 56080])
            ("when" code nil nil [56563 57032])
            ("unless" code nil nil [57081 57455])
            ("table-with-cache-buffer" function (:arguments ("body")) nil [57512 61485])
            ("if" code nil nil [61486 61673])
            ("table-put-source-info" function (:arguments ("prop" "value")) nil [61675 61811])
            ("table-get-source-info" function (:arguments ("prop")) nil [61813 61936])
            ("dolist" code nil nil [62053 63030])
            ("dolist" code nil nil [63052 64067])
            ("dolist" code nil nil [64086 64927])
            ("dolist" code nil nil [64949 65740])
            ("table-insert" function
               (:user-visible-flag t
                :arguments ("columns" "rows" "cell-width" "cell-height"))
                nil [65814 74725])
            ("table-insert-row" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [74742 78556])
            ("table-insert-column" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78573 82916])
            ("table-insert-row-column" function
               (:user-visible-flag t
                :arguments ("row-column" "n"))
                nil [82933 83658])
            ("table-recognize" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83675 85448])
            ("table-unrecognize" function nil nil [85465 85532])
            ("table-recognize-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [85549 87215])
            ("table-unrecognize-region" function (:arguments ("beg" "end")) nil [87232 87332])
            ("table-recognize-table" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87349 88023])
            ("table-unrecognize-table" function nil nil [88040 88119])
            ("table-recognize-cell" function
               (:user-visible-flag t
                :arguments ("force" "no-copy" "arg"))
                nil [88136 91034])
            ("table-unrecognize-cell" function nil nil [91051 91136])
            ("table-heighten-cell" function
               (:user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [91153 93736])
            ("table-shorten-cell" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93753 100366])
            ("table-widen-cell" function
               (:user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [100383 102934])
            ("table-narrow-cell" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [102951 107229])
            ("table-forward-cell" function
               (:user-visible-flag t
                :arguments ("arg" "no-recognize" "unrecognize"))
                nil [107246 112853])
            ("table-backward-cell" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112912 113180])
            ("table-span-cell" function
               (:user-visible-flag t
                :arguments ("direction"))
                nil [113197 117420])
            ("table-split-cell-vertically" function (:user-visible-flag t) nil [117437 119070])
            ("table-split-cell-horizontally" function (:user-visible-flag t) nil [119087 122792])
            ("table-split-cell" function
               (:user-visible-flag t
                :arguments ("orientation"))
                nil [122809 123572])
            ("table-justify" function
               (:user-visible-flag t
                :arguments ("what" "justify"))
                nil [123589 124249])
            ("table-justify-cell" function
               (:user-visible-flag t
                :arguments ("justify" "paragraph"))
                nil [124266 124780])
            ("table-justify-row" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [124797 125344])
            ("table-justify-column" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [125361 125913])
            ("define-minor-mode" code nil nil [125930 126532])
            ("table-query-dimension" function
               (:user-visible-flag t
                :arguments ("where"))
                nil [126549 129203])
            ("table-generate-source" function
               (:user-visible-flag t
                :arguments ("language" "dest-buffer" "caption"))
                nil [129220 134007])
            ("table--generate-source-prologue" function (:arguments ("dest-buffer" "language" "caption" "col-list" "_row-list")) nil [134009 135467])
            ("table--generate-source-epilogue" function (:arguments ("dest-buffer" "language" "_col-list" "_row-list")) nil [135469 136218])
            ("table--generate-source-scan-rows" function (:arguments ("dest-buffer" "language" "_origin-cell" "col-list" "row-list")) nil [136220 137185])
            ("table--generate-source-cells-in-a-row" function (:arguments ("dest-buffer" "language" "col-list" "row-list")) nil [137187 140494])
            ("table--generate-source-cell-contents" function (:arguments ("dest-buffer" "language" "cell")) nil [140496 141877])
            ("table--cell-horizontal-char-p" function (:arguments ("c")) nil [141879 142036])
            ("table--generate-source-scan-lines" function (:arguments ("dest-buffer" "_language" "origin-cell" "tail-cell" "col-list" "row-list")) nil [142038 145147])
            ("table-insert-sequence" function
               (:user-visible-flag t
                :arguments ("str" "n" "increment" "interval" "justify"))
                nil [145164 149751])
            ("table-delete-row" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [149768 152807])
            ("table-delete-column" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [152824 155004])
            ("table-capture" function
               (:user-visible-flag t
                :arguments ("beg" "end" "col-delim-regexp" "row-delim-regexp" "justify" "min-cell-width" "columns"))
                nil [155021 165526])
            ("table-release" function (:user-visible-flag t) nil [165543 166991])
            ("table--make-cell-map" function nil nil [167080 168481])
            ("add-hook" code nil nil [168602 168653])
            ("*table--cell-self-insert-command" function (:user-visible-flag t) nil [168655 169269])
            ("*table--cell-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [169271 169422])
            ("*table--cell-newline" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [169424 169960])
            ("*table--cell-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [169962 170232])
            ("*table--cell-newline-and-indent" function (:user-visible-flag t) nil [170234 170367])
            ("*table--cell-delete-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [170369 172345])
            ("*table--cell-quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [172347 172576])
            ("*table--cell-describe-mode" function (:user-visible-flag t) nil [172578 173818])
            ("*table--cell-describe-bindings" function (:user-visible-flag t) nil [173820 174321])
            ("dabbrev-abbrev-char-regexp" variable nil nil [174323 174358])
            ("*table--cell-dabbrev-expand" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174360 174698])
            ("*table--cell-dabbrev-completion" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174700 175120])
            ("*table--present-cell-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [175122 175641])
            ("table--update-cell" function (:arguments ("now")) nil [175715 177753])
            ("table--update-cell-widened" function (:arguments ("now")) nil [177755 179377])
            ("table--update-cell-heightened" function (:arguments ("now")) nil [179379 181061])
            ("table-goto-top-left-corner" function nil nil [181153 181468])
            ("table-goto-top-right-corner" function nil nil [181470 181784])
            ("table-goto-bottom-left-corner" function nil nil [181786 182109])
            ("table-goto-bottom-right-corner" function nil nil [182111 182433])
            ("table-function" function (:arguments ("function")) nil [182435 182856])
            ("table--read-from-minibuffer" function (:arguments ("prompt-history")) nil [182924 183522])
            ("table--buffer-substring-and-trim" function (:arguments ("beg" "end")) nil [183524 183981])
            ("table--valign" function nil nil [183983 185434])
            ("table--query-justification" function nil nil [185436 185804])
            ("table--spacify-frame" function nil nil [185806 186894])
            ("table--remove-blank-lines" function (:arguments ("n")) nil [186896 187538])
            ("table--uniform-list-p" function (:arguments ("l")) nil [187540 187785])
            ("table--detect-cell-alignment" function (:arguments ("cell")) nil [187787 189718])
            ("table--string-to-number-list" function (:arguments ("str")) nil [189720 189988])
            ("table--justify-cell-contents" function (:arguments ("justify" "paragraph")) nil [189990 191203])
            ("table--horizontally-shift-above-and-below" function (:arguments ("columns-to-extend" "top-to-bottom-coord-list")) nil [191205 193363])
            ("table--create-growing-space-below" function (:arguments ("lines-to-extend" "left-to-right-coord-list" "bottom-border-y")) nil [193365 194781])
            ("table--untabify-line" function (:arguments ("from")) nil [194783 195278])
            ("table--untabify" function (:arguments ("beg" "end")) nil [195280 195451])
            ("table--multiply-string" function (:arguments ("string" "multiplier")) nil [195453 195687])
            ("table--line-column-position" function (:arguments ("line" "column")) nil [195689 195872])
            ("table--row-column-insertion-point-p" function (:arguments ("columnp")) nil [195874 196605])
            ("table--find-row-column" function (:arguments ("columnp" "no-error")) nil [196607 198066])
            ("table--min-coord-list" function (:arguments ("coord-list")) nil [198068 199023])
            ("table--cell-can-split-horizontally-p" function nil nil [199025 199370])
            ("table--cell-can-split-vertically-p" function nil nil [199372 199708])
            ("table--cell-can-span-p" function (:arguments ("direction")) nil [199710 201582])
            ("table--cell-insert-char" function (:arguments ("char" "overwrite")) nil [201584 203710])
            ("table--finish-delayed-tasks" function nil nil [203712 203986])
            ("table--log" function (:arguments ("body")) nil [203988 204189])
            ("table--measure-max-width" function (:arguments ("unlimited")) nil [204191 204842])
            ("table--cell-to-coord" function (:arguments ("cell")) nil [204844 205046])
            ("table--cell-list-to-coord-list" function (:arguments ("cell-list")) nil [205048 205734])
            ("table--test-cell-list" function (:arguments ("horizontal" "reverse" "first-only" "pivot")) nil [205736 206618])
            ("table--vertical-cell-list" function (:arguments ("top-to-bottom" "first-only" "pivot" "internal-dir" "internal-list" "internal-px")) nil [206620 209018])
            ("table--horizontal-cell-list" function (:arguments ("left-to-right" "first-only" "pivot" "internal-dir" "internal-list" "internal-py")) nil [209020 211447])
            ("table--point-in-cell-p" function (:arguments ("location")) nil [211449 211813])
            ("table--region-in-cell-p" function (:arguments ("beg" "end")) nil [211815 212156])
            ("table--at-cell-p" function (:arguments ("position" "object" "at-column")) nil [212158 212554])
            ("table--probe-cell-left-up" function nil nil [212556 214098])
            ("table--probe-cell-right-bottom" function nil nil [214100 215870])
            ("table--editable-cell-p" function (:arguments ("_abort-on-error")) nil [215872 216008])
            ("table--probe-cell" function (:arguments ("abort-on-error")) nil [216010 217753])
            ("table--insert-rectangle" function (:arguments ("rectangle")) nil [217755 218215])
            ("table--put-cell-property" function (:arguments ("cell")) nil [218217 218996])
            ("table--put-cell-line-property" function (:arguments ("beg" "end" "object")) nil [218998 219581])
            ("table--put-cell-content-property" function (:arguments ("beg" "end" "object")) nil [219583 219905])
            ("table--put-cell-indicator-property" function (:arguments ("beg" "end" "object")) nil [219907 220177])
            ("table--put-cell-face-property" function (:arguments ("beg" "end" "object")) nil [220179 220326])
            ("table--put-cell-keymap-property" function (:arguments ("beg" "end" "object")) nil [220328 220485])
            ("table--put-cell-rear-nonsticky" function (:arguments ("beg" "end" "object")) nil [220487 220640])
            ("table--put-cell-point-entered/left-property" function (:arguments ("beg" "end" "object")) nil [220642 220883])
            ("table--remove-cell-properties" function (:arguments ("beg" "end" "object")) nil [220885 221519])
            ("table--update-cell-face" function nil nil [221521 221769])
            ("table--update-cell-face" code nil nil [221771 221796])
            ("table--get-property" function (:arguments ("cell" "property")) nil [221798 221964])
            ("table--get-cell-justify-property" function (:arguments ("cell")) nil [221966 222090])
            ("table--get-cell-valign-property" function (:arguments ("cell")) nil [222092 222225])
            ("table--put-property" function (:arguments ("cell" "property" "value")) nil [222227 222461])
            ("table--put-cell-justify-property" function (:arguments ("cell" "justify")) nil [222463 222603])
            ("table--put-cell-valign-property" function (:arguments ("cell" "valign")) nil [222605 222752])
            ("table--point-entered/left-cell-function" function (:arguments ("_window" "_oldpos" "dir")) nil [222754 223246])
            ("table--warn-incompatibility" function nil nil [223248 224586])
            ("table--cell-blank-str" function (:arguments ("n")) nil [224588 224788])
            ("table--remove-eol-spaces" function (:arguments ("beg" "end" "bol" "force")) nil [224790 225774])
            ("table--fill-region" function (:arguments ("beg" "end" "col" "justify")) nil [225776 226693])
            ("table--fill-region-strictly" function (:arguments ("beg" "end")) nil [226695 227900])
            ("table--goto-coordinate" function (:arguments ("coordinate" "no-extension" "no-tab-expansion")) nil [227902 229213])
            ("table--copy-coordinate" function (:arguments ("coord")) nil [229215 229326])
            ("table--get-coordinate" function (:arguments ("where")) nil [229328 229674])
            ("table--current-line" function (:arguments ("location")) nil [229676 229922])
            ("table--transcoord-table-to-cache" function (:arguments ("coordinate")) nil [229924 230270])
            ("table--transcoord-cache-to-table" function (:arguments ("coordinate")) nil [230272 230605])
            ("table--offset-coordinate" function (:arguments ("coordinate" "offset" "negative")) nil [230607 230970])
            ("table--char-in-str-at-column" function (:arguments ("str" "column")) nil [230972 231222])
            ("table--str-index-at-column" function (:arguments ("str" "column")) nil [231224 231613])
            ("table--set-timer" function (:arguments ("seconds" "func" "args")) nil [231615 232062])
            ("table--cancel-timer" function (:arguments ("timer")) nil [232064 232223])
            ("table--get-last-command" function nil nil [232225 232390])
            ("run-hooks" code nil nil [232392 232420])
            ("table" package nil nil [232422 232438]))          
      :file "table.el"
      :pointmax 232463
      :fsize 232462
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tildify" customgroup (:user-visible-flag t) nil [2054 2170])
            ("tildify-pattern" variable (:default-value "\\(?:[,:;(][ 	]*[a]\\|\\<[AIKOSUVZikosuvz]\\)\\([ 	]+\\|[ 	]*
[ 	]*\\)\\(?:\\w\\|[([{\\]\\|<[a-zA-Z]\\)") nil [2172 2786])
            ("tildify-pattern-alist" variable nil nil [2788 4039])
            ("make-obsolete-variable" code nil nil [4040 4111])
            ("tildify-space-string" variable (:default-value " ") nil [4113 4832])
            ("tildify-string-alist" variable nil nil [4834 5931])
            ("make-obsolete-variable" code nil nil [5932 6031])
            ("tildify-foreach-region-function" variable (:default-value (quote tildify--deprecated-ignore-evironments)) nil [6033 7067])
            ("tildify-ignored-environments-alist" variable nil nil [7069 8580])
            ("make-obsolete-variable" code nil nil [8581 8705])
            ("tildify-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "dont-ask"))
                nil [8758 9589])
            ("tildify-buffer" function
               (:user-visible-flag t
                :arguments ("dont-ask"))
                nil [9606 10097])
            ("tildify--pick-alist-entry" function (:arguments ("mode-alist" "mode")) nil [10133 10456])
            ("make-obsolete" code nil nil [10457 10558])
            ("tildify--deprecated-ignore-evironments" function (:arguments ("callback" "beg" "end")) nil [10560 11157])
            ("make-obsolete" code nil nil [11158 11272])
            ("tildify-foreach-ignore-environments" function (:arguments ("pairs" "callback" "_beg" "end")) nil [11274 13123])
            ("tildify--foreach-region" function (:arguments ("callback" "beg" "end")) nil [13125 13766])
            ("tildify--find-env" function (:arguments ("regexp" "pairs")) nil [13768 14475])
            ("tildify-tildify" function (:arguments ("beg" "end" "ask")) nil [14477 16436])
            ("tildify-space-pattern" variable (:default-value "[,:;(][ 	]*[a]\\|\\<[AIKOSUVWZikosuvwz]") nil [16465 16852])
            ("tildify-space-predicates" variable (:default-value (quote (tildify-space-region-predicate))) nil [16854 17051])
            ("tildify-double-space-undos" variable (:default-value t) nil [17053 17224])
            ("tildify-space" function (:user-visible-flag t) nil [17241 18907])
            ("tildify-space-region-predicate" function nil nil [18909 19270])
            ("define-minor-mode" code nil nil [19287 20470])
            ("tildify" package nil nil [20495 20513]))          
      :file "tildify.el"
      :pointmax 20540
      :fsize 20543
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfmt-version" variable (:default-value "2.42 of  7 Jul 2006") nil [1001 1048])
            ("texinfmt-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [1050 1485])
            ("texinfo" include nil nil [1515 1533])
            ("texnfo-upd" include nil nil [1585 1606])
            ("texinfo-vindex" variable nil nil [1662 1685])
            ("texinfo-findex" variable nil nil [1686 1709])
            ("texinfo-cindex" variable nil nil [1710 1733])
            ("texinfo-pindex" variable nil nil [1734 1757])
            ("texinfo-tindex" variable nil nil [1758 1781])
            ("texinfo-kindex" variable nil nil [1782 1805])
            ("texinfo-last-node" variable nil nil [1806 1832])
            ("texinfo-node-names" variable nil nil [1833 1860])
            ("texinfo-enclosure-list" variable nil nil [1861 1892])
            ("texinfo-alias-list" variable nil nil [1893 1920])
            ("texinfo-fold-nodename-case" variable nil nil [1921 1960])
            ("texinfo-command-start" variable nil nil [1962 1992])
            ("texinfo-command-end" variable nil nil [1993 2021])
            ("texinfo-command-name" variable nil nil [2022 2051])
            ("texinfo-defun-type" variable nil nil [2052 2079])
            ("texinfo-last-node-pos" variable nil nil [2080 2110])
            ("texinfo-stack" variable nil nil [2111 2133])
            ("texinfo-short-index-cmds-alist" variable nil nil [2134 2173])
            ("texinfo-short-index-format-cmds-alist" variable nil nil [2174 2220])
            ("texinfo-format-filename" variable nil nil [2221 2253])
            ("texinfo-footnote-number" variable nil nil [2254 2286])
            ("texinfo-raisesections-alist" variable (:default-value (quote ((@chapter . @chapter) (@unnumbered . @unnumbered) (@centerchap . @unnumbered) (@majorheading . @majorheading) (@chapheading . @chapheading) (@appendix . @appendix) (@section . @chapter) (@unnumberedsec . @unnumbered) (@heading . @chapheading) (@appendixsec . @appendix) (@subsection . @section) (@unnumberedsubsec . @unnumberedsec) (@subheading . @heading) (@appendixsubsec . @appendixsec) (@subsubsection . @subsection) (@unnumberedsubsubsec . @unnumberedsubsec) (@subsubheading . @subheading) (@appendixsubsubsec . @appendixsubsec)))) nil [2288 3211])
            ("texinfo-lowersections-alist" variable (:default-value (quote ((@chapter . @section) (@unnumbered . @unnumberedsec) (@centerchap . @unnumberedsec) (@majorheading . @heading) (@chapheading . @heading) (@appendix . @appendixsec) (@section . @subsection) (@unnumberedsec . @unnumberedsubsec) (@heading . @subheading) (@appendixsec . @appendixsubsec) (@subsection . @subsubsection) (@unnumberedsubsec . @unnumberedsubsubsec) (@subheading . @subsubheading) (@appendixsubsec . @appendixsubsubsec) (@subsubsection . @subsubsection) (@unnumberedsubsubsec . @unnumberedsubsubsec) (@subsubheading . @subsubheading) (@appendixsubsubsec . @appendixsubsubsec)))) nil [3213 4171])
            ("texinfo-format-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 " " st) (modify-syntax-entry 92 " " st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "." st) (modify-syntax-entry 93 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 39 "." st) st)) nil [4192 4679])
            ("texinfo-format-buffer" function
               (:user-visible-flag t
                :arguments ("nosplit"))
                nil [4752 5692])
            ("texinfo-region-buffer-name" variable (:default-value "*Info Region*") nil [5694 5813])
            ("texinfo-pre-format-hook" variable nil nil [5815 6025])
            ("tex-start-of-header" variable nil nil [6059 6087])
            ("tex-end-of-header" variable nil nil [6088 6114])
            ("texinfo-format-region" function
               (:user-visible-flag t
                :arguments ("region-beginning" "region-end"))
                nil [6131 12591])
            ("texi2info" function
               (:user-visible-flag t
                :arguments ("nosplit"))
                nil [12608 13659])
            ("texinfo-format-buffer-1" function nil nil [13727 17941])
            ("texinfo-format-convert" function (:arguments ("min" "max")) nil [18009 18480])
            ("texinfo-no-refill-regexp" variable (:default-value (concat "^@" "\\(" "direntry\\|" "lisp\\|" "smalllisp\\|" "example\\|" "smallexample\\|" "display\\|" "smalldisplay\\|" "format\\|" "smallformat\\|" "flushleft\\|" "flushright\\|" "menu\\|" "multitable\\|" "titlepage\\|" "iftex\\|" "ifhtml\\|" "tex\\|" "html" "\\)")) nil [18569 19346])
            ("texinfo-accent-commands" variable (:default-value (concat "@^\\|" "@`\\|" "@'\\|" "@\"\\|" "@,\\|" "@=\\|" "@~\\|" "@OE{\\|" "@oe{\\|" "@AA{\\|" "@aa{\\|" "@AE{\\|" "@ae{\\|" "@ss{\\|" "@questiondown{\\|" "@exclamdown{\\|" "@L{\\|" "@l{\\|" "@O{\\|" "@o{\\|" "@dotaccent{\\|" "@ubaraccent{\\|" "@d{\\|" "@H{\\|" "@ringaccent{\\|" "@tieaccent{\\|" "@u{\\|" "@v{\\|" "@dotless{")) nil [19348 19801])
            ("texinfo-part-of-para-regexp" variable (:default-value (concat "^@" "\\(" "b{\\|" "bullet{\\|" "cite{\\|" "code{\\|" "email{\\|" "emph{\\|" "equiv{\\|" "error{\\|" "expansion{\\|" "file{\\|" "i{\\|" "inforef{\\|" "kbd{\\|" "key{\\|" "lisp{\\|" "minus{\\|" "point{\\|" "print{\\|" "pxref{\\|" "r{\\|" "ref{\\|" "result{\\|" "samp{\\|" "sc{\\|" "t{\\|" "TeX{\\|" "today{\\|" "url{\\|" "var{\\|" "w{\\|" "xref{\\|" "@-\\|" texinfo-accent-commands "\\)")) nil [19803 20467])
            ("texinfo-append-refill" function nil nil [20469 23033])
            ("texinfo-raise-lower-sections" function nil nil [24097 27129])
            ("texinfo-format-scan" function nil nil [27224 32038])
            ("texinfo-copying-text" variable nil nil [32040 32130])
            ("texinfo-copying" function nil nil [32132 32713])
            ("texinfo-insertcopying" function nil nil [32715 32934])
            ("put" code nil nil [32936 32986])
            ("texinfo-format-begin" function nil nil [32987 33063])
            ("put" code nil nil [33065 33111])
            ("texinfo-format-end" function nil nil [33112 33183])
            ("texinfo-format-begin-end" function (:arguments ("prop")) nil [33185 33391])
            ("texinfo-parse-line-arg" function nil nil [33417 34387])
            ("texinfo-parse-expanded-arg" function nil nil [34389 35213])
            ("texinfo-format-expand-region" function (:arguments ("start" "end")) nil [35215 35492])
            ("texinfo-parse-arg-discard" function nil nil [35494 35661])
            ("texinfo-discard-command" function nil nil [35663 35757])
            ("texinfo-optional-braces-discard" function nil nil [35759 36273])
            ("texinfo-format-parse-line-args" function nil nil [36275 36875])
            ("texinfo-format-parse-args" function nil nil [36877 37922])
            ("texinfo-format-parse-defun-args" function nil nil [37924 38863])
            ("texinfo-discard-line" function nil nil [38865 39198])
            ("texinfo-discard-line-with-args" function nil nil [39200 39336])
            ("put" code nil nil [39504 39566])
            ("texinfo-format-setfilename" function nil nil [39567 39634])
            ("put" code nil nil [39668 39716])
            ("put" code nil nil [39717 39767])
            ("texinfo-format-node" function nil nil [39768 40622])
            ("put" code nil nil [40624 40669])
            ("texinfo-anchor" function nil nil [40670 41256])
            ("put" code nil nil [41258 41306])
            ("texinfo-format-menu" function nil nil [41307 41387])
            ("put" code nil nil [41389 41438])
            ("put" code nil nil [41902 41957])
            ("put" code nil nil [41958 42013])
            ("put" code nil nil [42772 42819])
            ("put" code nil nil [42821 42869])
            ("texinfo-format-xref" function nil nil [42870 43282])
            ("put" code nil nil [43284 43334])
            ("texinfo-format-pxref" function nil nil [43335 43485])
            ("put" code nil nil [43616 43670])
            ("texinfo-format-inforef" function nil nil [43671 43935])
            ("put" code nil nil [44161 44209])
            ("texinfo-format-uref" function nil nil [44210 44641])
            ("put" code nil nil [44667 44726])
            ("put" code nil nil [44727 44785])
            ("put" code nil nil [44786 44841])
            ("put" code nil nil [44842 44896])
            ("put" code nil nil [44897 44953])
            ("put" code nil nil [44954 45009])
            ("put" code nil nil [45010 45068])
            ("put" code nil nil [45069 45119])
            ("put" code nil nil [45120 45177])
            ("put" code nil nil [45178 45235])
            ("texinfo-format-chapter" function nil nil [45236 45301])
            ("put" code nil nil [45303 45357])
            ("put" code nil nil [45358 45413])
            ("put" code nil nil [45414 45468])
            ("put" code nil nil [45469 45532])
            ("put" code nil nil [45533 45595])
            ("put" code nil nil [45596 45655])
            ("put" code nil nil [45656 45714])
            ("put" code nil nil [45715 45776])
            ("put" code nil nil [45777 45837])
            ("texinfo-format-section" function nil nil [45838 45903])
            ("put" code nil nil [45905 45965])
            ("put" code nil nil [45966 46027])
            ("put" code nil nil [46028 46088])
            ("put" code nil nil [46089 46154])
            ("put" code nil nil [46155 46219])
            ("put" code nil nil [46220 46287])
            ("put" code nil nil [46288 46354])
            ("texinfo-format-subsection" function nil nil [46355 46423])
            ("put" code nil nil [46425 46491])
            ("put" code nil nil [46492 46559])
            ("put" code nil nil [46560 46626])
            ("put" code nil nil [46627 46698])
            ("put" code nil nil [46699 46769])
            ("put" code nil nil [46770 46843])
            ("put" code nil nil [46844 46916])
            ("texinfo-format-subsubsection" function nil nil [46917 46988])
            ("texinfo-format-chapter-1" function (:arguments ("belowchar")) nil [46990 47226])
            ("put" code nil nil [47228 47288])
            ("texinfo-format-sectionpad" function nil nil [47289 47551])
            ("put" code nil nil [47621 47665])
            ("texinfo-format-." function nil nil [47666 47737])
            ("put" code nil nil [47739 47783])
            ("texinfo-format-:" function nil nil [47784 47840])
            ("put" code nil nil [47842 47895])
            ("texinfo-format-soft-hyphen" function nil nil [47896 47961])
            ("put" code nil nil [48174 48242])
            ("put" code nil nil [48254 48314])
            ("put" code nil nil [48339 48405])
            ("put" code nil nil [48406 48472])
            ("put" code nil nil [48473 48538])
            ("put" code nil nil [48539 48604])
            ("put" code nil nil [48605 48672])
            ("put" code nil nil [48673 48740])
            ("put" code nil nil [48940 49018])
            ("texinfo-format-documentdescription" function nil nil [49019 49182])
            ("put" code nil nil [49214 49266])
            ("texinfo-format-center" function nil nil [49267 49521])
            ("put" code nil nil [49523 49567])
            ("texinfo-format-sp" function nil nil [49568 49693])
            ("put" code nil nil [49695 49752])
            ("texinfo-format-paragraph-break" function nil nil [49753 50081])
            ("texinfo-footnote-style" variable (:default-value "separate") nil [50973 51059])
            ("put" code nil nil [51061 51120])
            ("texinfo-footnotestyle" function nil nil [51121 51320])
            ("put" code nil nil [51322 51378])
            ("texinfo-format-footnote" function nil nil [51379 51791])
            ("texinfo-format-separate-node" function nil nil [51793 53882])
            ("texinfo-format-end-node" function nil nil [53884 54968])
            ("texinfo-stack-depth" variable nil nil [55495 55655])
            ("texinfo-push-stack" function (:arguments ("check" "arg")) nil [55657 55819])
            ("texinfo-pop-stack" function (:arguments ("check")) nil [55821 56193])
            ("put" code nil nil [56195 56242])
            ("texinfo-itemize" function nil nil [56243 56499])
            ("put" code nil nil [56501 56549])
            ("texinfo-end-itemize" function nil nil [56550 56748])
            ("put" code nil nil [56750 56801])
            ("texinfo-enumerate" function nil nil [56802 57265])
            ("put" code nil nil [57267 57319])
            ("texinfo-end-enumerate" function nil nil [57320 57522])
            ("put" code nil nil [57583 57644])
            ("texinfo-alphaenumerate" function nil nil [57645 57789])
            ("put" code nil nil [57791 57853])
            ("texinfo-end-alphaenumerate" function nil nil [57854 58066])
            ("put" code nil nil [58126 58185])
            ("texinfo-capsenumerate" function nil nil [58186 58328])
            ("put" code nil nil [58330 58390])
            ("texinfo-end-capsenumerate" function nil nil [58391 58601])
            ("texinfo-do-itemize" function (:arguments ("from")) nil [58739 59089])
            ("put" code nil nil [59091 59132])
            ("put" code nil nil [59133 59175])
            ("texinfo-item" function nil nil [59176 59257])
            ("put" code nil nil [59259 59309])
            ("texinfo-itemize-item" function nil nil [59310 59717])
            ("put" code nil nil [59719 59773])
            ("texinfo-enumerate-item" function nil nil [59774 60898])
            ("put" code nil nil [60900 60964])
            ("texinfo-alphaenumerate-item" function nil nil [60965 61278])
            ("put" code nil nil [61280 61342])
            ("texinfo-capsenumerate-item" function nil nil [61343 61654])
            ("put" code nil nil [61723 61766])
            ("texinfo-table" function nil nil [61767 62017])
            ("put" code nil nil [62019 62065])
            ("texinfo-table-item" function nil nil [62066 62257])
            ("put" code nil nil [62259 62303])
            ("texinfo-end-table" function nil nil [62304 62498])
            ("put" code nil nil [62709 62759])
            ("put" code nil nil [62760 62815])
            ("texinfo-description" function nil nil [62816 62948])
            ("put" code nil nil [63198 63243])
            ("put" code nil nil [63244 63289])
            ("texinfo-ftable" function nil nil [63291 63345])
            ("texinfo-vtable" function nil nil [63346 63400])
            ("texinfo-indextable" function (:arguments ("table-type")) nil [63402 63542])
            ("put" code nil nil [63600 63648])
            ("put" code nil nil [63649 63697])
            ("texinfo-ftable-item" function nil nil [63699 63771])
            ("texinfo-vtable-item" function nil nil [63772 63844])
            ("texinfo-indextable-item" function (:arguments ("index-type")) nil [63846 64195])
            ("put" code nil nil [64233 64279])
            ("put" code nil nil [64280 64326])
            ("texinfo-end-ftable" function nil nil [64328 64390])
            ("texinfo-end-vtable" function nil nil [64391 64453])
            ("texinfo-end-indextable" function (:arguments ("table-type")) nil [64455 64668])
            ("texinfo-extra-inter-column-width" variable nil nil [67773 67885])
            ("texinfo-multitable-buffer-name" variable (:default-value "*multitable-temporary-buffer*") nil [67887 67958])
            ("texinfo-multitable-rectangle-name" variable (:default-value "texinfo-multitable-temp-") nil [67959 68028])
            ("put" code nil nil [68095 68167])
            ("put" code nil nil [68168 68242])
            ("put" code nil nil [68243 68317])
            ("put" code nil nil [68318 68392])
            ("put" code nil nil [68394 68447])
            ("texinfo-multitable" function nil nil [68449 70021])
            ("put" code nil nil [70023 70077])
            ("texinfo-end-multitable" function nil nil [70078 70243])
            ("texinfo-multitable-widths" function nil nil [70245 72786])
            ("texinfo-multitable-extract-row" function nil nil [72821 73487])
            ("put" code nil nil [73489 73545])
            ("texinfo-multitable-item" function nil nil [73546 78561])
            ("put" code nil nil [78669 78719])
            ("texinfo-format-image" function nil nil [78720 79321])
            ("put" code nil nil [79463 79514])
            ("put" code nil nil [79515 79566])
            ("put" code nil nil [79568 79618])
            ("texinfo-format-iftex" function nil nil [79619 79748])
            ("put" code nil nil [79750 79802])
            ("texinfo-format-ifhtml" function nil nil [79803 79934])
            ("put" code nil nil [79936 79998])
            ("texinfo-format-ifplaintext" function nil nil [79999 80140])
            ("put" code nil nil [80142 80192])
            ("texinfo-format-ifxml" function nil nil [80193 80363])
            ("put" code nil nil [80365 80411])
            ("texinfo-format-tex" function nil nil [80412 80537])
            ("put" code nil nil [80539 80587])
            ("texinfo-format-html" function nil nil [80588 80715])
            ("put" code nil nil [80717 80763])
            ("texinfo-format-xml" function nil nil [80764 80930])
            ("put" code nil nil [80932 80990])
            ("texinfo-format-ifnotinfo" function nil nil [80991 81128])
            ("put" code nil nil [81130 81189])
            ("put" code nil nil [81190 81249])
            ("put" code nil nil [81251 81304])
            ("put" code nil nil [81305 81358])
            ("put" code nil nil [81360 81414])
            ("put" code nil nil [81415 81469])
            ("put" code nil nil [81471 81524])
            ("put" code nil nil [81525 81578])
            ("put" code nil nil [81598 81656])
            ("texinfo-format-titlepage" function nil nil [81657 81794])
            ("put" code nil nil [81796 81853])
            ("put" code nil nil [81926 81984])
            ("texinfo-format-titlespec" function nil nil [81985 82122])
            ("put" code nil nil [82124 82181])
            ("put" code nil nil [82197 82247])
            ("texinfo-format-today" function nil nil [82379 82483])
            ("put" code nil nil [82584 82642])
            ("texinfo-format-timestamp" function nil nil [82717 82949])
            ("put" code nil nil [82966 83018])
            ("texinfo-format-ignore" function nil nil [83019 83150])
            ("put" code nil nil [83152 83206])
            ("put" code nil nil [85728 85796])
            ("texinfo-define-info-enclosure" function nil nil [85797 86208])
            ("put" code nil nil [86224 86267])
            ("texinfo-alias" function nil nil [86268 86671])
            ("put" code nil nil [86705 86751])
            ("put" code nil nil [86815 86860])
            ("put" code nil nil [86985 87035])
            ("texinfo-format-var" function nil nil [87036 87166])
            ("put" code nil nil [87168 87216])
            ("put" code nil nil [87217 87265])
            ("put" code nil nil [87298 87349])
            ("put" code nil nil [87386 87433])
            ("put" code nil nil [87434 87482])
            ("put" code nil nil [87483 87531])
            ("put" code nil nil [87532 87579])
            ("texinfo-format-code" function nil nil [87580 87693])
            ("put" code nil nil [87894 87946])
            ("texinfo-format-option" function nil nil [87947 88399])
            ("put" code nil nil [88401 88449])
            ("put" code nil nil [88450 88500])
            ("texinfo-format-emph" function nil nil [88501 88614])
            ("put" code nil nil [88616 88663])
            ("put" code nil nil [88664 88712])
            ("texinfo-format-defn" function nil nil [88713 88828])
            ("put" code nil nil [88830 88880])
            ("texinfo-format-email" function nil nil [88881 89246])
            ("put" code nil nil [89248 89294])
            ("texinfo-format-key" function nil nil [89364 89468])
            ("put" code nil nil [89527 89575])
            ("texinfo-format-verb" function nil nil [89576 90308])
            ("put" code nil nil [90481 90533])
            ("texinfo-format-bullet" function nil nil [90534 90694])
            ("texinfo-format-kbd-regexp" variable (:default-value (concat "^@" "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)")) nil [90887 91117])
            ("texinfo-format-kbd-end-regexp" variable (:default-value (concat "^@end " "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)")) nil [91119 91405])
            ("put" code nil nil [91407 91453])
            ("texinfo-format-kbd" function nil nil [91454 92690])
            ("put" code nil nil [92783 92837])
            ("put" code nil nil [92838 92897])
            ("put" code nil nil [92898 92952])
            ("put" code nil nil [92953 93004])
            ("put" code nil nil [93005 93061])
            ("put" code nil nil [93062 93121])
            ("put" code nil nil [93122 93178])
            ("texinfo-format-example" function nil nil [93179 93312])
            ("put" code nil nil [93314 93362])
            ("put" code nil nil [93363 93411])
            ("put" code nil nil [93412 93465])
            ("put" code nil nil [93466 93511])
            ("put" code nil nil [93512 93562])
            ("put" code nil nil [93563 93616])
            ("put" code nil nil [93617 93667])
            ("texinfo-end-example" function nil nil [93668 93866])
            ("put" code nil nil [93868 93920])
            ("texinfo-format-exdent" function nil nil [93921 94274])
            ("put" code nil nil [94309 94365])
            ("texinfo-format-direntry" function nil nil [94366 94498])
            ("put" code nil nil [94500 94550])
            ("texinfo-end-direntry" function nil nil [94551 94678])
            ("put" code nil nil [94680 94742])
            ("texinfo-format-dircategory" function nil nil [94743 94996])
            ("put" code nil nil [95122 95176])
            ("put" code nil nil [95177 95231])
            ("put" code nil nil [95563 95618])
            ("put" code nil nil [95619 95679])
            ("put" code nil nil [95680 95738])
            ("texinfo-format-flushleft" function nil nil [95739 95799])
            ("put" code nil nil [95801 95850])
            ("put" code nil nil [95851 95905])
            ("put" code nil nil [95906 95958])
            ("texinfo-end-flushleft" function nil nil [95959 96019])
            ("put" code nil nil [96238 96298])
            ("texinfo-format-flushright" function nil nil [96299 96399])
            ("put" code nil nil [96401 96455])
            ("texinfo-end-flushright" function nil nil [96456 96626])
            ("texinfo-do-flushright" function (:arguments ("from")) nil [96628 97036])
            ("put" code nil nil [97103 97151])
            ("texinfo-format-ctrl" function nil nil [97152 97264])
            ("put" code nil nil [97266 97312])
            ("texinfo-format-TeX" function nil nil [97313 97389])
            ("put" code nil nil [97391 97449])
            ("texinfo-format-copyright" function nil nil [97450 97532])
            ("put" code nil nil [97534 97584])
            ("texinfo-format-minus" function nil nil [97585 97744])
            ("put" code nil nil [97746 97794])
            ("texinfo-format-dots" function nil nil [97795 97872])
            ("put" code nil nil [97874 97928])
            ("texinfo-format-enddots" function nil nil [97929 98010])
            ("put" code nil nil [98012 98064])
            ("texinfo-format-pounds" function nil nil [98065 98142])
            ("texinfo-paragraph-indent" variable (:default-value "asis") nil [98704 98821])
            ("put" code nil nil [98823 98886])
            ("texinfo-paragraphindent" function nil nil [98888 99221])
            ("put" code nil nil [99223 99275])
            ("texinfo-format-refill" function nil nil [99276 101007])
            ("put" code nil nil [101009 101058])
            ("texinfo-noindent" function nil nil [101059 101317])
            ("put" code nil nil [101343 101395])
            ("texinfo-format-vindex" function nil nil [101396 101462])
            ("put" code nil nil [101464 101516])
            ("texinfo-format-cindex" function nil nil [101517 101583])
            ("put" code nil nil [101585 101637])
            ("texinfo-format-findex" function nil nil [101638 101704])
            ("put" code nil nil [101706 101758])
            ("texinfo-format-pindex" function nil nil [101759 101825])
            ("put" code nil nil [101827 101879])
            ("texinfo-format-tindex" function nil nil [101880 101946])
            ("put" code nil nil [101948 102000])
            ("texinfo-format-kindex" function nil nil [102001 102067])
            ("texinfo-index" function (:arguments ("indexvar")) nil [102069 102525])
            ("texinfo-indexvar-alist" variable (:default-value (quote (("cp" . texinfo-cindex) ("fn" . texinfo-findex) ("vr" . texinfo-vindex) ("tp" . texinfo-tindex) ("pg" . texinfo-pindex) ("ky" . texinfo-kindex)))) nil [102527 102727])
            ("put" code nil nil [102761 102817])
            ("put" code nil nil [102818 102878])
            ("texinfo-format-defindex" function nil nil [102880 103834])
            ("put" code nil nil [103869 103925])
            ("put" code nil nil [103926 103986])
            ("texinfo-format-synindex" function nil nil [103988 104748])
            ("texinfo-short-index-cmds-alist" variable
               (:constant-flag t
                :default-value (quote (("cp" . cindex) ("fn" . findex) ("vr" . vindex) ("tp" . tindex) ("pg" . pindex) ("ky" . kindex))))
                nil [104750 104912])
            ("texinfo-short-index-format-cmds-alist" variable
               (:constant-flag t
                :default-value (quote (("cp" . texinfo-format-cindex) ("fn" . texinfo-format-findex) ("vr" . texinfo-format-vindex) ("tp" . texinfo-format-tindex) ("pg" . texinfo-format-pindex) ("ky" . texinfo-format-kindex))))
                nil [104914 105173])
            ("texinfo-sort-region" function (:arguments ("start" "end")) nil [105268 105480])
            ("texinfo-sort-startkeyfun" function nil nil [105581 105972])
            ("put" code nil nil [105993 106053])
            ("texinfo-format-printindex" function nil nil [106055 106738])
            ("texinfo-print-index" function (:arguments ("file" "indexelts")) nil [106740 107410])
            ("put" code nil nil [107805 107855])
            ("texinfo-format-equiv" function nil nil [107856 107933])
            ("put" code nil nil [107935 107985])
            ("texinfo-format-error" function nil nil [107986 108069])
            ("put" code nil nil [108071 108129])
            ("texinfo-format-expansion" function nil nil [108130 108212])
            ("put" code nil nil [108214 108264])
            ("texinfo-format-point" function nil nil [108265 108343])
            ("put" code nil nil [108345 108395])
            ("texinfo-format-print" function nil nil [108396 108473])
            ("put" code nil nil [108475 108527])
            ("texinfo-format-result" function nil nil [108528 108606])
            ("put" code nil nil [112298 112358])
            ("texinfo-format-French-OE-ligature" function nil nil [112359 112485])
            ("put" code nil nil [112516 112576])
            ("texinfo-format-French-oe-ligature" function nil nil [112577 112717])
            ("put" code nil nil [112782 112850])
            ("texinfo-format-Scandinavian-A-with-circle" function nil nil [112851 112985])
            ("put" code nil nil [113016 113084])
            ("texinfo-format-Scandinavian-a-with-circle" function nil nil [113085 113233])
            ("put" code nil nil [113293 113356])
            ("texinfo-format-Latin-Scandinavian-AE" function nil nil [113357 113486])
            ("put" code nil nil [113517 113580])
            ("texinfo-format-Latin-Scandinavian-ae" function nil nil [113581 113725])
            ("put" code nil nil [113778 113834])
            ("texinfo-format-German-sharp-S" function nil nil [113835 113957])
            ("put" code nil nil [114021 114098])
            ("texinfo-format-upside-down-question-mark" function nil nil [114099 114231])
            ("put" code nil nil [114298 114376])
            ("texinfo-format-upside-down-exclamation-mark" function nil nil [114377 114512])
            ("put" code nil nil [114579 114639])
            ("texinfo-format-Polish-suppressed-L" function nil nil [114640 114767])
            ("put" code nil nil [114847 114918])
            ("texinfo-format-Polish-suppressed-l-lower-case" function nil nil [114919 115057])
            ("put" code nil nil [115122 115188])
            ("texinfo-format-Scandinavian-O-with-slash" function nil nil [115189 115322])
            ("put" code nil nil [115399 115476])
            ("texinfo-format-Scandinavian-o-with-slash-lower-case" function nil nil [115477 115621])
            ("put" code nil nil [115693 115749])
            ("texinfo-format-cedilla-accent" function nil nil [115750 115870])
            ("put" code nil nil [115924 115987])
            ("texinfo-format-overdot-accent" function nil nil [115988 116108])
            ("put" code nil nil [116162 116227])
            ("texinfo-format-underbar-accent" function nil nil [116228 116350])
            ("put" code nil nil [116404 116469])
            ("texinfo-format-underdot-accent" function nil nil [116470 116593])
            ("put" code nil nil [116653 116715])
            ("texinfo-format-long-Hungarian-umlaut" function nil nil [116716 116847])
            ("put" code nil nil [116897 116958])
            ("texinfo-format-ring-accent" function nil nil [116959 117077])
            ("put" code nil nil [117132 117197])
            ("texinfo-format-tie-after-accent" function nil nil [117198 117321])
            ("put" code nil nil [117373 117426])
            ("texinfo-format-breve-accent" function nil nil [117427 117546])
            ("put" code nil nil [117597 117650])
            ("texinfo-format-hacek-accent" function nil nil [117651 117770])
            ("put" code nil nil [117833 117887])
            ("texinfo-format-dotless" function nil nil [117888 117999])
            ("texinfo-format-defun" function nil nil [120025 120158])
            ("texinfo-end-defun" function nil nil [120160 120458])
            ("texinfo-format-defunx" function nil nil [120460 120523])
            ("texinfo-format-defun-1" function (:arguments ("first-p")) nil [120525 121189])
            ("put" code nil nil [121264 121333])
            ("put" code nil nil [121334 121404])
            ("put" code nil nil [121405 121474])
            ("put" code nil nil [121475 121545])
            ("put" code nil nil [121546 121615])
            ("put" code nil nil [121616 121686])
            ("texinfo-format-deffn" function (:arguments ("parsed-args")) nil [121687 122401])
            ("put" code nil nil [122471 122557])
            ("put" code nil nil [122558 122645])
            ("put" code nil nil [122646 122733])
            ("put" code nil nil [122734 122822])
            ("put" code nil nil [122823 122911])
            ("put" code nil nil [122912 123001])
            ("put" code nil nil [123002 123089])
            ("put" code nil nil [123090 123178])
            ("put" code nil nil [123179 123266])
            ("put" code nil nil [123267 123355])
            ("texinfo-format-specialized-defun" function (:arguments ("parsed-args")) nil [123356 124038])
            ("put" code nil nil [124085 124162])
            ("put" code nil nil [124163 124241])
            ("put" code nil nil [124242 124319])
            ("put" code nil nil [124320 124398])
            ("texinfo-format-deftypefn" function (:arguments ("parsed-args")) nil [124399 125067])
            ("put" code nil nil [125116 125195])
            ("put" code nil nil [125196 125281])
            ("put" code nil nil [125282 125361])
            ("put" code nil nil [125362 125447])
            ("texinfo-format-deftypefun" function (:arguments ("parsed-args")) nil [125448 126152])
            ("put" code nil nil [126193 126262])
            ("put" code nil nil [126263 126333])
            ("texinfo-format-defop" function (:arguments ("parsed-args")) nil [126334 126854])
            ("put" code nil nil [126895 126964])
            ("put" code nil nil [126965 127035])
            ("texinfo-format-defcv" function (:arguments ("parsed-args")) nil [127036 127544])
            ("put" code nil nil [127589 127666])
            ("put" code nil nil [127667 127745])
            ("texinfo-format-defmethod" function (:arguments ("parsed-args")) nil [127746 128319])
            ("put" code nil nil [128362 128435])
            ("put" code nil nil [128436 128510])
            ("texinfo-format-defivar" function (:arguments ("parsed-args")) nil [128511 129078])
            ("put" code nil nil [130085 130151])
            ("put" code nil nil [130152 130219])
            ("put" code nil nil [130220 130287])
            ("put" code nil nil [130288 130356])
            ("put" code nil nil [130357 130425])
            ("put" code nil nil [130426 130495])
            ("put" code nil nil [130496 130563])
            ("put" code nil nil [130564 130632])
            ("put" code nil nil [130633 130701])
            ("put" code nil nil [130702 130771])
            ("texinfo-index-defun" function (:arguments ("parsed-args")) nil [130772 131377])
            ("put" code nil nil [131379 131445])
            ("put" code nil nil [131446 131513])
            ("put" code nil nil [131514 131580])
            ("put" code nil nil [131581 131648])
            ("put" code nil nil [131649 131715])
            ("put" code nil nil [131716 131783])
            ("put" code nil nil [131784 131855])
            ("put" code nil nil [131856 131928])
            ("put" code nil nil [131929 132000])
            ("put" code nil nil [132001 132073])
            ("texinfo-index-deffn" function (:arguments ("parsed-args")) nil [132074 132684])
            ("put" code nil nil [132686 132760])
            ("put" code nil nil [132761 132836])
            ("put" code nil nil [132837 132911])
            ("put" code nil nil [132912 132987])
            ("texinfo-index-deftypefn" function (:arguments ("parsed-args")) nil [132988 133609])
            ("put" code nil nil [133611 133685])
            ("put" code nil nil [133686 133761])
            ("texinfo-index-defmethod" function (:arguments ("parsed-args")) nil [133762 134460])
            ("put" code nil nil [134462 134528])
            ("put" code nil nil [134529 134596])
            ("texinfo-index-defop" function (:arguments ("parsed-args")) nil [134597 135303])
            ("put" code nil nil [135305 135375])
            ("put" code nil nil [135376 135447])
            ("texinfo-index-defivar" function (:arguments ("parsed-args")) nil [135448 136144])
            ("put" code nil nil [136146 136212])
            ("put" code nil nil [136213 136280])
            ("texinfo-index-defcv" function (:arguments ("parsed-args")) nil [136281 136987])
            ("put" code nil nil [137736 137786])
            ("put" code nil nil [137787 137839])
            ("put" code nil nil [137840 137884])
            ("put" code nil nil [137885 137936])
            ("put" code nil nil [137937 137989])
            ("put" code nil nil [137990 138039])
            ("put" code nil nil [138040 138090])
            ("put" code nil nil [138092 138142])
            ("put" code nil nil [138143 138195])
            ("put" code nil nil [138196 138240])
            ("put" code nil nil [138241 138299])
            ("put" code nil nil [138300 138359])
            ("put" code nil nil [138360 138409])
            ("put" code nil nil [138410 138460])
            ("put" code nil nil [138462 138513])
            ("put" code nil nil [138514 138567])
            ("put" code nil nil [138568 138613])
            ("put" code nil nil [138614 138670])
            ("put" code nil nil [138671 138728])
            ("put" code nil nil [138729 138779])
            ("put" code nil nil [138780 138831])
            ("put" code nil nil [138833 138885])
            ("put" code nil nil [138886 138940])
            ("put" code nil nil [138941 138987])
            ("put" code nil nil [138988 139052])
            ("put" code nil nil [139053 139118])
            ("put" code nil nil [139119 139170])
            ("put" code nil nil [139171 139223])
            ("put" code nil nil [139225 139275])
            ("put" code nil nil [139276 139328])
            ("put" code nil nil [139329 139373])
            ("put" code nil nil [139374 139425])
            ("put" code nil nil [139426 139478])
            ("put" code nil nil [139479 139528])
            ("put" code nil nil [139529 139579])
            ("put" code nil nil [139581 139632])
            ("put" code nil nil [139633 139686])
            ("put" code nil nil [139687 139732])
            ("put" code nil nil [139733 139792])
            ("put" code nil nil [139793 139853])
            ("put" code nil nil [139854 139904])
            ("put" code nil nil [139905 139956])
            ("put" code nil nil [139958 140011])
            ("put" code nil nil [140012 140067])
            ("put" code nil nil [140068 140115])
            ("put" code nil nil [140116 140177])
            ("put" code nil nil [140178 140240])
            ("put" code nil nil [140241 140293])
            ("put" code nil nil [140294 140347])
            ("put" code nil nil [140349 140400])
            ("put" code nil nil [140401 140454])
            ("put" code nil nil [140455 140500])
            ("put" code nil nil [140501 140559])
            ("put" code nil nil [140560 140619])
            ("put" code nil nil [140620 140670])
            ("put" code nil nil [140671 140722])
            ("put" code nil nil [140724 140775])
            ("put" code nil nil [140776 140829])
            ("put" code nil nil [140830 140875])
            ("put" code nil nil [140876 140938])
            ("put" code nil nil [140939 141002])
            ("put" code nil nil [141003 141053])
            ("put" code nil nil [141054 141105])
            ("put" code nil nil [141107 141157])
            ("put" code nil nil [141158 141210])
            ("put" code nil nil [141211 141255])
            ("put" code nil nil [141256 141307])
            ("put" code nil nil [141308 141360])
            ("put" code nil nil [141361 141410])
            ("put" code nil nil [141411 141461])
            ("put" code nil nil [141511 141561])
            ("put" code nil nil [141562 141614])
            ("put" code nil nil [141615 141659])
            ("put" code nil nil [141660 141711])
            ("put" code nil nil [141712 141764])
            ("put" code nil nil [141765 141814])
            ("put" code nil nil [141815 141865])
            ("put" code nil nil [141867 141921])
            ("put" code nil nil [141922 141978])
            ("put" code nil nil [141979 142027])
            ("put" code nil nil [142028 142092])
            ("put" code nil nil [142093 142158])
            ("put" code nil nil [142159 142212])
            ("put" code nil nil [142213 142267])
            ("put" code nil nil [142269 142319])
            ("put" code nil nil [142320 142372])
            ("put" code nil nil [142373 142417])
            ("put" code nil nil [142418 142469])
            ("put" code nil nil [142470 142522])
            ("put" code nil nil [142523 142572])
            ("put" code nil nil [142573 142623])
            ("put" code nil nil [142625 142677])
            ("put" code nil nil [142678 142732])
            ("put" code nil nil [142733 142779])
            ("put" code nil nil [142780 142853])
            ("put" code nil nil [142854 142928])
            ("put" code nil nil [142929 142980])
            ("put" code nil nil [142981 143033])
            ("put" code nil nil [143070 143124])
            ("put" code nil nil [143125 143181])
            ("put" code nil nil [143182 143230])
            ("put" code nil nil [143231 143290])
            ("put" code nil nil [143291 143351])
            ("put" code nil nil [143352 143405])
            ("put" code nil nil [143406 143460])
            ("put" code nil nil [143462 143517])
            ("put" code nil nil [143518 143575])
            ("put" code nil nil [143576 143625])
            ("put" code nil nil [143626 143694])
            ("put" code nil nil [143695 143764])
            ("put" code nil nil [143765 143819])
            ("put" code nil nil [143820 143875])
            ("put" code nil nil [143877 143931])
            ("put" code nil nil [143932 143988])
            ("put" code nil nil [143989 144037])
            ("put" code nil nil [144038 144097])
            ("put" code nil nil [144098 144158])
            ("put" code nil nil [144159 144212])
            ("put" code nil nil [144213 144267])
            ("put" code nil nil [144269 144324])
            ("put" code nil nil [144325 144382])
            ("put" code nil nil [144383 144432])
            ("put" code nil nil [144433 144501])
            ("put" code nil nil [144502 144571])
            ("put" code nil nil [144572 144626])
            ("put" code nil nil [144627 144682])
            ("put" code nil nil [145375 145418])
            ("texinfo-clear" function nil nil [145419 145716])
            ("put" code nil nil [145718 145757])
            ("texinfo-set" function nil nil [145758 146300])
            ("put" code nil nil [146302 146345])
            ("texinfo-value" function nil nil [146346 147158])
            ("put" code nil nil [147160 147210])
            ("put" code nil nil [147211 147255])
            ("texinfo-if-set" function nil nil [147256 148012])
            ("put" code nil nil [148014 148066])
            ("put" code nil nil [148067 148115])
            ("texinfo-if-clear" function nil nil [148116 148876])
            ("put" code nil nil [148890 148938])
            ("texinfo-format-ifeq" function nil nil [148939 150537])
            ("put" code nil nil [151725 151777])
            ("put" code nil nil [154149 154194])
            ("put" code nil nil [154195 154240])
            ("put" code nil nil [154241 154286])
            ("put" code nil nil [154287 154332])
            ("put" code nil nil [154333 154378])
            ("put" code nil nil [154379 154427])
            ("put" code nil nil [154428 154475])
            ("put" code nil nil [154476 154524])
            ("put" code nil nil [154525 154578])
            ("texinfo-format-noop" function nil nil [154579 154684])
            ("put" code nil nil [154745 154812])
            ("texinfo-discard-command-and-arg" function nil nil [154813 155060])
            ("put" code nil nil [155187 155235])
            ("put" code nil nil [155236 155290])
            ("put" code nil nil [155291 155344])
            ("put" code nil nil [155345 155402])
            ("put" code nil nil [155403 155458])
            ("put" code nil nil [155459 155512])
            ("put" code nil nil [155513 155566])
            ("put" code nil nil [155567 155622])
            ("put" code nil nil [155623 155678])
            ("put" code nil nil [155679 155734])
            ("put" code nil nil [155735 155790])
            ("put" code nil nil [155849 155905])
            ("put" code nil nil [155906 155968])
            ("put" code nil nil [155969 156032])
            ("put" code nil nil [156033 156090])
            ("put" code nil nil [156091 156151])
            ("put" code nil nil [156152 156215])
            ("put" code nil nil [156216 156286])
            ("put" code nil nil [156287 156347])
            ("put" code nil nil [156348 156413])
            ("put" code nil nil [156414 156482])
            ("put" code nil nil [156483 156542])
            ("put" code nil nil [156543 156604])
            ("put" code nil nil [156919 156984])
            ("put" code nil nil [156986 157045])
            ("put" code nil nil [157046 157110])
            ("put" code nil nil [157111 157175])
            ("put" code nil nil [157176 157248])
            ("put" code nil nil [157249 157308])
            ("put" code nil nil [157310 157395])
            ("put" code nil nil [157396 157486])
            ("put" code nil nil [157488 157551])
            ("put" code nil nil [157552 157611])
            ("put" code nil nil [157612 157680])
            ("put" code nil nil [157681 157750])
            ("put" code nil nil [157751 157821])
            ("put" code nil nil [157822 157882])
            ("put" code nil nil [157884 157955])
            ("put" code nil nil [157956 158027])
            ("texinfo-unsupported" function nil nil [158069 158224])
            ("batch-texinfo-format" function nil nil [158249 160723])
            ("texinfmt" package nil nil [160763 160782]))          
      :file "texinfmt.el"
      :pointmax 160810
      :fsize 160809
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfo" include nil nil [7512 7530])
            ("texinfo-master-menu-header" variable (:default-value " --- The Detailed Node Listing ---
") nil [7533 7727])
            ("texinfo-section-types-regexp" variable (:default-value "^@\\(chapter \\|sect\\|subs\\|subh\\|unnum\\|major\\|chapheading \\|heading \\|appendix\\)") nil [7788 7997])
            ("texinfo-section-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 3 texinfo-section-list))) nil [7999 8164])
            ("texinfo-subsection-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 4 texinfo-section-list))) nil [8166 8337])
            ("texinfo-subsubsection-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 5 texinfo-section-list))) nil [8339 8516])
            ("texinfo-update-menu-same-level-regexps" variable (:default-value (quote ((1 . "top[ 	]+") (2 concat "\\(^@\\)\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*") (3 concat "\\(^@\\)\\(" texinfo-section-level-regexp "\\)\\>[ 	]*") (4 concat "\\(^@\\)\\(" texinfo-subsection-level-regexp "\\)\\>[ 	]+") (5 concat "\\(^@\\)\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+")))) nil [8518 9090])
            ("texinfo-update-menu-higher-regexps" variable (:default-value (quote ((1 . "^@node [ 	]*DIR") (2 . "^@node [ 	]*top[ 	]*\\(,\\|$\\)") (3 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (4 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (5 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)")))) nil [9092 9842])
            ("texinfo-update-menu-lower-regexps" variable (:default-value (quote ((1 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (2 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (3 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (4 concat "\\(^@\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (5 . "a\\(^\\)")))) nil [9844 10878])
            ("texinfo-make-menu" function
               (:user-visible-flag t
                :arguments ("beginning" "end"))
                nil [10882 12854])
            ("texinfo-make-one-menu" function (:arguments ("level")) nil [12856 13797])
            ("texinfo-all-menus-update" function
               (:user-visible-flag t
                :arguments ("update-all-nodes-p"))
                nil [13799 15858])
            ("texinfo-find-lower-level-node" function (:arguments ("level" "region-end")) nil [15860 17061])
            ("texinfo-find-higher-level-node" function (:arguments ("level" "region-end")) nil [17063 18253])
            ("texinfo-make-menu-list" function (:arguments ("beginning" "end" "level")) nil [18298 19185])
            ("texinfo-menu-locate-entry-p" function (:arguments ("level" "search-end")) nil [19187 20292])
            ("texinfo-copy-node-name" function nil nil [20294 20916])
            ("texinfo-copy-section-title" function nil nil [20918 21729])
            ("texinfo-old-menu-p" function (:arguments ("beginning" "first")) nil [21760 22421])
            ("texinfo-incorporate-descriptions" function (:arguments ("new-menu-list")) nil [22423 23714])
            ("texinfo-incorporate-menu-entry-names" function (:arguments ("new-menu-list")) nil [23716 25120])
            ("texinfo-menu-copy-old-description" function (:arguments ("end-of-menu")) nil [25122 25992])
            ("texinfo-menu-end" function nil nil [25994 26233])
            ("texinfo-delete-old-menu" function (:arguments ("beginning" "first")) nil [26235 26706])
            ("texinfo-column-for-description" variable (:default-value 32) nil [26770 26870])
            ("texinfo-insert-menu" function (:arguments ("menu-list" "node-name")) nil [26872 28560])
            ("texinfo-start-menu-description" function (:user-visible-flag t) nil [28616 31550])
            ("texinfo-indent-menu-description" function
               (:user-visible-flag t
                :arguments ("column" "region-p"))
                nil [31726 32647])
            ("texinfo-menu-indent-description" function (:arguments ("to-column-number")) nil [32649 33687])
            ("texinfo-master-menu" function
               (:user-visible-flag t
                :arguments ("update-all-nodes-menus-p"))
                nil [33719 38497])
            ("texinfo-master-menu-list" function nil nil [38499 39122])
            ("texinfo-insert-master-menu-list" function (:arguments ("master-menu-list")) nil [39124 41723])
            ("texinfo-locate-menu-p" function nil nil [41725 41977])
            ("texinfo-copy-menu-title" function nil nil [41979 42624])
            ("texinfo-copy-menu" function nil nil [42626 43479])
            ("texinfo-specific-section-type" function nil nil [43543 45062])
            ("texinfo-hierarchic-level" function nil nil [45064 45348])
            ("texinfo-update-menu-region-beginning" function (:arguments ("level")) nil [45386 46611])
            ("texinfo-update-menu-region-end" function (:arguments ("level")) nil [46613 47648])
            ("texinfo-menu-first-node" function (:arguments ("beginning" "end")) nil [47650 48165])
            ("texinfo-update-node" function
               (:user-visible-flag t
                :arguments ("beginning" "end"))
                nil [48190 50046])
            ("texinfo-every-node-update" function (:user-visible-flag t) nil [50048 50543])
            ("texinfo-update-the-node" function nil nil [50545 51280])
            ("texinfo-top-pointer-case" function nil nil [51282 52126])
            ("texinfo-check-for-node-name" function nil nil [52128 52835])
            ("texinfo-delete-existing-pointers" function nil nil [52837 53277])
            ("texinfo-find-pointer" function (:arguments ("beginning" "end" "level" "direction")) nil [53279 56763])
            ("texinfo-pointer-name" function (:arguments ("kind")) nil [56765 57433])
            ("texinfo-insert-pointer" function (:arguments ("beginning" "end" "level" "direction")) nil [57435 58070])
            ("texinfo-clean-up-node-line" function nil nil [58072 58254])
            ("texinfo-sequential-node-update" function
               (:user-visible-flag t
                :arguments ("region-p"))
                nil [58738 60330])
            ("texinfo-sequentially-update-the-node" function nil nil [60332 61052])
            ("texinfo-sequentially-insert-pointer" function (:arguments ("level" "direction")) nil [61054 61507])
            ("texinfo-sequentially-find-pointer" function (:arguments ("level" "direction")) nil [61509 62796])
            ("texinfo-insert-node-lines" function
               (:user-visible-flag t
                :arguments ("beginning" "end" "title-p"))
                nil [62997 65383])
            ("texinfo-multi-file-included-list" function (:arguments ("outer-file")) nil [66530 67077])
            ("texinfo-copy-next-section-title" function nil nil [67079 67860])
            ("texinfo-multi-file-update" function (:arguments ("files" "update-everything")) nil [67862 72317])
            ("texinfo-multi-files-insert-main-menu" function (:arguments ("menu-list")) nil [72319 73297])
            ("texinfo-multi-file-master-menu-list" function (:arguments ("files-list")) nil [73299 73915])
            ("texinfo-multiple-files-update" function
               (:user-visible-flag t
                :arguments ("outer-file" "make-master-menu" "update-everything"))
                nil [73958 78369])
            ("texnfo-upd" package nil nil [78408 78429]))          
      :file "texnfo-upd.el"
      :pointmax 78459
      :fsize 78458
      :lastmodtime '(23525 29610 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
