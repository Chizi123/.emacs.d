;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2478 2495])
            ("newcomment" include nil nil [2496 2517])
            ("pcase" include nil nil [2518 2534])
            ("unless" code nil nil [2601 3070])
            ("company" customgroup (:user-visible-flag t) nil [3073 3201])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3203 3465])
            ("company-tooltip-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [3467 3755])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3757 3875])
            ("company-tooltip-search-selection" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3877 4026])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [4028 4145])
            ("company-tooltip-common" variable
               (:default-value (quote ((((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4147 4339])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-common)))
                :type "face")
                nil [4341 4495])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [4497 4701])
            ("company-tooltip-annotation-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-annotation)))
                :type "face")
                nil [4703 4869])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [4871 5052])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [5054 5239])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit (company-tooltip-selection company-tooltip)) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5241 5470])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5472 5719])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [5721 5972])
            ("company-echo" variable (:type "face") nil [5974 6048])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [6050 6254])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6256 7789])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7791 9806])
            ("company-tooltip-limit" variable (:default-value 10) nil [9808 9914])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9916 10084])
            ("company-tooltip-minimum-width" variable nil nil [10086 10290])
            ("company-tooltip-maximum-width" variable (:default-value most-positive-fixnum) nil [10292 10515])
            ("company-tooltip-margin" variable (:default-value 1) nil [10517 10625])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [10627 10981])
            ("company-tooltip-align-annotations" variable nil nil [10983 11154])
            ("company-tooltip-flip-when-above" variable nil nil [11156 11326])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [11328 12095])
            ("put" code nil nil [12096 12148])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [12150 12456])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.51" emacs-version) (list (quote company-elisp)))) company-bbdb (\,@ (unless (version<= "26" emacs-version) (list (quote company-nxml)))) (\,@ (unless (version<= "26" emacs-version) (list (quote company-css)))) company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev))) nil [12458 19731])
            ("put" code nil nil [19733 19802])
            ("company-transformers" variable nil nil [19804 20461])
            ("company-completion-started-hook" variable nil nil [20463 20662])
            ("company-completion-cancelled-hook" variable nil nil [20664 20866])
            ("company-completion-finished-hook" variable nil nil [20868 21174])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [21176 21310])
            ("company-abort-manual-when-too-short" variable nil nil [21312 21594])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [21596 22156])
            ("company-auto-complete" variable nil nil [22158 22638])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [22640 24129])
            ("company-idle-delay" variable (:default-value 0.5) nil [24131 24500])
            ("company-tooltip-idle-delay" variable (:default-value 0.5) nil [24502 24807])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [24809 25704])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs completion-at-point))) nil [25706 26621])
            ("company-show-numbers" variable nil nil [26623 26809])
            ("company-selection-wrap-around" variable nil nil [26811 27006])
            ("company-async-wait" variable (:default-value 0.03) nil [27008 27148])
            ("company-async-timeout" variable (:default-value 2) nil [27150 27252])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [27336 27417])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [remap scroll-up-command] (quote company-next-page)) (define-key keymap [remap scroll-down-command] (quote company-previous-page)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [27419 28992])
            ("company--disabled-backends" variable nil nil [28994 29033])
            ("company-init-backend" function (:arguments ("backend")) nil [29035 29809])
            ("company--maybe-init-backend" function (:arguments ("backend")) nil [29811 30010])
            ("company-lighter-base" variable (:default-value "company") nil [30012 30166])
            ("company-lighter" variable (:default-value (quote (" " (company-candidates (:eval (if (consp company-backend) (company--group-lighter (nth company-selection company-candidates) company-lighter-base) (symbol-name company-backend))) company-lighter-base)))) nil [30168 30797])
            ("put" code nil nil [30799 30845])
            ("define-minor-mode" code nil nil [30862 32407])
            ("company-global-modes" variable (:default-value t) nil [32409 33268])
            ("define-globalized-minor-mode" code nil nil [33285 33364])
            ("company-mode-on" function nil nil [33366 33754])
            ("company-assert-enabled" function nil nil [33756 33883])
            ("defvar-local" code nil nil [33967 34003])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [34005 34050])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [34052 34164])
            ("company-ensure-emulation-alist" function nil nil [34166 34433])
            ("company-install-map" function nil nil [34435 34611])
            ("company-uninstall-map" function nil nil [34613 34689])
            ("company--company-command-p" function (:arguments ("keys")) nil [34691 34879])
            ("company-ignore" function nil nil [35105 35181])
            ("global-set-key" code nil nil [35183 35238])
            ("company-input-noop" function nil nil [35240 35321])
            ("declare-function" code nil nil [35359 35414])
            ("company--posn-col-row" function (:arguments ("posn")) nil [35416 36086])
            ("company--col-row" function (:arguments ("pos")) nil [36088 36174])
            ("company--row" function (:arguments ("pos")) nil [36176 36243])
            ("defvar-local" code nil nil [36327 36361])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [36363 36515])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [36517 36880])
            ("company-grab-symbol" function nil nil [36882 37276])
            ("company-grab-word" function nil nil [37278 37658])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [37660 38290])
            ("company-in-string-or-comment" function nil nil [38292 38522])
            ("company-call-backend" function (:arguments ("args")) nil [38524 38637])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [38639 39626])
            ("company-call-backend-raw" function (:arguments ("args")) nil [39628 40135])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [40137 41309])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix" "separate")) nil [41311 42296])
            ("company--multi-candidates-mapper" function (:arguments ("backend" "separate" "tag")) nil [42298 42713])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [42715 44032])
            ("company--prefix-str" function (:arguments ("prefix")) nil [44034 44102])
            ("defvar-local" code nil nil [44186 44219])
            ("defvar-local" code nil nil [44221 44258])
            ("defvar-local" code nil nil [44260 44304])
            ("defvar-local" code nil nil [44306 44349])
            ("defvar-local" code nil nil [44351 44398])
            ("defvar-local" code nil nil [44400 44433])
            ("defvar-local" code nil nil [44435 44469])
            ("defvar-local" code nil nil [44471 44515])
            ("defvar-local" code nil nil [44517 44604])
            ("defvar-local" code nil nil [44606 44647])
            ("company--auto-completion" variable nil nil [44649 44793])
            ("defvar-local" code nil nil [44795 44832])
            ("defvar-local" code nil nil [44834 44866])
            ("company-timer" variable nil nil [44868 44894])
            ("company-tooltip-timer" variable nil nil [44895 44929])
            ("company-strip-prefix" function (:arguments ("str")) nil [44931 45010])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [45012 45465])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [45467 46014])
            ("company-explicit-action-p" function nil nil [46016 46183])
            ("company-reformat" function (:arguments ("candidate")) nil [46185 46572])
            ("company--should-complete" function nil nil [46574 46951])
            ("company--should-continue" function nil nil [46953 47415])
            ("company-call-frontends" function (:arguments ("command")) nil [47417 47706])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [47708 48136])
            ("company--group-lighter" function (:arguments ("candidate" "base")) nil [48138 48595])
            ("company-update-candidates" function (:arguments ("candidates")) nil [48597 50184])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [50186 51492])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [51494 52732])
            ("company--flyspell-workaround-p" function nil nil [52734 52888])
            ("company--preprocess-candidates" function (:arguments ("candidates")) nil [52890 53178])
            ("company--postprocess-candidates" function (:arguments ("candidates")) nil [53180 53509])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [53511 54427])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [54429 54579])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [54581 55073])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [55075 55300])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [55302 55455])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [55457 56842])
            ("company--occurrence-predicate" function nil nil [56844 57796])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [57798 58620])
            ("company-sort-prefer-same-case-prefix" function (:arguments ("candidates")) nil [58622 59098])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [59100 59434])
            ("company-auto-begin" function nil nil [59436 59937])
            ("company-manual-begin" function nil nil [59954 60266])
            ("company-other-backend" function (:arguments ("backward")) nil [60268 60937])
            ("company-require-match-p" function nil nil [60939 61258])
            ("company-auto-complete-p" function (:arguments ("input")) nil [61260 61858])
            ("company--incremental-p" function nil nil [61860 62182])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [62184 62956])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [62958 63525])
            ("company--continue" function nil nil [63527 64948])
            ("company--begin-new" function nil nil [64950 66416])
            ("company--perform" function nil nil [66418 66828])
            ("company-cancel" function (:arguments ("result")) nil [66830 68060])
            ("company-abort" function nil nil [68062 68128])
            ("company-finish" function (:arguments ("result")) nil [68130 68224])
            ("company-keep" function (:arguments ("command")) nil [68226 68313])
            ("company-pre-command" function nil nil [68315 68919])
            ("company-post-command" function nil nil [68921 70347])
            ("company--idle-delay" function nil nil [70349 70458])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [70460 70947])
            ("company--should-begin" function nil nil [70949 71207])
            ("company-search-regexp-function" variable (:default-value (function regexp-quote)) nil [71291 71991])
            ("defvar-local" code nil nil [71993 72032])
            ("company-search-lighter" variable (:default-value (quote (" " (company-search-filtering "Filter" "Search") ": \"" company-search-string "\""))) nil [72034 72283])
            ("defvar-local" code nil nil [72285 72397])
            ("defvar-local" code nil nil [72399 72445])
            ("defvar-local" code nil nil [72447 72493])
            ("company-search-words-regexp" function (:arguments ("input")) nil [72495 72654])
            ("company-search-words-in-any-order-regexp" function (:arguments ("input")) nil [72656 73035])
            ("company-search-flex-regexp" function (:arguments ("input")) nil [73037 73367])
            ("company--permutations" function (:arguments ("lst")) nil [73369 73589])
            ("company--search" function (:arguments ("text" "lines")) nil [73591 73833])
            ("company-search-keypad" function nil nil [73835 74030])
            ("company-search-printing-char" function nil nil [74032 74315])
            ("company--search-update-predicate" function (:arguments ("ss")) nil [74317 74739])
            ("company--search-update-string" function (:arguments ("new")) nil [74741 75001])
            ("company--search-assert-input" function nil nil [75003 75160])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [75162 75595])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [75597 76103])
            ("company-search-toggle-filtering" function (:user-visible-flag t) nil [76105 76420])
            ("company-search-abort" function (:user-visible-flag t) nil [76422 76698])
            ("company-search-other-char" function nil nil [76700 76851])
            ("company-search-delete-char" function nil nil [76853 77177])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (dotimes (i 10) (define-key keymap (read (format "[kp-%s]" i)) (quote company-search-keypad))) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-delete-char)) (define-key keymap [backspace] (quote company-search-delete-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-toggle-filtering)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [77179 79239])
            ("define-minor-mode" code nil nil [79241 80196])
            ("company--search-assert-enabled" function nil nil [80198 80371])
            ("company-search-candidates" function (:user-visible-flag t) nil [80373 81136])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [81138 81427])
            ("company-filter-candidates" function (:user-visible-flag t) nil [81429 81718])
            ("company-select-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [81802 82040])
            ("company-select-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82042 82239])
            ("company-select-next-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82241 82573])
            ("company-select-previous-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82575 82919])
            ("company-next-page" function (:user-visible-flag t) nil [82921 83339])
            ("company-previous-page" function (:user-visible-flag t) nil [83341 83765])
            ("company-pseudo-tooltip-overlay" variable nil nil [83767 83806])
            ("company-tooltip-offset" variable nil nil [83808 83839])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [83841 84383])
            ("company--event-col-row" function (:arguments ("event")) nil [84385 84469])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [84471 85656])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [85658 85833])
            ("company-complete-selection" function (:user-visible-flag t) nil [85835 86049])
            ("company-complete-common" function (:user-visible-flag t) nil [86051 86372])
            ("company-complete-common-or-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86374 86884])
            ("company-indent-or-complete-common" function (:user-visible-flag t) nil [86886 87512])
            ("company-select-next-if-tooltip-visible-or-complete-selection" function (:user-visible-flag t) nil [87514 87946])
            ("company-complete" function (:user-visible-flag t) nil [87963 88517])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [88519 89530])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [89614 89656])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [89658 89846])
            ("company-space-string" function (:arguments ("len")) nil [89848 89990])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [89992 90636])
            ("defvar-local" code nil nil [90720 90760])
            ("company-fetch-metadata" function nil nil [90762 91047])
            ("company-doc-buffer" function (:arguments ("string")) nil [91049 91269])
            ("company--electric-saved-window-configuration" variable nil nil [91271 91328])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down mwheel-scroll))) nil [91330 91493])
            ("company--electric-restore-window-configuration" function nil nil [91495 91874])
            ("company--electric-do" function (:arguments ("body")) nil [91876 92380])
            ("company--unread-this-command-keys" function nil nil [92382 92674])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [92676 93387])
            ("put" code nil nil [93388 93434])
            ("company-show-location" function (:user-visible-flag t) nil [93436 94330])
            ("put" code nil nil [94331 94375])
            ("defvar-local" code nil nil [94459 94494])
            ("company-remove-callback" function (:arguments ("ignored")) nil [94496 94771])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [94773 95544])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [95546 96454])
            ("declare-function" code nil nil [96456 96504])
            ("declare-function" code nil nil [96505 96545])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [96547 96944])
            ("company-diag" function (:user-visible-flag t) nil [96946 98760])
            ("defvar-local" code nil nil [98844 98893])
            ("defvar-local" code nil nil [98895 98934])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [98936 99520])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [99522 99777])
            ("company-round-tab" function (:arguments ("arg")) nil [99795 99877])
            ("company-plainify" function (:arguments ("str")) nil [99879 100406])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [100408 104200])
            ("company--search-chunks" function nil nil [104202 104470])
            ("company--pre-render" function (:arguments ("str" "annotation-p")) nil [104472 104972])
            ("company--clean-string" function (:arguments ("str")) nil [104974 105511])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [105526 106525])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [106527 106697])
            ("company--window-height" function nil nil [106699 106834])
            ("company--window-width" function nil nil [106836 107779])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [107781 109133])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [109135 109241])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [109243 112928])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [112930 113193])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [113195 113400])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [113402 113681])
            ("company--pseudo-tooltip-height" function nil nil [113692 114153])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [114155 115348])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [115350 115614])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [115616 116199])
            ("company-pseudo-tooltip-hide" function nil nil [116201 116377])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [116379 116739])
            ("company-pseudo-tooltip-unhide" function nil nil [116741 117469])
            ("company-pseudo-tooltip-guard" function nil nil [117471 117930])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [117932 119113])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [119115 119386])
            ("company-pseudo-tooltip-unless-just-one-frontend-with-delay" function (:arguments ("command")) nil [119388 120479])
            ("defvar-local" code nil nil [120563 120605])
            ("company-preview-show-at-point" function (:arguments ("pos" "completion")) nil [120607 122450])
            ("company-preview-hide" function nil nil [122452 122600])
            ("company-preview-frontend" function (:arguments ("command")) nil [122602 122970])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [122972 123219])
            ("company--show-inline-p" function nil nil [123221 123440])
            ("company-tooltip-visible-p" function nil nil [123442 123639])
            ("company-preview-common--show-p" function nil nil [123641 123893])
            ("company-preview-common-frontend" function (:arguments ("command")) nil [123895 124281])
            ("defvar-local" code nil nil [124365 124405])
            ("company-echo-timer" variable nil nil [124407 124438])
            ("company-echo-delay" variable (:default-value 0.01) nil [124440 124471])
            ("company-echo-truncate-lines" variable (:default-value t) nil [124473 124647])
            ("company-echo-show" function (:arguments ("getter")) nil [124649 124947])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [124949 125099])
            ("company-echo-cancel" function (:arguments ("unset")) nil [125101 125261])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [125263 125448])
            ("company-echo-format" function nil nil [125450 126518])
            ("company-echo-strip-common-format" function nil nil [126520 127357])
            ("company-echo-hide" function nil nil [127359 127491])
            ("company-echo-frontend" function (:arguments ("command")) nil [127493 127717])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [127719 127969])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [127971 128215])
            ("company" package nil nil [128217 128235]))          
      :file "company.el"
      :pointmax 128261
      :fsize 128260
      :lastmodtime '(23534 29869 0 0)
      :unmatched-syntax '((close-paren 3070 . 3071) (symbol 2555 . 2571) (open-paren 2554 . 2555))))
  :file "!drive_c!Users!joelg!.emacs.d!elpa!company-20181105.2312!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
