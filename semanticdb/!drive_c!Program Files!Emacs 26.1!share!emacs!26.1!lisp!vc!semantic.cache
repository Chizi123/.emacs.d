;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ediff-mult" package nil nil [5246 5267])
            ("ediff-mult" customgroup (:user-visible-flag t) nil [5269 5382])
            ("ediff-init" include nil nil [5384 5405])
            ("ediff-diff" include nil nil [5406 5427])
            ("ediff-wind" include nil nil [5428 5449])
            ("ediff-util" include nil nil [5450 5471])
            ("ediff-defvar-local" code nil nil [5489 5534])
            ("ediff-defvar-local" code nil nil [5535 5587])
            ("ediff-registry-buffer" variable nil nil [5611 5645])
            ("ediff-meta-buffer-brief-message" variable
               (:constant-flag t
                :default-value "Ediff Session Group Panel: %s

     Type ? to show useful commands in this buffer

")
                nil [5647 5775])
            ("ediff-meta-buffer-verbose-message" variable
               (:constant-flag t
                :default-value "Ediff Session Group Panel: %s

Useful commands (type ? to hide them and free up screen):
     button2, v, or RET over session record:   start that Ediff session
     M:	in sessions invoked from here, brings back this group panel
     R:	display the registry of active Ediff sessions
     h:	mark session for hiding (toggle)
     x:	hide marked sessions; with prefix arg: unhide
     m:	mark session for a non-hiding operation (toggle)
 uh/um:	unmark all sessions marked for hiding/operation
 n,SPC:	next session
 p,DEL:	previous session
     E:	browse Ediff manual
     T:	toggle truncation of long file names
     q:	quit this session group
")
                nil [5777 6477])
            ("ediff-defvar-local" code nil nil [6479 6561])
            ("ediff-dir-diffs-buffer-map" variable (:default-value (make-sparse-keymap)) nil [6562 6704])
            ("ediff-defvar-local" code nil nil [6863 6917])
            ("ediff-defvar-local" code nil nil [6969 7023])
            ("ediff-defvar-local" code nil nil [7144 7201])
            ("ediff-defvar-local" code nil nil [7203 7249])
            ("ediff-defvar-local" code nil nil [7328 7378])
            ("ediff-defvar-local" code nil nil [7457 7516])
            ("ediff-filtering-regexp-history" variable nil nil [7570 7616])
            ("ediff-default-filtering-regexp" variable nil nil [7618 7932])
            ("ediff-defvar-local" code nil nil [8461 8504])
            ("ediff-defvar-local" code nil nil [8506 8559])
            ("ediff-defvar-local" code nil nil [8634 8687])
            ("ediff-defvar-local" code nil nil [8688 8738])
            ("ediff-session-registry" variable nil nil [8803 8838])
            ("ediff-meta-truncate-filenames" variable (:default-value t) nil [8840 9053])
            ("ediff-meta-mode-hook" variable nil nil [9055 9173])
            ("ediff-registry-setup-hook" variable nil nil [9175 9314])
            ("ediff-before-session-group-setup-hooks" variable nil nil [9316 9748])
            ("ediff-after-session-group-setup-hook" variable nil nil [9749 9939])
            ("ediff-quit-session-group-hook" variable nil nil [9940 10071])
            ("ediff-show-registry-hook" variable nil nil [10072 10202])
            ("ediff-show-session-group-hook" variable (:default-value (quote (delete-other-windows))) nil [10203 10361])
            ("ediff-meta-buffer-keymap-setup-hook" variable nil nil [10362 10675])
            ("ediff-defvar-local" code nil nil [10743 10792])
            ("ediff-get-group-buffer" function (:arguments ("meta-list")) nil [11474 11545])
            ("ediff-get-group-regexp" function (:arguments ("meta-list")) nil [11547 11618])
            ("ediff-get-group-objA" function (:arguments ("meta-list")) nil [11636 11705])
            ("ediff-get-group-objB" function (:arguments ("meta-list")) nil [11706 11775])
            ("ediff-get-group-objC" function (:arguments ("meta-list")) nil [11776 11845])
            ("ediff-get-group-merge-autostore-dir" function (:arguments ("meta-list")) nil [11846 11930])
            ("ediff-get-group-comparison-func" function (:arguments ("meta-list")) nil [11931 12011])
            ("ediff-get-session-buffer" function (:arguments ("elt")) nil [12456 12511])
            ("ediff-get-session-status" function (:arguments ("elt")) nil [12512 12567])
            ("ediff-set-session-status" function (:arguments ("session-info" "new-status")) nil [12568 12670])
            ("ediff-get-session-objA" function (:arguments ("elt")) nil [12690 12743])
            ("ediff-get-session-objB" function (:arguments ("elt")) nil [12744 12797])
            ("ediff-get-session-objC" function (:arguments ("elt")) nil [12798 12851])
            ("ediff-get-session-objA-name" function (:arguments ("elt")) nil [12964 13028])
            ("ediff-get-session-objB-name" function (:arguments ("elt")) nil [13029 13093])
            ("ediff-get-session-objC-name" function (:arguments ("elt")) nil [13094 13158])
            ("ediff-get-file-eqstatus" function (:arguments ("elt")) nil [13182 13236])
            ("ediff-set-file-eqstatus" function (:arguments ("elt" "value")) nil [13237 13310])
            ("ediff-make-new-meta-list-element" function (:arguments ("obj1" "obj2" "obj3")) nil [13864 13986])
            ("ediff-make-new-meta-list-header" function (:arguments ("regexp" "objA" "objB" "objC" "merge-auto-store-dir" "comparison-func")) nil [14195 14378])
            ("ediff-get-session-activity-marker" function (:arguments ("session")) nil [14603 14834])
            ("ediff-meta-session-p" function (:arguments ("session-info")) nil [14879 15314])
            ("ediff-defvar-local" code nil nil [15317 15496])
            ("ediff-toggle-verbose-help-meta-buffer" function (:user-visible-flag t) nil [15599 15850])
            ("ediff-setup-meta-map" function nil nil [15892 18871])
            ("ediff-meta-mode" function nil nil [18874 19626])
            ("suppress-keymap" code nil nil [19688 19732])
            ("define-key" code nil nil [19733 19805])
            ("define-key" code nil nil [19806 19860])
            ("define-key" code nil nil [19861 19915])
            ("define-key" code nil nil [19916 19977])
            ("define-key" code nil nil [19978 20036])
            ("define-key" code nil nil [20037 20106])
            ("if" code nil nil [20107 20287])
            ("define-key" code nil nil [20288 20351])
            ("define-key" code nil nil [20352 20418])
            ("ediff-next-meta-item" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [20420 20978])
            ("ediff-next-meta-item1" function nil nil [21010 21398])
            ("ediff-previous-meta-item" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [21401 21975])
            ("ediff-previous-meta-item1" function nil nil [21977 22561])
            ("ediff-add-slash-if-directory" function (:arguments ("dir" "file")) nil [22563 22702])
            ("ediff-toggle-filename-truncation" function (:user-visible-flag t) nil [22704 23053])
            ("ediff-membership-code1" variable (:default-value 2) nil [23218 23251])
            ("ediff-membership-code2" variable (:default-value 3) nil [23252 23285])
            ("ediff-membership-code3" variable (:default-value 5) nil [23286 23319])
            ("ediff-product-of-memcodes" variable (:default-value (* ediff-membership-code1 ediff-membership-code2 ediff-membership-code3)) nil [23320 23445])
            ("ediff-intersect-directories" function (:arguments ("jobname" "regexp" "dir1" "dir2" "dir3" "merge-autostore-dir" "comparison-func")) nil [24921 29038])
            ("ediff-get-directory-files-under-revision" function (:arguments ("jobname" "regexp" "dir1" "merge-autostore-dir")) nil [29288 30984])
            ("ediff-prepare-meta-buffer" function (:arguments ("action-func" "meta-list" "meta-buffer-name" "redraw-function" "jobname" "startup-hooks")) nil [32208 37361])
            ("ediff-insert-session-activity-marker-in-meta-buffer" function (:arguments ("session")) nil [37633 37799])
            ("ediff-insert-session-status-in-meta-buffer" function (:arguments ("session")) nil [38054 38256])
            ("ediff-replace-session-activity-marker-in-meta-buffer" function (:arguments ("point" "new-marker")) nil [38376 38960])
            ("ediff-replace-session-status-in-meta-buffer" function (:arguments ("point" "new-status")) nil [39078 39693])
            ("ediff-insert-session-info-in-meta-buffer" function (:arguments ("session-info" "sessionNum")) nil [39754 40508])
            ("ediff-redraw-directory-group-buffer" function (:arguments ("meta-list")) nil [40588 43492])
            ("ediff-update-markers-in-dir-meta-buffer" function (:arguments ("meta-list")) nil [43494 44657])
            ("ediff-update-session-marker-in-dir-meta-buffer" function (:arguments ("session-num")) nil [44659 46059])
            ("ediff-problematic-session-p" function (:arguments ("session")) nil [46384 46856])
            ("ediff-meta-insert-file-info1" function (:arguments ("fileinfo")) nil [46858 48131])
            ("ediff-months" variable
               (:constant-flag t
                :default-value (quote ((1 . "Jan") (2 . "Feb") (3 . "Mar") (4 . "Apr") (5 . "May") (6 . "Jun") (7 . "Jul") (8 . "Aug") (9 . "Sep") (10 . "Oct") (11 . "Nov") (12 . "Dec"))))
                nil [48133 48343])
            ("ediff-fill-leading-zero" function (:arguments ("num")) nil [48369 48479])
            ("ediff-format-date" function (:arguments ("time")) nil [48523 48833])
            ("ediff-insert-dirs-in-meta-buffer" function (:arguments ("meta-list")) nil [48859 49368])
            ("ediff-draw-dir-diffs" function (:arguments ("diff-list" "buf-name")) nil [49370 53115])
            ("ediff-bury-dir-diffs-buffer" function (:user-visible-flag t) nil [53117 53593])
            ("ediff-show-dir-diffs" function (:user-visible-flag t) nil [53662 54133])
            ("ediff-dir-diff-copy-file" function (:user-visible-flag t) nil [54245 56720])
            ("ediff-up-meta-hierarchy" function (:user-visible-flag t) nil [56722 57010])
            ("ediff-redraw-registry-buffer" function (:arguments ("_ignore")) nil [57036 60434])
            ("ediff-set-meta-overlay" function (:arguments ("b" "e" "prop" "session-number" "hidden")) nil [60789 61290])
            ("ediff-mark-for-hiding-at-pos" function
               (:user-visible-flag t
                :arguments ("unmark"))
                nil [61292 61854])
            ("ediff-mark-session-for-hiding" function (:arguments ("info" "unmark")) nil [61906 62455])
            ("ediff-mark-for-operation-at-pos" function
               (:user-visible-flag t
                :arguments ("unmark"))
                nil [62458 63037])
            ("ediff-mark-session-for-operation" function (:arguments ("info" "unmark")) nil [63114 63497])
            ("ediff-hide-marked-sessions" function
               (:user-visible-flag t
                :arguments ("unhide"))
                nil [63500 64478])
            ("ediff-operate-on-marked-sessions" function (:arguments ("operation")) nil [64707 65820])
            ("ediff-append-custom-diff" function (:arguments ("session" "sessionNum")) nil [65822 67830])
            ("ediff-collect-custom-diffs" function (:user-visible-flag t) nil [67832 68987])
            ("ediff-meta-show-patch" function (:user-visible-flag t) nil [68989 69812])
            ("declare-function" code nil nil [69814 69957])
            ("declare-function" code nil nil [69959 70100])
            ("ediff-filegroup-action" function (:user-visible-flag t) nil [70177 77743])
            ("ediff-registry-action" function (:user-visible-flag t) nil [77745 78643])
            ("ediff-show-meta-buffer" function
               (:user-visible-flag t
                :arguments ("meta-buf" "session-number"))
                nil [78704 80874])
            ("ediff-show-current-session-meta-buffer" function nil nil [80876 80998])
            ("ediff-show-meta-buff-from-registry" function (:user-visible-flag t) nil [81000 81399])
            ("ediff-show-registry" function (:user-visible-flag t) nil [81416 83030])
            ("defalias" code nil nil [83047 83089])
            ("ediff-update-meta-buffer" function (:arguments ("meta-buf" "must-redraw" "session-number")) nil [83497 84293])
            ("ediff-update-registry" function nil nil [84295 84643])
            ("ediff-cleanup-meta-buffer" function (:arguments ("meta-buffer")) nil [84732 85052])
            ("ediff-safe-to-quit" function (:arguments ("meta-buffer")) nil [85088 85548])
            ("ediff-quit-meta-buffer" function (:user-visible-flag t) nil [85550 86876])
            ("ediff-dispose-of-meta-buffer" function (:arguments ("buf")) nil [86878 87132])
            ("ediff-get-meta-info" function (:arguments ("buf" "point" "noerror")) nil [87381 88073])
            ("ediff-get-meta-overlay-at-pos" function (:arguments ("point")) nil [88076 88428])
            ("ediff-get-session-number-at-pos" function (:arguments ("point" "meta-buffer")) nil [88430 88735])
            ("ediff-next-meta-overlay-start" function (:arguments ("point")) nil [88794 89308])
            ("ediff-previous-meta-overlay-start" function (:arguments ("point")) nil [89311 90218])
            ("ediff-patch-file-internal" function (:prototype-flag t) nil [90220 90270])
            ("ediff-patch-file-form-meta" function (:arguments ("file" "startup-hooks")) nil [90357 91407])
            ("ediff-unmark-all-for-operation" function (:user-visible-flag t) nil [91410 91732])
            ("ediff-unmark-all-for-hiding" function (:user-visible-flag t) nil [91734 92047])
            ("ediff-meta-mark-equal-files" function
               (:user-visible-flag t
                :arguments ("action"))
                nil [92159 93771])
            ("ediff-mark-if-equal" function (:arguments ("fileinfo1" "fileinfo2")) nil [93856 94127]))          
      :file "ediff-mult.el"
      :pointmax 94383
      :fsize 94382
      :lastmodtime '(23525 29614 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [899 916])
            ("ediff-metajob-name" variable nil nil [945 972])
            ("ediff-meta-buffer" variable nil nil [973 999])
            ("ediff-grab-mouse" variable nil nil [1000 1025])
            ("ediff-mouse-pixel-position" variable nil nil [1026 1061])
            ("ediff-mouse-pixel-threshold" variable nil nil [1062 1098])
            ("ediff-whitespace" variable nil nil [1099 1124])
            ("ediff-multiframe" variable nil nil [1125 1150])
            ("ediff-use-toolbar-p" variable nil nil [1151 1179])
            ("mswindowsx-bitmap-file-path" variable nil nil [1180 1216])
            ("ediff-force-faces" variable nil nil [1234 1449])
            ("ediff-device-type" function nil nil [1506 1619])
            ("ediff-window-display-p" function nil nil [1682 1793])
            ("ediff-has-face-support-p" function nil nil [1821 2055])
            ("ediff-has-toolbar-support-p" function nil nil [2119 2243])
            ("ediff-has-gutter-support-p" function nil nil [2246 2368])
            ("ediff-use-toolbar-p" function nil nil [2370 2518])
            ("ediff-defvar-local" function (:arguments ("var" "value" "doc")) nil [2899 3126])
            ("ediff-defvar-local" code nil nil [3273 3315])
            ("ediff-defvar-local" code nil nil [3364 3406])
            ("ediff-defvar-local" code nil nil [3487 3529])
            ("ediff-defvar-local" code nil nil [3549 3598])
            ("ediff-defvar-local" code nil nil [3627 3675])
            ("ediff-defvar-local" code nil nil [3677 3829])
            ("ediff-buffer-alist" variable
               (:constant-flag t
                :default-value (quote ((65 . ediff-buffer-A) (66 . ediff-buffer-B) (67 . ediff-buffer-C))))
                nil [3884 3992])
            ("ediff-buffer-live-p" function (:arguments ("buf")) nil [4005 4101])
            ("ediff-get-buffer" function (:arguments ("arg")) nil [4103 4289])
            ("ediff-get-value-according-to-buffer-type" function (:arguments ("buf-type" "list")) nil [4291 4477])
            ("ediff-char-to-buftype" function (:arguments ("arg")) nil [4479 4612])
            ("ediff-get-symbol-from-alist" function (:arguments ("buf-type" "alist")) nil [4880 4966])
            ("ediff-defvar-local" code nil nil [5792 5845])
            ("ediff-defvar-local" code nil nil [5846 5899])
            ("ediff-defvar-local" code nil nil [5900 5953])
            ("ediff-defvar-local" code nil nil [5954 6014])
            ("ediff-difference-vector-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-difference-vector-A) (B . ediff-difference-vector-B) (C . ediff-difference-vector-C) (Ancestor . ediff-difference-vector-Ancestor))))
                nil [6075 6274])
            ("ediff-get-difference" function (:arguments ("n" "buf-type")) nil [6276 6437])
            ("ediff-no-fine-diffs-p" function (:arguments ("n")) nil [7453 7530])
            ("ediff-get-diff-overlay-from-diff-record" function (:arguments ("diff-rec")) nil [7532 7615])
            ("ediff-get-diff-overlay" function (:arguments ("n" "buf-type")) nil [7617 7748])
            ("ediff-get-fine-diff-vector-from-diff-record" function (:arguments ("diff-rec")) nil [7750 7837])
            ("ediff-set-fine-diff-vector" function (:arguments ("n" "buf-type" "fine-vec")) nil [7839 7956])
            ("ediff-get-state-of-diff" function (:arguments ("n" "buf-type")) nil [7958 8102])
            ("ediff-set-state-of-diff" function (:arguments ("n" "buf-type" "val")) nil [8103 8207])
            ("ediff-get-state-of-merge" function (:arguments ("n")) nil [8209 8324])
            ("ediff-set-state-of-merge" function (:arguments ("n" "val")) nil [8325 8449])
            ("ediff-get-state-of-ancestor" function (:arguments ("n")) nil [8451 8569])
            ("ediff-mark-diff-as-space-only" function (:arguments ("n" "flag")) nil [8794 8890])
            ("ediff-get-fine-diff-vector" function (:arguments ("n" "buf-type")) nil [8892 9031])
            ("ediff-with-current-buffer" function (:arguments ("buffer" "body")) nil [9214 9524])
            ("ediff-multiframe-setup-p" function nil nil [9527 9615])
            ("ediff-narrow-control-frame-p" function nil nil [9617 9750])
            ("ediff-3way-comparison-job" function nil nil [9752 9855])
            ("ediff-defvar-local" code nil nil [9856 9909])
            ("ediff-merge-job" function nil nil [9911 10168])
            ("ediff-defvar-local" code nil nil [10169 10212])
            ("ediff-patch-job" function nil nil [10214 10274])
            ("ediff-merge-with-ancestor-job" function nil nil [10276 10469])
            ("ediff-defvar-local" code nil nil [10470 10527])
            ("ediff-3way-job" function nil nil [10529 10607])
            ("ediff-defvar-local" code nil nil [10608 10650])
            ("ediff-diff3-job" function nil nil [10740 10840])
            ("ediff-defvar-local" code nil nil [10841 10884])
            ("ediff-windows-job" function nil nil [10886 10991])
            ("ediff-defvar-local" code nil nil [10992 11037])
            ("ediff-word-mode-job" function nil nil [11039 11146])
            ("ediff-defvar-local" code nil nil [11147 11194])
            ("ediff-narrow-job" function nil nil [11196 11361])
            ("ediff-defvar-local" code nil nil [11362 11406])
            ("ediff-ancestor-metajob" function (:arguments ("metajob")) nil [11535 11711])
            ("ediff-revision-metajob" function (:arguments ("metajob")) nil [11712 11920])
            ("ediff-patch-metajob" function (:arguments ("metajob")) nil [11921 12038])
            ("ediff-one-filegroup-metajob" function (:arguments ("metajob")) nil [12130 12294])
            ("ediff-collect-diffs-metajob" function (:arguments ("metajob")) nil [12373 12699])
            ("ediff-merge-metajob" function (:arguments ("metajob")) nil [12700 13008])
            ("ediff-metajob3" function (:arguments ("metajob")) nil [13010 13221])
            ("ediff-comparison-metajob3" function (:arguments ("metajob")) nil [13222 13360])
            ("ediff-in-control-buffer-p" function (:arguments ("meta-buf-p")) nil [13480 13663])
            ("ediff-barf-if-not-control-buffer" function (:arguments ("meta-buf-p")) nil [13665 13867])
            ("ediff-highlighting" customgroup (:user-visible-flag t) nil [13869 13986])
            ("ediff-merge" customgroup (:user-visible-flag t) nil [13988 14072])
            ("ediff-hook" customgroup (:user-visible-flag t) nil [14074 14158])
            ("ediff-before-setup-hook" variable nil nil [14179 14433])
            ("ediff-before-setup-windows-hook" variable nil nil [14434 14720])
            ("ediff-after-setup-windows-hook" variable nil nil [14721 14932])
            ("ediff-before-setup-control-frame-hook" variable nil nil [14933 15180])
            ("ediff-after-setup-control-frame-hook" variable nil nil [15181 15392])
            ("ediff-startup-hook" variable nil nil [15393 15555])
            ("ediff-select-hook" variable nil nil [15556 15679])
            ("ediff-unselect-hook" variable nil nil [15680 15807])
            ("ediff-prepare-buffer-hook" variable nil nil [15808 16003])
            ("ediff-load-hook" variable nil nil [16004 16139])
            ("ediff-mode-hook" variable nil nil [16141 16412])
            ("ediff-keymap-setup-hook" variable nil nil [16413 16560])
            ("ediff-display-help-hook" variable nil nil [16562 16684])
            ("ediff-suspend-hook" variable nil nil [16686 16825])
            ("ediff-quit-hook" variable nil nil [16826 16960])
            ("ediff-cleanup-hook" variable nil nil [16961 17116])
            ("ediff-KILLED-VITAL-BUFFER" variable
               (:constant-flag t
                :default-value "You have killed a vital Ediff buffer---you must leave Ediff now!")
                nil [17136 17241])
            ("ediff-NO-DIFFERENCES" variable
               (:constant-flag t
                :default-value "Sorry, comparison of identical variants is not what I am made for...")
                nil [17242 17346])
            ("ediff-BAD-DIFF-NUMBER" variable
               (:constant-flag t
                :default-value "%S: Bad diff region number, %d.  Valid numbers are 1 to %d")
                nil [17347 17507])
            ("ediff-BAD-INFO" variable
               (:constant-flag t
                :default-value (format "
*** The Info file for Ediff, a part of the standard distribution
*** of %sEmacs, does not seem to be properly installed.
***
*** Please contact your system administrator. " (if (featurep (quote xemacs)) "X" "")))
                nil [17508 17753])
            ("ediff-defvar-local" code nil nil [17778 18136])
            ("ediff-defvar-local" code nil nil [18138 18353])
            ("ediff-defvar-local" code nil nil [18354 18585])
            ("ediff-defvar-local" code nil nil [18661 18708])
            ("ediff-defvar-local" code nil nil [18783 18830])
            ("ediff-defvar-local" code nil nil [18905 18952])
            ("ediff-defvar-local" code nil nil [19049 19107])
            ("ediff-defvar-local" code nil nil [19181 19227])
            ("ediff-defvar-local" code nil nil [19300 19346])
            ("ediff-defvar-local" code nil nil [19419 19465])
            ("ediff-defvar-local" code nil nil [19561 19618])
            ("ediff-defvar-local" code nil nil [19924 19976])
            ("ediff-defvar-local" code nil nil [20167 20213])
            ("ediff-before-flag-bol" variable (:default-value (if (featurep (quote xemacs)) (make-glyph "->>") "->>")) nil [20232 20495])
            ("ediff-after-flag-eol" variable (:default-value (if (featurep (quote xemacs)) (make-glyph "<<-") "<<-")) nil [20497 20744])
            ("ediff-before-flag-mol" variable (:default-value (if (featurep (quote xemacs)) (make-glyph "->>") "->>")) nil [20746 20999])
            ("ediff-after-flag-mol" variable (:default-value (if (featurep (quote xemacs)) (make-glyph "<<-") "<<-")) nil [21000 21249])
            ("ediff-use-faces" variable (:default-value t) nil [21252 21578])
            ("make-variable-buffer-local" code nil nil [21579 21624])
            ("put" code nil nil [21625 21666])
            ("ediff-defvar-local" code nil nil [21817 21860])
            ("ediff-defvar-local" code nil nil [21915 21957])
            ("ediff-defvar-local" code nil nil [22164 22211])
            ("ediff-defvar-local" code nil nil [22315 22360])
            ("ediff-defvar-local" code nil nil [22573 22621])
            ("ediff-defvar-local" code nil nil [22623 22744])
            ("ediff-defvar-local" code nil nil [22745 22920])
            ("ediff-keep-variants" variable (:default-value t) nil [22922 23163])
            ("ediff-highlight-all-diffs" variable (:default-value t) nil [23165 23413])
            ("make-variable-buffer-local" code nil nil [23414 23469])
            ("put" code nil nil [23470 23521])
            ("ediff-defvar-local" code nil nil [23566 23621])
            ("ediff-defvar-local" code nil nil [23716 23771])
            ("ediff-defvar-local" code nil nil [23839 23893])
            ("ediff-defvar-local" code nil nil [23959 24013])
            ("ediff-defvar-local" code nil nil [24079 24133])
            ("ediff-defvar-local" code nil nil [24206 24267])
            ("ediff-buffer-values-orig-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-buffer-values-orig-A) (B . ediff-buffer-values-orig-B) (C . ediff-buffer-values-orig-C) (Ancestor . ediff-buffer-values-orig-Ancestor))))
                nil [24333 24537])
            ("ediff-protected-variables" variable
               (:constant-flag t
                :default-value (quote (mode-line-format)))
                nil [24613 24709])
            ("ediff-defvar-local" code nil nil [25009 25057])
            ("ediff-defvar-local" code nil nil [25105 25156])
            ("ediff-defvar-local" code nil nil [25189 25244])
            ("ediff-defvar-local" code nil nil [25336 25381])
            ("ediff-defvar-local" code nil nil [25513 25565])
            ("ediff-defvar-local" code nil nil [25630 25680])
            ("ediff-tmp-buffer" variable
               (:constant-flag t
                :default-value " *ediff-tmp*")
                nil [25738 25783])
            ("ediff-msg-buffer" variable
               (:constant-flag t
                :default-value " *ediff-message*")
                nil [25812 25861])
            ("ediff-defvar-local" code nil nil [25928 25974])
            ("ediff-defvar-local" code nil nil [26007 26065])
            ("ediff-defvar-local" code nil nil [26198 26259])
            ("ediff-disturbed-overlays" variable nil nil [26365 26405])
            ("ediff-version-control-package" variable (:default-value (quote vc)) nil [26407 26820])
            ("ediff-coding-system-for-read" variable (:default-value (quote raw-text)) nil [26822 27294])
            ("ediff-coding-system-for-write" variable (:default-value (if (featurep (quote xemacs)) (quote escape-quoted) (quote emacs-internal))) nil [27296 27593])
            ("defalias" code nil nil [27596 27682])
            ("defalias" code nil nil [27684 27755])
            ("defalias" code nil nil [27757 27840])
            ("defalias" code nil nil [27842 27931])
            ("ediff-check-version" function (:arguments ("op" "major" "minor" "type-of-emacs")) nil [28006 28824])
            ("ediff-color-display-p" function nil nil [28826 29021])
            ("ediff-defvar-local" code nil nil [29196 29315])
            ("if" code nil nil [29318 29607])
            ("ediff-current-diff-overlay-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-current-diff-overlay-A) (B . ediff-current-diff-overlay-B) (C . ediff-current-diff-overlay-C) (Ancestor . ediff-current-diff-overlay-Ancestor))))
                nil [29677 29891])
            ("ediff-current-diff-face-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-current-diff-A) (B . ediff-current-diff-B) (C . ediff-current-diff-C) (Ancestor . ediff-current-diff-Ancestor))))
                nil [29960 30139])
            ("ediff-set-overlay-face" function (:arguments ("extent" "face")) nil [30142 30300])
            ("ediff-region-help-echo" function (:arguments ("extent-or-window" "overlay" "_point")) nil [30302 31054])
            ("ediff-set-face-pixmap" function (:arguments ("face" "pixmap")) nil [31057 31373])
            ("ediff-hide-face" function (:arguments ("face")) nil [31375 31559])
            ("ediff-current-diff-A" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#ffdddd") (((class color) (min-colors 88) (background dark)) :background "#553333") (((class color) (min-colors 16)) (:foreground "firebrick" :background "pale green")) (((class color)) (:foreground "blue3" :background "yellow3")) (t (:inverse-video t)))) (quote ((((type tty)) (:foreground "blue3" :background "yellow3")) (((class color)) (:foreground "firebrick" :background "pale green")) (t (:inverse-video t)))))
                :type "face")
                nil [31563 32240])
            ("ediff-current-diff-face-A" variable (:default-value (quote ediff-current-diff-A)) nil [32389 32661])
            ("ediff-hide-face" code nil nil [32662 32705])
            ("and" code nil nil [32840 32984])
            ("ediff-current-diff-B" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#ddffdd") (((class color) (min-colors 88) (background dark)) :background "#335533") (((class color) (min-colors 16)) (:foreground "DarkOrchid" :background "Yellow")) (((class color)) (:foreground "magenta3" :background "yellow3" :weight bold)) (t (:inverse-video t)))) (quote ((((type tty)) (:foreground "magenta3" :background "yellow3" :weight bold)) (((class color)) (:foreground "DarkOrchid" :background "Yellow")) (t (:inverse-video t)))))
                :type "face")
                nil [32988 33707])
            ("ediff-current-diff-face-B" variable (:default-value (quote ediff-current-diff-B)) nil [33856 34108])
            ("ediff-hide-face" code nil nil [34109 34152])
            ("and" code nil nil [34287 34431])
            ("ediff-current-diff-C" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#ffffaa") (((class color) (min-colors 88) (background dark)) :background "#888833") (((class color) (min-colors 16)) (:foreground "Navy" :background "Pink")) (((class color)) (:foreground "cyan3" :background "yellow3" :weight bold)) (t (:inverse-video t)))) (quote ((((type tty)) (:foreground "cyan3" :background "yellow3" :weight bold)) (((class color)) (:foreground "Navy" :background "Pink")) (t (:inverse-video t)))))
                :type "face")
                nil [34434 35115])
            ("ediff-current-diff-face-C" variable (:default-value (quote ediff-current-diff-C)) nil [35264 35536])
            ("ediff-hide-face" code nil nil [35537 35580])
            ("and" code nil nil [35715 35859])
            ("ediff-current-diff-Ancestor" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#cfdeee") (((class color) (min-colors 88) (background dark)) :background "#004151") (((class color) (min-colors 16) (background light)) :background "#cfdeee") (((class color) (min-colors 16) (background dark)) :background "#004151") (((class color)) (:foreground "black" :background "magenta3")) (t (:inverse-video t)))) (quote ((((type tty)) (:foreground "black" :background "magenta3")) (((class color)) (:foreground "Black" :background "VioletRed")) (t (:inverse-video t)))))
                :type "face")
                nil [35862 36670])
            ("ediff-current-diff-face-Ancestor" variable (:default-value (quote ediff-current-diff-Ancestor)) nil [36819 37119])
            ("ediff-hide-face" code nil nil [37120 37170])
            ("and" code nil nil [37305 37456])
            ("ediff-fine-diff-A" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#ffbbbb") (((class color) (min-colors 88) (background dark)) :background "#aa2222") (((class color) (min-colors 16)) (:foreground "Navy" :background "sky blue")) (((class color)) (:foreground "white" :background "sky blue" :weight bold)) (t (:underline t :stipple "gray3")))) (quote ((((type tty)) (:foreground "white" :background "sky blue" :weight bold)) (((class color)) (:foreground "Navy" :background "sky blue")) (t (:underline t :stipple "gray3")))))
                :type "face")
                nil [37459 38168])
            ("ediff-fine-diff-face-A" variable (:default-value (quote ediff-fine-diff-A)) nil [38317 38577])
            ("ediff-hide-face" code nil nil [38578 38618])
            ("ediff-fine-diff-B" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#aaffaa") (((class color) (min-colors 88) (background dark)) :background "#22aa22") (((class color) (min-colors 16)) (:foreground "Black" :background "cyan")) (((class color)) (:foreground "magenta3" :background "cyan3")) (t (:underline t :stipple "gray3")))) (quote ((((type tty)) (:foreground "magenta3" :background "cyan3")) (((class color)) (:foreground "Black" :background "cyan")) (t (:underline t :stipple "gray3")))))
                :type "face")
                nil [38620 39314])
            ("ediff-fine-diff-face-B" variable (:default-value (quote ediff-fine-diff-B)) nil [39463 39723])
            ("ediff-hide-face" code nil nil [39724 39764])
            ("ediff-fine-diff-C" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#ffff55") (((class color) (min-colors 88) (background dark)) :background "#aaaa22") (((type pc)) (:foreground "white" :background "Turquoise")) (((class color) (min-colors 16)) (:foreground "Black" :background "Turquoise")) (((class color)) (:foreground "yellow3" :background "Turquoise" :weight bold)) (t (:underline t :stipple "gray3")))) (quote ((((type tty)) (:foreground "yellow3" :background "Turquoise" :weight bold)) (((type pc)) (:foreground "white" :background "Turquoise")) (((class color)) (:foreground "Black" :background "Turquoise")) (t (:underline t :stipple "gray3")))))
                :type "face")
                nil [39766 40634])
            ("ediff-fine-diff-face-C" variable (:default-value (quote ediff-fine-diff-C)) nil [40783 41043])
            ("ediff-hide-face" code nil nil [41044 41084])
            ("ediff-fine-diff-Ancestor" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88) (background light)) :background "#00c5c0") (((class color) (min-colors 88) (background dark)) :background "#009591") (((class color) (min-colors 16) (background light)) :background "#00c5c0") (((class color) (min-colors 16) (background dark)) :background "#009591") (((class color)) (:foreground "red3" :background "green")) (t (:underline t :stipple "gray3")))) (quote ((((type tty)) (:foreground "red3" :background "green")) (((class color)) (:foreground "Black" :background "Green")) (t (:underline t :stipple "gray3")))))
                :type "face")
                nil [41086 42034])
            ("ediff-fine-diff-face-Ancestor" variable (:default-value (quote ediff-fine-diff-Ancestor)) nil [42183 42471])
            ("ediff-hide-face" code nil nil [42472 42519])
            ("stipple-pixmap" variable (:default-value (cond ((not (ediff-has-face-support-p)) nil) ((and (boundp (quote x-bitmap-file-path)) (locate-library "stipple" t x-bitmap-file-path)) "stipple") ((and (boundp (quote mswindowsx-bitmap-file-path)) (locate-library "stipple" t mswindowsx-bitmap-file-path)) "stipple") (t "Stipple"))) nil [42591 42901])
            ("ediff-even-diff-A" variable
               (:default-value (if (featurep (quote emacs)) (\` ((((type pc)) (:foreground "green3" :background "light grey")) (((class color) (min-colors 88)) (:background "light grey")) (((class color) (min-colors 16)) (:foreground "Black" :background "light grey")) (((class color)) (:foreground "red3" :background "light grey" :weight bold)) (t (:italic t :stipple (\, stipple-pixmap))))) (\` ((((type tty)) (:foreground "red3" :background "light grey" :weight bold)) (((type pc)) (:foreground "green3" :background "light grey")) (((class color)) (:foreground "Black" :background "light grey")) (t (:italic t :stipple (\, stipple-pixmap))))))
                :type "face")
                nil [42903 43711])
            ("ediff-even-diff-face-A" variable (:default-value (quote ediff-even-diff-A)) nil [43860 44137])
            ("ediff-hide-face" code nil nil [44138 44178])
            ("ediff-even-diff-B" variable
               (:default-value (if (featurep (quote emacs)) (\` ((((class color) (min-colors 88)) (:background "Grey")) (((class color) (min-colors 16)) (:foreground "White" :background "Grey")) (((class color)) (:foreground "blue3" :background "Grey" :weight bold)) (t (:italic t :stipple (\, stipple-pixmap))))) (\` ((((type tty)) (:foreground "blue3" :background "Grey" :weight bold)) (((class color)) (:foreground "White" :background "Grey")) (t (:italic t :stipple (\, stipple-pixmap))))))
                :type "face")
                nil [44180 44807])
            ("ediff-even-diff-face-B" variable (:default-value (quote ediff-even-diff-B)) nil [44956 45233])
            ("ediff-hide-face" code nil nil [45234 45274])
            ("ediff-even-diff-C" variable
               (:default-value (if (featurep (quote emacs)) (\` ((((type pc)) (:foreground "yellow3" :background "light grey")) (((class color) (min-colors 88)) (:background "light grey")) (((class color) (min-colors 16)) (:foreground "Black" :background "light grey")) (((class color)) (:foreground "yellow3" :background "light grey" :weight bold)) (t (:italic t :stipple (\, stipple-pixmap))))) (\` ((((type tty)) (:foreground "yellow3" :background "light grey" :weight bold)) (((type pc)) (:foreground "yellow3" :background "light grey")) (((class color)) (:foreground "Black" :background "light grey")) (t (:italic t :stipple (\, stipple-pixmap))))))
                :type "face")
                nil [45276 46092])
            ("ediff-even-diff-face-C" variable (:default-value (quote ediff-even-diff-C)) nil [46241 46518])
            ("ediff-hide-face" code nil nil [46519 46559])
            ("ediff-even-diff-Ancestor" variable
               (:default-value (if (featurep (quote emacs)) (\` ((((type pc)) (:foreground "cyan3" :background "light grey")) (((class color) (min-colors 88)) (:background "Grey")) (((class color) (min-colors 16)) (:foreground "White" :background "Grey")) (((class color)) (:foreground "cyan3" :background "light grey" :weight bold)) (t (:italic t :stipple (\, stipple-pixmap))))) (\` ((((type tty)) (:foreground "cyan3" :background "light grey" :weight bold)) (((type pc)) (:foreground "cyan3" :background "light grey")) (((class color)) (:foreground "White" :background "Grey")) (t (:italic t :stipple (\, stipple-pixmap))))))
                :type "face")
                nil [46561 47352])
            ("ediff-even-diff-face-Ancestor" variable (:default-value (quote ediff-even-diff-Ancestor)) nil [47501 47806])
            ("ediff-hide-face" code nil nil [47807 47854])
            ("ediff-even-diff-face-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-even-diff-A) (B . ediff-even-diff-B) (C . ediff-even-diff-C) (Ancestor . ediff-even-diff-Ancestor))))
                nil [47919 48083])
            ("ediff-odd-diff-A" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((type pc)) (:foreground "green3" :background "gray40")) (((class color) (min-colors 88)) (:background "Grey")) (((class color) (min-colors 16)) (:foreground "White" :background "Grey")) (((class color)) (:foreground "red3" :background "black" :weight bold)) (t (:italic t :stipple "gray1")))) (quote ((((type tty)) (:foreground "red3" :background "black" :weight bold)) (((type pc)) (:foreground "green3" :background "gray40")) (((class color)) (:foreground "White" :background "Grey")) (t (:italic t :stipple "gray1")))))
                :type "face")
                nil [48085 48823])
            ("ediff-odd-diff-face-A" variable (:default-value (quote ediff-odd-diff-A)) nil [48972 49245])
            ("ediff-hide-face" code nil nil [49246 49285])
            ("ediff-odd-diff-B" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((type pc)) (:foreground "White" :background "gray40")) (((class color) (min-colors 88)) (:background "light grey")) (((class color) (min-colors 16)) (:foreground "Black" :background "light grey")) (((class color)) (:foreground "cyan3" :background "black" :weight bold)) (t (:italic t :stipple "gray1")))) (quote ((((type tty)) (:foreground "cyan3" :background "black" :weight bold)) (((type pc)) (:foreground "White" :background "gray40")) (((class color)) (:foreground "Black" :background "light grey")) (t (:italic t :stipple "gray1")))))
                :type "face")
                nil [49288 50044])
            ("ediff-odd-diff-face-B" variable (:default-value (quote ediff-odd-diff-B)) nil [50193 50466])
            ("ediff-hide-face" code nil nil [50467 50506])
            ("ediff-odd-diff-C" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((type pc)) (:foreground "yellow3" :background "gray40")) (((class color) (min-colors 88)) (:background "Grey")) (((class color) (min-colors 16)) (:foreground "White" :background "Grey")) (((class color)) (:foreground "yellow3" :background "black" :weight bold)) (t (:italic t :stipple "gray1")))) (quote ((((type tty)) (:foreground "yellow3" :background "black" :weight bold)) (((type pc)) (:foreground "yellow3" :background "gray40")) (((class color)) (:foreground "White" :background "Grey")) (t (:italic t :stipple "gray1")))))
                :type "face")
                nil [50508 51254])
            ("ediff-odd-diff-face-C" variable (:default-value (quote ediff-odd-diff-C)) nil [51403 51676])
            ("ediff-hide-face" code nil nil [51677 51716])
            ("ediff-odd-diff-Ancestor" variable
               (:default-value (if (featurep (quote emacs)) (quote ((((class color) (min-colors 88)) (:background "gray40")) (((class color) (min-colors 16)) (:foreground "cyan3" :background "gray40")) (((class color)) (:foreground "green3" :background "black" :weight bold)) (t (:italic t :stipple "gray1")))) (quote ((((type tty)) (:foreground "green3" :background "black" :weight bold)) (((class color)) (:foreground "cyan3" :background "gray40")) (t (:italic t :stipple "gray1")))))
                :type "face")
                nil [51718 52355])
            ("ediff-odd-diff-face-Ancestor" variable (:default-value (quote ediff-odd-diff-Ancestor)) nil [52504 52805])
            ("ediff-hide-face" code nil nil [52806 52852])
            ("ediff-odd-diff-face-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-odd-diff-A) (B . ediff-odd-diff-B) (C . ediff-odd-diff-C) (Ancestor . ediff-odd-diff-Ancestor))))
                nil [52916 53075])
            ("ediff-fine-diff-face-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-fine-diff-A) (B . ediff-fine-diff-B) (C . ediff-fine-diff-C) (Ancestor . ediff-fine-diff-Ancestor))))
                nil [53142 53306])
            ("put" code nil nil [53321 53421])
            ("put" code nil nil [53422 53522])
            ("put" code nil nil [53523 53623])
            ("put" code nil nil [53624 53731])
            ("add-hook" code nil nil [53733 53780])
            ("add-hook" code nil nil [53781 53843])
            ("ediff-defvar-local" code nil nil [53860 53972])
            ("ediff-defvar-local" code nil nil [53973 54085])
            ("ediff-defvar-local" code nil nil [54086 54198])
            ("ediff-defvar-local" code nil nil [54199 54329])
            ("ediff-toggle-read-only-function" variable (:default-value (quote read-only-mode)) nil [54331 54509])
            ("ediff-make-buffers-readonly-at-startup" variable nil nil [54511 54703])
            ("ediff-verbose-p" variable (:default-value t) nil [54755 54781])
            ("ediff-show-ancestor" variable (:default-value t) nil [54783 54938])
            ("ediff-defvar-local" code nil nil [55058 55111])
            ("ediff-autostore-merges" variable (:default-value (quote group-jobs-only)) nil [55113 55531])
            ("make-variable-buffer-local" code nil nil [55532 55584])
            ("ediff-defvar-local" code nil nil [55657 55707])
            ("ediff-merge-filename-prefix" variable (:default-value "merge_") nil [55709 55845])
            ("ediff-no-emacs-help-in-control-buffer" variable nil nil [55847 56051])
            ("ediff-temp-file-prefix" variable (:default-value (file-name-as-directory (cond ((boundp (quote temporary-file-directory)) temporary-file-directory) ((fboundp (quote temp-directory)) (temp-directory)) (t "/tmp/")))) nil [56181 56727])
            ("ediff-temp-file-mode" variable (:default-value 384) nil [56729 56846])
            ("ediff-metachars" variable (:default-value "[ 	
!\"#$&'()*;<=>?[\\^`{|~]") nil [56947 57169])
            ("ediff-H-glyph" variable (:default-value (if (featurep (quote xemacs)) (make-glyph "H"))) nil [57221 57284])
            ("ediff-defvar-local" code nil nil [57355 57400])
            ("ediff-defvar-local" code nil nil [57469 57514])
            ("ediff-defvar-local" code nil nil [57583 57628])
            ("ediff-file-remote-p" function (:arguments ("file-name")) nil [57631 57698])
            ("ediff-listable-file" function (:arguments ("file-name")) nil [57762 57928])
            ("ediff-frame-unsplittable-p" function (:arguments ("frame")) nil [57931 58030])
            ("ediff-get-next-window" function (:arguments ("wind" "prev-wind")) nil [58032 58175])
            ("ediff-kill-buffer-carefully" function (:arguments ("buf")) nil [58178 58326])
            ("ediff-background-face" function (:arguments ("buf-type" "dif-num")) nil [58328 58631])
            ("ediff-paint-background-regions-in-one-buffer" function (:arguments ("buf-type" "unhighlight")) nil [58678 59241])
            ("ediff-paint-background-regions" function (:arguments ("unhighlight")) nil [59293 59630])
            ("ediff-clear-fine-diff-vector" function (:arguments ("diff-record")) nil [59726 59896])
            ("ediff-clear-fine-differences-in-one-buffer" function (:arguments ("n" "buf-type")) nil [59898 60077])
            ("ediff-clear-fine-differences" function (:arguments ("n")) nil [60079 60304])
            ("ediff-mouse-event-p" function (:arguments ("event")) nil [60307 60466])
            ("ediff-key-press-event-p" function (:arguments ("event")) nil [60469 60619])
            ("ediff-event-point" function (:arguments ("event")) nil [60621 60848])
            ("ediff-event-buffer" function (:arguments ("event")) nil [60850 61105])
            ("ediff-event-key" function (:arguments ("event-or-key")) nil [61107 61345])
            ("ediff-last-command-char" function nil nil [61347 61420])
            ("ediff-frame-iconified-p" function (:arguments ("frame")) nil [61423 61617])
            ("ediff-window-visible-p" function (:arguments ("wind")) nil [61619 61832])
            ("ediff-frame-char-width" function (:arguments ("frame")) nil [61835 61987])
            ("ediff-reset-mouse" function (:arguments ("frame" "do-not-grab-mouse")) nil [61989 62845])
            ("ediff-spy-after-mouse" function nil nil [62847 62941])
            ("ediff-user-grabbed-mouse" function nil nil [63160 63792])
            ("ediff-frame-char-height" function (:arguments ("frame")) nil [63794 63957])
            ("ediff-overlay-start" function (:arguments ("overl")) nil [63986 64140])
            ("ediff-overlay-end" function (:arguments ("overl")) nil [64142 64291])
            ("ediff-empty-overlay-p" function (:arguments ("overl")) nil [64293 64393])
            ("ediff-overlay-buffer" function (:arguments ("overl")) nil [64515 64660])
            ("ediff-overlay-get" function (:arguments ("overl" "property")) nil [64775 64943])
            ("ediff-move-overlay" function (:arguments ("overlay" "beg" "end" "buffer")) nil [65051 65532])
            ("ediff-overlay-put" function (:arguments ("overlay" "prop" "value")) nil [65534 65895])
            ("ediff-abbreviate-file-name" function (:arguments ("file" "dir")) nil [65985 66291])
            ("ediff-strip-last-dir" function (:arguments ("dir")) nil [66439 66831])
            ("ediff-truncate-string-left" function (:arguments ("str" "newlen")) nil [66833 67114])
            ("ediff-nonempty-string-p" function (:arguments ("string")) nil [67116 67210])
            ("unless" code nil nil [67212 67661])
            ("unless" code nil nil [67663 67734])
            ("ediff-abbrev-jobname" function (:arguments ("jobname")) nil [67736 68546])
            ("ediff-strip-mode-line-format" function nil nil [68604 68820])
            ("ediff-valid-difference-p" function (:arguments ("n")) nil [68868 69011])
            ("ediff-show-all-diffs" function (:arguments ("_n")) nil [69013 69090])
            ("ediff-message-if-verbose" function (:arguments ("string" "args")) nil [69092 69205])
            ("ediff-file-attributes" function (:arguments ("filename" "attr-number")) nil [69207 69358])
            ("ediff-file-size" function (:arguments ("filename")) nil [69360 69434])
            ("ediff-file-modtime" function (:arguments ("filename")) nil [69435 69512])
            ("ediff-convert-standard-filename" function (:arguments ("fname")) nil [69515 69656])
            ("if" code nil nil [69658 70294])
            ("ediff-init" package nil nil [70297 70318]))          
      :file "ediff-init.el"
      :pointmax 70574
      :fsize 70573
      :lastmodtime '(23525 29613 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ediff-diff.el"
      :fsize 53276
      :lastmodtime '(23525 29613 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("icon-title-format" variable nil nil [915 941])
            ("top-toolbar-height" variable nil nil [942 969])
            ("bottom-toolbar-height" variable nil nil [970 1000])
            ("left-toolbar-height" variable nil nil [1001 1029])
            ("right-toolbar-height" variable nil nil [1030 1059])
            ("left-toolbar-width" variable nil nil [1060 1087])
            ("right-toolbar-width" variable nil nil [1088 1116])
            ("default-menubar" variable nil nil [1117 1141])
            ("top-gutter" variable nil nil [1142 1161])
            ("frame-icon-title-format" variable nil nil [1162 1194])
            ("ediff-diff-status" variable nil nil [1195 1221])
            ("unless" code nil nil [1288 1364])
            ("ediff-init" include nil nil [1367 1388])
            ("ediff-help" include nil nil [1389 1410])
            ("if" code nil nil [1479 1575])
            ("ediff-window" customgroup (:user-visible-flag t) nil [1578 1688])
            ("ediff-choose-window-setup-function-automatically" function nil nil [1771 1989])
            ("ediff-window-setup-function" variable (:default-value (quote ediff-setup-windows-default)) nil [1991 3607])
            ("ediff-defvar-local" code nil nil [3654 3698])
            ("ediff-defvar-local" code nil nil [3762 3815])
            ("ediff-defvar-local" code nil nil [3840 3888])
            ("ediff-defvar-local" code nil nil [3921 3963])
            ("ediff-defvar-local" code nil nil [3996 4038])
            ("ediff-defvar-local" code nil nil [4071 4113])
            ("ediff-defvar-local" code nil nil [4153 4202])
            ("ediff-defvar-local" code nil nil [4287 4339])
            ("ediff-window-alist" variable
               (:constant-flag t
                :default-value (quote ((A . ediff-window-A) (65 . ediff-window-A) (B . ediff-window-B) (66 . ediff-window-B) (C . ediff-window-C) (67 . ediff-window-C) (Ancestor . ediff-window-Ancestor))))
                nil [4393 4615])
            ("ediff-split-window-function" variable (:default-value (quote split-window-vertically)) nil [4618 5266])
            ("ediff-merge-split-window-function" variable (:default-value (quote split-window-horizontally)) nil [5268 5924])
            ("declare-function" code nil nil [5986 6043])
            ("declare-function" code nil nil [6044 6102])
            ("ediff-control-frame-parameters" variable
               (:constant-flag t
                :default-value (list (quote (name . "Ediff")) (quote (minibuffer)) (quote (user-position . t)) (quote (vertical-scroll-bars)) (quote (scrollbar-width . 0)) (quote (scrollbar-height . 0)) (quote (menu-bar-lines . 0)) (quote (tool-bar-lines . 0)) (quote (left-fringe . 0)) (quote (right-fringe . 0)) (quote (auto-lower)) (quote (auto-raise . t)) (quote (visibility)) (quote (width . 1)) (quote (height . 1)) (quote (fullscreen)) (cons (quote top) (if (fboundp (quote ediff-display-pixel-height)) (1+ (ediff-display-pixel-height)) 3000)) (cons (quote left) (if (fboundp (quote ediff-display-pixel-width)) (1+ (ediff-display-pixel-width)) 3000))))
                nil [6104 7323])
            ("ediff-defvar-local" code nil nil [7410 7464])
            ("ediff-mouse-pixel-threshold" variable (:default-value 30) nil [7486 7625])
            ("ediff-grab-mouse" variable (:default-value t) nil [7627 7932])
            ("ediff-control-frame-position-function" variable (:default-value (quote ediff-make-frame-position)) nil [7934 8313])
            ("ediff-control-frame-upward-shift" variable (:default-value 42) nil [8315 8679])
            ("ediff-narrow-control-frame-leftward-shift" variable (:default-value (if (featurep (quote xemacs)) 7 3)) nil [8681 9136])
            ("ediff-wide-control-frame-rightward-shift" variable (:default-value 7) nil [9138 9565])
            ("ediff-defvar-local" code nil nil [9630 9678])
            ("ediff-defvar-local" code nil nil [9727 9874])
            ("ediff-defvar-local" code nil nil [9875 9963])
            ("ediff-defvar-local" code nil nil [9964 10418])
            ("ediff-defvar-local" code nil nil [10479 10526])
            ("ediff-prefer-iconified-control-frame" variable nil nil [10528 11057])
            ("ediff-get-window-by-clicking" function (:arguments ("_wind" "_prev-wind" "wind-number")) nil [11074 11596])
            ("ediff-select-lowest-window" function nil nil [11641 12347])
            ("ediff-setup-windows" function (:arguments ("buffer-A" "buffer-B" "buffer-C" "control-buffer")) nil [12607 13274])
            ("ediff-setup-windows-default" function (:arguments ("buffer-A" "buffer-B" "buffer-C" "control-buffer")) nil [13276 13511])
            ("ediff-setup-windows-plain" function (:arguments ("buffer-A" "buffer-B" "buffer-C" "control-buffer")) nil [13633 13986])
            ("ediff-setup-control-buffer" function (:prototype-flag t) nil [13988 14039])
            ("ediff-setup-windows-plain-merge" function (:arguments ("buf-A" "buf-B" "buf-C" "control-buffer")) nil [14041 16342])
            ("ediff-setup-windows-plain-compare" function (:arguments ("buf-A" "buf-B" "buf-C" "control-buffer")) nil [16411 18956])
            ("ediff-setup-windows-multiframe" function (:arguments ("buf-A" "buf-B" "buf-C" "control-buf")) nil [19008 19323])
            ("ediff-setup-windows-multiframe-merge" function (:arguments ("buf-A" "buf-B" "buf-C" "control-buf")) nil [19325 27140])
            ("ediff-setup-windows-multiframe-compare" function (:arguments ("buf-A" "buf-B" "buf-C" "control-buf")) nil [27210 33395])
            ("ediff-skip-unsuitable-frames" function (:arguments ("ok-unsplittable")) nil [33515 34351])
            ("ediff-frame-has-dedicated-windows" function (:arguments ("frame")) nil [34353 34546])
            ("ediff-window-ok-for-display" function (:arguments ("wind")) nil [34780 35075])
            ("declare-function" code nil nil [35077 35152])
            ("ediff-setup-control-frame" function (:arguments ("ctl-buffer" "designated-minibuffer-frame")) nil [35190 40254])
            ("ediff-destroy-control-frame" function (:arguments ("ctl-buffer")) nil [40257 40713])
            ("ediff-make-frame-position" function (:arguments ("ctl-buffer" "ctl-frame-width" "ctl-frame-height")) nil [40760 42616])
            ("ediff-xemacs-select-frame-hook" function nil nil [42618 42795])
            ("ediff-make-wide-display" function nil nil [42797 43746])
            ("ediff-refresh-mode-lines" function nil nil [43922 47007])
            ("ediff-refresh-control-frame" function nil nil [47010 47551])
            ("ediff-make-narrow-control-buffer-id" function (:arguments ("skip-name")) nil [47554 47982])
            ("ediff-make-base-title" function nil nil [47984 48112])
            ("ediff-make-wide-control-buffer-id" function nil nil [48114 48548])
            ("ediff-get-visible-buffer-window" function (:arguments ("buff")) nil [48587 48762])
            ("ediff-keep-window-config" function (:arguments ("control-buf")) nil [48813 50118])
            ("ediff-wind" package nil nil [50121 50142]))          
      :file "ediff-wind.el"
      :pointmax 50397
      :fsize 50396
      :lastmodtime '(23525 29614 0 0)
      :unmatched-syntax '((close-paren 1575 . 1576) (symbol 1460 . 1476) (open-paren 1459 . 1460) (close-paren 1364 . 1365) (symbol 1269 . 1285) (open-paren 1268 . 1269)))
    (semanticdb-table "semanticdb-table"
      :file "ediff-util.el"
      :fsize 158125
      :lastmodtime '(23525 29614 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ediff-multiframe" variable nil nil [931 956])
            ("ediff-init" include nil nil [974 995])
            ("ediff-long-help-message-head" variable
               (:constant-flag t
                :default-value "    Move around      |      Toggle features      |        Manipulate
=====================|===========================|=============================")
                nil [1015 1246])
            ("ediff-long-help-message-tail" variable
               (:constant-flag t
                :default-value "=====================|===========================|=============================
    R -show registry |     = -compare regions    |  M   -show session group
    D -diff output   |     E -browse Ediff manual|  G   -send bug report
    i -status info   |     ? -help off           |  z/q -suspend/quit
-------------------------------------------------------------------------------
For help on a specific command:  Click Button 2 over it; or
              			 Put the cursor over it and type RET.")
                nil [1247 1823])
            ("ediff-long-help-message-compare3" variable
               (:constant-flag t
                :default-value "
p,DEL -previous diff |     | -vert/horiz split   | xy -copy buf X's region to Y
n,SPC -next diff     |     h -highlighting       | rx -restore buf X's old diff
    j -jump to diff  |     @ -auto-refinement    |  * -refine current region
   gx -goto X's point|    ## -ignore whitespace  |  ! -update diff regions
  C-l -recenter      |    #c -ignore case        |
  v/V -scroll up/dn  | #f/#h -focus/hide regions | wx -save buf X
  </> -scroll lt/rt  |     X -read-only in buf X | wd -save diff output
    ~ -rotate buffers|     m -wide display       |
")
                nil [1825 2546])
            ("ediff-long-help-message-compare2" variable
               (:constant-flag t
                :default-value "
p,DEL -previous diff |     | -vert/horiz split   |a/b -copy A/B's region to B/A
n,SPC -next diff     |     h -highlighting       | rx -restore buf X's old diff
    j -jump to diff  |     @ -auto-refinement    |  * -refine current region
   gx -goto X's point|    ## -ignore whitespace  |  ! -update diff regions
  C-l -recenter      |    #c -ignore case        |
  v/V -scroll up/dn  | #f/#h -focus/hide regions | wx -save buf X
  </> -scroll lt/rt  |     X -read-only in buf X | wd -save diff output
    ~ -swap variants |     m -wide display       |
")
                nil [2548 3269])
            ("ediff-long-help-message-narrow2" variable
               (:constant-flag t
                :default-value "
p,DEL -previous diff |     | -vert/horiz split   |a/b -copy A/B's region to B/A
n,SPC -next diff     |     h -highlighting       | rx -restore buf X's old diff
    j -jump to diff  |     @ -auto-refinement    |  * -refine current region
   gx -goto X's point|    ## -ignore whitespace  |  ! -update diff regions
  C-l -recenter      |    #c -ignore case        |  % -narrow/widen buffs
  v/V -scroll up/dn  | #f/#h -focus/hide regions | wx -save buf X
  </> -scroll lt/rt  |     X -read-only in buf X | wd -save diff output
    ~ -swap variants |     m -wide display       |
")
                nil [3271 4027])
            ("ediff-long-help-message-word-mode" variable
               (:constant-flag t
                :default-value "
p,DEL -previous diff |     | -vert/horiz split   | xy -copy buf X's region to Y
n,SPC -next diff     |     h -highlighting       | rx -restore buf X's old diff
    j -jump to diff  |                           |
   gx -goto X's point|    % -narrow/widen buffs  |  ! -recompute diffs
  C-l -recenter      |    #c -ignore case        |
  v/V -scroll up/dn  | #f/#h -focus/hide regions | wx -save buf X
  </> -scroll lt/rt  |     X -read-only in buf X | wd -save diff output
    ~ -swap variants |     m -wide display       |
")
                nil [4029 4734])
            ("ediff-long-help-message-merge" variable
               (:constant-flag t
                :default-value "
p,DEL -previous diff |     | -vert/horiz split   |  x -copy buf X's region to C
n,SPC -next diff     |     h -highlighting       |  r -restore buf C's old diff
    j -jump to diff  |     @ -auto-refinement    |  * -refine current region
   gx -goto X's point|    ## -ignore whitespace  |  ! -update diff regions
  C-l -recenter      | #f/#h -focus/hide regions |  + -combine diff regions
  v/V -scroll up/dn  |     X -read-only in buf X | wx -save buf X
  </> -scroll lt/rt  |     m -wide display       | wd -save diff output
    ~ -swap variants |     s -shrink window C    |  / -show/hide ancestor buff
                     |  $$ -show clashes only    |  & -merge w/new default
                     |  $* -skip changed regions |
")
                nil [4736 5618])
            ("ediff-defvar-local" code nil nil [5653 5772])
            ("ediff-brief-message-string" variable
               (:constant-flag t
                :default-value " Type ? for help")
                nil [5774 5872])
            ("ediff-defvar-local" code nil nil [5906 6026])
            ("ediff-defvar-local" code nil nil [6028 6284])
            ("ediff-defvar-local" code nil nil [6285 6447])
            ("ediff-use-long-help-message" variable nil nil [6449 6609])
            ("ediff-defvar-local" code nil nil [6639 6948])
            ("ediff-help-region-map" variable (:default-value (make-sparse-keymap)) nil [7013 7064])
            ("define-key" code nil nil [7066 7176])
            ("ediff-set-help-overlays" function nil nil [7208 7720])
            ("ediff-help-for-quick-help" function (:user-visible-flag t) nil [7723 11001])
            ("ediff-help-message-line-length" function nil nil [11096 11278])
            ("ediff-indent-help-message" function nil nil [11281 11589])
            ("ediff-set-help-message" function nil nil [11632 13305])
            ("ediff-customize" function nil nil [13322 13392])
            ("ediff-help" package nil nil [13395 13416]))          
      :file "ediff-help.el"
      :pointmax 13447
      :fsize 13610
      :lastmodtime '(23525 29613 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ediff-version" variable
               (:constant-flag t
                :default-value "2.81.5")
                nil [554 618])
            ("ediff-date" variable
               (:constant-flag t
                :default-value "July 4, 2013")
                nil [619 677])
            ("ediff" package nil nil [5070 5086])
            ("unless" code nil nil [5129 5205])
            ("ediff-util" include nil nil [5208 5229])
            ("ediff-init" include nil nil [5247 5268])
            ("ediff-mult" include nil nil [5269 5290])
            ("ediff" customgroup (:user-visible-flag t) nil [5334 5443])
            ("ediff-use-last-dir" variable nil nil [5446 5592])
            ("ediff-last-dir-A" variable nil nil [5649 5678])
            ("ediff-last-dir-B" variable nil nil [5734 5763])
            ("ediff-last-dir-C" variable nil nil [5819 5848])
            ("ediff-last-dir-ancestor" variable nil nil [5915 5951])
            ("ediff-last-merge-autostore-dir" variable nil nil [6030 6073])
            ("ediff-set-read-only-in-buf-A" function nil nil [6139 6253])
            ("declare-function" code nil nil [6255 6359])
            ("declare-function" code nil nil [6360 6480])
            ("ediff-get-default-file-name" function (:arguments ("default" "fileno")) nil [6799 7560])
            ("ediff-files" function
               (:user-visible-flag t
                :arguments ("file-A" "file-B" "startup-hooks"))
                nil [7604 8660])
            ("ediff-files3" function
               (:user-visible-flag t
                :arguments ("file-A" "file-B" "file-C" "startup-hooks"))
                nil [8677 10267])
            ("defalias" code nil nil [10284 10316])
            ("ediff-find-file" function (:arguments ("file-var" "buffer-name" "last-dir" "hooks-var")) nil [10319 12460])
            ("ediff-files-internal" function (:arguments ("file-A" "file-B" "file-C" "startup-hooks" "job-name" "merge-buffer-file")) nil [12534 13582])
            ("declare-function" code nil nil [13584 13638])
            ("defalias" code nil nil [13655 13685])
            ("ediff-current-file" function (:user-visible-flag t) nil [13702 15382])
            ("ediff-backup" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [15400 15969])
            ("ediff-buffers" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "startup-hooks" "job-name"))
                nil [15986 16947])
            ("defalias" code nil nil [16964 16999])
            ("ediff-buffers3" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "buffer-C" "startup-hooks" "job-name"))
                nil [17017 18284])
            ("defalias" code nil nil [18301 18338])
            ("ediff-buffers-internal" function (:arguments ("buf-A" "buf-B" "buf-C" "startup-hooks" "job-name" "merge-buffer-file")) nil [18414 20312])
            ("ediff-get-default-directory-name" function nil nil [20557 20831])
            ("ediff-directories" function
               (:user-visible-flag t
                :arguments ("dir1" "dir2" "regexp"))
                nil [20849 21890])
            ("defalias" code nil nil [21907 21943])
            ("ediff-directory-revisions" function
               (:user-visible-flag t
                :arguments ("dir1" "regexp"))
                nil [21961 22863])
            ("defalias" code nil nil [22880 22933])
            ("ediff-directories3" function
               (:user-visible-flag t
                :arguments ("dir1" "dir2" "dir3" "regexp"))
                nil [22951 24166])
            ("defalias" code nil nil [24183 24221])
            ("ediff-merge-directories" function
               (:user-visible-flag t
                :arguments ("dir1" "dir2" "regexp" "merge-autostore-dir"))
                nil [24238 25414])
            ("defalias" code nil nil [25431 25479])
            ("ediff-merge-directories-with-ancestor" function
               (:user-visible-flag t
                :arguments ("dir1" "dir2" "ancestor-dir" "regexp" "merge-autostore-dir"))
                nil [25496 27061])
            ("ediff-merge-directory-revisions" function
               (:user-visible-flag t
                :arguments ("dir1" "regexp" "merge-autostore-dir"))
                nil [27078 28132])
            ("defalias" code nil nil [28149 28214])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:user-visible-flag t
                :arguments ("dir1" "regexp" "merge-autostore-dir"))
                nil [28231 29373])
            ("defalias" code nil nil [29390 29487])
            ("defalias" code nil nil [29504 29580])
            ("ediff-directories-internal" function (:arguments ("dir1" "dir2" "dir3" "regexp" "action" "jobname" "startup-hooks" "merge-autostore-dir")) nil [29985 32710])
            ("ediff-directory-revisions-internal" function (:arguments ("dir1" "regexp" "action" "jobname" "startup-hooks" "merge-autostore-dir")) nil [32797 34421])
            ("ediff-windows-wordwise" function
               (:user-visible-flag t
                :arguments ("dumb-mode" "wind-A" "wind-B" "startup-hooks"))
                nil [34472 35013])
            ("ediff-windows-linewise" function
               (:user-visible-flag t
                :arguments ("dumb-mode" "wind-A" "wind-B" "startup-hooks"))
                nil [35030 35564])
            ("ediff-windows" function (:arguments ("dumb-mode" "wind-A" "wind-B" "startup-hooks" "job-name" "word-mode")) nil [35806 36852])
            ("ediff-regions-wordwise" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "startup-hooks"))
                nil [36870 38508])
            ("ediff-regions-linewise" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "startup-hooks"))
                nil [38525 40756])
            ("ediff-regions-internal" function (:arguments ("buffer-A" "beg-A" "end-A" "buffer-B" "beg-B" "end-B" "startup-hooks" "job-name" "word-mode" "setup-parameters")) nil [40860 42571])
            ("defalias" code nil nil [42618 42660])
            ("ediff-merge-on-startup" function nil nil [42662 42937])
            ("ediff-merge-files" function
               (:user-visible-flag t
                :arguments ("file-A" "file-B" "startup-hooks" "merge-buffer-file"))
                nil [42954 44351])
            ("ediff-merge-files-with-ancestor" function
               (:user-visible-flag t
                :arguments ("file-A" "file-B" "file-ancestor" "startup-hooks" "merge-buffer-file"))
                nil [44368 46364])
            ("defalias" code nil nil [46381 46451])
            ("ediff-merge-buffers" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "startup-hooks" "job-name" "merge-buffer-file"))
                nil [46468 47768])
            ("ediff-merge-buffers-with-ancestor" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "buffer-ancestor" "startup-hooks" "job-name" "merge-buffer-file"))
                nil [47785 49482])
            ("ediff-merge-revisions" function
               (:user-visible-flag t
                :arguments ("file" "startup-hooks" "merge-buffer-file"))
                nil [49500 50596])
            ("ediff-merge-revisions-with-ancestor" function
               (:user-visible-flag t
                :arguments ("file" "startup-hooks" "merge-buffer-file"))
                nil [50614 51972])
            ("ediff-last-dir-patch" variable nil nil [51990 52019])
            ("ediff-patch-default-directory" variable nil nil [52020 52058])
            ("declare-function" code nil nil [52059 52157])
            ("declare-function" code nil nil [52158 52285])
            ("ediff-patch-file" function
               (:user-visible-flag t
                :arguments ("arg" "patch-buf"))
                nil [52302 53370])
            ("declare-function" code nil nil [53372 53503])
            ("ediff-patch-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "patch-buf"))
                nil [53520 54348])
            ("defalias" code nil nil [54366 54402])
            ("defalias" code nil nil [54418 54463])
            ("ediff-revision" function
               (:user-visible-flag t
                :arguments ("file" "startup-hooks"))
                nil [54516 55869])
            ("defalias" code nil nil [55887 55924])
            ("ediff-load-version-control" function (:arguments ("silent")) nil [56057 56497])
            ("ediff-version" function (:user-visible-flag t) nil [56515 56850])
            ("declare-function" code nil nil [56901 56979])
            ("ediff-documentation" function
               (:user-visible-flag t
                :arguments ("node"))
                nil [56996 57793])
            ("ediff-files-command" function nil nil [57840 58120])
            ("ediff3-files-command" function nil nil [58137 58470])
            ("ediff-merge-command" function nil nil [58487 58785])
            ("ediff-merge-with-ancestor-command" function nil nil [58802 59196])
            ("ediff-directories-command" function nil nil [59213 59567])
            ("ediff-directories3-command" function nil nil [59584 59988])
            ("ediff-merge-directories-command" function nil nil [60005 60377])
            ("ediff-merge-directories-with-ancestor-command" function nil nil [60394 60859])
            ("ediff-util" include nil nil [60863 60884])
            ("run-hooks" code nil nil [60886 60914]))          
      :file "ediff.el"
      :pointmax 61164
      :fsize 61163
      :lastmodtime '(23525 29614 0 0)
      :unmatched-syntax '((close-paren 5205 . 5206) (symbol 5110 . 5126) (open-paren 5109 . 5110)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("A-begin" variable nil nil [1008 1024])
            ("A-end" variable nil nil [1025 1039])
            ("B-begin" variable nil nil [1040 1056])
            ("B-end" variable nil nil [1057 1071])
            ("diff-vector" variable nil nil [1072 1092])
            ("merge-begin" variable nil nil [1093 1113])
            ("merge-end" variable nil nil [1114 1132])
            ("valid-diff" variable nil nil [1133 1152])
            ("emerge-defvar-local" function (:arguments ("var" "value" "doc")) nil [1166 1610])
            ("emerge-minor-modes-list" variable (:default-value (quote ((emerge-mode " Emerge") (emerge-fast-mode " F") (emerge-edit-mode " E") (emerge-auto-advance " A") (emerge-skip-prefers " S")))) nil [1683 1862])
            ("if" code nil nil [1863 1995])
            ("emerge-mode" function nil nil [2075 2594])
            ("emerge" customgroup (:user-visible-flag t) nil [2632 2706])
            ("emerge-diff-program" variable (:default-value "diff") nil [3318 3439])
            ("emerge-diff3-program" variable (:default-value "diff3") nil [3440 3628])
            ("emerge-diff-options" variable nil nil [3629 3769])
            ("emerge-match-diff-line" variable (:default-value (let ((x "\\([0-9]+\\)\\(\\|,\\([0-9]+\\)\\)")) (concat "^" x "\\([acd]\\)" x "$"))) nil [3770 4049])
            ("emerge-diff-ok-lines-regexp" variable (:default-value "^\\([0-9,]+[acd][0-9,]+$\\|[<>] \\|---\\)") nil [4050 4298])
            ("emerge-diff3-ok-lines-regexp" variable (:default-value "^\\([1-3]:\\|====\\|  \\)") nil [4299 4533])
            ("emerge-rcs-ci-program" variable (:default-value "ci") nil [4535 4660])
            ("emerge-rcs-co-program" variable (:default-value "co") nil [4661 4787])
            ("emerge-process-local-variables" variable nil nil [4789 5046])
            ("emerge-execute-line-deletions" variable nil nil [5047 5467])
            ("emerge-before-flag" variable (:default-value "vvvvvvvvvvvvvvvvvvvv
") nil [5469 5720])
            ("emerge-after-flag" variable (:default-value "^^^^^^^^^^^^^^^^^^^^
") nil [5721 5971])
            ("emerge-startup-hook" variable nil nil [5992 6127])
            ("emerge-select-hook" variable nil nil [6128 6311])
            ("emerge-unselect-hook" variable nil nil [6312 6499])
            ("emerge-default-last-directories" variable nil nil [6590 6862])
            ("emerge-last-dir-A" variable nil nil [6864 6965])
            ("emerge-last-dir-B" variable nil nil [6966 7068])
            ("emerge-last-dir-ancestor" variable nil nil [7069 7180])
            ("emerge-last-dir-output" variable nil nil [7181 7288])
            ("emerge-last-revision-A" variable nil nil [7289 7403])
            ("emerge-last-revision-B" variable nil nil [7404 7519])
            ("emerge-last-revision-ancestor" variable nil nil [7520 7644])
            ("emerge-before-flag-length" variable nil nil [7646 7680])
            ("emerge-before-flag-lines" variable nil nil [7681 7714])
            ("emerge-before-flag-match" variable nil nil [7715 7748])
            ("emerge-after-flag-length" variable nil nil [7749 7782])
            ("emerge-after-flag-lines" variable nil nil [7783 7815])
            ("emerge-after-flag-match" variable nil nil [7816 7848])
            ("emerge-diff-buffer" variable nil nil [7849 7876])
            ("emerge-diff-error-buffer" variable nil nil [7877 7910])
            ("emerge-prefix-argument" variable nil nil [7911 7942])
            ("emerge-file-out" variable nil nil [7943 7967])
            ("emerge-exit-func" variable nil nil [7968 7993])
            ("emerge-globalized-difference-list" variable nil nil [7994 8036])
            ("emerge-globalized-number-of-differences" variable nil nil [8037 8085])
            ("emerge-new-flags" function nil nil [8233 8849])
            ("emerge-count-matches-string" function (:arguments ("string" "regexp")) nil [8851 9096])
            ("emerge-new-flags" code nil nil [9131 9149])
            ("emerge-min-visible-lines" variable (:default-value 3) nil [9151 9327])
            ("emerge-temp-file-prefix" variable (:default-value (expand-file-name "emerge" temporary-file-directory)) nil [9329 9542])
            ("make-obsolete-variable" code nil nil [9544 9659])
            ("emerge-temp-file-mode" variable (:default-value 384) nil [9661 9781])
            ("make-obsolete-variable" code nil nil [9783 9904])
            ("emerge-combine-versions-template" variable (:default-value "#ifdef NEW
%b#else /* not NEW */
%a#endif /* not NEW */
") nil [9906 10477])
            ("emerge-basic-keymap" variable nil nil [10497 10677])
            ("emerge-fast-keymap" variable nil nil [10679 10797])
            ("emerge-options-menu" variable (:default-value (make-sparse-keymap "Options")) nil [10799 10860])
            ("emerge-merge-menu" variable (:default-value (make-sparse-keymap "Merge")) nil [10862 10919])
            ("emerge-move-menu" variable (:default-value (make-sparse-keymap "Move")) nil [10921 10976])
            ("emerge-command-prefix" variable (:default-value "") nil [10978 11147])
            ("emerge-setup-fixed-keymaps" function nil nil [11302 18224])
            ("emerge-defvar-local" code nil nil [18322 18390])
            ("emerge-defvar-local" code nil nil [18391 18477])
            ("emerge-defvar-local" code nil nil [18478 18564])
            ("emerge-defvar-local" code nil nil [18565 18655])
            ("emerge-defvar-local" code nil nil [18656 18746])
            ("emerge-defvar-local" code nil nil [18747 18848])
            ("emerge-defvar-local" code nil nil [18849 18978])
            ("emerge-saved-variables" variable
               (:constant-flag t
                :default-value (quote ((buffer-modified-p set-buffer-modified-p) buffer-read-only buffer-auto-save-file-name)))
                nil [18980 19208])
            ("emerge-merging-values" variable
               (:constant-flag t
                :default-value (quote (nil t nil)))
                nil [19209 19322])
            ("emerge-defvar-local" code nil nil [19324 19430])
            ("emerge-defvar-local" code nil nil [19431 19537])
            ("emerge-defvar-local" code nil nil [19539 20999])
            ("emerge-defvar-local" code nil nil [21000 21097])
            ("emerge-defvar-local" code nil nil [21098 21185])
            ("emerge-defvar-local" code nil nil [21186 21419])
            ("emerge-defvar-local" code nil nil [21420 21515])
            ("emerge-defvar-local" code nil nil [21516 21664])
            ("emerge-defvar-local" code nil nil [21665 21802])
            ("emerge-defvar-local" code nil nil [21803 22076])
            ("emerge-defvar-local" code nil nil [22077 22197])
            ("emerge-files-internal" function (:arguments ("file-A" "file-B" "startup-hooks" "quit-hooks" "output-file")) nil [22239 23706])
            ("emerge-setup" function (:arguments ("buffer-A" "file-A" "buffer-B" "file-B" "startup-hooks" "quit-hooks" "output-file")) nil [23740 25328])
            ("emerge-make-diff-list" function (:arguments ("file-A" "file-B")) nil [25387 25956])
            ("emerge-extract-diffs" function (:arguments ("diff-buffer")) nil [25958 27433])
            ("emerge-prepare-error-list" function (:arguments ("ok-regexp")) nil [27482 27776])
            ("emerge-files-with-ancestor-internal" function (:arguments ("file-A" "file-B" "file-ancestor" "startup-hooks" "quit-hooks" "output-file")) nil [27834 29954])
            ("emerge-setup-with-ancestor" function (:arguments ("buffer-A" "file-A" "buffer-B" "file-B" "buffer-ancestor" "file-ancestor" "startup-hooks" "quit-hooks" "output-file")) nil [30005 31783])
            ("emerge-make-diff3-list" function (:arguments ("file-A" "file-B" "file-ancestor")) nil [31859 32491])
            ("emerge-extract-diffs3" function (:arguments ("diff-buffer")) nil [32493 33377])
            ("emerge-get-diff3-group" function (:arguments ("file")) nil [33379 34524])
            ("emerge-files" function
               (:user-visible-flag t
                :arguments ("_arg" "file-A" "file-B" "file-out" "startup-hooks" "quit-hooks"))
                nil [34581 35206])
            ("emerge-files-with-ancestor" function
               (:user-visible-flag t
                :arguments ("_arg" "file-A" "file-B" "file-ancestor" "file-out" "startup-hooks" "quit-hooks"))
                nil [35223 36024])
            ("emerge-files-exit" function (:arguments ("file-out")) nil [36103 36269])
            ("emerge-buffers" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "startup-hooks" "quit-hooks"))
                nil [36328 37093])
            ("emerge-buffers-with-ancestor" function
               (:user-visible-flag t
                :arguments ("buffer-A" "buffer-B" "buffer-ancestor" "startup-hooks" "quit-hooks"))
                nil [37110 38452])
            ("emerge-files-command" function nil nil [38522 38863])
            ("emerge-files-with-ancestor-command" function nil nil [38880 39881])
            ("emerge-command-exit" function (:arguments ("file-out")) nil [39883 40005])
            ("emerge-files-remote" function (:arguments ("file-a" "file-b" "file-out")) nil [40072 40317])
            ("emerge-files-with-ancestor-remote" function (:arguments ("file-a" "file-b" "file-anc" "file-out")) nil [40334 40625])
            ("emerge-remote-exit" function (:arguments ("file-out" "emerge-exit-func")) nil [40627 40815])
            ("emerge-revisions" function
               (:user-visible-flag t
                :arguments ("arg" "file" "revision-A" "revision-B" "startup-hooks" "quit-hooks"))
                nil [40879 41558])
            ("emerge-revisions-with-ancestor" function
               (:user-visible-flag t
                :arguments ("arg" "file" "revision-A" "revision-B" "ancestor" "startup-hooks" "quit-hooks"))
                nil [41575 42569])
            ("emerge-revisions-internal" function (:arguments ("file" "revision-A" "revision-B" "startup-hooks" "quit-hooks" "_output-file")) nil [42571 43824])
            ("emerge-revision-with-ancestor-internal" function (:arguments ("file" "revision-A" "revision-B" "ancestor" "startup-hooks" "quit-hooks" "output-file")) nil [43826 45693])
            ("emerge-execute-line" function (:user-visible-flag t) nil [45751 50083])
            ("emerge-merge-directories-filename-regexp" variable (:default-value "[^.]") nil [50155 50322])
            ("emerge-merge-directories" function (:arguments ("a-dir" "b-dir" "ancestor-dir" "output-dir")) nil [50339 53248])
            ("emerge-setup-windows" function (:arguments ("buffer-A" "buffer-B" "merge-buffer" "pos")) nil [53383 54309])
            ("emerge-set-keys" function nil nil [54352 55733])
            ("emerge-remember-buffer-characteristics" function nil nil [55735 56701])
            ("emerge-restore-buffer-characteristics" function nil nil [56703 57145])
            ("emerge-goto-line" function (:arguments ("desired-line" "current-line")) nil [57238 57352])
            ("emerge-convert-diffs-to-markers" function (:arguments ("A-buffer" "B-buffer" "merge-buffer" "lineno-list")) nil [57354 59402])
            ("emerge-select-prefer-Bs" function nil nil [59468 59838])
            ("emerge-handle-local-variables" function nil nil [59924 60143])
            ("emerge-write-and-delete" function (:arguments ("file-out")) nil [60171 60712])
            ("emerge-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60728 62458])
            ("emerge-operate-on-windows" function (:arguments ("operation" "arg")) nil [63058 63724])
            ("emerge-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63726 64714])
            ("emerge-scroll-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [64716 65712])
            ("emerge-scroll-left" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [65714 66722])
            ("emerge-scroll-right" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [66724 67736])
            ("emerge-scroll-reset" function (:user-visible-flag t) nil [67738 68028])
            ("emerge-position-region" function (:arguments ("beg" "end" "pos")) nil [68405 69344])
            ("emerge-next-difference" function (:user-visible-flag t) nil [69346 69819])
            ("emerge-previous-difference" function (:user-visible-flag t) nil [69821 70251])
            ("emerge-jump-to-difference" function
               (:user-visible-flag t
                :arguments ("difference-number"))
                nil [70253 70642])
            ("emerge-abort" function (:user-visible-flag t) nil [70644 70731])
            ("emerge-quit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70733 71552])
            ("emerge-really-quit" function (:arguments ("arg")) nil [71586 72539])
            ("emerge-select-A" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [72541 73158])
            ("emerge-select-A-edit" function (:arguments ("merge-begin" "merge-end" "A-begin" "A-end")) nil [73193 73517])
            ("emerge-select-B" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [73519 74136])
            ("emerge-select-B-edit" function (:arguments ("merge-begin" "merge-end" "B-begin" "B-end")) nil [74171 74495])
            ("emerge-default-A" function (:user-visible-flag t) nil [74497 75357])
            ("emerge-default-B" function (:user-visible-flag t) nil [75359 76219])
            ("emerge-fast-mode" function (:user-visible-flag t) nil [76221 76640])
            ("emerge-edit-mode" function (:user-visible-flag t) nil [76642 77060])
            ("emerge-auto-advance" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77062 77607])
            ("emerge-skip-prefers" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77609 78195])
            ("emerge-copy-as-kill-A" function (:user-visible-flag t) nil [78197 78627])
            ("emerge-copy-as-kill-B" function (:user-visible-flag t) nil [78629 79059])
            ("emerge-insert-A" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79061 79640])
            ("emerge-insert-B" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79642 80221])
            ("emerge-mark-difference" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80223 80732])
            ("emerge-file-names" function (:user-visible-flag t) nil [80734 81980])
            ("emerge-join-differences" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [81982 83754])
            ("emerge-split-difference" function (:user-visible-flag t) nil [83756 85992])
            ("emerge-trim-difference" function (:user-visible-flag t) nil [85994 89331])
            ("emerge-find-difference" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89697 90203])
            ("emerge-find-difference-merge" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [90205 90693])
            ("emerge-find-difference-A" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [90695 91268])
            ("emerge-find-difference-B" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [91270 91843])
            ("emerge-find-difference1" function (:arguments ("arg" "location" "begin" "end")) nil [91845 93214])
            ("emerge-line-numbers" function (:user-visible-flag t) nil [93216 93928])
            ("emerge-line-diff" variable nil nil [93930 93955])
            ("emerge-line-number-in-buf" function (:arguments ("begin-marker" "end-marker")) nil [93957 94378])
            ("emerge-set-combine-template" function
               (:user-visible-flag t
                :arguments ("string" "localize"))
                nil [94380 95069])
            ("emerge-set-combine-versions-template" function
               (:user-visible-flag t
                :arguments ("start" "end" "localize"))
                nil [95071 95797])
            ("emerge-combine-versions" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [95799 96213])
            ("emerge-combine-versions-register" function
               (:user-visible-flag t
                :arguments ("char" "force"))
                nil [96215 96989])
            ("emerge-combine-versions-internal" function (:arguments ("emerge-combine-template" "force")) nil [96991 97308])
            ("emerge-combine-template" variable nil nil [97310 97342])
            ("emerge-combine-versions-edit" function (:arguments ("merge-begin" "merge-end" "A-begin" "A-end" "B-begin" "B-end")) nil [97344 98202])
            ("emerge-set-merge-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [98204 98627])
            ("emerge-one-line-window" function nil nil [98629 98752])
            ("emerge-select-difference" function (:arguments ("n")) nil [98899 99269])
            ("emerge-place-flags-in-buffer" function (:arguments ("buffer" "difference" "before-index" "after-index")) nil [99271 99564])
            ("emerge-place-flags-in-buffer1" function (:arguments ("difference" "before-index" "after-index")) nil [99566 101697])
            ("emerge-unselect-difference" function (:arguments ("n")) nil [101769 102206])
            ("emerge-remove-flags-in-buffer" function (:arguments ("buffer" "before" "after")) nil [102208 102815])
            ("emerge-unselect-and-select-difference" function (:arguments ("n" "suppress-display")) nil [102876 103590])
            ("emerge-select-version" function (:arguments ("force" "a-version" "b-version" "neither-version")) nil [104006 104892])
            ("emerge-read-file-name" function (:arguments ("prompt" "alternative-default-dir" "default-file" "A-file" "must-match")) nil [104962 107135])
            ("emerge-refresh-mode-line" function nil nil [107207 107813])
            ("emerge-compare-buffers" function (:arguments ("buffer-x" "x-begin" "x-end" "buffer-y" "y-begin" "y-end")) nil [107882 108677])
            ("emerge-unique-buffer-name" function (:arguments ("prefix" "suffix")) nil [108801 109069])
            ("emerge-validate-difference" function nil nil [109117 109306])
            ("emerge-save-variables" function (:arguments ("vars")) nil [109805 109933])
            ("emerge-restore-variables" function (:arguments ("vars" "values")) nil [109935 110184])
            ("emerge-make-temp-file" function (:arguments ("prefix")) nil [110310 110477])
            ("emerge-query-write-file" function (:user-visible-flag t) nil [110558 110817])
            ("emerge-query-save-buffer" function (:user-visible-flag t) nil [110819 111076])
            ("emerge-query-and-call" function (:arguments ("command")) nil [111078 112177])
            ("emerge-verify-file-buffer" function nil nil [112440 113282])
            ("emerge-copy-modes" function (:arguments ("buffer")) nil [113425 113535])
            ("emerge-force-define-key" function (:arguments ("keymap" "key" "definition")) nil [113588 114020])
            ("emerge-define-key-if-possible" function (:arguments ("keymap" "key" "definition")) nil [117098 117590])
            ("emerge-show-file-name" function (:user-visible-flag t) nil [118208 119021])
            ("emerge-make-auto-save-file-name" function nil nil [119679 120828])
            ("emerge-hash-string-into-string" function (:arguments ("s")) nil [120966 121333])
            ("emerge-unslashify-name" function (:arguments ("s")) nil [121444 121793])
            ("emerge-metachars" variable nil nil [121795 121942])
            ("make-obsolete-variable" code nil nil [121943 121996])
            ("emerge" package nil nil [121998 122015]))          
      :file "emerge.el"
      :pointmax 122041
      :fsize 122040
      :lastmodtime '(23525 29614 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("change-log" customgroup (:user-visible-flag t) nil [1289 1448])
            ("change-log-default-name" variable nil nil [1451 1626])
            ("put" code nil nil [1642 1711])
            ("change-log-mode-hook" variable nil nil [1713 1826])
            ("add-log-current-defun-function" variable nil nil [1895 2213])
            ("add-log-full-name" variable nil nil [2230 2474])
            ("add-log-mailing-address" variable nil nil [2491 2989])
            ("add-log-time-format" variable (:default-value (quote add-log-iso8601-time-string)) nil [2991 3482])
            ("add-log-keep-changes-together" variable nil nil [3484 4325])
            ("add-log-always-start-new-record" variable nil nil [4327 4501])
            ("add-log-buffer-file-name-function" variable (:default-value (quote buffer-file-name)) nil [4503 4724])
            ("add-log-file-name-function" variable nil nil [4726 5114])
            ("change-log-version-info-enabled" variable nil nil [5117 5287])
            ("change-log-version-number-regexp-list" variable (:default-value (let ((re "\\([0-9]+\\.[0-9.]+\\)")) (list (concat "^(def[^ 	
]+[ 	]+[^ 	
][ 	]\"" re) (concat "^;+ *Revision: +[^ 	
]+[ 	]+" re)))) nil [5289 5830])
            ("change-log-directory-files" variable (:default-value (quote (".bzr" ".git" ".hg" ".svn"))) nil [5832 6177])
            ("change-log-date" variable
               (:default-value (quote ((t (:inherit font-lock-string-face))))
                :type "face")
                nil [6179 6333])
            ("change-log-name" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face))))
                :type "face")
                nil [6335 6483])
            ("change-log-email" variable
               (:default-value (quote ((t (:inherit font-lock-variable-name-face))))
                :type "face")
                nil [6485 6649])
            ("change-log-file" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [6651 6802])
            ("change-log-list" variable
               (:default-value (quote ((t (:inherit font-lock-keyword-face))))
                :type "face")
                nil [6804 6984])
            ("change-log-conditionals" variable
               (:default-value (quote ((t (:inherit font-lock-variable-name-face))))
                :type "face")
                nil [6986 7167])
            ("change-log-function" variable
               (:default-value (quote ((t (:inherit font-lock-variable-name-face))))
                :type "face")
                nil [7169 7340])
            ("change-log-acknowledgment" variable
               (:default-value (quote ((t (:inherit font-lock-comment-face))))
                :type "face")
                nil [7342 7502])
            ("define-obsolete-face-alias" code nil nil [7503 7595])
            ("change-log-file-names-re" variable
               (:constant-flag t
                :default-value "^\\( +\\|	\\)\\* \\([^ ,:([
]+\\)")
                nil [7597 7670])
            ("change-log-start-entry-re" variable
               (:constant-flag t
                :default-value "^\\sw.........[0-9:+ ]*")
                nil [7671 7733])
            ("change-log-font-lock-keywords" variable (:default-value (\` (("^[0-9-]+ +\\|^ \\{11,\\}\\|^	 \\{3,\\}\\|^\\(Sun\\|Mon\\|Tue\\|Wed\\|Thu\\|Fri\\|Sat\\) [A-z][a-z][a-z] [0-9:+ ]+" (0 (quote change-log-date)) ("\\([^<(]+?\\)[ 	]*[(<]\\([A-Za-z0-9_.+-]+@[A-Za-z0-9_.-]+\\)[>)]" nil nil (1 (quote change-log-name)) (2 (quote change-log-email)))) ((\, change-log-file-names-re) (2 (quote change-log-file)) ("\\=, \\([^ ,:([
]+\\)" nil nil (1 (quote change-log-file))) ("\\= (\\([^(),
]+\\|(\\(setf\\|SETF\\) [^() ,
]+)\\)" nil nil (1 (quote change-log-list))) ("\\=, *\\([^(),
]+\\|(\\(setf\\|SETF\\) [^() ,
]+)\\)" nil nil (1 (quote change-log-list)))) ("^\\( +\\|	\\)(\\([^(),
]+\\|(\\(setf\\|SETF\\) [^() ,
]+)\\)" (2 (quote change-log-list)) ("\\=, *\\([^(),
]+\\|(\\(setf\\|SETF\\) [^() ,
]+)\\)" nil nil (1 (quote change-log-list)))) ("\\[!?\\([^]
]+\\)\\]\\(:\\| (\\)" (1 (quote change-log-conditionals))) ("<\\([^>
]+\\)>\\(:\\| (\\)" (1 (quote change-log-function))) ("\\(^\\( +\\|	\\)\\|  \\)\\(Thanks to\\|Patch\\(es\\)? by\\|Report\\(ed by\\| from\\)\\|Suggest\\(ed by\\|ion from\\)\\)" 3 (quote change-log-acknowledgment))))) nil [7735 9881])
            ("change-log-search-file-name" function (:arguments ("where")) nil [9883 10958])
            ("change-log-find-file" function (:user-visible-flag t) nil [10960 11221])
            ("change-log-search-tag-name-1" function (:arguments ("from")) nil [11223 12094])
            ("change-log-tag-re" variable
               (:constant-flag t
                :default-value "(\\(\\(?:\\sw\\|\\s_\\)+\\(?:[, 	]+\\(?:\\sw\\|\\s_\\)+\\)*\\))")
                nil [12096 12247])
            ("change-log-search-tag-name" function (:arguments ("at")) nil [12249 14369])
            ("change-log-find-head" variable nil nil [14371 14404])
            ("change-log-find-tail" variable nil nil [14405 14438])
            ("change-log-find-window" variable nil nil [14439 14474])
            ("change-log-goto-source-1" function (:arguments ("tag" "regexp" "file" "buffer" "window" "first" "last")) nil [14476 16820])
            ("change-log-goto-source" function (:user-visible-flag t) nil [16822 19000])
            ("change-log-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [19002 19937])
            ("change-log-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (define-key map [3 16] (quote add-log-edit-prev-comment)) (define-key map [3 14] (quote add-log-edit-next-comment)) (define-key map [3 6] (quote change-log-find-file)) (define-key map [3 3] (quote change-log-goto-source)) (define-key map [menu-bar changelog] (cons "ChangeLog" menu-map)) (define-key menu-map [gs] (quote (menu-item "Go To Source" change-log-goto-source :help "Go to source location of ChangeLog tag near point"))) (define-key menu-map [ff] (quote (menu-item "Find File" change-log-find-file :help "Visit the file for the change under point"))) (define-key menu-map [sep] (quote ("--"))) (define-key menu-map [nx] (quote (menu-item "Next Log-Edit Comment" add-log-edit-next-comment :help "Cycle forward through Log-Edit mode comment history"))) (define-key menu-map [pr] (quote (menu-item "Previous Log-Edit Comment" add-log-edit-prev-comment :help "Cycle backward through Log-Edit mode comment history"))) map)) nil [19939 21053])
            ("defvaralias" code nil nil [21201 21265])
            ("add-log-time-zone-rule" variable nil nil [21266 21485])
            ("put" code nil nil [21486 21584])
            ("add-log-iso8601-time-zone" function (:arguments ("time" "zone")) nil [21586 21716])
            ("add-log-iso8601-with-time-zone" variable nil nil [21718 21761])
            ("add-log-iso8601-time-string" function (:arguments ("time" "zone")) nil [21763 21920])
            ("change-log-name" function nil nil [21922 22063])
            ("add-log-edit-prev-comment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22065 22820])
            ("add-log-edit-next-comment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22822 23026])
            ("prompt-for-change-log-name" function nil nil [23043 23683])
            ("change-log-version-number-search" function nil nil [23685 24599])
            ("declare-function" code nil nil [24601 24701])
            ("find-change-log" function (:arguments ("file-name" "buffer-file")) nil [24718 27795])
            ("add-log-file-name" function (:arguments ("buffer-file" "log-file")) nil [27797 29028])
            ("add-change-log-entry" function
               (:user-visible-flag t
                :arguments ("whoami" "file-name" "other-window" "new-entry" "put-new-entry-on-new-line"))
                nil [29045 37097])
            ("add-change-log-entry-other-window" function
               (:user-visible-flag t
                :arguments ("whoami" "file-name"))
                nil [37114 37501])
            ("change-log-indent-text" variable nil nil [37504 37537])
            ("change-log-fill-parenthesized-list" function nil nil [37539 38624])
            ("change-log-indent" function nil nil [38626 39289])
            ("smerge-resolve-function" variable nil nil [39292 39324])
            ("copyright-at-end-flag" variable nil nil [39325 39355])
            ("define-derived-mode" code nil nil [39372 41833])
            ("change-log-next-buffer" function (:arguments ("buffer" "wrap")) nil [41835 43220])
            ("change-log-fill-forward-paragraph" function (:arguments ("n")) nil [43222 43539])
            ("add-log-current-defun-header-regexp" variable (:default-value "^\\([[:upper:]][[:upper:]_ ]*[[:upper:]_]\\|[-_[:alpha:]]+\\)[ 	]*[:=]") nil [43542 43858])
            ("declare-function" code nil nil [43860 43909])
            ("declare-function" code nil nil [43910 43959])
            ("add-log-current-defun" function nil nil [43976 45086])
            ("change-log-get-method-definition-md" variable nil nil [45088 45132])
            ("change-log-get-method-definition-1" function (:arguments ("end")) nil [45312 45504])
            ("change-log-get-method-definition" function nil nil [45506 46176])
            ("timezone-make-date-sortable" function (:prototype-flag t) nil [46179 46229])
            ("change-log-sortable-date-at" function nil nil [46231 46718])
            ("change-log-resolve-conflict" function nil nil [46720 47787])
            ("change-log-merge" function
               (:user-visible-flag t
                :arguments ("other-log"))
                nil [47804 49621])
            ("change-log-beginning-of-defun" function nil nil [49623 49722])
            ("change-log-end-of-defun" function nil nil [49724 50683])
            ("add-log" package nil nil [50685 50703]))          
      :file "add-log.el"
      :pointmax 50730
      :fsize 50729
      :lastmodtime '(23525 29613 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!vc!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
