;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [998 1019])
            ("srecode" include nil nil [1020 1038])
            ("srecode/insert" include nil nil [1039 1064])
            ("srecode/find" include nil nil [1065 1088])
            ("srecode/map" include nil nil [1089 1111])
            ("semantic/decorate" include nil nil [1112 1140])
            ("semantic/wisent" include nil nil [1141 1167])
            ("semantic/senator" include nil nil [1168 1195])
            ("semantic/wisent" include nil nil [1196 1222])
            ("semantic/find" include nil nil [1245 1269])
            ("srecode-minor-mode-hook" variable nil nil [1283 1416])
            ("srecode-prefix-key" variable (:default-value [(control 99) 47]) nil [1539 1633])
            ("srecode-prefix-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "/" (quote srecode-insert)) (define-key km [insert] (quote srecode-insert)) (define-key km "." (quote srecode-insert-again)) (define-key km "E" (quote srecode-edit)) (let ((k 97)) (while (<= k 122) (define-key km (format "%c" k) (quote srecode-bind-insert)) (setq k (1+ k)))) km)) nil [1635 2118])
            ("srecode-menu-bar" variable (:default-value (list "SRecoder" (semantic-menu-item ["Insert Template" srecode-insert :active t :help "Insert a template by name."]) (semantic-menu-item ["Insert Template Again" srecode-insert-again :active t :help "Run the same template as last time again."]) (semantic-menu-item ["Edit Template" srecode-edit :active t :help "Edit a template for this language by name."]) "---" (quote ("Insert ..." :filter srecode-minor-mode-templates-menu)) (\` ("Generate ..." :filter srecode-minor-mode-generate-menu)) "---" (semantic-menu-item ["Customize..." (customize-group "srecode") :active t :help "Customize SRecode options"]) (list "Debugging Tools..." (semantic-menu-item ["Dump Template MAP" srecode-get-maps :active t :help "Calculate (if needed) and display the current template file map."]) (semantic-menu-item ["Dump Tables" srecode-dump-templates :active t :help "Dump the current template table."]) (semantic-menu-item ["Dump Dictionary" srecode-dictionary-dump :active t :help "Calculate and dump a dictionary for point."]) (semantic-menu-item ["Show Macro Help" srecode-macro-help :active t :help "Display the different types of macros available."])))) nil [2120 3603])
            ("srecode-minor-menu" variable nil nil [3605 3683])
            ("srecode-takeover-INS-key" variable nil nil [3685 3808])
            ("srecode-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km srecode-prefix-key srecode-prefix-map) (easy-menu-define srecode-minor-menu km "Srecode Minor Mode Menu" srecode-menu-bar) (when srecode-takeover-INS-key (define-key km [insert] srecode-prefix-map)) km)) nil [3810 4167])
            ("define-minor-mode" code nil nil [4184 5106])
            ("define-minor-mode" code nil nil [5123 5480])
            ("semantic-add-minor-mode" code nil nil [5526 5574])
            ("srecode-minor-mode-templates-menu" function (:arguments ("menu-def")) nil [5596 7605])
            ("srecode-minor-mode-generators" variable nil nil [7607 7715])
            ("srecode-minor-mode-generate-menu" function (:arguments ("menu-def")) nil [7717 8324])
            ("srecode-bind-insert" function (:user-visible-flag t) nil [8353 8895])
            ("srecode-edit" function
               (:user-visible-flag t
                :arguments ("template-name"))
                nil [8897 10446])
            ("srecode-add-code-generator" function (:arguments ("function" "name" "binding")) nil [10448 12192])
            ("srecode-add-code-generator" code nil nil [12226 12302])
            ("srecode-add-code-generator" code nil nil [12303 12368])
            ("srecode/mode" package nil nil [12370 12393]))          
      :file "mode.el"
      :pointmax 12544
      :fsize 12543
      :lastmodtime '(23525 29537 0 0)
      :unmatched-syntax '((close-paren 1269 . 1270) (symbol 1225 . 1242) (open-paren 1224 . 1225)))
    (semanticdb-table "semanticdb-table"
      :file "insert.el"
      :fsize 39156
      :lastmodtime '(23525 29537 0 0))
    (semanticdb-table "semanticdb-table"
      :file "find.el"
      :fsize 10440
      :lastmodtime '(23525 29537 0 0))
    (semanticdb-table "semanticdb-table"
      :file "map.el"
      :fsize 13549
      :lastmodtime '(23525 29537 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [961 977])
            ("cl-generic" include nil nil [978 999])
            ("eieio-base" include nil nil [1000 1021])
            ("mode-local" include nil nil [1022 1043])
            ("srecode" include nil nil [1044 1062])
            ("declare-function" code nil nil [1064 1126])
            ("declare-function" code nil nil [1127 1196])
            ("srecode-template-table" type
               (:members 
                  ( ("file" variable
                       (:documentation "The name of the file this table was built from."
                        :type "string")
                        nil nil)
                    ("filesize" variable
                       (:documentation "The size of the file when it was parsed."
                        :type "number")
                        nil nil)
                    ("filedate" variable
                       (:documentation "Date from the inode of the file when it was last edited.
Format is from the `file-attributes' function."
                        :type "cons")
                        nil nil)
                    ("major-mode" variable (:documentation "The major mode this table of templates is associated with.") nil nil)
                    ("application" variable
                       (:documentation "Tracks the name of the application these templates belong to.
If this is nil, then this template table belongs to a set of generic
templates that can be used with no additional dictionary values.
When it is non-nil, it is assumed the template macros need specialized
Emacs Lisp code to fill in the dictionary."
                        :type "symbol")
                        nil nil)
                    ("framework" variable
                       (:documentation "Tracks the name of the framework these templates belong to.
If nil, then this template table belongs to any framework, or can be
considered generic for all files of this language.
A framework might be a specific library or build environment for which
special templates are desired.  OpenGL might be a framework that
exists for multiple languages."
                        :type "symbol")
                        nil nil)
                    ("priority" variable
                       (:documentation "For file of this Major Mode, what is the priority of this file.
When there are multiple template files with similar names, templates with
the highest priority are scanned last, allowing them to override values in
previous template files."
                        :type "number")
                        nil nil)
                    ("project" variable
                       (:documentation "Scope some project files to a specific project.
The value is a directory which forms the root of a particular project,
or a subset of a particular project."
                        :type "(or null string)")
                        nil nil)
                    ("templates" variable
                       (:documentation "The list of templates compiled into this table."
                        :type "list")
                        nil nil)
                    ("namehash" variable (:documentation "Hash table containing the names of all the templates.") nil nil)
                    ("contexthash" variable nil nil nil)
                    ("variables" variable (:documentation "AList of variables.
These variables are used to initialize dictionaries.") nil nil))                  
                :type "class")
                nil [1231 3904])
            ("srecode-mode-table-list" variable nil nil [3924 4029])
            ("srecode-mode-table" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "(quote srecode-mode-table-list)") nil nil)
                    ("major-mode" variable (:documentation "Table of template tables for this major-mode.") nil nil)
                    ("modetables" variable (:documentation "All that tables unique to this major mode.") nil nil)
                    ("tables" variable (:documentation "All the tables that can be used for this major mode.") nil nil))                  
                :type "class")
                nil [4031 4579])
            ("srecode-get-mode-table" function (:arguments ("mode")) nil [4581 5451])
            ("srecode-make-mode-table" function (:arguments ("mode")) nil [5453 5948])
            ("cl-defmethod" code nil nil [5950 6160])
            ("srecode-mode-table-new" function (:arguments ("mode" "file" "init")) nil [6162 7184])
            ("object-sort-list" function (:arguments ("object" "slot" "predicate")) nil [7186 7477])
            ("srecode-dump-templates" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [7566 8132])
            ("cl-defmethod" code nil nil [8134 8559])
            ("cl-defmethod" code nil nil [8561 9695])
            ("srecode/table" package nil nil [9698 9722]))          
      :file "table.el"
      :pointmax 9755
      :fsize 9754
      :lastmodtime '(23525 29537 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!cedet!srecode!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
