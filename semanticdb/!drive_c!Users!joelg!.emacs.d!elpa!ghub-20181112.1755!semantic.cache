;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("auth-source" include nil nil [2176 2198])
            ("cl-lib" include nil nil [2199 2216])
            ("json" include nil nil [2217 2232])
            ("let-alist" include nil nil [2233 2253])
            ("url" include nil nil [2254 2268])
            ("url-auth" include nil nil [2269 2288])
            ("url-http" include nil nil [2289 2308])
            ("subr-x" include nil nil [2331 2348])
            ("url-callback-arguments" variable nil nil [2351 2382])
            ("url-http-end-of-headers" variable nil nil [2383 2415])
            ("url-http-extra-headers" variable nil nil [2416 2447])
            ("url-http-response-status" variable nil nil [2448 2481])
            ("ghub-default-host" variable
               (:constant-flag t
                :default-value "api.github.com")
                nil [2497 2603])
            ("ghub-github-token-scopes" variable (:default-value (quote (repo))) nil [2605 3531])
            ("ghub-override-system-name" variable nil nil [3533 3708])
            ("cl-defstruct" code nil nil [3735 4259])
            ("defalias" code nil nil [4261 4304])
            ("define-error" code nil nil [4316 4366])
            ("define-error" code nil nil [4367 4423])
            ("ghub-response-headers" variable nil nil [4425 4608])
            ("cl-defun" code nil nil [4610 5346])
            ("cl-defun" code nil nil [5348 6076])
            ("cl-defun" code nil nil [6078 6808])
            ("cl-defun" code nil nil [6810 7548])
            ("cl-defun" code nil nil [7550 8296])
            ("cl-defun" code nil nil [8298 9052])
            ("cl-defun" code nil nil [9054 15136])
            ("ghub-continue" function (:arguments ("req")) nil [15138 15933])
            ("cl-defun" code nil nil [15935 17083])
            ("ghub-response-link-relations" function (:arguments ("req" "headers" "payload")) nil [17085 18587])
            ("cl-defun" code nil nil [18589 18913])
            ("cl-defun" code nil nil [18930 20166])
            ("ghub--handle-response" function (:arguments ("status" "req")) nil [20168 21719])
            ("ghub--handle-response-headers" function (:arguments ("status" "req")) nil [21721 22435])
            ("ghub--handle-response-error" function (:arguments ("status" "payload" "req")) nil [22437 22797])
            ("ghub--signal-error" function (:arguments ("err" "payload")) nil [22799 23243])
            ("ghub--handle-response-value" function (:arguments ("payload" "req")) nil [23245 23559])
            ("ghub--handle-response-payload" function (:arguments ("req")) nil [23561 23720])
            ("ghub--read-json-payload" function (:arguments ("_status")) nil [23722 24607])
            ("ghub--decode-payload" function (:arguments ("_status")) nil [24609 24784])
            ("ghub--encode-payload" function (:arguments ("payload")) nil [24786 24991])
            ("ghub--url-encode-params" function (:arguments ("params")) nil [24993 25356])
            ("ghub-create-token" function
               (:user-visible-flag t
                :arguments ("host" "username" "package" "scopes"))
                nil [25402 27087])
            ("ghub-token-scopes" function
               (:user-visible-flag t
                :arguments ("host" "username" "package"))
                nil [27104 27744])
            ("ghub-clear-caches" function (:user-visible-flag t) nil [27761 28186])
            ("ghub--headers" function (:arguments ("headers" "host" "auth" "username" "forge")) nil [28203 28648])
            ("ghub--auth" function (:arguments ("host" "auth" "username" "forge")) nil [28650 29578])
            ("ghub--basic-auth" function (:arguments ("host" "username")) nil [29580 29747])
            ("ghub--basic-auth-errorback" function (:arguments ("url" "prompt" "_overwrite" "_realm" "_args")) nil [29749 30837])
            ("ghub--token" function (:arguments ("host" "username" "package" "nocreate" "forge")) nil [30839 32118])
            ("ghub--host" function (:arguments ("forge")) nil [32120 32842])
            ("ghub--username" function (:arguments ("host" "forge")) nil [32844 34193])
            ("ghub--ident" function (:arguments ("username" "package")) nil [34195 34269])
            ("ghub--ident-github" function (:arguments ("package")) nil [34271 34415])
            ("ghub--package-scopes" function (:arguments ("package")) nil [34417 34621])
            ("ghub--confirm-create-token" function (:arguments ("host" "username" "package")) nil [34623 37856])
            ("ghub--get-token-id" function (:arguments ("host" "username" "package")) nil [37858 38250])
            ("ghub--get-token-plist" function (:arguments ("host" "username" "package")) nil [38252 38470])
            ("ghub--delete-token" function (:arguments ("host" "username" "package")) nil [38472 38696])
            ("ghub--read-triplet" function nil nil [38698 38907])
            ("ghub--2fa-cache" variable nil nil [38909 38937])
            ("ghub--read-2fa-code" function nil nil [38939 39456])
            ("ghub--auth-source-get" function (:arguments ("keys" "spec")) nil [39458 39713])
            ("advice-add" code nil nil [39715 39847])
            ("auth-source-netrc-parse-next-interesting@save-match-data" function (:arguments ("fn")) nil [39848 40161])
            ("ghub" package nil nil [40169 40184])
            ("ghub-graphql" include nil nil [40185 40208]))          
      :file "ghub.el"
      :pointmax 40231
      :fsize 40234
      :lastmodtime '(23534 42928 0 0)
      :unmatched-syntax '((close-paren 2348 . 2349) (symbol 2311 . 2328) (open-paren 2310 . 2311)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dash" include nil nil [820 835])
            ("ghub" include nil nil [836 851])
            ("graphql" include nil nil [852 870])
            ("treepy" include nil nil [871 888])
            ("subr-x" include nil nil [911 928])
            ("cl-defun" code nil nil [940 1877])
            ("cl-defun" code nil nil [1879 2150])
            ("cl-defun" code nil nil [2152 2598])
            ("ghub-fetch-repository" variable
               (:constant-flag t
                :default-value (quote (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner description (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy ((field . UPDATED_AT) (direction . DESC)))] number state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)) (labels [(:edges t) (:singular label id)] id name color description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy ((field . UPDATED_AT) (direction . DESC)))] number state (author login) title createdAt updatedAt closedAt mergedAt locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) (headRef name (repository (owner login) nameWithOwner)) (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id))))))
                nil [2618 5427])
            ("cl-defun" code nil nil [5429 6145])
            ("cl-defun" code nil nil [6147 6975])
            ("cl-defun" code nil nil [6977 7836])
            ("cl-defstruct" code nil nil [7852 8130])
            ("cl-defun" code nil nil [8132 9184])
            ("cl-defun" code nil nil [9186 9695])
            ("ghub--graphql-prepare-query" function (:arguments ("query" "lineage" "cursor")) nil [9697 11392])
            ("ghub--graphql-handle-response" function (:arguments ("status" "req")) nil [11394 12473])
            ("ghub--graphql-walk-response" function (:arguments ("loc" "data" "req")) nil [12475 14271])
            ("ghub--graphql-lineage" function (:arguments ("loc")) nil [14273 14444])
            ("ghub--graphql-narrow-data" function (:arguments ("data" "lineage")) nil [14446 14700])
            ("ghub--graphql-narrow-query" function (:arguments ("query" "lineage" "cursor")) nil [14702 16182])
            ("ghub--graphql-encode" function (:arguments ("g")) nil [16184 16835])
            ("ghub--alist-zip" function (:arguments ("root")) nil [16837 17043])
            ("ghub-graphql" package nil nil [17051 17074]))          
      :file "ghub-graphql.el"
      :pointmax 17105
      :fsize 17104
      :lastmodtime '(23534 42928 0 0)
      :unmatched-syntax '((close-paren 928 . 929) (symbol 891 . 908) (open-paren 890 . 891))))
  :file "!drive_c!Users!joelg!.emacs.d!elpa!ghub-20181112.1755!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
