;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1228 1245])
            ("magit" include nil nil [1248 1264])
            ("magit-find-file-hook" variable nil nil [1281 1314])
            ("add-hook" code nil nil [1315 1365])
            ("magit-find-file" function
               (:user-visible-flag t
                :arguments ("rev" "file"))
                nil [1382 1633])
            ("magit-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("rev" "file"))
                nil [1650 1956])
            ("magit-find-file-read-args" function (:arguments ("prompt")) nil [1958 2126])
            ("magit-find-file-noselect" function (:arguments ("rev" "file")) nil [2128 2355])
            ("magit-find-file-noselect-1" function (:arguments ("rev" "file" "hookvar" "revert")) nil [2357 3548])
            ("magit-get-revision-buffer-create" function (:arguments ("rev" "file")) nil [3550 3642])
            ("magit-get-revision-buffer" function (:arguments ("rev" "file" "create")) nil [3644 3892])
            ("magit-revert-rev-file-buffer" function (:arguments ("_ignore-auto" "noconfirm")) nil [3894 5142])
            ("magit-find-index-hook" variable nil nil [5160 5194])
            ("magit-find-file-index-noselect" function (:arguments ("file" "revert")) nil [5196 5505])
            ("magit-update-index" function (:user-visible-flag t) nil [5507 7045])
            ("magit-find-git-config-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [7069 7704])
            ("magit-find-git-config-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [7706 8415])
            ("magit-find-git-config-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [8417 9121])
            ("magit-file-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "g" (quote magit-status)) (define-key map "\347" (quote magit-dispatch-popup)) (define-key map "\347" (quote magit-file-popup)) map)) nil [9138 9395])
            ("magit-define-popup" code nil nil [9455 10794])
            ("magit-file-mode-lighter" variable nil nil [10796 10831])
            ("define-minor-mode" code nil nil [10833 11110])
            ("magit-file-mode-turn-on" function nil nil [11112 11231])
            ("define-globalized-minor-mode" code nil nil [11248 11515])
            ("cl-eval-when" code nil nil [11784 11868])
            ("magit-blob-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (cond ((featurep (quote jkl)) (define-key map "i" (quote magit-blob-previous)) (define-key map "k" (quote magit-blob-next)) (define-key map "j" (quote magit-blame-addition)) (define-key map "l" (quote magit-blame-removal)) (define-key map "f" (quote magit-blame-reverse))) (t (define-key map "p" (quote magit-blob-previous)) (define-key map "n" (quote magit-blob-next)) (define-key map "b" (quote magit-blame-addition)) (define-key map "r" (quote magit-blame-removal)) (define-key map "f" (quote magit-blame-reverse)))) (define-key map "q" (quote magit-kill-this-buffer)) map)) nil [11885 12608])
            ("define-minor-mode" code nil nil [12610 12820])
            ("magit-blob-next" function (:user-visible-flag t) nil [12822 13358])
            ("magit-blob-previous" function (:user-visible-flag t) nil [13360 13813])
            ("magit-blob-visit" function (:arguments ("blob-or-file" "line")) nil [13815 14190])
            ("magit-blob-ancestor" function (:arguments ("rev" "file")) nil [14192 14459])
            ("magit-blob-successor" function (:arguments ("rev" "file")) nil [14461 14851])
            ("magit-file-rename" function
               (:user-visible-flag t
                :arguments ("file" "newname"))
                nil [14872 16199])
            ("magit-file-untrack" function
               (:user-visible-flag t
                :arguments ("files" "force"))
                nil [16201 16916])
            ("magit-file-delete" function
               (:user-visible-flag t
                :arguments ("files" "force"))
                nil [16918 17673])
            ("magit-file-checkout" function
               (:user-visible-flag t
                :arguments ("rev" "file"))
                nil [17690 18013])
            ("magit-read-file-hist" variable nil nil [18030 18063])
            ("magit-read-file-from-rev" function (:arguments ("rev" "prompt" "default")) nil [18065 18311])
            ("magit-read-file" function (:arguments ("prompt" "tracked-only")) nil [18313 18707])
            ("magit-read-tracked-file" function (:arguments ("prompt")) nil [18709 18778])
            ("magit-read-file-choice" function (:arguments ("prompt" "files" "error" "default")) nil [18780 19371])
            ("magit-read-changed-file" function (:arguments ("rev-or-range" "prompt" "default")) nil [19373 19577])
            ("magit-read-files" function (:arguments ("prompt" "initial-contents")) nil [19579 19842])
            ("magit-files" package nil nil [19850 19872]))          
      :file "magit-files.el"
      :pointmax 19902
      :fsize 19901
      :lastmodtime '(23535 16490 0 0)
      :unmatched-syntax '((close-paren 1245 . 1246) (symbol 1208 . 1225) (open-paren 1207 . 1208)))
    (semanticdb-table "semanticdb-table"
      :file "magit.el"
      :fsize 24571
      :lastmodtime '(23535 16490 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dash" include nil nil [2632 2647])
            ("easymenu" include nil nil [2648 2667])
            ("server" include nil nil [2668 2685])
            ("with-editor" include nil nil [2686 2708])
            ("magit" include nil nil [2709 2725])
            ("and" code nil nil [2727 2915])
            ("recentf" include nil nil [2936 2954])
            ("git-rebase" customgroup (:user-visible-flag t) nil [2985 3112])
            ("git-rebase-auto-advance" variable (:default-value t) nil [3114 3245])
            ("git-rebase-show-instructions" variable (:default-value t) nil [3247 3392])
            ("git-rebase-confirm-cancel" variable (:default-value t) nil [3394 3519])
            ("git-rebase-faces" customgroup (:user-visible-flag t) nil [3533 3636])
            ("git-rebase-hash" variable
               (:default-value (quote ((t (:inherit magit-hash))))
                :type "face")
                nil [3638 3747])
            ("git-rebase-description" variable (:type "face") nil [3749 3846])
            ("git-rebase-killed-action" variable
               (:default-value (quote ((t (:inherit font-lock-comment-face :strike-through t))))
                :type "face")
                nil [3848 4016])
            ("git-rebase-comment-hash" variable
               (:default-value (quote ((t (:inherit git-rebase-hash :weight bold))))
                :type "face")
                nil [4018 4182])
            ("git-rebase-comment-heading" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [4184 4338])
            ("git-rebase-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (cond ((featurep (quote jkl)) (define-key map [return] (quote git-rebase-show-commit)) (define-key map (kbd "i") (quote git-rebase-backward-line)) (define-key map (kbd "k") (quote forward-line)) (define-key map (kbd "M-i") (quote git-rebase-move-line-up)) (define-key map (kbd "M-k") (quote git-rebase-move-line-down)) (define-key map (kbd "p") (quote git-rebase-pick)) (define-key map (kbd ",") (quote git-rebase-kill-line))) (t (define-key map (kbd "C-m") (quote git-rebase-show-commit)) (define-key map (kbd "p") (quote git-rebase-backward-line)) (define-key map (kbd "n") (quote forward-line)) (define-key map (kbd "M-p") (quote git-rebase-move-line-up)) (define-key map (kbd "M-n") (quote git-rebase-move-line-down)) (define-key map (kbd "c") (quote git-rebase-pick)) (define-key map (kbd "k") (quote git-rebase-kill-line)) (define-key map (kbd "C-k") (quote git-rebase-kill-line)))) (define-key map (kbd "e") (quote git-rebase-edit)) (define-key map (kbd "m") (quote git-rebase-edit)) (define-key map (kbd "f") (quote git-rebase-fixup)) (define-key map (kbd "q") (quote undefined)) (define-key map (kbd "r") (quote git-rebase-reword)) (define-key map (kbd "w") (quote git-rebase-reword)) (define-key map (kbd "s") (quote git-rebase-squash)) (define-key map (kbd "x") (quote git-rebase-exec)) (define-key map (kbd "y") (quote git-rebase-insert)) (define-key map (kbd "z") (quote git-rebase-noop)) (define-key map (kbd "SPC") (quote git-rebase-show-or-scroll-up)) (define-key map (kbd "DEL") (quote git-rebase-show-or-scroll-down)) (define-key map (kbd "C-x C-t") (quote git-rebase-move-line-up)) (define-key map [M-up] (quote git-rebase-move-line-up)) (define-key map [M-down] (quote git-rebase-move-line-down)) (define-key map [remap undo] (quote git-rebase-undo)) map)) nil [4353 6339])
            ("cond" code nil nil [6341 6763])
            ("easy-menu-define" code nil nil [6765 7299])
            ("git-rebase-command-descriptions" variable (:default-value (quote ((with-editor-finish . "tell Git to make it happen") (with-editor-cancel . "tell Git that you changed your mind, i.e. abort") (git-rebase-backward-line . "move point to previous line") (forward-line . "move point to next line") (git-rebase-move-line-up . "move the commit at point up") (git-rebase-move-line-down . "move the commit at point down") (git-rebase-show-or-scroll-up . "show the commit at point in another buffer") (git-rebase-show-commit . "show the commit at point in another buffer and select its window") (undo . "undo last change") (git-rebase-kill-line . "drop the commit at point") (git-rebase-insert . "insert a line for an arbitrary commit") (git-rebase-noop . "add noop action at point")))) nil [7301 8207])
            ("git-rebase-pick" function (:user-visible-flag t) nil [8223 8330])
            ("git-rebase-reword" function (:user-visible-flag t) nil [8332 8455])
            ("git-rebase-edit" function (:user-visible-flag t) nil [8457 8576])
            ("git-rebase-squash" function (:user-visible-flag t) nil [8578 8725])
            ("git-rebase-fixup" function (:user-visible-flag t) nil [8727 8879])
            ("defvar-local" code nil nil [8881 8915])
            ("defvar-local" code nil nil [8916 8956])
            ("git-rebase-set-action" function (:arguments ("action")) nil [8958 9306])
            ("git-rebase-line-p" function (:arguments ("pos")) nil [9308 9476])
            ("git-rebase-region-bounds" function nil nil [9478 9881])
            ("git-rebase-move-line-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [9883 11206])
            ("git-rebase-move-line-up" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11208 11495])
            ("git-rebase-highlight-region" function (:arguments ("start" "end" "window" "rol")) nil [11497 12105])
            ("git-rebase-unhighlight-region" function (:arguments ("rol")) nil [12107 12280])
            ("git-rebase-kill-line" function (:user-visible-flag t) nil [12282 12653])
            ("git-rebase-insert" function
               (:user-visible-flag t
                :arguments ("rev"))
                nil [12655 12985])
            ("git-rebase-exec" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12987 14152])
            ("git-rebase-noop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14154 15201])
            ("git-rebase-undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15203 15385])
            ("git-rebase--show-commit" function (:arguments ("scroll")) nil [15387 15851])
            ("git-rebase-show-commit" function (:user-visible-flag t) nil [15853 15978])
            ("git-rebase-show-or-scroll-up" function (:user-visible-flag t) nil [15980 16329])
            ("git-rebase-show-or-scroll-down" function (:user-visible-flag t) nil [16331 16686])
            ("git-rebase-backward-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [16688 16894])
            ("define-derived-mode" code nil nil [16921 18696])
            ("git-rebase-cancel-confirm" function (:arguments ("force")) nil [18698 18853])
            ("git-rebase-autostash-save" function nil nil [18855 19018])
            ("git-rebase-autostash-apply" function nil nil [19020 19144])
            ("git-rebase-match-comment-line" function (:arguments ("limit")) nil [19146 19257])
            ("git-rebase-mode-font-lock-keywords" function nil nil [19259 20189])
            ("git-rebase-mode-show-keybindings" function nil nil [20191 21849])
            ("add-hook" code nil nil [21851 21919])
            ("git-rebase-mode-disable-before-save-hook" function nil nil [21921 22024])
            ("add-hook" code nil nil [22026 22100])
            ("git-rebase-filename-regexp" variable
               (:constant-flag t
                :default-value "/git-rebase-todo\\'")
                nil [22117 22176])
            ("add-to-list" code nil nil [22192 22286])
            ("add-to-list" code nil nil [22288 22399])
            ("eval-after-load" code nil nil [22401 22488])
            ("add-to-list" code nil nil [22490 22569])
            ("git-rebase" package nil nil [22577 22598]))          
      :file "git-rebase.el"
      :pointmax 22627
      :fsize 22626
      :lastmodtime '(23535 16490 0 0)
      :unmatched-syntax '((close-paren 2954 . 2955) (symbol 2918 . 2935) (open-paren 2917 . 2918)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1611 1628])
            ("dash" include nil nil [1629 1644])
            ("subr-x" include nil nil [1667 1684])
            ("crm" include nil nil [1687 1701])
            ("ido" include nil nil [1722 1736])
            ("declare-function" code nil nil [1738 1968])
            ("declare-function" code nil nil [1969 2047])
            ("vc-git" include nil nil [2068 2085])
            ("declare-function" code nil nil [2087 2159])
            ("magit-wip-before-change-mode" variable nil nil [2161 2198])
            ("magit-popup" include nil nil [2200 2222])
            ("magit-completing-read-function" variable (:default-value (quote magit-builtin-completing-read)) nil [2237 3337])
            ("magit-dwim-selection" variable (:default-value (quote ((magit-stash-apply nil t) (magit-stash-branch nil t) (magit-stash-branch-here nil t) (magit-stash-format-patch nil t) (magit-stash-drop nil ask) (magit-stash-pop nil ask) (forge-browse-commit nil t) (forge-browse-branch nil t) (forge-browse-remote nil t) (forge-browse-issue nil t) (forge-browse-pullreq nil t) (forge-edit-topic-title nil t) (forge-edit-topic-labels nil t) (forge-edit-topic-assignees nil t) (forge-visit-issue nil t) (forge-visit-pullreq nil t)))) nil [3339 5678])
            ("magit--confirm-actions" variable
               (:constant-flag t
                :default-value (quote ((const reverse) (const discard) (const rename) (const resurrect) (const untrack) (const trash) (const delete) (const abort-rebase) (const abort-merge) (const merge-dirty) (const drop-stashes) (const reset-bisect) (const kill-process) (const delete-unmerged-branch) (const delete-pr-branch) (const remove-modules) (const stage-all-changes) (const unstage-all-changes) (const safe-with-wip))))
                nil [5680 6202])
            ("magit-no-confirm" variable nil nil [6204 12744])
            ("magit-slow-confirm" variable (:default-value (quote (drop-stashes))) nil [12746 13527])
            ("magit-no-message" variable nil nil [13529 14525])
            ("magit-ellipsis" variable (:default-value 8230) nil [14527 14809])
            ("magit-update-other-window-delay" variable (:default-value 0.2) nil [14811 15568])
            ("magit-view-git-manual-method" variable (:default-value (quote info)) nil [15570 16308])
            ("helm-completion-in-region-default-sort-fn" variable nil nil [16326 16376])
            ("ivy-sort-functions-alist" variable nil nil [16377 16410])
            ("magit-completing-read--silent-default" variable nil nil [16412 16462])
            ("magit-completing-read" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "fallback")) nil [16464 19612])
            ("magit--completion-table" function (:arguments ("collection")) nil [19614 19835])
            ("magit-builtin-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [19837 20501])
            ("magit-completing-read-multiple" function (:arguments ("prompt" "choices" "sep" "default" "hist" "keymap")) nil [20503 21902])
            ("magit-completing-read-multiple*" function (:arguments ("prompt" "table" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [21904 23597])
            ("magit-ido-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [23599 24475])
            ("magit-prompt-with-default" function (:arguments ("prompt" "def")) nil [24477 24689])
            ("magit-minibuffer-local-ns-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map " " (quote magit-whitespace-disallowed)) (define-key map "	" (quote magit-whitespace-disallowed)) map)) nil [24691 24933])
            ("magit-whitespace-disallowed" function (:user-visible-flag t) nil [24935 25159])
            ("magit-read-string" function (:arguments ("prompt" "initial-input" "history" "default-value" "inherit-input-method" "no-whitespace")) nil [25161 26835])
            ("magit-read-string-ns" function (:arguments ("prompt" "initial-input" "history" "default-value" "inherit-input-method")) nil [26837 27143])
            ("magit-read-char-case" function (:arguments ("prompt" "verbose" "clauses")) nil [27145 27559])
            ("magit-y-or-n-p" function (:arguments ("prompt" "action")) nil [27561 27923])
            ("magit--no-confirm-alist" variable (:default-value (quote ((safe-with-wip magit-wip-before-change-mode discard reverse stage-all-changes unstage-all-changes)))) nil [27925 28080])
            ("cl-defun" code nil nil [28082 29546])
            ("magit-confirm-files" function (:arguments ("action" "files" "prompt")) nil [29548 29802])
            ("magit-confirm-make-prompt" function (:arguments ("action")) nil [29804 29992])
            ("magit-read-number-string" function (:arguments ("prompt" "default")) nil [29994 30306])
            ("magit-emacs-Q-command" function (:user-visible-flag t) nil [30344 32265])
            ("magit-bind-match-strings" function (:arguments ("varlist" "string" "body")) nil [32287 32877])
            ("magit-delete-line" function nil nil [32879 32999])
            ("magit-delete-match" function (:arguments ("num")) nil [33001 33232])
            ("magit-file-line" function (:arguments ("file")) nil [33234 33508])
            ("magit-file-lines" function (:arguments ("file" "keep-empty-lines")) nil [33510 33861])
            ("magit-set-header-line-format" function (:arguments ("string")) nil [33863 35257])
            ("magit-face-property-all" function (:arguments ("face" "string")) nil [35259 35685])
            ("magit--format-spec" function (:arguments ("format" "specification")) nil [35687 37197])
            ("magit-kill-this-buffer" function (:user-visible-flag t) nil [37223 37334])
            ("magit-file-accessible-directory-p" function (:arguments ("filename")) nil [37364 37673])
            ("when" code nil nil [37675 38404])
            ("when" code nil nil [38406 39497])
            ("magit-completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [39692 40580])
            ("whitespace-mode" variable nil nil [40618 40642])
            ("whitespace-dont-turn-on-in-magit-mode" function (:arguments ("fn")) nil [40644 41464])
            ("advice-add" code nil nil [41466 41557])
            ("magit-custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [41583 42285])
            ("magit-hook-custom-get" function (:arguments ("symbol")) nil [42287 43303])
            ("Info-follow-nearest-node--magit-gitman" function (:arguments ("fn" "fork")) nil [43350 44044])
            ("advice-add" code nil nil [44061 44159])
            ("org-man-export--magit-gitman" function (:arguments ("fn" "link" "description" "format")) nil [44176 44580])
            ("advice-add" code nil nil [44597 44675])
            ("magit-message" function (:arguments ("format-string" "args")) nil [44696 45078])
            ("magit-msg" function (:arguments ("format-string" "args")) nil [45080 45329])
            ("magit-utils" package nil nil [45337 45359]))          
      :file "magit-utils.el"
      :pointmax 45389
      :fsize 45392
      :lastmodtime '(23535 16490 0 0)
      :unmatched-syntax '((close-paren 2085 . 2086) (symbol 2050 . 2067) (open-paren 2049 . 2050) (close-paren 1736 . 1737) (symbol 1704 . 1721) (open-paren 1703 . 1704) (close-paren 1684 . 1685) (symbol 1647 . 1664) (open-paren 1646 . 1647)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1013 1030])
            ("dash" include nil nil [1031 1046])
            ("magit-git" include nil nil [1048 1068])
            ("autorevert" include nil nil [1070 1091])
            ("magit-auto-revert" customgroup (:user-visible-flag t) nil [1106 1377])
            ("auto-revert-buffer-list-filter" variable nil nil [1379 2581])
            ("magit-auto-revert-tracked-only" variable (:default-value t) nil [2583 3012])
            ("magit-auto-revert-immediately" variable (:default-value t) nil [3014 3785])
            ("magit-turn-on-auto-revert-mode-if-desired" function (:arguments ("file")) nil [3797 4383])
            ("define-globalized-minor-mode" code nil nil [4400 5289])
            ("magit-auto-revert-mode--init-kludge" function nil nil [6121 6917])
            ("if" code nil nil [6918 7260])
            ("put" code nil nil [7262 8591])
            ("magit-auto-revert-buffers" function nil nil [8593 8960])
            ("magit-auto-revert-toplevel" variable nil nil [8962 9001])
            ("when" code nil nil [9003 9137])
            ("magit-auto-revert-buffer-p" function (:arguments ("buffer")) nil [9139 9442])
            ("magit-auto-revert-repository-buffer-p" function (:arguments ("buffer" "fallback")) nil [9444 10441])
            ("auto-revert-buffers--buffer-list-filter" function nil nil [10443 10742])
            ("advice-add" code nil nil [10744 10838])
            ("magit-autorevert" package nil nil [10846 10873]))          
      :file "magit-autorevert.el"
      :pointmax 10908
      :fsize 10907
      :lastmodtime '(23535 16490 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "magit-git.el"
      :fsize 92509
      :lastmodtime '(23535 16490 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [1218 1239])
            ("cl-lib" include nil nil [1240 1257])
            ("dash" include nil nil [1258 1273])
            ("subr-x" include nil nil [1296 1313])
            ("with-editor" include nil nil [1316 1338])
            ("magit-utils" include nil nil [1339 1361])
            ("magit-section" include nil nil [1362 1386])
            ("magit-git" include nil nil [1387 1407])
            ("magit-mode" include nil nil [1408 1429])
            ("declare-function" code nil nil [1431 1562])
            ("magit-process-connection-type" variable (:default-value (not (eq system-type (quote cygwin)))) nil [1577 1946])
            ("magit-need-cygwin-noglob" variable (:default-value (and (eq system-type (quote windows-nt)) (with-temp-buffer (let ((process-environment (append magit-git-environment process-environment))) (condition-case e (process-file magit-git-executable nil (current-buffer) nil "-c" "alias.echo=!echo" "echo" "x{0}") (file-error (lwarn (quote magit-process) :warning "Could not run Git: %S" e)))) (equal "x0
" (buffer-string))))) nil [1948 2941])
            ("magit-process-popup-time" variable (:default-value -1) nil [2943 3231])
            ("magit-process-log-max" variable (:default-value 32) nil [3233 3701])
            ("magit-process-error-tooltip-max-lines" variable (:default-value 20) nil [3703 4154])
            ("magit-credential-cache-daemon-socket" variable (:default-value (--some (pcase-let (((\` ((\, prog) \, args)) (split-string it))) (if (and prog (string-match-p "\\`\\(?:\\(?:/.*/\\)?git-credential-\\)?cache\\'" prog)) (or (cl-loop for (opt val) on args if (string= opt "--socket") return val) (expand-file-name "~/.git-credential-cache/socket")))) (ignore-errors (let ((process-environment (append magit-git-environment process-environment))) (process-lines magit-git-executable "config" "--get-all" "credential.helper"))))) nil [4156 6094])
            ("magit-process-yes-or-no-prompt-regexp" variable (:default-value " [[(]\\([Yy]\\(?:es\\)?\\)[/|]\\([Nn]o?\\)[])] ?[?:] ?$") nil [6096 6352])
            ("magit-process-password-prompt-regexps" variable (:default-value (quote ("^\\(Enter \\)?[Pp]assphrase\\( for \\(RSA \\)?key '.*'\\)?: ?$" "^\\(Enter \\)?[Pp]assword\\( for '\\(https?://\\)?\\(?99:.*\\)'\\)?: ?$" "^.*'s password: ?$" "^Yubikey for .*: ?$" "^Enter PIN for .*: ?$"))) nil [6354 6908])
            ("magit-process-find-password-functions" variable nil nil [6910 7768])
            ("magit-process-username-prompt-regexps" variable (:default-value (quote ("^Username for '.*': ?$"))) nil [7770 8013])
            ("magit-process-ensure-unix-line-ending" variable (:default-value t) nil [8015 8219])
            ("magit-process-display-mode-line-error" variable (:default-value t) nil [8221 8431])
            ("magit-process-ok" variable
               (:default-value (quote ((t :inherit magit-section-heading :foreground "green")))
                :type "face")
                nil [8433 8572])
            ("magit-process-ng" variable
               (:default-value (quote ((t :inherit magit-section-heading :foreground "red")))
                :type "face")
                nil [8574 8715])
            ("magit-mode-line-process" variable
               (:default-value (quote ((t :inherit mode-line-emphasis)))
                :type "face")
                nil [8717 8887])
            ("magit-mode-line-process-error" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [8889 9084])
            ("magit-process-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) map)) nil [9104 9260])
            ("define-derived-mode" code nil nil [9262 9646])
            ("magit-process-buffer" function
               (:user-visible-flag t
                :arguments ("nodisplay"))
                nil [9648 11154])
            ("magit-process-kill" function (:user-visible-flag t) nil [11156 11443])
            ("magit-process-raise-error" variable nil nil [11472 11510])
            ("magit-git" function (:arguments ("args")) nil [11512 11962])
            ("magit-run-git" function (:arguments ("args")) nil [11964 12729])
            ("magit-pre-call-git-hook" variable nil nil [12731 12767])
            ("magit-call-git" function (:arguments ("args")) nil [12769 13362])
            ("magit-call-process" function (:arguments ("program" "args")) nil [13364 13840])
            ("magit-process-file" function (:arguments ("process" "infile" "buffer" "display" "args")) nil [13842 14295])
            ("magit-process-environment" function nil nil [14297 15161])
            ("magit-this-process" variable nil nil [15163 15194])
            ("magit-run-git-with-input" function (:arguments ("args")) nil [15196 16786])
            ("magit-run-git-with-logfile" function (:arguments ("file" "args")) nil [16788 17083])
            ("magit-run-git-async" function (:arguments ("args")) nil [17113 17799])
            ("magit-run-git-with-editor" function (:arguments ("args")) nil [17801 18393])
            ("magit-run-git-sequencer" function (:arguments ("args")) nil [18395 19166])
            ("magit-pre-start-git-hook" variable nil nil [19168 19205])
            ("magit-start-git" function (:arguments ("input" "args")) nil [19207 20133])
            ("magit-start-process" function (:arguments ("program" "input" "args")) nil [20135 22617])
            ("magit-parse-git-async" function (:arguments ("args")) nil [22619 23435])
            ("magit-process-setup" function (:arguments ("program" "args")) nil [23460 23777])
            ("magit-process-insert-section" function (:arguments ("pwd" "program" "args" "errcode" "errlog")) nil [23779 25580])
            ("magit-process-truncate-log" function nil nil [25582 26379])
            ("magit-process-sentinel" function (:arguments ("process" "event")) nil [26381 27167])
            ("magit-sequencer-process-sentinel" function (:arguments ("process" "event")) nil [27169 28227])
            ("magit-process-filter" function (:arguments ("proc" "string")) nil [28229 29175])
            ("magit-process-kill-on-abort" function (:arguments ("proc" "body")) nil [29177 29617])
            ("magit-process-yes-or-no-prompt" function (:arguments ("process" "string")) nil [29619 30119])
            ("magit-process-password-auth-source" function (:arguments ("key")) nil [30121 31237])
            ("magit-process-password-prompt" function (:arguments ("process" "string")) nil [31239 32107])
            ("magit-process-username-prompt" function (:arguments ("process" "string")) nil [32109 32458])
            ("magit-process-match-prompt" function (:arguments ("prompts" "string")) nil [32460 32901])
            ("magit--process-coding-system" function nil nil [32903 33287])
            ("magit-credential-hook" variable nil nil [33289 33366])
            ("magit-credential-cache-daemon-process" variable nil nil [33368 33418])
            ("magit-maybe-start-credential-cache-daemon" function nil nil [33420 35039])
            ("add-hook" code nil nil [35041 35118])
            ("tramp-sh-handle-start-file-process--magit-tramp-process-environment" function (:arguments ("fn" "name" "buffer" "program" "args")) nil [35120 35495])
            ("advice-add" code nil nil [35497 35634])
            ("tramp-sh-handle-process-file--magit-tramp-process-environment" function (:arguments ("fn" "program" "infile" "destination" "display" "args")) nil [35636 36009])
            ("advice-add" code nil nil [36011 36136])
            ("magit-mode-line-process-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "<mode-line> <mouse-1>") (quote magit-process-buffer)) map)) nil [36138 36334])
            ("magit-process-set-mode-line" function (:arguments ("program" "args")) nil [36336 37176])
            ("magit-process-set-mode-line-error-status" function (:arguments ("error" "str")) nil [37178 39664])
            ("magit-process-unset-mode-line-error-status" function nil nil [39666 40052])
            ("magit-process-unset-mode-line" function nil nil [40054 40412])
            ("magit-process-error-message-regexps" variable (:default-value (list "^\\*ERROR\\*: Canceled by user$" "^\\(?:error\\|fatal\\|git\\): \\(.*\\)$" "^\\(Cannot rebase:.*\\)$")) nil [40414 40586])
            ("define-error" code nil nil [40588 40631])
            ("magit-process-error-summary" function (:arguments ("process-buf" "section")) nil [40633 41446])
            ("magit-process-error-tooltip" function (:arguments ("process-buf" "section")) nil [41448 42453])
            ("defvar-local" code nil nil [42455 42490])
            ("magit-process-finish-apply-ansi-colors" variable nil nil [42492 42543])
            ("magit-process-finish" function (:arguments ("arg" "process-buf" "command-buf" "default-dir" "section")) nil [42545 45789])
            ("magit-process-display-buffer" function (:arguments ("process")) nil [45791 46690])
            ("magit--log-action" function (:arguments ("summary" "line" "list")) nil [46692 47418])
            ("magit-process" package nil nil [47426 47450]))          
      :file "magit-process.el"
      :pointmax 47482
      :fsize 47481
      :lastmodtime '(23535 16490 0 0)
      :unmatched-syntax '((close-paren 1313 . 1314) (symbol 1276 . 1293) (open-paren 1275 . 1276)))
    (semanticdb-table "semanticdb-table"
      :file "magit-section.el"
      :fsize 60715
      :lastmodtime '(23535 16490 0 0))
    (semanticdb-table "semanticdb-table"
      :file "magit-mode.el"
      :fsize 58319
      :lastmodtime '(23535 16490 0 0)))
  :file "!drive_c!Users!joelg!.emacs.d!elpa!magit-20181116.1412!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
