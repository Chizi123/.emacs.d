;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1480 1496])
            ("cl-lib" include nil nil [1497 1514])
            ("eieio" include nil nil [1515 1531])
            ("cl-generic" include nil nil [1532 1553])
            ("eieio-speedbar" include nil nil [1554 1579])
            ("ede/source" include nil nil [1580 1601])
            ("ede/base" include nil nil [1602 1621])
            ("ede/auto" include nil nil [1622 1641])
            ("ede/detect" include nil nil [1642 1663])
            ("load" code nil nil [1685 1721])
            ("declare-function" code nil nil [1724 1774])
            ("declare-function" code nil nil [1775 1822])
            ("declare-function" code nil nil [1823 1884])
            ("declare-function" code nil nil [1885 1955])
            ("declare-function" code nil nil [1956 2010])
            ("declare-function" code nil nil [2011 2075])
            ("declare-function" code nil nil [2076 2140])
            ("declare-function" code nil nil [2141 2183])
            ("declare-function" code nil nil [2184 2235])
            ("declare-function" code nil nil [2236 2283])
            ("declare-function" code nil nil [2284 2349])
            ("ede-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2351 2417])
            ("ede-version" function (:user-visible-flag t) nil [2429 2546])
            ("ede" customgroup (:user-visible-flag t) nil [2548 2638])
            ("ede-auto-add-method" variable (:default-value (quote ask)) nil [2640 3393])
            ("ede-debug-program-function" variable (:default-value (quote gdb)) nil [3395 3520])
            ("ede-project-directories" variable nil nil [3564 4385])
            ("ede-directory-safe-p" function (:arguments ("dir")) nil [4387 5051])
            ("ede-projects" variable nil nil [5081 5167])
            ("ede-object-root-project" variable nil nil [5169 5348])
            ("make-variable-buffer-local" code nil nil [5349 5402])
            ("ede-object-project" variable nil nil [5404 5582])
            ("make-variable-buffer-local" code nil nil [5583 5631])
            ("ede-object" variable nil nil [5633 5767])
            ("make-variable-buffer-local" code nil nil [5768 5808])
            ("ede-selected-object" variable nil nil [5810 5960])
            ("ede-constructing" variable nil nil [5962 6146])
            ("ede-deep-rescan" variable nil nil [6148 6311])
            ("ede-singular-object" function (:arguments ("prompt")) nil [6332 6519])
            ("ede-choose-object" function (:arguments ("prompt" "list-o-o")) nil [6521 6834])
            ("ede-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (pmap (make-sparse-keymap))) (define-key pmap "e" (quote ede-edit-file-target)) (define-key pmap "a" (quote ede-add-file)) (define-key pmap "d" (quote ede-remove-file)) (define-key pmap "t" (quote ede-new-target)) (define-key pmap "g" (quote ede-rescan-toplevel)) (define-key pmap "s" (quote ede-speedbar)) (define-key pmap "f" (quote ede-find-file)) (define-key pmap "C" (quote ede-compile-project)) (define-key pmap "c" (quote ede-compile-target)) (define-key pmap "" (quote ede-compile-selected)) (define-key pmap "D" (quote ede-debug-target)) (define-key pmap "R" (quote ede-run-target)) (define-key map "." pmap) map)) nil [6858 7595])
            ("global-ede-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [menu-bar cedet-menu] (cons "Development" cedet-menu-map)) map)) nil [7597 7793])
            ("define-key" code nil nil [7840 7989])
            ("define-key" code nil nil [7990 8131])
            ("define-key" code nil nil [8132 8231])
            ("define-key" code nil nil [8232 8373])
            ("define-key" code nil nil [8374 8542])
            ("define-key" code nil nil [8543 8715])
            ("define-key" code nil nil [8716 8912])
            ("ede-buffer-belongs-to-target-p" function nil nil [8914 9138])
            ("ede-buffer-belongs-to-project-p" function nil nil [9140 9355])
            ("ede-menu-obj-of-class-p" function (:arguments ("class")) nil [9357 9596])
            ("ede-build-forms-menu" function (:arguments ("_menu-def")) nil [9598 11046])
            ("ede-target-forms-menu" function (:arguments ("_menu-def")) nil [11048 11702])
            ("ede-project-forms-menu" function (:arguments ("_menu-def")) nil [11704 12559])
            ("ede-configuration-forms-menu" function (:arguments ("_menu-def")) nil [12561 13282])
            ("ede-project-configurations-set" function
               (:user-visible-flag t
                :arguments ("newconfig"))
                nil [13284 13883])
            ("ede-customize-forms-menu" function (:arguments ("_menu-def")) nil [13885 14603])
            ("ede-apply-object-keymap" function (:arguments ("_default")) nil [14606 15329])
            ("cl-defmethod" code nil nil [15373 15759])
            ("cl-defmethod" code nil nil [15761 16134])
            ("ede-apply-target-options" function nil nil [16163 16414])
            ("ede-turn-on-hook" function nil nil [16416 16806])
            ("define-minor-mode" code nil nil [16808 17549])
            ("ede-initialize-state-current-buffer" function nil nil [17551 19664])
            ("ede-reset-all-buffers" function (:user-visible-flag t) nil [19666 20087])
            ("define-minor-mode" code nil nil [20104 21686])
            ("ede-ignored-file-alist" variable (:default-value (quote ("\\.cvsignore$" "\\.#" "~$"))) nil [21688 21830])
            ("ede-ignore-file" function (:arguments ("filename")) nil [21832 22065])
            ("ede-auto-add-to-target" function nil nil [22067 23608])
            ("ede" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [23650 25301])
            ("ede-check-project-query-fcn" variable (:default-value (quote y-or-n-p)) nil [25303 25488])
            ("ede-check-project-directory" function (:arguments ("dir")) nil [25490 26607])
            ("ede-new" function
               (:user-visible-flag t
                :arguments ("type" "name"))
                nil [26609 29501])
            ("cl-defmethod" code nil nil [29503 29670])
            ("ede-invoke-method" function (:arguments ("sym" "args")) nil [29672 30077])
            ("ede-rescan-toplevel" function (:user-visible-flag t) nil [30079 30420])
            ("ede-new-target" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [30422 30993])
            ("ede-new-target-custom" function (:user-visible-flag t) nil [30995 31158])
            ("ede-delete-target" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31160 31808])
            ("ede-add-file" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31810 32635])
            ("ede-remove-file" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [32637 33299])
            ("ede-edit-file-target" function (:user-visible-flag t) nil [33301 33465])
            ("ede-compile-project" function (:user-visible-flag t) nil [33500 33841])
            ("ede-compile-selected" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [33843 34072])
            ("ede-compile-target" function (:user-visible-flag t) nil [34074 34217])
            ("ede-debug-target" function (:user-visible-flag t) nil [34219 34356])
            ("ede-run-target" function (:user-visible-flag t) nil [34358 34489])
            ("ede-make-dist" function (:user-visible-flag t) nil [34491 34664])
            ("cl-defmethod" code nil nil [35056 35309])
            ("cl-defmethod" code nil nil [35311 35643])
            ("cl-defmethod" code nil nil [35645 35858])
            ("cl-defmethod" code nil nil [35860 36064])
            ("cl-defmethod" code nil nil [36066 36275])
            ("cl-defmethod" code nil nil [36277 36433])
            ("cl-defmethod" code nil nil [36435 36641])
            ("cl-defmethod" code nil nil [36643 36851])
            ("cl-defmethod" code nil nil [36853 37029])
            ("cl-defmethod" code nil nil [37031 37279])
            ("cl-defmethod" code nil nil [37281 37528])
            ("cl-defmethod" code nil nil [37530 37707])
            ("cl-defmethod" code nil nil [37709 37868])
            ("cl-defmethod" code nil nil [37870 38054])
            ("cl-defmethod" code nil nil [38056 38256])
            ("cl-defmethod" code nil nil [38258 38422])
            ("ede-ecb-project-paths" function nil nil [38424 38701])
            ("ede-add-project-to-global-list" function (:arguments ("proj")) nil [38735 39222])
            ("ede-delete-project-from-global-list" function (:arguments ("proj")) nil [39224 39381])
            ("ede-flush-deleted-projects" function (:user-visible-flag t) nil [39383 39743])
            ("ede--disable-inode" variable nil nil [39745 39772])
            ("ede-global-list-sanity-check" function (:user-visible-flag t) nil [39812 40490])
            ("ede-load-project-file" function (:arguments ("dir" "detectin" "rootreturn")) nil [40492 42313])
            ("ede-parent-project" function (:arguments ("obj")) nil [42426 43505])
            ("ede-current-project" function (:arguments ("dir")) nil [43507 43988])
            ("ede-buffer-object" function (:arguments ("buffer" "projsym")) nil [43990 45251])
            ("cl-defmethod" code nil nil [45253 45666])
            ("ede-target-parent" function (:arguments ("target")) nil [45668 46118])
            ("cl-defmethod" code nil nil [46120 46923])
            ("cl-defmethod" code nil nil [46925 47167])
            ("cl-defmethod" code nil nil [47169 47303])
            ("cl-defmethod" code nil nil [47305 47577])
            ("ede-project-buffers" function (:arguments ("project")) nil [47604 47985])
            ("ede-target-buffers" function (:arguments ("target")) nil [47987 48326])
            ("ede-buffers" function nil nil [48328 48586])
            ("ede-map-buffers" function (:arguments ("proc")) nil [48588 48699])
            ("cl-defmethod" code nil nil [48701 48869])
            ("cl-defmethod" code nil nil [48871 49036])
            ("cl-defmethod" code nil nil [49064 49312])
            ("cl-defmethod" code nil nil [49314 49675])
            ("cl-defmethod" code nil nil [49775 49917])
            ("cl-defmethod" code nil nil [49919 50139])
            ("cl-defmethod" code nil nil [50303 50423])
            ("cl-defmethod" code nil nil [50425 50544])
            ("cl-defmethod" code nil nil [50546 50770])
            ("ede-apply-preprocessor-map" function nil nil [50781 51605])
            ("cl-defmethod" code nil nil [51607 51727])
            ("cl-defmethod" code nil nil [51729 51840])
            ("cl-defmethod" code nil nil [51842 51952])
            ("cl-defmethod" code nil nil [51962 52108])
            ("ede-set" function
               (:user-visible-flag t
                :arguments ("variable" "value" "proj"))
                nil [52141 52807])
            ("ede-apply-project-local-variables" function (:arguments ("buffer")) nil [52809 53257])
            ("ede-make-project-local-variable" function (:arguments ("variable" "project")) nil [53259 53581])
            ("ede-set-project-local-variable" function (:arguments ("variable" "value" "project")) nil [53583 54105])
            ("cl-defmethod" code nil nil [54107 54428])
            ("cl-defmethod" code nil nil [54430 54545])
            ("project-try-ede" function (:arguments ("dir")) nil [54580 54841])
            ("cl-defmethod" code nil nil [54843 54941])
            ("add-hook" code nil nil [54943 54995])
            ("ede" package nil nil [54997 55011])
            ("ede/files" include nil nil [55061 55081])
            ("if" code nil nil [55167 55280]))          
      :file "ede.el"
      :pointmax 55303
      :fsize 55302
      :lastmodtime '(23525 29528 0 0)
      :unmatched-syntax '((close-paren 1721 . 1722) (symbol 1666 . 1682) (open-paren 1665 . 1666)))
    (semanticdb-table "semanticdb-table"
      :file "cedet.el"
      :fsize 4928
      :lastmodtime '(23525 29527 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1799 1812])
            ("find-func" include nil nil [1815 1835])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [2187 2861])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [2863 3062])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [3198 3442])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [3444 3914])
            ("mode-local-init-hook" variable nil nil [3939 4074])
            ("mode-local-changed-mode-buffers" variable nil nil [4076 4181])
            ("mode-local--init-mode" variable nil nil [4183 4217])
            ("mode-local-initialized-p" function nil nil [4219 4479])
            ("mode-local-post-major-mode-change" function nil nil [4481 5087])
            ("mode-local-on-major-mode-change" function nil nil [5089 5319])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [5342 5837])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [5839 6123])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [6125 6417])
            ("mode-local-symbol-table" variable nil nil [6446 6653])
            ("make-variable-buffer-local" code nil nil [6654 6707])
            ("mode-local-active-mode" variable nil nil [6709 6789])
            ("new-mode-local-bindings" function nil nil [6791 6900])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [6902 10015])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [10017 10901])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [10903 11477])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [11508 13252])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [13254 13930])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [13932 15328])
            ("put" code nil nil [15329 15382])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [15384 15767])
            ("put" code nil nil [15768 15814])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [15817 16013])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [16015 17180])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17182 17469])
            ("put" code nil nil [17470 17523])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17525 17912])
            ("put" code nil nil [17913 17968])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [17999 18322])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [18324 18502])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [18504 18704])
            ("fetch-overload" function (:arguments ("overload")) nil [18706 19195])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [19197 19875])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [19877 20776])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [20778 21171])
            ("put" code nil nil [21188 21241])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [21243 22553])
            ("put" code nil nil [22554 22603])
            ("defalias" code nil nil [22605 22662])
            ("function-overload-p" function (:arguments ("symbol")) nil [22664 22837])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [22839 23897])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [23923 24209])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [24232 24880])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [24882 25453])
            ("describe-function-orig-buffer" variable nil nil [25534 25572])
            ("describe-mode-local-overload" function (:arguments ("symbol")) nil [25574 26698])
            ("add-hook" code nil nil [26700 26778])
            ("declare-function" code nil nil [26780 26833])
            ("xref-mode-local--override-present" function (:arguments ("sym" "xrefs")) nil [26835 27105])
            ("xref-mode-local-overload" function (:arguments ("symbol")) nil [27107 29343])
            ("add-hook" code nil nil [29345 29412])
            ("xref-mode-local-find-overloadable-regexp" variable
               (:constant-flag t
                :default-value "(\\(\\(define-overloadable-function\\)\\|\\(define-overload\\)\\) +%s")
                nil [29414 29650])
            ("xref-mode-local-find-override" function (:arguments ("meta-name")) nil [29652 30124])
            ("add-to-list" code nil nil [30126 30242])
            ("add-to-list" code nil nil [30243 30351])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [30386 30797])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [30799 32028])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [32030 32966])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [32968 33885])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [33887 34119])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [34121 34508])
            ("mode-local-setup-edebug-specs" function nil nil [34533 35140])
            ("add-hook" code nil nil [35142 35202])
            ("add-hook" code nil nil [35204 35265])
            ("add-hook" code nil nil [35266 35333])
            ("mode-local" package nil nil [35335 35356]))          
      :file "mode-local.el"
      :pointmax 35386
      :fsize 35393
      :lastmodtime '(23525 29528 0 0)
      :unmatched-syntax '((close-paren 1812 . 1813) (symbol 1781 . 1798) (open-paren 1780 . 1781)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1380 1396])
            ("semantic/tag" include nil nil [1397 1420])
            ("semantic/lex" include nil nil [1421 1444])
            ("cl-lib" include nil nil [1445 1462])
            ("semantic-version" variable (:default-value "2.2") nil [1464 1528])
            ("declare-function" code nil nil [1530 1575])
            ("declare-function" code nil nil [1576 1647])
            ("semantic-require-version" function (:arguments ("major" "minor" "beta")) nil [1649 2227])
            ("semantic" customgroup (:user-visible-flag t) nil [2229 2311])
            ("semantic-faces" customgroup (:user-visible-flag t) nil [2313 2404])
            ("semantic/fw" include nil nil [2406 2428])
            ("semantic--parse-table" variable nil nil [2479 2674])
            ("make-variable-buffer-local" code nil nil [2675 2726])
            ("semantic-varalias-obsolete" code nil nil [2727 2824])
            ("semantic-symbol->name-assoc-list" variable (:default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Dependencies") (package . "Provides")))) nil [2826 3365])
            ("make-variable-buffer-local" code nil nil [3366 3428])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable nil nil [3430 3864])
            ("make-variable-buffer-local" code nil nil [3865 3942])
            ("semantic-case-fold" variable nil nil [3944 4022])
            ("make-variable-buffer-local" code nil nil [4023 4071])
            ("semantic-expand-nonterminal" variable nil nil [4073 4565])
            ("make-variable-buffer-local" code nil nil [4566 4623])
            ("semantic--buffer-cache" variable nil nil [4625 5038])
            ("make-variable-buffer-local" code nil nil [5039 5091])
            ("semantic-varalias-obsolete" code nil nil [5092 5190])
            ("semantic-unmatched-syntax-cache" variable nil nil [5192 5282])
            ("make-variable-buffer-local" code nil nil [5283 5344])
            ("semantic-unmatched-syntax-cache-check" variable nil nil [5346 5503])
            ("make-variable-buffer-local" code nil nil [5504 5571])
            ("semantic-edits-are-safe" variable nil nil [5573 5923])
            ("semantic-unmatched-syntax-hook" variable nil nil [5925 6550])
            ("semantic--before-fetch-tags-hook" variable nil nil [6552 6850])
            ("semantic-varalias-obsolete" code nil nil [6851 6969])
            ("semantic-after-toplevel-bovinate-hook" variable nil nil [6971 7330])
            ("make-obsolete-variable" code nil nil [7331 7405])
            ("semantic-after-toplevel-cache-change-hook" variable nil nil [7407 7847])
            ("semantic-before-toplevel-cache-flush-hook" variable nil nil [7849 8199])
            ("semantic-dump-parse" variable nil nil [8201 8316])
            ("semantic-parser-name" variable (:default-value "LL") nil [8318 8412])
            ("make-variable-buffer-local" code nil nil [8413 8463])
            ("semantic--completion-cache" variable nil nil [8465 8562])
            ("make-variable-buffer-local" code nil nil [8563 8619])
            ("semantic-parse-tree-state" variable (:default-value (quote needs-rebuild)) nil [8661 8747])
            ("make-variable-buffer-local" code nil nil [8748 8803])
            ("semantic-parse-tree-unparseable" function nil nil [8805 9088])
            ("semantic-parse-tree-unparseable-p" function nil nil [9090 9254])
            ("semantic-parse-tree-set-needs-update" function nil nil [9256 9477])
            ("semantic-parse-tree-needs-update-p" function nil nil [9479 9641])
            ("semantic-parse-tree-set-needs-rebuild" function nil nil [9643 9866])
            ("semantic-parse-tree-needs-rebuild-p" function nil nil [9868 10032])
            ("semantic-parse-tree-set-up-to-date" function nil nil [10034 10178])
            ("semantic-parse-tree-up-to-date-p" function nil nil [10180 10322])
            ("semantic-inhibit-functions" variable nil nil [10359 10600])
            ("semantic-new-buffer-setup-functions" variable (:default-value (quote ((c-mode . semantic-default-c-setup) (c++-mode . semantic-default-c-setup) (html-mode . semantic-default-html-setup) (java-mode . wisent-java-default-setup) (js-mode . wisent-javascript-setup-parser) (python-mode . wisent-python-default-setup) (scheme-mode . semantic-default-scheme-setup) (srecode-template-mode . srecode-template-setup-parser) (texinfo-mode . semantic-default-texi-setup) (makefile-automake-mode . semantic-default-make-setup) (makefile-gmake-mode . semantic-default-make-setup) (makefile-makepp-mode . semantic-default-make-setup) (makefile-bsdmake-mode . semantic-default-make-setup) (makefile-imake-mode . semantic-default-make-setup) (makefile-mode . semantic-default-make-setup)))) nil [10602 11833])
            ("semantic-init-hook" variable nil nil [11835 11930])
            ("semantic-init-mode-hook" variable nil nil [11932 12032])
            ("make-variable-buffer-local" code nil nil [12033 12086])
            ("semantic-init-db-hook" variable nil nil [12088 12358])
            ("semantic-varalias-obsolete" code nil nil [12360 12443])
            ("semantic-varalias-obsolete" code nil nil [12444 12537])
            ("semantic-varalias-obsolete" code nil nil [12538 12627])
            ("semantic-error-if-unparsed" function nil nil [12629 12826])
            ("semantic--umatched-syntax-needs-refresh-p" function nil nil [12828 13113])
            ("semantic-new-buffer-fcn" function nil nil [13115 14752])
            ("semantic-fetch-tags-fast" function nil nil [14754 14998])
            ("condition-case" code nil nil [15046 15092])
            ("semantic-edebug" variable nil nil [15095 15234])
            ("semantic-elapsed-time" function (:arguments ("start" "end")) nil [15236 15427])
            ("bovinate" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [15429 16185])
            ("semantic-parse-stream" function
               (:overloadable t
                :arguments ("stream" "nonterminal"))
                nil [16294 16880])
            ("semantic-parse-changes" function (:overloadable t) nil [16882 17129])
            ("semantic-parse-region" function
               (:overloadable t
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17131 17961])
            ("semantic-parse-region-default" function (:arguments ("start" "end" "nonterminal" "depth" "returnonerror")) nil [17963 19015])
            ("semantic-set-unmatched-syntax-cache" function (:arguments ("unmatched-syntax")) nil [19043 19590])
            ("semantic-clear-unmatched-syntax-cache" function nil nil [19592 19781])
            ("semantic-unmatched-syntax-tokens" function nil nil [19783 20406])
            ("semantic-clear-toplevel-cache" function (:user-visible-flag t) nil [20408 21422])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [21424 21476])
            ("semantic--set-buffer-cache" function (:arguments ("tagtable")) nil [21478 22369])
            ("semantic-working-type" variable (:default-value (quote percent)) nil [22371 22573])
            ("semantic-varalias-obsolete" code nil nil [22574 22673])
            ("semantic-minimum-working-buffer-size" variable (:default-value (* 1024 5)) nil [22675 22914])
            ("semantic-parser-working-message" function (:arguments ("arg")) nil [22916 23231])
            ("semantic-parser-warnings" variable nil nil [23453 23486])
            ("semantic-fetch-tags" function nil nil [23488 26616])
            ("semantic-refresh-tags-safe" function nil nil [26618 27927])
            ("semantic-bovinate-toplevel" function (:arguments ("ignored")) nil [27929 28044])
            ("make-obsolete" code nil nil [28045 28116])
            ("semantic-fetch-available-tags" function nil nil [28377 28817])
            ("semantic-repeat-parse-whole-stream" function (:arguments ("stream" "nonterm" "returnonerror")) nil [29090 31313])
            ("semantic-parser-warnings" variable nil nil [31589 31685])
            ("make-variable-buffer-local" code nil nil [31686 31740])
            ("semantic-clear-parser-warnings" function nil nil [31742 31884])
            ("semantic-push-parser-warning" function (:arguments ("warning" "start" "end")) nil [31886 32109])
            ("semantic-dump-parser-warnings" function (:user-visible-flag t) nil [32111 32430])
            ("semantic-bovinate-region-until-error" function (:arguments ("start" "end" "nonterm" "depth")) nil [32622 33231])
            ("make-obsolete" code nil nil [33232 33330])
            ("semantic-bovinate-from-nonterminal" function (:arguments ("start" "end" "nonterm" "depth" "length")) nil [33332 33877])
            ("semantic-bovinate-from-nonterminal-full" function (:arguments ("start" "end" "nonterm" "depth")) nil [33879 34455])
            ("make-obsolete" code nil nil [34456 34557])
            ("semantic-force-refresh" function (:user-visible-flag t) nil [34579 34832])
            ("semantic-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ",j" (quote semantic-complete-jump-local)) (define-key map ",J" (quote semantic-complete-jump)) (define-key map ",m" (quote semantic-complete-jump-local-members)) (define-key map ",g" (quote semantic-symref-symbol)) (define-key map ",G" (quote semantic-symref)) (define-key map ",p" (quote senator-previous-tag)) (define-key map ",n" (quote senator-next-tag)) (define-key map ",u" (quote senator-go-to-up-reference)) (define-key map ", " (quote semantic-complete-analyze-inline)) (define-key map "," (quote senator-kill-tag)) (define-key map ",\367" (quote senator-copy-tag)) (define-key map "," (quote senator-yank-tag)) (define-key map ",r" (quote senator-copy-tag-to-register)) (define-key map ",," (quote semantic-force-refresh)) (define-key map [3 44 up] (quote senator-transpose-tags-up)) (define-key map [3 44 down] (quote senator-transpose-tags-down)) (define-key map ",l" (quote semantic-analyze-possible-completions)) (define-key map [menu-bar cedet-menu] (list (quote menu-item) "Development" cedet-menu-map :enable (quote (not (and menu-bar-mode (bound-and-true-p global-ede-mode)))))) map)) nil [34834 36448])
            ("let" code nil nil [36499 42986])
            ("semantic-load-system-cache-loaded" variable nil nil [43139 43301])
            ("semantic-submode-list" variable
               (:constant-flag t
                :default-value (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode global-semantic-idle-local-symbol-highlight-mode global-semantic-highlight-edits-mode global-semantic-show-unmatched-syntax-mode global-semantic-show-parser-state-mode)))
                nil [43303 43913])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [43930 45583])
            ("define-minor-mode" code nil nil [45600 48800])
            ("semantic-analyze-completion-at-point-function" function nil nil [48836 49487])
            ("semantic-analyze-notc-completion-at-point-function" function nil nil [49489 50138])
            ("semantic-analyze-nolongprefix-completion-at-point-function" function nil nil [50140 50864])
            ("global-semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50929 51143])
            ("semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51145 51555])
            ("global-semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51557 51763])
            ("semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51765 52280])
            ("global-semantic-idle-local-symbol-highlight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52282 52570])
            ("srecode-template-setup-parser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52572 52700])
            ("semantic" package nil nil [52702 52721])
            ("semantic/util" include nil nil [52823 52847]))          
      :file "semantic.el"
      :pointmax 52904
      :fsize 52903
      :lastmodtime '(23525 29528 0 0)
      :unmatched-syntax '((close-paren 15092 . 15093) (symbol 15026 . 15043) (open-paren 15025 . 15026)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pulse-available-p" function nil nil [1939 2156])
            ("pulse-flag" variable (:default-value (pulse-available-p)) nil [2158 2643])
            ("pulse-highlight-start-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "#AAAA33")) (((class color) (background light)) (:background "#FFFFAA"))))
                :type "face")
                nil [2645 2880])
            ("pulse-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "#AAAA33")) (((class color) (background light)) (:background "#FFFFAA"))))
                :type "face")
                nil [2882 3187])
            ("pulse-int-to-hex" function (:arguments ("int" "nb-digits")) nil [3202 3881])
            ("pulse-color-values-to-hex" function (:arguments ("values")) nil [3883 4373])
            ("pulse-iterations" variable (:default-value 10) nil [4382 4492])
            ("pulse-delay" variable (:default-value 0.03) nil [4493 4598])
            ("pulse-lighten-highlight" function nil nil [4600 5726])
            ("pulse-reset-face" function (:arguments ("face")) nil [5728 6094])
            ("pulse-momentary-overlay" variable nil nil [6125 6194])
            ("pulse-momentary-timer" variable nil nil [6196 6261])
            ("pulse-momentary-highlight-overlay" function (:arguments ("o" "face")) nil [6263 7398])
            ("pulse-tick" function (:arguments ("stop-time")) nil [7400 7542])
            ("pulse-momentary-unhighlight" function nil nil [7544 8253])
            ("pulse-momentary-highlight-one-line" function (:arguments ("point" "face")) nil [8270 8768])
            ("pulse-momentary-highlight-region" function (:arguments ("start" "end" "face")) nil [8785 9141])
            ("pulse-command-advice-flag" variable nil nil [9184 9222])
            ("pulse-line-hook-function" function nil nil [9224 9461])
            ("pulse" package nil nil [9463 9479]))          
      :file "pulse.el"
      :pointmax 9504
      :fsize 9503
      :lastmodtime '(23525 29528 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
