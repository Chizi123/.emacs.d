;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3159 3178])
            ("define-error" code nil nil [3420 3489])
            ("gv-get" function (:arguments ("place" "do")) nil [3506 5369])
            ("gv-setter" function (:arguments ("name")) nil [5371 5807])
            ("gv-letplace" function (:arguments ("vars" "place" "body")) nil [5824 6475])
            ("gv-define-expander" function (:arguments ("name" "handler")) nil [6545 6929])
            ("gv--defun-declaration" function (:arguments ("symbol" "name" "args" "handler" "fix")) nil [6946 7778])
            ("or" code nil nil [7795 8026])
            ("or" code nil nil [8042 8195])
            ("gv--defsetter" function (:arguments ("name" "setter" "do" "args" "vars")) nil [8716 9399])
            ("gv-define-setter" function (:arguments ("name" "arglist" "body")) nil [9416 10251])
            ("gv-define-simple-setter" function (:arguments ("name" "setter" "fix-return")) nil [10268 11232])
            ("setf" function (:arguments ("args")) nil [11299 12101])
            ("put" code nil nil [13323 13375])
            ("put" code nil nil [13481 13680])
            ("gv-define-simple-setter" code nil nil [13721 13756])
            ("gv-define-simple-setter" code nil nil [13757 13793])
            ("gv-define-simple-setter" code nil nil [13794 13830])
            ("gv-define-setter" code nil nil [13881 13936])
            ("gv-define-setter" code nil nil [13937 13992])
            ("gv-define-setter" code nil nil [13993 14048])
            ("gv-define-setter" code nil nil [14049 14104])
            ("gv-define-setter" code nil nil [14105 14222])
            ("gv-define-simple-setter" code nil nil [14223 14256])
            ("gv-define-setter" code nil nil [14257 14328])
            ("put" code nil nil [14403 14565])
            ("gv-define-simple-setter" code nil nil [14566 14612])
            ("gv-define-simple-setter" code nil nil [14613 14660])
            ("gv-define-simple-setter" code nil nil [14661 14703])
            ("put" code nil nil [14705 15023])
            ("gv-define-simple-setter" code nil nil [15068 15119])
            ("gv-define-simple-setter" code nil nil [15120 15186])
            ("gv-define-simple-setter" code nil nil [15187 15254])
            ("gv-define-simple-setter" code nil nil [15255 15312])
            ("gv-define-simple-setter" code nil nil [15313 15369])
            ("gv-define-simple-setter" code nil nil [15370 15419])
            ("gv-define-setter" code nil nil [15420 15525])
            ("gv-define-setter" code nil nil [15526 15631])
            ("gv-define-simple-setter" code nil nil [15632 15691])
            ("gv-define-simple-setter" code nil nil [15692 15751])
            ("gv-define-simple-setter" code nil nil [15752 15815])
            ("gv-define-simple-setter" code nil nil [15816 15865])
            ("gv-define-simple-setter" code nil nil [15866 15929])
            ("gv-define-setter" code nil nil [15930 16046])
            ("gv-define-setter" code nil nil [16047 16177])
            ("gv-define-setter" code nil nil [16178 16265])
            ("gv-define-setter" code nil nil [16266 16343])
            ("gv-define-setter" code nil nil [16344 16417])
            ("gv-define-setter" code nil nil [16418 16491])
            ("gv-define-setter" code nil nil [16493 16640])
            ("gv-define-expander" code nil nil [16642 18103])
            ("put" code nil nil [18335 18553])
            ("let" code nil nil [18555 18887])
            ("put" code nil nil [18889 19925])
            ("put" code nil nil [19927 21600])
            ("gv-synthetic-place" function (:arguments ("getter" "setter")) nil [21602 21971])
            ("gv-delay-error" function (:arguments ("place")) nil [21973 22579])
            ("put" code nil nil [22618 22979])
            ("put" code nil nil [22981 23428])
            ("gv-ref" function (:arguments ("place")) nil [23461 24369])
            ("gv-deref" function (:arguments ("ref")) nil [24371 24574])
            ("gv-define-setter" code nil nil [24818 24878])
            ("gv" package nil nil [25240 25253]))          
      :file "gv.el"
      :pointmax 25274
      :fsize 25279
      :lastmodtime '(23525 29542 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "macroexp.el"
      :fsize 23127
      :lastmodtime '(23525 29542 0 0))
    (semanticdb-table "semanticdb-table"
      :file "cl-lib.el"
      :fsize 26211
      :lastmodtime '(23525 29539 0 0))
    (semanticdb-table "semanticdb-table"
      :file "easy-mmode.el"
      :fsize 26213
      :lastmodtime '(23525 29540 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [2468 2487])
            ("pcase--memoize" variable
               (:constant-flag t
                :default-value (make-hash-table :weakness (quote key) :test (quote eq)))
                nil [2933 3001])
            ("pcase--dontcare-upats" variable
               (:constant-flag t
                :default-value (quote (t _ pcase--dontcare)))
                nil [3139 3194])
            ("pcase--dontwarn-upats" variable (:default-value (quote (pcase--dontcare))) nil [3196 3245])
            ("def-edebug-spec" code nil nil [3247 3497])
            ("def-edebug-spec" code nil nil [3499 3630])
            ("put" code nil nil [3649 3712])
            ("declare-function" code nil nil [3742 3794])
            ("declare-function" code nil nil [3795 3850])
            ("pcase--edebug-match-macro" function (:arguments ("cursor")) nil [3852 4135])
            ("pcase" function (:arguments ("exp" "cases")) nil [4152 8041])
            ("declare-function" code nil nil [8043 8155])
            ("put" code nil nil [8276 8337])
            ("pcase--make-docstring" function nil nil [8338 9205])
            ("pcase-exhaustive" function (:arguments ("exp" "cases")) nil [9222 9679])
            ("pcase-lambda" function (:arguments ("lambda-list" "body")) nil [9696 10764])
            ("pcase--let*" function (:arguments ("bindings" "body")) nil [10766 11467])
            ("pcase-let*" function (:arguments ("bindings" "body")) nil [11484 12055])
            ("pcase-let" function (:arguments ("bindings" "body")) nil [12072 13104])
            ("pcase-dolist" function (:arguments ("spec" "body")) nil [13121 13521])
            ("pcase--trivial-upat-p" function (:arguments ("upat")) nil [13524 13623])
            ("pcase--expand" function (:arguments ("exp" "cases")) nil [13625 17393])
            ("pcase--macroexpand" function (:arguments ("pat")) nil [17395 18202])
            ("pcase-defmacro" function (:arguments ("name" "args" "body")) nil [18219 18925])
            ("pcase--match" function (:arguments ("val" "upat")) nil [18927 19276])
            ("pcase-codegen" function (:arguments ("code" "vars")) nil [19278 19640])
            ("pcase--small-branch-p" function (:arguments ("code")) nil [19642 19875])
            ("pcase--if" function (:arguments ("test" "then" "else")) nil [19983 20174])
            ("pcase--u" function (:arguments ("branches")) nil [21275 21884])
            ("pcase--and" function (:arguments ("match" "matches")) nil [21886 21965])
            ("pcase-mutually-exclusive-predicates" variable
               (:constant-flag t
                :default-value (quote ((symbolp . integerp) (symbolp . numberp) (symbolp . consp) (symbolp . arrayp) (symbolp . vectorp) (symbolp . stringp) (symbolp . byte-code-function-p) (symbolp . recordp) (integerp . consp) (integerp . arrayp) (integerp . vectorp) (integerp . stringp) (integerp . byte-code-function-p) (integerp . recordp) (numberp . consp) (numberp . arrayp) (numberp . vectorp) (numberp . stringp) (numberp . byte-code-function-p) (numberp . recordp) (consp . arrayp) (consp . atom) (consp . vectorp) (consp . stringp) (consp . byte-code-function-p) (consp . recordp) (arrayp . byte-code-function-p) (vectorp . byte-code-function-p) (vectorp . recordp) (stringp . vectorp) (stringp . recordp) (stringp . byte-code-function-p))))
                nil [21967 22854])
            ("pcase--mutually-exclusive-p" function (:arguments ("pred1" "pred2")) nil [22856 23074])
            ("pcase--split-match" function (:arguments ("sym" "splitter" "match")) nil [23076 24486])
            ("pcase--split-rest" function (:arguments ("sym" "splitter" "rest")) nil [24488 25018])
            ("pcase--split-equal" function (:arguments ("elem" "pat")) nil [25020 25658])
            ("pcase--split-member" function (:arguments ("elems" "pat")) nil [25660 26627])
            ("pcase--split-pred" function (:arguments ("vars" "upat" "pat")) nil [26629 28304])
            ("pcase--fgrep" function (:arguments ("vars" "sexp")) nil [28306 28607])
            ("pcase--self-quoting-p" function (:arguments ("upat")) nil [28609 28699])
            ("pcase--app-subst-match" function (:arguments ("match" "sym" "fun" "nsym")) nil [28701 29264])
            ("pcase--app-subst-rest" function (:arguments ("rest" "sym" "fun" "nsym")) nil [29266 29455])
            ("pcase--mark-used" function (:arguments ("sym")) nil [29457 29612])
            ("pcase--flip" function (:arguments ("fun" "arg1" "arg2")) nil [29614 29780])
            ("pcase--funcall" function (:arguments ("fun" "arg" "vars")) nil [29782 30745])
            ("pcase--eval" function (:arguments ("exp" "vars")) nil [30747 31090])
            ("pcase--u1" function (:arguments ("matches" "code" "vars" "rest")) nil [31190 38583])
            ("def-edebug-spec" code nil nil [38585 38818])
            ("pcase-defmacro" code nil nil [38820 39930])
            ("pcase" package nil nil [39932 39948]))          
      :file "pcase.el"
      :pointmax 39972
      :fsize 39971
      :lastmodtime '(23525 29543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1074 1091])
            ("cl-defstruct" code nil nil [1094 1846])
            ("timerp" function (:arguments ("object")) nil [1848 1953])
            ("timer--check" function (:arguments ("timer")) nil [1955 2060])
            ("timer--time-setter" function (:arguments ("timer" "time")) nil [2062 2496])
            ("timer--time" function (:arguments ("timer")) nil [2522 2708])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2710 3105])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [3107 3606])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3608 4613])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4615 4968])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [4970 5112])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [5114 5446])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [5448 6101])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [6103 6333])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [6336 7335])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7337 7853])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7855 8732])
            ("defalias" code nil nil [8734 8775])
            ("cancel-timer" function (:arguments ("timer")) nil [8777 8981])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8983 9405])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9407 9945])
            ("timer-event-last" variable nil nil [9994 10052])
            ("timer-event-last-1" variable nil nil [10053 10121])
            ("timer-event-last-2" variable nil nil [10122 10191])
            ("timer-max-repeats" variable (:default-value 10) nil [10193 10570])
            ("timer-until" function (:arguments ("timer" "time")) nil [10572 10829])
            ("timer-event-handler" function (:arguments ("timer")) nil [10831 13779])
            ("timeout-event-p" function (:arguments ("event")) nil [13842 13966])
            ("declare-function" code nil nil [13970 14021])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [14023 16444])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [16446 16932])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [16934 17313])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [17315 18466])
            ("with-timeout-timers" variable nil nil [18469 18572])
            ("with-timeout" function (:arguments ("list" "body")) nil [18574 20053])
            ("with-timeout-suspend" function nil nil [20055 20507])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [20509 20841])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [20843 21083])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-006) (cons "microsecond" 1e-006) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [21086 21602])
            ("timer-duration" function (:arguments ("string")) nil [21604 22306])
            ("internal-timer-start-idle" function nil nil [22308 22535])
            ("timer" package nil nil [22538 22554]))          
      :file "timer.el"
      :pointmax 22579
      :fsize 22578
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax '((close-paren 1091 . 1092) (symbol 1056 . 1073) (open-paren 1055 . 1056)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eldoc" customgroup (:user-visible-flag t) nil [2006 2124])
            ("eldoc-idle-delay" variable (:default-value 0.5) nil [2126 2427])
            ("eldoc-print-after-edit" variable nil nil [2429 2605])
            ("eldoc-minor-mode-string" variable (:default-value (purecopy " ElDoc")) nil [2622 2819])
            ("eldoc-argument-case" variable (:default-value (function identity)) nil [2821 3300])
            ("make-obsolete-variable" code nil nil [3301 3357])
            ("eldoc-echo-area-use-multiline-p" variable (:default-value (quote truncate-sym-name-if-fit)) nil [3359 4458])
            ("eldoc-highlight-function-argument" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [4460 4714])
            ("eldoc-message-commands-table-size" variable (:default-value 31) nil [4749 5126])
            ("eldoc-message-commands" variable (:default-value (make-vector eldoc-message-commands-table-size 0)) nil [5128 5774])
            ("eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [5795 6201])
            ("make-obsolete-variable" code nil nil [6202 6273])
            ("eldoc-last-message" variable nil nil [6275 6306])
            ("eldoc-timer" variable nil nil [6308 6356])
            ("eldoc-current-idle-delay" variable (:default-value eldoc-idle-delay) nil [6358 6527])
            ("eldoc-message-function" variable (:default-value (function eldoc-minibuffer-message)) nil [6529 6700])
            ("eldoc-edit-message-commands" function nil nil [6702 7172])
            ("define-minor-mode" code nil nil [7191 8574])
            ("define-globalized-minor-mode" code nil nil [8591 8740])
            ("turn-on-eldoc-mode" function nil nil [8757 8953])
            ("eldoc--supported-p" function nil nil [8955 9099])
            ("eldoc-schedule-timer" function nil nil [9103 9876])
            ("eldoc-mode-line-string" variable nil nil [9878 9913])
            ("put" code nil nil [9914 9967])
            ("eldoc-minibuffer-message" function (:arguments ("format-string" "args")) nil [9969 10966])
            ("eldoc-message" function (:arguments ("string")) nil [10968 11626])
            ("eldoc--message-command-p" function (:arguments ("command")) nil [11628 11824])
            ("eldoc-pre-command-refresh-echo-area" function nil nil [12247 12777])
            ("eldoc-display-message-p" function nil nil [12838 13292])
            ("eldoc-display-message-no-interference-p" function nil nil [13431 13612])
            ("eldoc-documentation-function" variable (:default-value (function ignore)) nil [13631 14600])
            ("eldoc-print-current-symbol-info" function nil nil [14602 15134])
            ("eldoc-docstring-format-sym-doc" function (:arguments ("prefix" "doc" "face")) nil [15299 16674])
            ("eldoc-add-command" function (:arguments ("cmds")) nil [17009 17246])
            ("eldoc-add-command-completions" function (:arguments ("names")) nil [17248 17462])
            ("eldoc-remove-command" function (:arguments ("cmds")) nil [17464 17703])
            ("eldoc-remove-command-completions" function (:arguments ("names")) nil [17705 17944])
            ("eldoc-add-command-completions" code nil nil [17975 18458])
            ("eldoc" package nil nil [18460 18476]))          
      :file "eldoc.el"
      :pointmax 18501
      :fsize 18500
      :lastmodtime '(23525 29541 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pcase" include nil nil [3550 3566])
            ("define-obsolete-variable-alias" code nil nil [3714 3811])
            ("generic-font-lock-keywords" variable nil nil [3812 3908])
            ("make-variable-buffer-local" code nil nil [3909 3965])
            ("generic-mode-list" variable nil nil [3982 4146])
            ("define-generic-mode" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "auto-mode-list" "function-list" "docstring")) nil [4299 6772])
            ("generic-mode-internal" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "function-list")) nil [6789 7717])
            ("generic-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [7734 8215])
            ("generic--normalize-comments" function (:arguments ("comment-list")) nil [8244 8699])
            ("generic-set-comment-syntax" function (:arguments ("st" "comment-list")) nil [8701 10463])
            ("generic-set-comment-vars" function (:arguments ("comment-list")) nil [10465 10963])
            ("generic-mode-set-comments" function (:arguments ("comment-list")) nil [10965 11284])
            ("generic-bracket-support" function nil nil [11286 11507])
            ("generic-make-keywords-list" function (:arguments ("keyword-list" "face" "prefix" "suffix")) nil [11524 12246])
            ("generic" package nil nil [12248 12266]))          
      :file "generic.el"
      :pointmax 12293
      :fsize 12292
      :lastmodtime '(23525 29542 0 0)
      :unmatched-syntax '((close-paren 3566 . 3567) (symbol 3532 . 3549) (open-paren 3531 . 3532)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1048 1065])
            ("macroexp" include nil nil [1066 1085])
            ("gv" include nil nil [1086 1099])
            ("cl-unload-function" function nil nil [3595 3753])
            ("dolist" code nil nil [3790 4503])
            ("dolist" code nil nil [4505 9132])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9134 9216])
            ("advice-add" code nil nil [9217 9269])
            ("advice-add" code nil nil [9270 9323])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9325 9413])
            ("advice-add" code nil nil [9414 9472])
            ("cl-closure-vars" variable nil nil [9632 9660])
            ("cl--function-convert-cache" variable nil nil [9661 9700])
            ("cl--function-convert" function (:arguments ("f")) nil [9702 11817])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [11819 13830])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [13832 14362])
            ("flet" function (:arguments ("bindings" "body")) nil [14441 16195])
            ("labels" function (:arguments ("bindings" "body")) nil [16197 17141])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17337 18227])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18229 19132])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19134 20752])
            ("make-obsolete" code nil nil [22666 22718])
            ("declare-function" code nil nil [22720 22772])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [22774 23596])
            ("define-obsolete-function-alias" code nil nil [23698 23766])
            ("define-obsolete-variable-alias" code nil nil [23767 23859])
            ("define-obsolete-function-alias" code nil nil [23860 23936])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24074 24223])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24225 24279])
            ("make-obsolete-variable" code nil nil [24280 24335])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24336 24390])
            ("make-obsolete-variable" code nil nil [24391 24446])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [24447 24501])
            ("make-obsolete-variable" code nil nil [24502 24557])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [24558 24612])
            ("make-obsolete-variable" code nil nil [24614 24669])
            ("define-obsolete-function-alias" code nil nil [24670 24736])
            ("define-obsolete-function-alias" code nil nil [24737 24801])
            ("define-obsolete-function-alias" code nil nil [24802 24862])
            ("define-obsolete-function-alias" code nil nil [24863 24923])
            ("define-obsolete-function-alias" code nil nil [24924 24984])
            ("define-obsolete-function-alias" code nil nil [24985 25045])
            ("define-obsolete-function-alias" code nil nil [25046 25106])
            ("define-obsolete-function-alias" code nil nil [25107 25183])
            ("define-obsolete-function-alias" code nil nil [25184 25254])
            ("define-obsolete-function-alias" code nil nil [25255 25333])
            ("define-obsolete-function-alias" code nil nil [25335 25431])
            ("define-obsolete-function-alias" code nil nil [25432 25508])
            ("define-obsolete-function-alias" code nil nil [25509 25582])
            ("define-obsolete-function-alias" code nil nil [25583 25649])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [25651 25806])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [25857 26791])
            ("cl" package nil nil [26793 26806])
            ("run-hooks" code nil nil [26808 26833]))          
      :file "cl.el"
      :pointmax 26855
      :fsize 26856
      :lastmodtime '(23525 29540 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-core" include nil nil [1922 1943])
            ("cl-generic" include nil nil [1944 1965])
            ("put" code nil nil [1967 2047])
            ("eieio--defalias" function (:arguments ("name" "body")) nil [2100 2618])
            ("defgeneric" function (:arguments ("method" "args" "doc-string")) nil [2635 3342])
            ("defmethod" function (:arguments ("method" "args")) nil [3359 5452])
            ("eieio--generic-static-symbol-specializers" function (:arguments ("tag" "_")) nil [5454 5849])
            ("cl-generic-define-generalizer" code nil nil [5851 6180])
            ("cl-generic-define-generalizer" code nil nil [6181 6877])
            ("cl-defmethod" code nil nil [6879 7054])
            ("eieio--defgeneric-init-form" function (:arguments ("method" "doc-string")) nil [7071 7443])
            ("eieio--defmethod" function (:arguments ("method" "kind" "argclass" "code")) nil [7460 10210])
            ("push" code nil nil [10291 10368])
            ("generic-p" function (:arguments ("fname")) nil [10370 10428])
            ("no-next-method" function (:arguments ("args")) nil [10430 10561])
            ("no-applicable-method" function (:arguments ("object" "method" "args")) nil [10563 10727])
            ("define-obsolete-function-alias" code nil nil [10729 10807])
            ("next-method-p" function nil nil [10808 11045])
            ("eieio-defmethod" function (:arguments ("method" "args")) nil [11062 11255])
            ("eieio-defgeneric" function (:arguments ("method" "doc-string")) nil [11272 11529])
            ("eieio-defclass" function (:arguments ("cname" "superclasses" "slots" "options")) nil [11546 11716])
            ("eieio-compat" package nil nil [11796 11819]))          
      :file "eieio-compat.el"
      :pointmax 11851
      :fsize 11850
      :lastmodtime '(23525 29540 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1200 1217])
            ("eieio-loaddefs" include nil nil [1218 1249])
            ("declare-function" code nil nil [1344 1383])
            ("declare-function" code nil nil [1384 1423])
            ("declare-function" code nil nil [1424 1467])
            ("declare-function" code nil nil [1468 1507])
            ("declare-function" code nil nil [1508 1552])
            ("eieio-hook" variable nil nil [1589 1684])
            ("eieio-error-unsupported-class-tags" variable nil nil [1686 1920])
            ("eieio-skip-typecheck" variable nil nil [1922 2181])
            ("eieio-optimize-primary-methods-flag" variable (:default-value t) nil [2183 2299])
            ("eieio-backward-compatibility" variable (:default-value t) nil [2301 2606])
            ("eieio-unbound" variable
               (:constant-flag t
                :default-value (if (and (boundp (quote eieio-unbound)) (symbolp eieio-unbound)) eieio-unbound (make-symbol "unbound")))
                nil [2608 2806])
            ("eieio-default-superclass" variable nil nil [2913 2950])
            ("progn" code nil nil [2952 4276])
            ("eieio--object-num-slots" variable
               (:constant-flag t
                :default-value 1)
                nil [4299 4335])
            ("eieio--object-class-tag" function (:arguments ("obj")) nil [4338 4393])
            ("eieio--object-class" function (:arguments ("obj")) nil [4395 4463])
            ("cl-macs" include nil nil [4515 4533])
            ("eieio--class-object" function (:arguments ("class")) nil [4557 4768])
            ("class-p" function (:arguments ("x")) nil [4770 4922])
            ("eieio--class-print-name" function (:arguments ("class")) nil [4924 5059])
            ("eieio-class-name" function (:arguments ("class")) nil [5061 5247])
            ("define-obsolete-function-alias" code nil nil [5248 5318])
            ("defalias" code nil nil [5320 5428])
            ("eieio--class-option-assoc" function (:arguments ("list" "option")) nil [5430 5588])
            ("eieio--class-option" function (:arguments ("class" "option")) nil [5590 5789])
            ("eieio-object-p" function (:arguments ("obj")) nil [5791 5941])
            ("define-obsolete-function-alias" code nil nil [5943 6008])
            ("class-abstract-p" function (:arguments ("class")) nil [6010 6181])
            ("eieio--class-method-invocation-order" function (:arguments ("class")) nil [6183 6402])
            ("eieio-defclass-autoload-map" variable (:default-value (make-hash-table)) nil [6430 6537])
            ("eieio-defclass-autoload" function (:arguments ("cname" "_superclasses" "filename" "doc")) nil [6612 8528])
            ("eieio-class-un-autoload" function (:arguments ("cname")) nil [8530 8676])
            ("cl-deftype" code nil nil [8686 8880])
            ("eieio-make-class-predicate" function (:arguments ("class")) nil [8883 9124])
            ("eieio-make-child-predicate" function (:arguments ("class")) nil [9126 9372])
            ("eieio--known-slot-names" variable nil nil [9374 9410])
            ("eieio-defclass-internal" function (:arguments ("cname" "superclasses" "slots" "options")) nil [9412 19960])
            ("eieio-eval-default-p" function (:arguments ("val")) nil [19962 20122])
            ("eieio--perform-slot-validation-for-default" function (:arguments ("slot" "skipnil")) nil [20124 20718])
            ("eieio--slot-override" function (:arguments ("old" "new" "skipnil")) nil [20720 23084])
            ("eieio--add-new-slot" function (:arguments ("newc" "slot" "init" "alloc" "defaultoverride" "skipnil")) nil [23086 25881])
            ("eieio-copy-parents-into-subclass" function (:arguments ("newc")) nil [25883 26958])
            ("eieio--perform-slot-validation" function (:arguments ("spec" "value")) nil [27169 27392])
            ("eieio--validate-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [27394 28098])
            ("eieio--validate-class-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [28100 28676])
            ("eieio-barf-if-slot-unbound" function (:arguments ("value" "instance" "slotname" "fn")) nil [28678 29116])
            ("eieio-oref" function (:arguments ("obj" "slot")) nil [29153 30676])
            ("eieio-oref-default" function (:arguments ("obj" "slot")) nil [30679 31687])
            ("eieio-default-eval-maybe" function (:arguments ("val")) nil [31689 32180])
            ("eieio-oset" function (:arguments ("obj" "slot" "value")) nil [32182 32952])
            ("eieio-oset-default" function (:arguments ("class" "slot" "value")) nil [32954 34914])
            ("eieio--slot-name-index" function (:arguments ("class" "slot")) nil [34957 35782])
            ("eieio--class-slot-name-index" function (:arguments ("class" "slot")) nil [35784 36371])
            ("eieio-set-defaults" function (:arguments ("obj" "set-all")) nil [36487 37017])
            ("eieio--initarg-to-attribute" function (:arguments ("class" "initarg")) nil [37019 37344])
            ("eieio--c3-candidate" function (:arguments ("class" "remaining-inputs")) nil [37381 37823])
            ("eieio--c3-merge-lists" function (:arguments ("reversed-partial-result" "remaining-inputs")) nil [37825 39159])
            ("eieio--class/struct-parents" function (:arguments ("class")) nil [39161 39278])
            ("eieio--class-precedence-c3" function (:arguments ("class")) nil [39280 39602])
            ("eieio--class-precedence-dfs" function (:arguments ("class")) nil [39648 40183])
            ("eieio--class-precedence-bfs" function (:arguments ("class")) nil [40231 40660])
            ("eieio--class-precedence-list" function (:arguments ("class")) nil [40694 41337])
            ("define-obsolete-function-alias" code nil nil [41338 41432])
            ("define-error" code nil nil [41481 41534])
            ("define-error" code nil nil [41535 41588])
            ("define-error" code nil nil [41589 41632])
            ("define-error" code nil nil [41633 41708])
            ("cl-generic" include nil nil [41740 41761])
            ("cl-generic-define-generalizer" code nil nil [41832 42277])
            ("cl-defmethod" code nil nil [42279 42737])
            ("eieio--generic-subclass-specializers" function (:arguments ("tag" "_")) nil [43131 43349])
            ("cl-generic-define-generalizer" code nil nil [43351 43534])
            ("cl-defmethod" code nil nil [43536 43763])
            ("eieio-core" package nil nil [43765 43786]))          
      :file "eieio-core.el"
      :pointmax 43816
      :fsize 43815
      :lastmodtime '(23525 29541 0 0)
      :unmatched-syntax '((close-paren 4335 . 4336) (symbol 4280 . 4296) (open-paren 4279 . 4280)))
    (semanticdb-table "semanticdb-table"
      :file "cl-generic.el"
      :fsize 57837
      :lastmodtime '(23525 29539 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1121 1571])
            ("function-put" code nil nil [1572 1614])
            ("function-put" code nil nil [1615 1663])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1784 2116])
            ("defalias" code nil nil [2118 3260])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3516 6460])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6462 7237])
            ("defalias" code nil nil [7239 9492])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9541 12124])
            ("defalias" code nil nil [12206 12392])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13403 13875])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13877 13955])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13957 14327])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [14329 15222])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [15224 16191])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [16193 17024])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [17027 18868])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [19198 19634])
            ("dont-compile" function (:arguments ("body")) nil [19636 19945])
            ("eval-when-compile" function (:arguments ("body")) nil [20188 20681])
            ("eval-and-compile" function (:arguments ("body")) nil [20683 21269])
            ("with-no-warnings" function (:arguments ("body")) nil [21271 21479])
            ("make-obsolete-variable" code nil nil [22774 22883])
            ("make-obsolete" code nil nil [22884 22975]))          
      :file "byte-run.el"
      :pointmax 23003
      :fsize 23002
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1798 1856])
            ("eieio-version" function (:user-visible-flag t) nil [1858 1966])
            ("eieio-core" include nil nil [1968 1989])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2021 11671])
            ("oref" function (:arguments ("obj" "slot")) nil [11709 11967])
            ("defalias" code nil nil [11969 12003])
            ("defalias" code nil nil [12004 12042])
            ("make-obsolete" code nil nil [12043 12121])
            ("oref-default" function (:arguments ("obj" "slot")) nil [12123 12463])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [12490 13709])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [13822 13995])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [13997 14247])
            ("pcase-defmacro" code nil nil [14249 15538])
            ("define-obsolete-function-alias" code nil nil [15647 15728])
            ("cl-defgeneric" code nil nil [15730 15859])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [15861 16163])
            ("define-obsolete-function-alias" code nil nil [16164 16236])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test (function eq) :weakness (quote key)))
                nil [16238 16312])
            ("cl-defmethod" code nil nil [16564 16695])
            ("define-obsolete-function-alias" code nil nil [16696 16784])
            ("cl-defmethod" code nil nil [16786 17000])
            ("define-obsolete-function-alias" code nil nil [17001 17096])
            ("eieio-object-class" function (:arguments ("obj")) nil [17098 17327])
            ("define-obsolete-function-alias" code nil nil [17328 17402])
            ("define-obsolete-function-alias" code nil nil [17424 17494])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [17496 17667])
            ("define-obsolete-function-alias" code nil nil [17668 17753])
            ("eieio-class-parents" function (:arguments ("class")) nil [17755 17980])
            ("define-obsolete-function-alias" code nil nil [17982 18058])
            ("eieio-class-children" function (:arguments ("class")) nil [18060 18283])
            ("define-obsolete-function-alias" code nil nil [18284 18364])
            ("define-obsolete-function-alias" code nil nil [18394 18484])
            ("define-obsolete-function-alias" code nil nil [18485 18574])
            ("eieio-class-parent" function (:arguments ("class")) nil [18576 18716])
            ("define-obsolete-function-alias" code nil nil [18717 18790])
            ("same-class-p" function (:arguments ("obj" "class")) nil [18792 19022])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19024 19263])
            ("defalias" code nil nil [19291 19336])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [19338 19950])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [19952 20027])
            ("eieio-class-slots" function (:arguments ("class")) nil [20029 20340])
            ("object-slots" function (:arguments ("obj")) nil [20342 20586])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [20588 20893])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [20920 21209])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [21211 21562])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [21607 22192])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [22194 22307])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [22309 22993])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [22995 23353])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [23414 23952])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [23954 24412])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [24414 24953])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [24955 25760])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [25762 26112])
            ("gv-define-simple-setter" code nil nil [26392 26439])
            ("eieio-default-superclass" type (:type "class") nil [26824 27091])
            ("setq" code nil nil [27093 27167])
            ("define-obsolete-function-alias" code nil nil [27169 27252])
            ("cl-defgeneric" code nil nil [27254 27549])
            ("define-obsolete-function-alias" code nil nil [27551 27619])
            ("cl-defmethod" code nil nil [27621 28613])
            ("cl-defgeneric" code nil nil [28661 28812])
            ("cl-defmethod" code nil nil [28814 29301])
            ("cl-defgeneric" code nil nil [29349 29457])
            ("cl-defmethod" code nil nil [29459 31015])
            ("cl-defgeneric" code nil nil [31017 31572])
            ("cl-defgeneric" code nil nil [31574 31706])
            ("cl-defmethod" code nil nil [31708 32514])
            ("cl-defgeneric" code nil nil [32516 32779])
            ("cl-defmethod" code nil nil [32781 33156])
            ("cl-defgeneric" code nil nil [33158 33334])
            ("cl-defgeneric" code nil nil [33336 33661])
            ("cl-defmethod" code nil nil [33663 34281])
            ("cl-defmethod" code nil nil [34284 34476])
            ("eieio-print-depth" variable nil nil [34478 34570])
            ("cl-defgeneric" code nil nil [34572 34741])
            ("cl-defmethod" code nil nil [34743 37068])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [37070 37836])
            ("eieio-list-prin1" function (:arguments ("list")) nil [37838 38355])
            ("eieio-change-class" function (:arguments ("_obj" "_class")) nil [38400 38613])
            ("define-obsolete-function-alias" code nil nil [38614 38687])
            ("add-hook" code nil nil [38907 38979])
            ("eieio" package nil nil [38981 38997]))          
      :file "eieio.el"
      :pointmax 39019
      :fsize 39018
      :lastmodtime '(23525 29541 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1327 1344])
            ("internal--thread-argument" function (:arguments ("first?" "forms")) nil [1348 1830])
            ("thread-first" function (:arguments ("forms")) nil [1832 2265])
            ("thread-last" function (:arguments ("forms")) nil [2267 2656])
            ("internal--listify" function (:arguments ("elt")) nil [2658 2916])
            ("internal--check-binding" function (:arguments ("binding")) nil [2918 3133])
            ("internal--build-binding-value-form" function (:arguments ("binding" "prev-var")) nil [3135 3338])
            ("internal--build-binding" function (:arguments ("binding" "prev-var")) nil [3340 3573])
            ("internal--build-bindings" function (:arguments ("bindings")) nil [3575 3897])
            ("if-let*" function (:arguments ("varlist" "then" "else")) nil [3899 4392])
            ("when-let*" function (:arguments ("varlist" "body")) nil [4394 4687])
            ("and-let*" function (:arguments ("varlist" "body")) nil [4689 5231])
            ("if-let" function (:arguments ("spec" "then" "else")) nil [5233 6395])
            ("when-let" function (:arguments ("spec" "body")) nil [6397 6786])
            ("hash-table-empty-p" function (:arguments ("hash-table")) nil [6788 6926])
            ("hash-table-keys" function (:arguments ("hash-table")) nil [6928 7070])
            ("hash-table-values" function (:arguments ("hash-table")) nil [7072 7220])
            ("string-empty-p" function (:arguments ("string")) nil [7222 7313])
            ("string-join" function (:arguments ("strings" "separator")) nil [7315 7447])
            ("define-obsolete-function-alias" code nil nil [7449 7513])
            ("string-trim-left" function (:arguments ("string" "regexp")) nil [7515 7785])
            ("string-trim-right" function (:arguments ("string" "regexp")) nil [7787 8060])
            ("string-trim" function (:arguments ("string" "trim-left" "trim-right")) nil [8062 8332])
            ("string-blank-p" function (:arguments ("string")) nil [8334 8474])
            ("string-remove-prefix" function (:arguments ("prefix" "string")) nil [8476 8656])
            ("string-remove-suffix" function (:arguments ("suffix" "string")) nil [8658 8860])
            ("subr-x" package nil nil [8862 8879]))          
      :file "subr-x.el"
      :pointmax 8905
      :fsize 8904
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax '((close-paren 1344 . 1345) (symbol 1309 . 1326) (open-paren 1308 . 1309)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lisp-mode" include nil nil [1212 1232])
            ("lisp-mnt" include nil nil [1269 1288])
            ("cl-lib" include nil nil [1308 1325])
            ("generated-autoload-file" variable nil nil [1328 1850])
            ("put" code nil nil [1866 1926])
            ("generated-autoload-load-name" variable nil nil [1928 2242])
            ("put" code nil nil [2258 2323])
            ("generate-autoload-cookie" variable (:default-value ";;;###autoload") nil [2466 2969])
            ("autoload-excludes" variable nil nil [2971 3072])
            ("generate-autoload-section-header" variable
               (:constant-flag t
                :default-value "
;;;### ")
                nil [3074 3209])
            ("generate-autoload-section-trailer" variable
               (:constant-flag t
                :default-value "
;;;***
")
                nil [3211 3343])
            ("generate-autoload-section-continuation" variable
               (:constant-flag t
                :default-value ";;;;;; ")
                nil [3345 3471])
            ("autoload--non-timestamp" variable
               (:constant-flag t
                :default-value (quote (0 0 0 0)))
                nil [3670 3770])
            ("autoload-timestamps" variable nil nil [3772 4730])
            ("autoload-modified-buffers" variable nil nil [4732 4766])
            ("make-autoload" function (:arguments ("form" "file" "expansion")) nil [4798 11261])
            ("autoload-find-generated-file" function nil nil [11471 12062])
            ("autoload-generated-file" function nil nil [12064 12635])
            ("autoload-read-section-header" function nil nil [12638 13344])
            ("autoload-print-form-outbuf" variable nil nil [13346 13444])
            ("autoload-print-form" function (:arguments ("form")) nil [13446 15134])
            ("autoload-rubric" function (:arguments ("file" "type" "feature")) nil [15136 16432])
            ("autoload-ensure-writable" variable nil nil [16434 16550])
            ("put" code nil nil [16654 16709])
            ("autoload-ensure-file-writeable" function (:arguments ("file")) nil [16711 17242])
            ("autoload-insert-section-header" function (:arguments ("outbuf" "autoloads" "load-name" "file" "time")) nil [17244 18315])
            ("autoload-find-file" function (:arguments ("file")) nil [18317 18925])
            ("no-update-autoloads" variable nil nil [18927 19035])
            ("autoload-file-load-name" function (:arguments ("file")) nil [19037 20363])
            ("generate-file-autoloads" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [20365 20873])
            ("autoload-compute-prefixes" variable (:default-value t) nil [20875 21194])
            ("put" code nil nil [21195 21244])
            ("autoload-def-prefixes-max-entries" variable
               (:constant-flag t
                :default-value 5)
                nil [21246 21600])
            ("autoload-def-prefixes-max-length" variable
               (:constant-flag t
                :default-value 12)
                nil [21602 21751])
            ("radix-tree" include nil nil [21753 21774])
            ("autoload--make-defs-autoload" function (:arguments ("defs" "file")) nil [21776 26249])
            ("autoload--setup-output" function (:arguments ("otherbuf" "outbuf" "absfile" "load-name")) nil [26251 26909])
            ("autoload--print-cookie-text" function (:arguments ("output-start" "load-name" "file")) nil [26911 28199])
            ("autoload-builtin-package-versions" variable nil nil [28201 28247])
            ("autoload-generate-file-autoloads" function (:arguments ("file" "outbuf" "outfile")) nil [28600 40594])
            ("autoload--save-buffer" function nil nil [40674 41507])
            ("autoload-save-buffers" function nil nil [41509 41665])
            ("update-file-autoloads" function
               (:user-visible-flag t
                :arguments ("file" "save-after" "outfile"))
                nil [41766 42996])
            ("autoload-find-destination" function (:arguments ("file" "load-name")) nil [42998 47206])
            ("autoload-remove-section" function (:arguments ("begin")) nil [47208 47352])
            ("update-directory-autoloads" function
               (:user-visible-flag t
                :arguments ("dirs"))
                nil [47369 53005])
            ("define-obsolete-function-alias" code nil nil [53007 53113])
            ("batch-update-autoloads" function nil nil [53130 54182])
            ("autoload" package nil nil [54184 54203]))          
      :file "autoload.el"
      :pointmax 54231
      :fsize 54230
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax '((close-paren 1325 . 1326) (symbol 1290 . 1307) (open-paren 1289 . 1290)))
    (semanticdb-table "semanticdb-table"
      :file "lisp-mode.el"
      :fsize 58398
      :lastmodtime '(23525 29542 0 0))
    (semanticdb-table "semanticdb-table"
      :file "lisp-mnt.el"
      :fsize 22292
      :lastmodtime '(23525 29542 0 0))
    (semanticdb-table "semanticdb-table"
      :file "radix-tree.el"
      :fsize 9319
      :lastmodtime '(23525 29543 0 0))
    (semanticdb-table "semanticdb-table"
      :file "seq.el"
      :fsize 19314
      :lastmodtime '(23525 29544 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("backquote" include nil nil [5172 5192])
            ("macroexp" include nil nil [5193 5212])
            ("cconv" include nil nil [5213 5229])
            ("cl-lib" include nil nil [5230 5247])
            ("or" code nil nil [5441 5489])
            ("or" code nil nil [5491 5584])
            ("bytecomp" customgroup (:user-visible-flag t) nil [5717 5785])
            ("emacs-lisp-file-regexp" variable (:default-value "\\.el\\'") nil [5787 6129])
            ("byte-compile-dest-file-function" variable nil nil [6131 6624])
            ("byte-compiler-base-file-name" function (:arguments ("filename")) nil [6777 7004])
            ("if" code nil nil [7081 8047])
            ("byte-compile-inline-expand" function (:prototype-flag t) nil [8106 8155])
            ("byte-optimize-form" function (:prototype-flag t) nil [8216 8257])
            ("byte-optimize-lapcode" function (:prototype-flag t) nil [8317 8361])
            ("byte-compile-unfold-lambda" function (:prototype-flag t) nil [8362 8411])
            ("byte-decompile-bytecode" function (:prototype-flag t) nil [8635 8681])
            ("byte-compile-verbose" variable (:default-value (and (not noninteractive) (> baud-rate search-slow-speed))) nil [8683 8883])
            ("byte-optimize" variable (:default-value t) nil [8885 9284])
            ("byte-compile-delete-errors" variable nil nil [9286 9509])
            ("byte-compile-cond-use-jump-table" variable (:default-value t) nil [9511 9691])
            ("byte-compile-dynamic" variable nil nil [9693 10191])
            ("byte-compile-disable-print-circle" variable nil nil [10266 10385])
            ("make-obsolete-variable" code nil nil [10386 10456])
            ("byte-compile-dynamic-docstrings" variable (:default-value t) nil [10544 11259])
            ("byte-compile-log-buffer" variable
               (:constant-flag t
                :default-value "*Compile-Log*")
                nil [11345 11439])
            ("byte-optimize-log" variable nil nil [11441 11891])
            ("byte-compile-error-on-warn" variable nil nil [11893 12033])
            ("byte-compile-warning-types" variable
               (:constant-flag t
                :default-value (quote (redefine callargs free-vars unresolved obsolete noruntime cl-functions interactive-only make-local mapcar constants suspicious lexical)))
                nil [12397 12656])
            ("byte-compile-warnings" variable (:default-value t) nil [12657 14213])
            ("put" code nil nil [14230 14392])
            ("byte-compile-warning-enabled-p" function (:arguments ("warning")) nil [14394 14705])
            ("byte-compile-disable-warning" function (:arguments ("warning")) nil [14722 15465])
            ("byte-compile-enable-warning" function (:arguments ("warning")) nil [15482 16183])
            ("byte-compile-interactive-only-functions" variable nil nil [16185 16301])
            ("make-obsolete-variable" code nil nil [16302 16434])
            ("byte-compile-not-obsolete-vars" variable nil nil [16436 16541])
            ("byte-compile-global-not-obsolete-vars" variable nil nil [16542 16661])
            ("byte-compile-not-obsolete-funcs" variable nil nil [16663 16769])
            ("byte-compile-generate-call-tree" variable nil nil [16771 17573])
            ("byte-compile-call-tree" variable nil nil [17575 17854])
            ("byte-compile-call-tree-sort" variable (:default-value (quote name)) nil [17856 18146])
            ("byte-compile-debug" variable nil nil [18148 18260])
            ("byte-compile-jump-tables" variable nil nil [18261 18364])
            ("byte-compile-constants" variable nil nil [18365 18471])
            ("byte-compile-variables" variable nil nil [18472 18578])
            ("byte-compile-bound-variables" variable nil nil [18579 18729])
            ("byte-compile-lexical-variables" variable nil nil [18730 18897])
            ("byte-compile-const-variables" variable nil nil [18898 19016])
            ("byte-compile-free-references" variable nil nil [19017 19054])
            ("byte-compile-free-assignments" variable nil nil [19055 19093])
            ("byte-compiler-error-flag" variable nil nil [19095 19128])
            ("byte-compile-recurse-toplevel" function (:arguments ("form" "non-toplevel-case")) nil [19130 19918])
            ("byte-compile-initial-macro-environment" variable
               (:constant-flag t
                :default-value (\` ((declare-function . byte-compile-macroexpand-declare-function) (eval-when-compile \, (lambda (&rest body) (let ((result nil)) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let ((byte-compile-unresolved-functions byte-compile-unresolved-functions) (byte-compile-new-defuns byte-compile-new-defuns)) (setf result (byte-compile-eval (byte-compile-top-level (byte-compile-preprocess form))))))) (list (quote quote) result)))) (eval-and-compile \, (lambda (&rest body) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let ((expanded (macroexpand-all form macroexpand-all-environment))) (eval expanded lexical-binding) expanded))))))))
                nil [19920 22311])
            ("byte-compile-macro-environment" variable (:default-value byte-compile-initial-macro-environment) nil [22313 22564])
            ("byte-compile-function-environment" variable nil nil [22566 23017])
            ("byte-compile-unresolved-functions" variable nil nil [23019 23304])
            ("byte-compile-noruntime-functions" variable nil nil [23306 23581])
            ("byte-compile-new-defuns" variable nil nil [23583 23823])
            ("byte-compile--lexical-environment" variable nil nil [23858 23941])
            ("byte-compile-tag-number" variable nil nil [23943 23977])
            ("byte-compile-output" variable nil nil [23978 24100])
            ("byte-compile-depth" variable nil nil [24101 24166])
            ("byte-compile-maxdepth" variable nil nil [24167 24235])
            ("byte-code-vector" variable nil nil [24305 24403])
            ("byte-stack+-info" variable nil nil [24405 24493])
            ("byte-defop" function (:arguments ("opcode" "stack-adjust" "opname" "docstring")) nil [24495 25522])
            ("byte-extrude-byte-code-vectors" function nil nil [25524 25856])
            ("byte-defop" code nil nil [25949 26005])
            ("byte-defop" code nil nil [26006 26062])
            ("byte-defop" code nil nil [26063 26119])
            ("byte-defop" code nil nil [26120 26177])
            ("byte-defop" code nil nil [26178 26232])
            ("byte-defop" code nil nil [26233 26297])
            ("byte-defop" code nil nil [26479 26514])
            ("byte-defop" code nil nil [26515 26549])
            ("byte-defop" code nil nil [26550 26592])
            ("byte-defop" code nil nil [26612 26640])
            ("byte-defop" code nil nil [26641 26673])
            ("byte-defop" code nil nil [26674 26704])
            ("byte-defop" code nil nil [26705 26737])
            ("byte-defop" code nil nil [26738 26768])
            ("byte-defop" code nil nil [26769 26796])
            ("byte-defop" code nil nil [26797 26826])
            ("byte-defop" code nil nil [26827 26855])
            ("byte-defop" code nil nil [26856 26884])
            ("byte-defop" code nil nil [26885 26913])
            ("byte-defop" code nil nil [26914 26943])
            ("byte-defop" code nil nil [26944 26974])
            ("byte-defop" code nil nil [26975 27005])
            ("byte-defop" code nil nil [27006 27036])
            ("byte-defop" code nil nil [27037 27067])
            ("byte-defop" code nil nil [27068 27099])
            ("byte-defop" code nil nil [27100 27129])
            ("byte-defop" code nil nil [27130 27159])
            ("byte-defop" code nil nil [27160 27197])
            ("byte-defop" code nil nil [27198 27238])
            ("byte-defop" code nil nil [27264 27292])
            ("byte-defop" code nil nil [27293 27322])
            ("byte-defop" code nil nil [27348 27376])
            ("byte-defop" code nil nil [27377 27411])
            ("byte-defop" code nil nil [27412 27444])
            ("byte-defop" code nil nil [27445 27477])
            ("byte-defop" code nil nil [27478 27510])
            ("byte-defop" code nil nil [27511 27540])
            ("byte-defop" code nil nil [27541 27570])
            ("byte-defop" code nil nil [27571 27603])
            ("byte-defop" code nil nil [27604 27632])
            ("byte-defop" code nil nil [27633 27661])
            ("byte-defop" code nil nil [27662 27690])
            ("byte-defop" code nil nil [27691 27719])
            ("byte-defop" code nil nil [27720 27749])
            ("byte-defop" code nil nil [27750 27781])
            ("byte-defop" code nil nil [27782 27811])
            ("byte-defop" code nil nil [27812 27840])
            ("byte-defop" code nil nil [27841 27869])
            ("byte-defop" code nil nil [27870 27899])
            ("byte-defop" code nil nil [27911 27941])
            ("byte-defop" code nil nil [27942 27976])
            ("byte-defop" code nil nil [27977 28008])
            ("byte-defop" code nil nil [28009 28043])
            ("byte-defop" code nil nil [28044 28078])
            ("byte-defop" code nil nil [28079 28114])
            ("byte-defop" code nil nil [28115 28154])
            ("byte-defop" code nil nil [28155 28194])
            ("byte-defop" code nil nil [28195 28234])
            ("byte-defop" code nil nil [28235 28269])
            ("byte-defop" code nil nil [28270 28315])
            ("byte-defop" code nil nil [28348 28377])
            ("byte-defop" code nil nil [28378 28407])
            ("byte-defop" code nil nil [28408 28437])
            ("byte-defop" code nil nil [28438 28467])
            ("byte-defop" code nil nil [28468 28507])
            ("byte-defop" code nil nil [28508 28543])
            ("byte-defop" code nil nil [28544 28639])
            ("byte-defop" code nil nil [28640 28682])
            ("byte-defop" code nil nil [28683 28730])
            ("byte-defop" code nil nil [28760 28797])
            ("byte-defop" code nil nil [28798 28835])
            ("byte-defop" code nil nil [28836 28879])
            ("byte-defop" code nil nil [28880 28924])
            ("byte-defop" code nil nil [28925 28962])
            ("byte-defop" code nil nil [28963 28999])
            ("byte-defop" code nil nil [29000 29041])
            ("byte-defop" code nil nil [29042 29080])
            ("byte-defop" code nil nil [29081 29122])
            ("byte-defop" code nil nil [29123 29153])
            ("byte-defop" code nil nil [29154 29190])
            ("byte-defop" code nil nil [29260 29368])
            ("byte-defop" code nil nil [29369 29423])
            ("byte-defop" code nil nil [29424 29496])
            ("byte-defop" code nil nil [29497 29577])
            ("byte-defop" code nil nil [29578 29704])
            ("byte-defop" code nil nil [29705 29839])
            ("byte-defop" code nil nil [29841 29920])
            ("byte-defop" code nil nil [29921 29987])
            ("byte-defop" code nil nil [29988 30056])
            ("byte-defop" code nil nil [30058 30156])
            ("byte-defop" code nil nil [30157 30272])
            ("byte-defop" code nil nil [30273 30387])
            ("byte-defop" code nil nil [30388 30490])
            ("byte-defop" code nil nil [30491 30608])
            ("byte-defop" code nil nil [30727 30766])
            ("byte-defop" code nil nil [30768 30826])
            ("byte-defop" code nil nil [30827 30884])
            ("byte-defop" code nil nil [31033 31068])
            ("byte-defop" code nil nil [31098 31133])
            ("byte-defop" code nil nil [31134 31174])
            ("byte-defop" code nil nil [31175 31209])
            ("byte-defop" code nil nil [31210 31241])
            ("byte-defop" code nil nil [31242 31275])
            ("byte-defop" code nil nil [31276 31308])
            ("byte-defop" code nil nil [31309 31341])
            ("byte-defop" code nil nil [31342 31372])
            ("byte-defop" code nil nil [31373 31404])
            ("byte-defop" code nil nil [31405 31433])
            ("byte-defop" code nil nil [31434 31465])
            ("byte-defop" code nil nil [31466 31495])
            ("byte-defop" code nil nil [31496 31529])
            ("byte-defop" code nil nil [31530 31561])
            ("byte-defop" code nil nil [31562 31593])
            ("byte-defop" code nil nil [31594 31627])
            ("byte-defop" code nil nil [31628 31661])
            ("byte-defop" code nil nil [31662 31692])
            ("byte-defop" code nil nil [31693 31721])
            ("byte-defop" code nil nil [31722 31750])
            ("byte-defop" code nil nil [31751 31783])
            ("byte-defop" code nil nil [31784 31817])
            ("byte-defop" code nil nil [31838 31869])
            ("byte-defop" code nil nil [31870 31903])
            ("byte-defop" code nil nil [31904 31937])
            ("byte-defop" code nil nil [31939 31973])
            ("byte-defop" code nil nil [32012 32047])
            ("byte-defop" code nil nil [32328 32362])
            ("byte-discardN-preserve-tos" variable
               (:constant-flag t
                :default-value byte-discardN)
                nil [32520 32571])
            ("byte-defop" code nil nil [32573 32707])
            ("byte-defop" code nil nil [32729 32792])
            ("byte-constant-limit" variable
               (:constant-flag t
                :default-value 64)
                nil [32841 32940])
            ("byte-goto-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop byte-pushcatch byte-pushconditioncase)))
                nil [32942 33192])
            ("byte-goto-always-pop-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto-if-nil byte-goto-if-not-nil)))
                nil [33194 33270])
            ("byte-extrude-byte-code-vectors" code nil nil [33272 33304])
            ("byte-compile-push-bytecodes" function (:arguments ("args")) nil [34883 35551])
            ("byte-compile-push-bytecode-const2" function (:arguments ("opcode" "const2" "bytes" "pc")) nil [35553 35834])
            ("byte-compile-lapcode" function (:arguments ("lap")) nil [35836 40865])
            ("byte-compile-cl-file-p" function (:arguments ("file")) nil [40898 41072])
            ("byte-compile-eval" function (:arguments ("form")) nil [41074 43031])
            ("byte-compile-eval-before-compile" function (:arguments ("form")) nil [43033 43589])
            ("byte-compile-current-form" variable nil nil [43620 43658])
            ("byte-compile-dest-file" variable nil nil [43659 43694])
            ("byte-compile-current-file" variable nil nil [43695 43733])
            ("byte-compile-current-group" variable nil nil [43734 43773])
            ("byte-compile-current-buffer" variable nil nil [43774 43814])
            ("byte-compile-log" function (:arguments ("format-string" "args")) nil [43855 44204])
            ("byte-compile-log-1" function (:arguments ("string")) nil [44245 44542])
            ("byte-compile-read-position" variable nil nil [44544 44637])
            ("byte-compile-last-position" variable nil nil [44638 44725])
            ("byte-compile-delete-first" function (:arguments ("elt" "list")) nil [44755 45020])
            ("byte-compile-set-symbol-position" function (:arguments ("sym" "allow-previous")) nil [46080 46746])
            ("byte-compile-last-warned-form" variable nil nil [46748 46790])
            ("byte-compile-last-logged-file" variable nil nil [46791 46833])
            ("byte-compile-root-dir" variable nil nil [46834 46942])
            ("byte-compile-abbreviate-file" function (:arguments ("file" "dir")) nil [47068 47254])
            ("byte-compile-warning-prefix" function (:arguments ("level" "entry")) nil [47365 49066])
            ("byte-compile-warning-series" function (:arguments ("_ignore")) nil [49220 49277])
            ("declare-function" code nil nil [49327 49384])
            ("byte-compile-log-file" function nil nil [49564 51029])
            ("byte-compile-log-warning-function" variable (:default-value (function byte-compile--log-warning-for-byte-compile)) nil [51031 51484])
            ("byte-compile-log-warning" function (:arguments ("string" "fill" "level")) nil [51486 51799])
            ("byte-compile--log-warning-for-byte-compile" function (:arguments ("string" "_position" "fill" "level")) nil [51801 52598])
            ("byte-compile-warn" function (:arguments ("format" "args")) nil [52600 52932])
            ("byte-compile-warn-obsolete" function (:arguments ("symbol")) nil [52934 53430])
            ("byte-compile-report-error" function (:arguments ("error-info" "fill")) nil [53432 53870])
            ("byte-compile-fdefinition" function (:arguments ("name" "macro-p")) nil [53903 55283])
            ("byte-compile-arglist-signature" function (:arguments ("arglist")) nil [55285 55913])
            ("byte-compile--function-signature" function (:arguments ("f")) nil [55915 56495])
            ("byte-compile-arglist-signatures-congruent-p" function (:arguments ("old" "new")) nil [56497 56795])
            ("byte-compile-arglist-signature-string" function (:arguments ("signature")) nil [56797 57046])
            ("byte-compile-function-warn" function (:arguments ("f" "nargs" "def")) nil [57048 57905])
            ("byte-compile-callargs-warn" function (:arguments ("form")) nil [57985 58811])
            ("byte-compile-format-warn" function (:arguments ("form")) nil [58813 59927])
            ("dolist" code nil nil [59929 60007])
            ("byte-compile-nogroup-warn" function (:arguments ("form")) nil [60075 61135])
            ("byte-compile-arglist-warn" function (:arguments ("name" "arglist" "macrop")) nil [61230 63601])
            ("byte-compile-cl-functions" variable nil nil [63603 63678])
            ("byte-compile-find-cl-functions" function nil nil [63801 64143])
            ("byte-compile-cl-warn" function (:arguments ("form")) nil [64145 65106])
            ("byte-compile-print-syms" function (:arguments ("str1" "strn" "syms")) nil [65108 65744])
            ("byte-compile-warn-about-unresolved-functions" function nil nil [65931 66880])
            ("byte-compile--outbuffer" variable nil nil [66975 67007])
            ("byte-compile-close-variables" function (:arguments ("body")) nil [67009 68310])
            ("displaying-byte-compile-warnings" function (:arguments ("body")) nil [68312 69711])
            ("byte-force-recompile" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [69729 70001])
            ("byte-recompile-directory" function
               (:user-visible-flag t
                :arguments ("directory" "arg" "force"))
                nil [70018 73604])
            ("no-byte-compile" variable nil nil [73606 73822])
            ("byte-recompile-file" function
               (:user-visible-flag t
                :arguments ("filename" "force" "arg" "load"))
                nil [73921 75940])
            ("byte-compile-level" variable nil nil [75942 76027])
            ("byte-compile-file" function
               (:user-visible-flag t
                :arguments ("filename" "load"))
                nil [76044 83751])
            ("compile-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83800 84853])
            ("byte-compile-from-buffer" function (:arguments ("inbuffer")) nil [84855 88523])
            ("byte-compile-fix-header" function (:arguments ("_filename")) nil [88525 90181])
            ("byte-compile-insert-header" function (:arguments ("_filename" "outbuffer")) nil [90183 92206])
            ("byte-compile-output-file-form" function (:arguments ("form")) nil [92208 93420])
            ("byte-compile--for-effect" variable nil nil [93422 93455])
            ("byte-compile-output-docform" function (:arguments ("preface" "name" "info" "form" "specindex" "quoted")) nil [93457 98012])
            ("byte-compile-keep-pending" function (:arguments ("form" "handler")) nil [98014 98554])
            ("byte-compile-flush-pending" function nil nil [98556 99033])
            ("byte-compile-force-lexical-warnings" variable nil nil [99035 99083])
            ("byte-compile-preprocess" function (:arguments ("form" "_for-effect")) nil [99085 99683])
            ("byte-compile-toplevel-file-form" function (:arguments ("top-level-form")) nil [99725 99994])
            ("byte-compile-file-form" function (:arguments ("form")) nil [100033 100376])
            ("put" code nil nil [100539 100606])
            ("byte-compile-file-form-autoload" function (:arguments ("form")) nil [100607 102371])
            ("put" code nil nil [102373 102438])
            ("put" code nil nil [102439 102504])
            ("byte-compile--declare-var" function (:arguments ("sym")) nil [102506 103043])
            ("byte-compile-file-form-defvar" function (:arguments ("form")) nil [103045 103553])
            ("put" code nil nil [103555 103645])
            ("put" code nil nil [103646 103723])
            ("byte-compile-file-form-defvar-function" function (:arguments ("form")) nil [103725 103919])
            ("put" code nil nil [103921 104023])
            ("byte-compile-file-form-custom-declare-variable" function (:arguments ("form")) nil [104024 104222])
            ("put" code nil nil [104224 104289])
            ("byte-compile-file-form-require" function (:arguments ("form")) nil [104290 105628])
            ("put" code nil nil [105630 105691])
            ("put" code nil nil [105692 105753])
            ("put" code nil nil [105754 105815])
            ("byte-compile-file-form-progn" function (:arguments ("form")) nil [105816 105960])
            ("put" code nil nil [105962 106050])
            ("byte-compile-file-form-with-no-warnings" function (:arguments ("form")) nil [106051 106229])
            ("put" code nil nil [106338 106397])
            ("byte-compile-file-form-eval" function (:arguments ("form")) nil [106398 106547])
            ("byte-compile-file-form-defmumble" function (:arguments ("name" "macro" "arglist" "body" "rest")) nil [106549 112269])
            ("byte-compile-output-as-comment" function (:arguments ("exp" "quoted")) nil [112271 113749])
            ("byte-compile--reify-function" function (:arguments ("fun")) nil [113751 114963])
            ("byte-compile" function (:arguments ("form")) nil [114981 116370])
            ("byte-compile-sexp" function (:arguments ("sexp")) nil [116372 116564])
            ("byte-compile-check-lambda-list" function (:arguments ("list")) nil [116566 117515])
            ("byte-compile-arglist-vars" function (:arguments ("arglist")) nil [117518 117675])
            ("byte-compile-make-lambda-lexenv" function (:arguments ("args")) nil [117677 118028])
            ("byte-compile-make-args-desc" function (:arguments ("arglist")) nil [118030 118729])
            ("byte-compile-lambda" function (:arguments ("fun" "add-lambda" "reserved-csts")) nil [118732 122764])
            ("byte-compile-reserved-constants" variable nil nil [122766 122808])
            ("byte-compile-constants-vector" function nil nil [122810 124375])
            ("byte-compile-top-level" function (:arguments ("form" "for-effect" "output-type" "lexenv" "reserved-csts")) nil [124502 126044])
            ("byte-compile-out-toplevel" function (:arguments ("for-effect" "output-type")) nil [126046 130423])
            ("byte-compile-top-level-body" function (:arguments ("body" "for-effect")) nil [130474 130683])
            ("byte-compile-macroexpand-declare-function" function (:arguments ("fn" "file" "args")) nil [130741 131725])
            ("byte-compile-form" function (:arguments ("form" "for-effect")) nil [132453 135716])
            ("byte-compile-normal-call" function (:arguments ("form")) nil [135718 136570])
            ("byte-compile-inline-lapcode" function (:arguments ("lap" "end-depth")) nil [136842 139853])
            ("byte-compile-unfold-bcf" function (:arguments ("form")) nil [139855 142318])
            ("byte-compile-check-variable" function (:arguments ("var" "access-type")) nil [142320 143261])
            ("byte-compile-dynamic-variable-op" function (:arguments ("base-op" "var")) nil [143263 143490])
            ("byte-compile-dynamic-variable-bind" function (:arguments ("var")) nil [143492 143761])
            ("byte-compile-variable-ref" function (:arguments ("var")) nil [143763 144454])
            ("byte-compile-variable-set" function (:arguments ("var")) nil [144456 145150])
            ("byte-compile-get-constant" function (:arguments ("const")) nil [145152 145576])
            ("byte-compile-constant" function (:arguments ("const")) nil [145670 145829])
            ("byte-compile-push-constant" function (:arguments ("const")) nil [145946 146128])
            ("byte-defop-compiler" function (:arguments ("function" "compile-handler")) nil [146227 147701])
            ("byte-defop-compiler-1" function (:arguments ("function" "compile-handler")) nil [147703 147838])
            ("put" code nil nil [147842 147887])
            ("put" code nil nil [147888 147931])
            ("put" code nil nil [147932 147975])
            ("put" code nil nil [147976 148019])
            ("put" code nil nil [148020 148063])
            ("put" code nil nil [148064 148107])
            ("put" code nil nil [148108 148155])
            ("put" code nil nil [148156 148203])
            ("put" code nil nil [148204 148251])
            ("put" code nil nil [148252 148299])
            ("put" code nil nil [148300 148347])
            ("byte-defop-compiler" code nil nil [148349 148379])
            ("byte-defop-compiler" code nil nil [148424 148458])
            ("byte-defop-compiler" code nil nil [148459 148493])
            ("byte-defop-compiler" code nil nil [148494 148532])
            ("byte-defop-compiler" code nil nil [148533 148571])
            ("byte-defop-compiler" code nil nil [148572 148610])
            ("byte-defop-compiler" code nil nil [148611 148640])
            ("byte-defop-compiler" code nil nil [148641 148670])
            ("byte-defop-compiler" code nil nil [148671 148700])
            ("byte-defop-compiler" code nil nil [148701 148730])
            ("byte-defop-compiler" code nil nil [148731 148769])
            ("byte-defop-compiler" code nil nil [148872 148902])
            ("byte-defop-compiler" code nil nil [148903 148943])
            ("byte-defop-compiler" code nil nil [148944 148984])
            ("byte-defop-compiler" code nil nil [148985 149025])
            ("byte-defop-compiler" code nil nil [149026 149058])
            ("byte-defop-compiler" code nil nil [149059 149089])
            ("byte-defop-compiler" code nil nil [149090 149122])
            ("byte-defop-compiler" code nil nil [149123 149153])
            ("byte-defop-compiler" code nil nil [149154 149182])
            ("byte-defop-compiler" code nil nil [149183 149222])
            ("byte-defop-compiler" code nil nil [149223 149251])
            ("byte-defop-compiler" code nil nil [149252 149280])
            ("byte-defop-compiler" code nil nil [149281 149312])
            ("byte-defop-compiler" code nil nil [149313 149349])
            ("byte-defop-compiler" code nil nil [149350 149389])
            ("byte-defop-compiler" code nil nil [149390 149428])
            ("byte-defop-compiler" code nil nil [149429 149467])
            ("byte-defop-compiler" code nil nil [149468 149502])
            ("byte-defop-compiler" code nil nil [149503 149540])
            ("byte-defop-compiler" code nil nil [149541 149576])
            ("byte-defop-compiler" code nil nil [149625 149663])
            ("byte-defop-compiler" code nil nil [149664 149699])
            ("byte-defop-compiler" code nil nil [149700 149733])
            ("byte-defop-compiler" code nil nil [149734 149767])
            ("byte-defop-compiler" code nil nil [149768 149801])
            ("byte-defop-compiler" code nil nil [149802 149834])
            ("byte-defop-compiler" code nil nil [149835 149868])
            ("byte-defop-compiler" code nil nil [149869 149917])
            ("byte-defop-compiler" code nil nil [149918 149966])
            ("byte-defop-compiler" code nil nil [149967 149996])
            ("byte-defop-compiler" code nil nil [149997 150026])
            ("byte-defop-compiler" code nil nil [150027 150056])
            ("byte-defop-compiler" code nil nil [150057 150086])
            ("byte-defop-compiler" code nil nil [150087 150115])
            ("byte-defop-compiler" code nil nil [150116 150160])
            ("byte-defop-compiler" code nil nil [150161 150201])
            ("byte-defop-compiler" code nil nil [150202 150242])
            ("byte-defop-compiler" code nil nil [150243 150284])
            ("byte-defop-compiler" code nil nil [150285 150326])
            ("byte-defop-compiler" code nil nil [150327 150355])
            ("byte-defop-compiler" code nil nil [150356 150384])
            ("byte-defop-compiler" code nil nil [150385 150421])
            ("byte-defop-compiler" code nil nil [150422 150477])
            ("byte-defop-compiler" code nil nil [150478 150514])
            ("byte-defop-compiler" code nil nil [150515 150554])
            ("byte-defop-compiler" code nil nil [150555 150588])
            ("byte-defop-compiler" code nil nil [150589 150620])
            ("byte-defop-compiler" code nil nil [150621 150654])
            ("byte-defop-compiler" code nil nil [150655 150687])
            ("byte-defop-compiler" code nil nil [150688 150720])
            ("byte-defop-compiler" code nil nil [150721 150772])
            ("byte-defop-compiler" code nil nil [150773 150824])
            ("byte-defop-compiler" code nil nil [150825 150855])
            ("byte-defop-compiler" code nil nil [150856 150887])
            ("byte-defop-compiler" code nil nil [150888 150916])
            ("byte-defop-compiler" code nil nil [150917 150948])
            ("byte-defop-compiler" code nil nil [150949 150978])
            ("byte-defop-compiler" code nil nil [150979 151023])
            ("byte-defop-compiler" code nil nil [151024 151068])
            ("byte-defop-compiler" code nil nil [151069 151100])
            ("byte-defop-compiler" code nil nil [151101 151132])
            ("byte-defop-compiler" code nil nil [151133 151173])
            ("byte-defop-compiler" code nil nil [151174 151211])
            ("byte-defop-compiler" code nil nil [151212 151252])
            ("byte-defop-compiler" code nil nil [151253 151289])
            ("byte-defop-compiler" code nil nil [151290 151319])
            ("byte-defop-compiler" code nil nil [151321 151372])
            ("byte-defop-compiler" code nil nil [151373 151424])
            ("byte-defop-compiler" code nil nil [151425 151485])
            ("byte-defop-compiler" code nil nil [151486 151546])
            ("byte-defop-compiler-1" code nil nil [151593 151646])
            ("byte-compile-subr-wrong-args" function (:arguments ("form" "n")) nil [151650 151975])
            ("byte-compile-no-args" function (:arguments ("form")) nil [151977 152149])
            ("byte-compile-one-arg" function (:arguments ("form")) nil [152151 152381])
            ("byte-compile-two-args" function (:arguments ("form")) nil [152383 152652])
            ("byte-compile-and-folded" function (:arguments ("form")) nil [152654 153153])
            ("byte-compile-three-args" function (:arguments ("form")) nil [153155 153463])
            ("byte-compile-zero-or-one-arg" function (:arguments ("form")) nil [153465 153697])
            ("byte-compile-one-or-two-args" function (:arguments ("form")) nil [153699 153933])
            ("byte-compile-two-or-three-args" function (:arguments ("form")) nil [153935 154175])
            ("byte-compile-noop" function (:arguments ("_form")) nil [154177 154240])
            ("byte-compile-discard" function (:arguments ("num" "preserve-tos")) nil [154242 155169])
            ("byte-compile-stack-ref" function (:arguments ("stack-pos")) nil [155171 155496])
            ("byte-compile-stack-set" function (:arguments ("stack-pos")) nil [155498 155689])
            ("byte-defop-compiler-1" code nil nil [155691 155762])
            ("byte-defop-compiler-1" code nil nil [155763 155838])
            ("byte-compile-make-closure" function (:arguments ("form")) nil [155840 156877])
            ("byte-compile-get-closed-var" function (:arguments ("form")) nil [156879 157101])
            ("byte-compile-associative" function (:arguments ("form")) nil [157421 158097])
            ("byte-defop-compiler" code nil nil [158138 158171])
            ("byte-defop-compiler" code nil nil [158172 158207])
            ("byte-defop-compiler" code nil nil [158208 158243])
            ("byte-defop-compiler" code nil nil [158244 158270])
            ("byte-defop-compiler" code nil nil [158271 158299])
            ("byte-defop-compiler" code nil nil [158300 158326])
            ("byte-defop-compiler" code nil nil [158327 158405])
            ("byte-defop-compiler" code nil nil [158406 158437])
            ("byte-defop-compiler" code nil nil [158438 158466])
            ("byte-defop-compiler-1" code nil nil [158467 158526])
            ("byte-defop-compiler-1" code nil nil [158527 158571])
            ("byte-defop-compiler" code nil nil [158572 158623])
            ("byte-defop-compiler" code nil nil [158624 158651])
            ("byte-compile-char-before" function (:arguments ("form")) nil [158717 159104])
            ("byte-compile-backward-char" function (:arguments ("form")) nil [159229 159600])
            ("byte-compile-backward-word" function (:arguments ("form")) nil [159602 159973])
            ("byte-compile-list" function (:arguments ("form")) nil [159975 160394])
            ("byte-compile-concat" function (:arguments ("form")) nil [160396 160894])
            ("byte-compile-minus" function (:arguments ("form")) nil [160896 161403])
            ("byte-compile-quo" function (:arguments ("form")) nil [161405 161751])
            ("byte-compile-nconc" function (:arguments ("form")) nil [161753 162160])
            ("byte-compile-fset" function (:arguments ("form")) nil [162162 162928])
            ("byte-compile-function-form" function (:arguments ("form")) nil [163123 163496])
            ("byte-compile-indent-to" function (:arguments ("form")) nil [163498 163807])
            ("byte-compile-insert" function (:arguments ("form")) nil [163809 164401])
            ("byte-defop-compiler-1" code nil nil [164405 164433])
            ("byte-defop-compiler-1" code nil nil [164434 164470])
            ("byte-defop-compiler-1" code nil nil [164471 164500])
            ("byte-compile-setq" function (:arguments ("form")) nil [164502 165322])
            ("byte-compile-setq-default" function (:arguments ("form")) nil [165324 166049])
            ("byte-defop-compiler-1" code nil nil [166051 166086])
            ("byte-compile-set-default" function (:arguments ("form")) nil [166087 166493])
            ("byte-compile-quote" function (:arguments ("form")) nil [166495 166571])
            ("byte-compile-body" function (:arguments ("body" "for-effect")) nil [166598 166780])
            ("byte-compile-body-do-effect" function (:arguments ("body")) nil [166782 166917])
            ("byte-compile-form-do-effect" function (:arguments ("form")) nil [166919 167054])
            ("byte-defop-compiler-1" code nil nil [167056 167105])
            ("byte-defop-compiler-1" code nil nil [167106 167135])
            ("byte-defop-compiler-1" code nil nil [167136 167165])
            ("byte-defop-compiler-1" code nil nil [167166 167195])
            ("byte-defop-compiler-1" code nil nil [167196 167222])
            ("byte-defop-compiler-1" code nil nil [167223 167251])
            ("byte-defop-compiler-1" code nil nil [167252 167279])
            ("byte-defop-compiler-1" code nil nil [167280 167306])
            ("byte-defop-compiler-1" code nil nil [167307 167336])
            ("byte-defop-compiler-1" code nil nil [167337 167368])
            ("byte-defop-compiler-1" code nil nil [167369 167396])
            ("byte-defop-compiler-1" code nil nil [167397 167442])
            ("byte-compile-progn" function (:arguments ("form")) nil [167444 167520])
            ("byte-compile-prog1" function (:arguments ("form")) nil [167522 167645])
            ("byte-compile-prog2" function (:arguments ("form")) nil [167647 167809])
            ("byte-compile-goto-if" function (:arguments ("cond" "discard" "tag")) nil [167811 168041])
            ("byte-compile-find-bound-condition" function (:arguments ("condition-param" "pred-list" "only-if-not-present")) nil [168170 168949])
            ("byte-compile-maybe-guarded" function (:arguments ("condition" "body")) nil [168951 170833])
            ("byte-compile-if" function (:arguments ("form")) nil [170835 171821])
            ("byte-compile-cond-vars" function (:arguments ("obj1" "obj2")) nil [171823 172182])
            ("byte-compile-cond-jump-table-info" function (:arguments ("clauses")) nil [172184 173847])
            ("byte-compile-cond-jump-table" function (:arguments ("clauses")) nil [173849 177226])
            ("byte-compile-cond" function (:arguments ("clauses")) nil [177228 178796])
            ("byte-compile-and" function (:arguments ("form")) nil [178798 178994])
            ("byte-compile-and-recursion" function (:arguments ("rest" "failtag")) nil [179113 179459])
            ("byte-compile-or" function (:arguments ("form")) nil [179461 179655])
            ("byte-compile-or-recursion" function (:arguments ("rest" "wintag")) nil [179773 180123])
            ("byte-compile-while" function (:arguments ("form")) nil [180125 180535])
            ("byte-compile-funcall" function (:arguments ("form")) nil [180537 180926])
            ("byte-compile-push-binding-init" function (:arguments ("clause")) nil [180946 181438])
            ("byte-compile-not-lexical-var-p" function (:arguments ("var")) nil [181440 181635])
            ("byte-compile-bind" function (:arguments ("var" "init-lexenv")) nil [181637 183376])
            ("byte-compile-unbind" function (:arguments ("clauses" "init-lexenv" "preserve-body-value")) nil [183378 184521])
            ("byte-compile-let" function (:arguments ("form")) nil [184523 185991])
            ("byte-defop-compiler-1" code nil nil [185996 186043])
            ("byte-defop-compiler-1" code nil nil [186044 186093])
            ("byte-defop-compiler-1" code nil nil [186094 186145])
            ("put" code nil nil [186147 186184])
            ("put" code nil nil [186185 186228])
            ("put" code nil nil [186229 186274])
            ("byte-compile-negated" function (:arguments ("form")) nil [186276 186382])
            ("byte-compile-negation-optimizer" function (:arguments ("form")) nil [186452 186818])
            ("byte-defop-compiler-1" code nil nil [186864 186893])
            ("byte-defop-compiler-1" code nil nil [186894 186932])
            ("byte-defop-compiler-1" code nil nil [186933 186971])
            ("byte-defop-compiler-1" code nil nil [186972 187010])
            ("byte-defop-compiler-1" code nil nil [187011 187054])
            ("byte-defop-compiler-1" code nil nil [187055 187095])
            ("byte-compile--use-old-handlers" variable nil nil [187253 187353])
            ("byte-compile-catch" function (:arguments ("form")) nil [187355 187953])
            ("byte-compile-unwind-protect" function (:arguments ("form")) nil [187955 188464])
            ("byte-compile-condition-case" function (:arguments ("form")) nil [188466 188636])
            ("byte-compile-condition-case--old" function (:arguments ("form")) nil [188638 191007])
            ("byte-compile-condition-case--new" function (:arguments ("form")) nil [191009 193370])
            ("byte-compile-save-excursion" function (:arguments ("form")) nil [193372 193755])
            ("byte-compile-save-restriction" function (:arguments ("form")) nil [193757 193926])
            ("byte-compile-save-current-buffer" function (:arguments ("form")) nil [193928 194103])
            ("byte-defop-compiler-1" code nil nil [194137 194167])
            ("byte-defop-compiler-1" code nil nil [194168 194220])
            ("byte-defop-compiler-1" code nil nil [194221 194253])
            ("byte-defop-compiler-1" code nil nil [194254 194309])
            ("byte-defop-compiler-1" code nil nil [194657 194703])
            ("byte-compile-make-obsolete-variable" function (:arguments ("form")) nil [194704 194903])
            ("byte-compile-tmp-var" variable
               (:constant-flag t
                :default-value (make-symbol "def-tmp-var"))
                nil [194905 194964])
            ("byte-compile-defvar" function (:arguments ("form")) nil [194966 196546])
            ("byte-compile-autoload" function (:arguments ("form")) nil [196548 197022])
            ("byte-compile-lambda-form" function (:arguments ("_form")) nil [197133 197272])
            ("put" code nil nil [197350 197417])
            ("byte-compile-file-form-defalias" function (:arguments ("form")) nil [197455 200338])
            ("byte-defop-compiler-1" code nil nil [200340 200405])
            ("byte-compile-no-warnings" function (:arguments ("form")) nil [200406 200526])
            ("byte-defop-compiler-1" code nil nil [200581 200694])
            ("byte-compile-make-variable-buffer-local" function (:arguments ("form")) nil [200695 200989])
            ("put" code nil nil [200990 201093])
            ("byte-compile-form-make-variable-buffer-local" function (:arguments ("form")) nil [201094 201214])
            ("put" code nil nil [201216 201287])
            ("put" code nil nil [201288 201365])
            ("byte-compile-define-symbol-prop" function (:arguments ("form")) nil [201366 202417])
            ("byte-compile-make-tag" function nil nil [202604 202710])
            ("byte-compile-out-tag" function (:arguments ("tag")) nil [202713 203125])
            ("byte-compile-goto" function (:arguments ("opcode" "tag")) nil [203127 203422])
            ("byte-compile-stack-adjustment" function (:arguments ("op" "operand")) nil [203424 204106])
            ("byte-compile-out" function (:arguments ("op" "operand")) nil [204108 204640])
            ("byte-compile-annotate-call-tree" function (:arguments ("form")) nil [204664 205459])
            ("display-call-tree" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [205584 210423])
            ("batch-byte-compile-if-not-done" function nil nil [210442 210668])
            ("batch-byte-compile" function (:arguments ("noforce")) nil [210748 212728])
            ("batch-byte-compile-file" function (:arguments ("file")) nil [212730 213712])
            ("byte-compile-refresh-preloaded" function nil nil [213714 215095])
            ("batch-byte-recompile-directory" function (:arguments ("arg")) nil [215112 216206])
            ("put" code nil nil [216235 216529])
            ("byte-compile" package nil nil [216531 216554])
            ("bytecomp" package nil nil [216555 216574])
            ("byte-code-meter" variable nil nil [216629 216653])
            ("byte-compile-report-ops" function nil nil [216654 217486])
            ("or" code nil nil [217668 218258])
            ("run-hooks" code nil nil [218267 218298]))          
      :file "bytecomp.el"
      :pointmax 218326
      :fsize 218325
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax '((close-paren 218264 . 218265) (symbol 218261 . 218264) (symbol 217648 . 217665) (open-paren 217647 . 217648)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("backquote" package nil nil [1392 1412])
            ("backquote-list*-function" function (:arguments ("first" "list")) nil [1465 2060])
            ("backquote-list*-macro" function (:arguments ("first" "list")) nil [2062 2724])
            ("defalias" code nil nil [2726 2794])
            ("backquote-backquote-symbol" variable
               (:constant-flag t
                :default-value (quote \`))
                nil [2925 3028])
            ("backquote-unquote-symbol" variable
               (:constant-flag t
                :default-value (quote \,))
                nil [3030 3129])
            ("backquote-splice-symbol" variable
               (:constant-flag t
                :default-value (quote \,@))
                nil [3131 3228])
            ("backquote" function (:arguments ("structure")) nil [3230 3806])
            ("defalias" code nil nil [3843 3886])
            ("backquote-delay-process" function (:arguments ("s" "level")) nil [4132 4459])
            ("backquote-process" function (:arguments ("s" "level")) nil [4461 8238])
            ("backquote-listify" function (:arguments ("list" "old-tail")) nil [8422 9197])
            ("put" code nil nil [9276 9364])
            ("put" code nil nil [9365 9394])
            ("put" code nil nil [9396 9471])
            ("put" code nil nil [9472 9502]))          
      :file "backquote.el"
      :pointmax 9531
      :fsize 9530
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "cconv.el"
      :fsize 33700
      :lastmodtime '(23525 29539 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-verbose" variable nil nil [914 940])
            ("pp" customgroup (:user-visible-flag t) nil [942 1025])
            ("pp-escape-newlines" variable (:default-value t) nil [1027 1150])
            ("pp-to-string" function (:arguments ("object")) nil [1167 1667])
            ("pp-buffer" function nil nil [1684 2463])
            ("pp" function (:arguments ("object" "stream")) nil [2480 2824])
            ("pp-display-expression" function (:arguments ("expression" "out-buffer-name")) nil [2826 4258])
            ("pp-eval-expression" function
               (:user-visible-flag t
                :arguments ("expression"))
                nil [4275 4626])
            ("pp-macroexpand-expression" function
               (:user-visible-flag t
                :arguments ("expression"))
                nil [4643 4884])
            ("pp-last-sexp" function nil nil [4886 5635])
            ("pp-eval-last-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5652 5965])
            ("pp-macroexpand-last-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5982 6309])
            ("pp" package nil nil [6311 6324]))          
      :file "pp.el"
      :pointmax 6374
      :fsize 6373
      :lastmodtime '(23525 29543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bytecomp" include nil nil [8026 8045])
            ("cl-lib" include nil nil [8065 8082])
            ("macroexp" include nil nil [8084 8103])
            ("subr-x" include nil nil [8123 8140])
            ("byte-compile-log-lap-1" function (:arguments ("format" "args")) nil [8143 9288])
            ("byte-compile-log-lap" function (:arguments ("format-string" "args")) nil [9290 9440])
            ("put" code nil nil [9493 9552])
            ("byte-optimize-inline-handler" function (:arguments ("form")) nil [9554 10063])
            ("byte-compile-inline-expand" function (:arguments ("form")) nil [10065 12369])
            ("byte-compile-unfold-lambda" function (:arguments ("form" "name")) nil [12393 15448])
            ("byte-optimize-form-code-walker" function (:arguments ("form" "for-effect")) nil [15494 23083])
            ("byte-optimize-all-constp" function (:arguments ("list")) nil [23085 23351])
            ("byte-optimize-form" function (:arguments ("form" "for-effect")) nil [23353 24407])
            ("byte-optimize-body" function (:arguments ("forms" "all-for-effect")) nil [24410 25037])
            ("byte-compile-trueconstp" function (:arguments ("form")) nil [25438 25918])
            ("byte-compile-nilconstp" function (:arguments ("form")) nil [25920 26379])
            ("byte-optimize-associative-math" function (:arguments ("form")) nil [26567 27046])
            ("byte-optimize-nonassociative-math" function (:arguments ("form")) nil [27291 27690])
            ("byte-optimize-approx-equal" function (:arguments ("x" "y")) nil [28079 28162])
            ("byte-optimize-delay-constants-math" function (:arguments ("form" "start" "fun")) nil [28601 29712])
            ("byte-compile-butlast" function (:arguments ("form")) nil [29714 29786])
            ("byte-optimize-plus" function (:arguments ("form")) nil [29788 30748])
            ("byte-optimize-minus" function (:arguments ("form")) nil [30750 31893])
            ("byte-optimize-multiply" function (:arguments ("form")) nil [31895 32587])
            ("byte-optimize-divide" function (:arguments ("form")) nil [32589 33483])
            ("byte-optimize-logmumble" function (:arguments ("form")) nil [33485 33857])
            ("byte-optimize-binary-predicate" function (:arguments ("form")) nil [33860 34250])
            ("byte-optimize-predicate" function (:arguments ("form")) nil [34252 34505])
            ("byte-optimize-identity" function (:arguments ("form")) nil [34507 34768])
            ("put" code nil nil [34770 34825])
            ("put" code nil nil [34827 34873])
            ("put" code nil nil [34874 34924])
            ("put" code nil nil [34925 34972])
            ("put" code nil nil [34973 35021])
            ("put" code nil nil [35022 35080])
            ("put" code nil nil [35081 35139])
            ("put" code nil nil [35141 35199])
            ("put" code nil nil [35200 35258])
            ("put" code nil nil [35259 35321])
            ("put" code nil nil [35322 35384])
            ("put" code nil nil [35385 35452])
            ("put" code nil nil [35454 35505])
            ("put" code nil nil [35506 35557])
            ("put" code nil nil [35558 35609])
            ("put" code nil nil [35610 35661])
            ("put" code nil nil [35662 35713])
            ("put" code nil nil [35714 35765])
            ("put" code nil nil [35766 35817])
            ("put" code nil nil [35818 35871])
            ("put" code nil nil [35872 35925])
            ("put" code nil nil [35926 35979])
            ("put" code nil nil [35980 36033])
            ("put" code nil nil [36034 36089])
            ("put" code nil nil [36090 36145])
            ("put" code nil nil [36146 36201])
            ("put" code nil nil [36202 36262])
            ("put" code nil nil [36264 36318])
            ("put" code nil nil [36319 36373])
            ("put" code nil nil [36374 36428])
            ("put" code nil nil [36429 36483])
            ("put" code nil nil [36485 36536])
            ("put" code nil nil [36537 36588])
            ("put" code nil nil [36589 36645])
            ("put" code nil nil [36646 36702])
            ("put" code nil nil [36953 37002])
            ("byte-optimize-quote" function (:arguments ("form")) nil [37003 37176])
            ("byte-optimize-and" function (:arguments ("form")) nil [37178 37682])
            ("byte-optimize-or" function (:arguments ("form")) nil [37684 38214])
            ("byte-optimize-cond" function (:arguments ("form")) nil [38216 39611])
            ("byte-optimize-if" function (:arguments ("form")) nil [39613 41141])
            ("byte-optimize-while" function (:arguments ("form")) nil [41143 41293])
            ("put" code nil nil [41295 41342])
            ("put" code nil nil [41343 41389])
            ("put" code nil nil [41390 41438])
            ("put" code nil nil [41439 41485])
            ("put" code nil nil [41486 41535])
            ("put" code nil nil [41593 41651])
            ("put" code nil nil [41652 41712])
            ("put" code nil nil [41713 41775])
            ("byte-optimize-funcall" function (:arguments ("form")) nil [41778 42029])
            ("byte-optimize-apply" function (:arguments ("form")) nil [42031 42696])
            ("put" code nil nil [42698 42751])
            ("put" code nil nil [42752 42803])
            ("put" code nil nil [42806 42852])
            ("put" code nil nil [42853 42900])
            ("byte-optimize-letX" function (:arguments ("form")) nil [42901 43294])
            ("put" code nil nil [43297 43342])
            ("byte-optimize-nth" function (:arguments ("form")) nil [43343 43578])
            ("put" code nil nil [43580 43631])
            ("byte-optimize-nthcdr" function (:arguments ("form")) nil [43632 43932])
            ("put" code nil nil [44104 44149])
            ("byte-optimize-set" function (:arguments ("form")) nil [44150 44544])
            ("let" code nil nil [45521 50115])
            ("let" code nil nil [50356 50537])
            ("byte-constref-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-constant2 byte-varref byte-varset byte-varbind)))
                nil [50540 50639])
            ("bytedecomp-op" variable nil nil [50699 50721])
            ("bytedecomp-ptr" variable nil nil [50722 50745])
            ("disassemble-offset" function (:arguments ("bytes")) nil [50879 52389])
            ("byte-compile-tag-number" variable nil nil [52391 52423])
            ("byte-decompile-bytecode" function (:arguments ("bytes" "constvec")) nil [52608 52856])
            ("byte-decompile-bytecode-1" function (:arguments ("bytes" "constvec" "make-spliceable")) nil [53262 57420])
            ("byte-tagref-ops" variable
               (:constant-flag t
                :default-value (cons (quote TAG) byte-goto-ops))
                nil [57448 57500])
            ("byte-conditional-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop)))
                nil [57502 57636])
            ("byte-after-unbind-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-dup byte-symbolp byte-consp byte-stringp byte-listp byte-numberp byte-integerp byte-eq byte-not byte-cons byte-list1 byte-list2 byte-interactive-p)))
                nil [57638 58258])
            ("byte-compile-side-effect-and-error-free-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-dup byte-symbolp byte-consp byte-stringp byte-listp byte-integerp byte-numberp byte-eq byte-equal byte-not byte-car-safe byte-cdr-safe byte-cons byte-list1 byte-list2 byte-point byte-point-max byte-point-min byte-following-char byte-preceding-char byte-current-column byte-eolp byte-eobp byte-bolp byte-bobp byte-current-buffer byte-stack-ref)))
                nil [58260 58701])
            ("byte-compile-side-effect-free-ops" variable
               (:constant-flag t
                :default-value (nconc (quote (byte-varref byte-nth byte-memq byte-car byte-cdr byte-length byte-aref byte-symbol-value byte-get byte-concat2 byte-concat3 byte-sub1 byte-add1 byte-eqlsign byte-gtr byte-lss byte-leq byte-geq byte-diff byte-negate byte-plus byte-max byte-min byte-mult byte-char-after byte-char-syntax byte-buffer-substring byte-string= byte-string< byte-nthcdr byte-elt byte-member byte-assq byte-quo byte-rem)) byte-compile-side-effect-and-error-free-ops))
                nil [58703 59230])
            ("byte-optimize-lapcode" function (:arguments ("lap" "_for-effect")) nil [60088 84929])
            ("byte-opt" package nil nil [84931 84950])
            ("or" code nil nil [85133 85753]))          
      :file "byte-opt.el"
      :pointmax 85787
      :fsize 85786
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax '((close-paren 85758 . 85759) (symbol 85755 . 85758) (symbol 85114 . 85131) (open-paren 85113 . 85114) (close-paren 8140 . 8141) (symbol 8105 . 8122) (open-paren 8104 . 8105) (close-paren 8082 . 8083) (symbol 8047 . 8064) (open-paren 8046 . 8047)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [1683 2714])
            ("put" code nil nil [2715 2762])
            ("defvar-local" code nil nil [2764 2875])
            ("defvar-local" code nil nil [2877 3759])
            ("put" code nil nil [3760 3808])
            ("defvar-local" code nil nil [3810 4028])
            ("put" code nil nil [4029 4077])
            ("tabulated-list-revert-hook" variable nil nil [4079 4234])
            ("defvar-local" code nil nil [4236 4538])
            ("tabulated-list--near-rows" variable nil nil [4540 4574])
            ("defvar-local" code nil nil [4576 4990])
            ("put" code nil nil [4991 5040])
            ("tabulated-list-get-id" function (:arguments ("pos")) nil [5042 5316])
            ("tabulated-list-get-entry" function (:arguments ("pos")) nil [5318 5599])
            ("tabulated-list-put-tag" function (:arguments ("tag" "advance")) nil [5601 6508])
            ("tabulated-list-mode-map" variable (:default-value (let ((map (copy-keymap special-mode-map))) (set-keymap-parent map button-buffer-map) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "S" (quote tabulated-list-sort)) (define-key map [follow-link] (quote mouse-face)) (define-key map [mouse-2] (quote mouse-select-window)) map)) nil [6510 6916])
            ("tabulated-list-sort-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (quote tabulated-list-col-sort)) (define-key map [header-line mouse-2] (quote tabulated-list-col-sort)) (define-key map [mouse-1] (quote tabulated-list-col-sort)) (define-key map [mouse-2] (quote tabulated-list-col-sort)) (define-key map "" (quote tabulated-list-sort)) (define-key map [follow-link] (quote mouse-face)) map)) nil [6918 7403])
            ("tabulated-list-glyphless-char-display" variable (:default-value (let ((table (make-char-table (quote glyphless-char-display) nil))) (set-char-table-parent table glyphless-char-display) (aset table 9650 (cons nil "^")) (aset table 9660 (cons nil "v")) table)) nil [7405 7792])
            ("tabulated-list--header-string" variable nil nil [7794 7944])
            ("tabulated-list--header-overlay" variable nil nil [7945 7988])
            ("tabulated-list-line-number-width" function nil nil [7990 8518])
            ("tabulated-list-init-header" function nil nil [8520 10748])
            ("tabulated-list-print-fake-header" function nil nil [10750 11368])
            ("tabulated-list-header-overlay-p" function (:arguments ("pos")) nil [11370 11607])
            ("tabulated-list-revert" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [11609 11984])
            ("tabulated-list--column-number" function (:arguments ("name")) nil [11986 12283])
            ("tabulated-list--get-sorter" function nil nil [12285 13264])
            ("tabulated-list--col-local-max-widths" function (:arguments ("col")) nil [13266 13653])
            ("tabulated-list-print" function (:arguments ("remember-pos" "update")) nil [13655 17414])
            ("tabulated-list-print-entry" function (:arguments ("id" "cols")) nil [17416 18397])
            ("tabulated-list-print-col" function (:arguments ("n" "col-desc" "x")) nil [18399 21174])
            ("tabulated-list-delete-entry" function nil nil [21176 21817])
            ("tabulated-list-set-col" function (:arguments ("col" "desc" "change-entry-data")) nil [21819 23677])
            ("tabulated-list-col-sort" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [23679 24086])
            ("tabulated-list-sort" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [24088 24550])
            ("tabulated-list--sort-by-column-name" function (:arguments ("name")) nil [24552 24945])
            ("tabulated-list--current-lnum-width" variable nil nil [24947 24994])
            ("tabulated-list-watch-line-number-width" function (:arguments ("_window")) nil [24995 25320])
            ("tabulated-list-window-scroll-function" function (:arguments ("window" "_start")) nil [25322 25712])
            ("define-derived-mode" code nil nil [25740 28317])
            ("put" code nil nil [28319 28366])
            ("tabulated-list" package nil nil [28368 28393]))          
      :file "tabulated-list.el"
      :pointmax 28427
      :fsize 28430
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("benchmark-elapse" function (:arguments ("forms")) nil [1262 1604])
            ("benchmark-run" function (:arguments ("repetitions" "forms")) nil [1621 2575])
            ("benchmark-run-compiled" function (:arguments ("repetitions" "forms")) nil [2592 3575])
            ("benchmark" function
               (:user-visible-flag t
                :arguments ("repetitions" "form"))
                nil [3592 4146])
            ("benchmark" package nil nil [4148 4168]))          
      :file "benchmark.el"
      :pointmax 4197
      :fsize 4196
      :lastmodtime '(23525 29538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1098 1347])
            ("make-variable-buffer-local" code nil nil [1348 1397])
            ("parens-require-spaces" variable (:default-value t) nil [1399 1588])
            ("forward-sexp-function" variable nil nil [1590 2091])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2093 2823])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2825 3183])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [3185 4010])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4012 4478])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4480 4909])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4911 5457])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [5459 6200])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [6202 9555])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9557 9908])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9910 10209])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10227 10725])
            ("beginning-of-defun-function" variable nil nil [10728 11297])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11299 12625])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12627 15980])
            ("beginning-of-defun--in-emptyish-line-p" function nil nil [15982 16541])
            ("beginning-of-defun-comments" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16543 17508])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [17510 17878])
            ("buffer-end" function (:arguments ("arg")) nil [17880 18111])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18113 20419])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20421 23165])
            ("narrow-to-defun-include-comments" variable nil nil [23167 23291])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("include-comments"))
                nil [23293 25385])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [25387 25932])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [25934 28203])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28205 28769])
            ("delete-pair" function (:user-visible-flag t) nil [28771 28951])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28953 29409])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [29411 30408])
            ("check-parens" function (:user-visible-flag t) nil [30410 31323])
            ("field-complete" function (:arguments ("table" "predicate")) nil [31326 31870])
            ("lisp-complete-symbol" function (:arguments ("_predicate")) nil [31872 32859]))          
      :file "lisp.el"
      :pointmax 32883
      :fsize 32882
      :lastmodtime '(23525 29542 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "eieio-loaddefs.el"
      :fsize 4056
      :lastmodtime '(23525 29541 0 0))
    (semanticdb-table "semanticdb-table"
      :file "cl-macs.el"
      :fsize 134299
      :lastmodtime '(23525 29539 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [6316 6333])
            ("cl-lib" include nil nil [6354 6371])
            ("epg" include nil nil [6392 6406])
            ("seq" include nil nil [6434 6448])
            ("tabulated-list" include nil nil [6450 6475])
            ("macroexp" include nil nil [6476 6495])
            ("url-handlers" include nil nil [6496 6519])
            ("package" customgroup (:user-visible-flag t) nil [6521 6621])
            ("package-enable-at-startup" variable (:default-value t) nil [6666 7091])
            ("package-load-list" variable (:default-value (quote (all))) nil [7093 8189])
            ("package-archives" variable (:default-value (\` (("gnu" \, (format "http%s://elpa.gnu.org/packages/" (if (gnutls-available-p) "s" "")))))) nil [8191 9047])
            ("package-menu-hide-low-priority" variable (:default-value (quote archive)) nil [9084 10066])
            ("package-archive-priorities" variable nil nil [10068 10688])
            ("package-pinned-packages" variable nil nil [10690 11801])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [11803 12105])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [12107 12698])
            ("declare-function" code nil nil [12700 12816])
            ("package-gnupghome-dir" variable (:default-value (expand-file-name "gnupg" package-user-dir)) nil [12818 13517])
            ("package-check-signature" variable (:default-value (if (and (require (quote epg-config)) (epg-find-configuration (quote OpenPGP))) (quote allow-unsigned))) nil [13519 14076])
            ("package-unsigned-archives" variable nil nil [14078 14262])
            ("package-selected-packages" variable nil nil [14264 14821])
            ("package-menu-async" variable (:default-value t) nil [14823 15097])
            ("package--default-summary" variable (:default-value "No description available.") nil [15492 15553])
            ("cl-defstruct" code nil nil [15555 18323])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [18325 18579])
            ("package-version-join" function (:arguments ("vlist")) nil [18599 19731])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [19733 19897])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [19899 20079])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [20081 20279])
            ("package-desc-priority" function (:arguments ("p")) nil [20281 20433])
            ("cl-defstruct" code nil nil [20509 20668])
            ("package--builtins" variable nil nil [20986 21332])
            ("put" code nil nil [21333 21381])
            ("package-alist" variable nil nil [21383 21816])
            ("put" code nil nil [21817 21861])
            ("package-activated-list" variable nil nil [21863 22018])
            ("put" code nil nil [22019 22072])
            ("package-process-define-package" function (:arguments ("exp")) nil [22269 23132])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [23134 23895])
            ("package-load-all-descriptors" function nil nil [23897 24650])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [24652 25300])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [25391 26120])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [26122 26729])
            ("package--autoloads-file-name" function (:arguments ("pkg-desc")) nil [26731 26991])
            ("package--activate-autoloads-and-load-path" function (:arguments ("pkg-desc")) nil [26993 27683])
            ("Info-directory-list" variable nil nil [27685 27713])
            ("declare-function" code nil nil [27714 27758])
            ("package--load-files-for-activation" function (:arguments ("pkg-desc" "reload")) nil [27760 28967])
            ("package-activate-1" function (:arguments ("pkg-desc" "reload" "deps")) nil [28969 30418])
            ("declare-function" code nil nil [30420 30478])
            ("package--list-loaded-files" function (:arguments ("dir")) nil [30480 32230])
            ("package-activate" function (:arguments ("package" "force")) nil [32426 33434])
            ("tar-parse-info" variable nil nil [33705 33728])
            ("declare-function" code nil nil [33729 33778])
            ("declare-function" code nil nil [33779 33839])
            ("declare-function" code nil nil [33840 33905])
            ("package-untar-buffer" function (:arguments ("dir")) nil [33907 34777])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [34779 34953])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [34954 37485])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [37487 38554])
            ("declare-function" code nil nil [38570 38645])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [38647 38909])
            ("generated-autoload-file" variable nil nil [38911 38943])
            ("autoload-timestamps" variable nil nil [38944 38972])
            ("version-control" variable nil nil [38973 38997])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [38999 39714])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [39716 40208])
            ("warning-minimum-level" variable nil nil [40227 40257])
            ("package--compile" function (:arguments ("pkg-desc")) nil [40258 40595])
            ("package-read-from-string" function (:arguments ("str")) nil [40640 41181])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [41183 41875])
            ("declare-function" code nil nil [41877 41925])
            ("declare-function" code nil nil [41926 41984])
            ("declare-function" code nil nil [41985 42045])
            ("declare-function" code nil nil [42046 42103])
            ("package-buffer-info" function nil nil [42105 43780])
            ("package--read-pkg-desc" function (:arguments ("kind")) nil [43782 44301])
            ("declare-function" code nil nil [44303 44363])
            ("declare-function" code nil nil [44364 44419])
            ("package-tar-file-info" function nil nil [44421 45140])
            ("package-dir-info" function nil nil [45142 46118])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [46243 46410])
            ("declare-function" code nil nil [46412 46470])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [46472 46753])
            ("declare-function" code nil nil [46755 47004])
            ("declare-function" code nil nil [47005 47140])
            ("declare-function" code nil nil [47141 47203])
            ("declare-function" code nil nil [47204 47263])
            ("declare-function" code nil nil [47264 47324])
            ("package--display-verify-error" function (:arguments ("context" "sig-file")) nil [47326 47971])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [47973 48923])
            ("cl-defmacro" code nil nil [48925 52390])
            ("define-error" code nil nil [52392 52450])
            ("package--check-signature-content" function (:arguments ("content" "string" "sig-file")) nil [52452 53875])
            ("package--check-signature" function (:arguments ("location" "file" "string" "async" "callback" "unwind")) nil [53877 55723])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [56115 56287])
            ("package-archive-contents" variable nil nil [56352 56548])
            ("put" code nil nil [56549 56604])
            ("package--compatibility-table" variable nil nil [56606 57157])
            ("package--build-compatibility-table" function nil nil [57159 57483])
            ("package--add-to-compatibility-table" function (:arguments ("pkg")) nil [57485 58097])
            ("cl-defstruct" code nil nil [58261 58474])
            ("package--append-to-alist" function (:arguments ("pkg-desc" "alist")) nil [58476 59430])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [59432 60626])
            ("package--read-archive-file" function (:arguments ("file")) nil [60628 61311])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [61313 61852])
            ("package--old-archive-priorities" variable nil nil [61854 62152])
            ("package-read-all-archive-contents" function nil nil [62154 62485])
            ("package--initialized" variable nil nil [62669 62702])
            ("package--init-file-ensured" variable nil nil [62704 62801])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [62818 64330])
            ("package--downloads-in-progress" variable nil nil [64507 64598])
            ("declare-function" code nil nil [64600 64665])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [64682 65223])
            ("package--post-download-archives-hook" variable nil nil [65225 65435])
            ("put" code nil nil [65436 65503])
            ("package--update-downloads-in-progress" function (:arguments ("entry")) nil [65505 66167])
            ("package--download-one-archive" function (:arguments ("archive" "file" "async")) nil [66169 67932])
            ("package--download-and-read-archives" function (:arguments ("async")) nil [67934 68633])
            ("package-refresh-contents" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [68650 69558])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [69817 74028])
            ("package--find-non-dependencies" function nil nil [74030 74592])
            ("package--save-selected-packages" function (:arguments ("value")) nil [74594 74986])
            ("package--user-selected-p" function (:arguments ("pkg")) nil [74988 75357])
            ("package--get-deps" function (:arguments ("pkg" "only")) nil [75359 76096])
            ("package--removable-packages" function nil nil [76098 76658])
            ("package--used-elsewhere-p" function (:arguments ("pkg-desc" "pkg-list" "all")) nil [76660 77534])
            ("package--sort-deps-in-alist" function (:arguments ("package" "only")) nil [77536 78195])
            ("package--sort-by-dependence" function (:arguments ("package-list")) nil [78197 79050])
            ("package-archive-base" function (:arguments ("desc")) nil [79444 79592])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [79594 81812])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [81814 82599])
            ("package-download-transaction" function (:arguments ("packages")) nil [82601 82944])
            ("package--ensure-init-file" function nil nil [82946 85606])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg" "dont-select"))
                nil [85623 87457])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [87459 87808])
            ("declare-function" code nil nil [87810 87868])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [87885 89384])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [89401 89848])
            ("package-install-selected-packages" function (:user-visible-flag t) nil [89865 91141])
            ("package--newest-p" function (:arguments ("pkg")) nil [91166 91335])
            ("package-delete" function
               (:user-visible-flag t
                :arguments ("pkg-desc" "force" "nosave"))
                nil [91337 94881])
            ("package-reinstall" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [94898 95394])
            ("package-autoremove" function (:user-visible-flag t) nil [95411 96414])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [96467 97906])
            ("package-help-section-name" variable
               (:default-value (quote ((t :inherit (bold font-lock-function-name-face))))
                :type "face")
                nil [97908 98078])
            ("package--print-help-section" function (:arguments ("name" "strings")) nil [98080 98527])
            ("declare-function" code nil nil [98529 98589])
            ("describe-package-1" function (:arguments ("pkg")) nil [98591 108074])
            ("package-install-button-action" function (:arguments ("button")) nil [108076 108406])
            ("package-delete-button-action" function (:arguments ("button")) nil [108408 108731])
            ("package-keyword-button-action" function (:arguments ("button")) nil [108733 108893])
            ("package-make-button" function (:arguments ("text" "props")) nil [108895 109364])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "H" (function package-menu-hide-package)) (define-key map "?" (quote package-menu-describe-package)) (define-key map "(" (function package-menu-toggle-hiding)) map)) nil [109393 110311])
            ("easy-menu-define" code nil nil [110313 112125])
            ("package-menu--new-package-list" variable nil nil [112127 112246])
            ("package-menu--transaction-status" variable nil nil [112248 112346])
            ("define-derived-mode" code nil nil [112348 113280])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [113282 113650])
            ("package-list-unversioned" variable nil nil [113652 113766])
            ("package-list-unsigned" variable nil nil [113768 113883])
            ("package--emacs-version-list" variable (:default-value (version-to-list emacs-version)) nil [113885 113985])
            ("package--incompatible-p" function (:arguments ("pkg" "shallow")) nil [113987 115157])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [115159 116821])
            ("package-menu--hide-packages" variable (:default-value t) nil [116823 117047])
            ("package-menu-toggle-hiding" function (:user-visible-flag t) nil [117049 117538])
            ("package--remove-hidden" function (:arguments ("pkg-list")) nil [117540 119516])
            ("package-hidden-regexps" variable nil nil [119518 119946])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [119948 122143])
            ("package-all-keywords" function nil nil [122145 122408])
            ("package--mapc" function (:arguments ("function" "packages")) nil [122410 123669])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [123671 124261])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [124263 125063])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [125065 125298])
            ("make-obsolete" code nil nil [125299 125395])
            ("package-name" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [125422 125537])
            ("package-description" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [125539 125680])
            ("package-status-built-in" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [125758 125912])
            ("package-status-external" variable
               (:default-value (quote ((t :inherit package-status-built-in)))
                :type "face")
                nil [125914 126069])
            ("package-status-available" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [126071 126212])
            ("package-status-new" variable
               (:default-value (quote ((t :inherit (bold package-status-available))))
                :type "face")
                nil [126214 126367])
            ("package-status-held" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [126369 126516])
            ("package-status-disabled" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [126518 126672])
            ("package-status-installed" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [126674 126830])
            ("package-status-dependency" variable
               (:default-value (quote ((t :inherit package-status-installed)))
                :type "face")
                nil [126832 126992])
            ("package-status-unsigned" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [126994 127148])
            ("package-status-incompat" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [127150 127287])
            ("package-status-avail-obso" variable
               (:default-value (quote ((t :inherit package-status-incompat)))
                :type "face")
                nil [127289 127448])
            ("package-menu--print-info-simple" function (:arguments ("pkg")) nil [127478 129176])
            ("package-menu--old-archive-contents" variable nil nil [129178 129283])
            ("package-menu-refresh" function (:user-visible-flag t) nil [129285 129757])
            ("package-menu-hide-package" function (:user-visible-flag t) nil [129759 130921])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [130923 131299])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [131327 131617])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [131619 131897])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [131899 132061])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [132063 132225])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [132227 132532])
            ("package--quick-help-keys" variable (:default-value (quote (("install," "delete," "unmark," ("execute" . 1)) ("next," "previous") ("Hide-package," "(-toggle-hidden") ("refresh-contents," "g-redisplay," "filter," "help")))) nil [132534 132744])
            ("package--prettify-quick-help-key" function (:arguments ("desc")) nil [132746 133247])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [133249 133527])
            ("define-obsolete-function-alias" code nil nil [133529 133631])
            ("package-menu-get-status" function nil nil [133633 133821])
            ("package-archive-priority" function (:arguments ("archive")) nil [133823 134084])
            ("package-desc-priority-version" function (:arguments ("pkg-desc")) nil [134086 134424])
            ("package-menu--find-upgrades" function nil nil [134426 135427])
            ("package-menu--mark-upgrades-pending" variable nil nil [135429 135539])
            ("package-menu--mark-upgrades-1" function nil nil [135541 136539])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [136541 137193])
            ("package-menu--list-to-prompt" function (:arguments ("packages")) nil [137195 137777])
            ("package-menu--prompt-transaction-p" function (:arguments ("delete" "install" "upgrade")) nil [137779 138369])
            ("package-menu--partition-transaction" function (:arguments ("install" "delete")) nil [138371 139074])
            ("package-menu--perform-transaction" function (:arguments ("install-list" "delete-list")) nil [139076 140176])
            ("package--update-selected-packages" function (:arguments ("add" "remove")) nil [140178 140846])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [140848 143193])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [143195 143429])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [143431 144530])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [144532 144735])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [144737 144886])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [144888 145034])
            ("package-menu--populate-new-package-list" function nil nil [145036 145500])
            ("package-menu--find-and-notify-upgrades" function nil nil [145502 145912])
            ("package-menu--post-refresh" function nil nil [145914 146642])
            ("package-menu--mark-or-notify-upgrades" function nil nil [146644 147265])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [147282 148546])
            ("defalias" code nil nil [148563 148611])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [148634 149305])
            ("package-menu-filter" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [149420 150046])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [150048 150274])
            ("package" package nil nil [150276 150294]))          
      :file "package.el"
      :pointmax 150321
      :fsize 150320
      :lastmodtime '(23525 29543 0 0)
      :unmatched-syntax '((close-paren 6406 . 6407) (symbol 6374 . 6391) (open-paren 6373 . 6374) (close-paren 6371 . 6372) (symbol 6336 . 6353) (open-paren 6335 . 6336) (close-paren 6333 . 6334) (symbol 6298 . 6315) (open-paren 6297 . 6298)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("float-pi" variable
               (:constant-flag t
                :default-value (* 4 (atan 1)))
                nil [1068 1136])
            ("pi" variable
               (:constant-flag t
                :default-value float-pi)
                nil [1137 1215])
            ("internal-make-var-non-special" code nil nil [1216 1251])
            ("float-e" variable
               (:constant-flag t
                :default-value (exp 1))
                nil [1253 1312])
            ("degrees-to-radians" variable
               (:constant-flag t
                :default-value (/ float-pi 180.0))
                nil [1314 1405])
            ("radians-to-degrees" variable
               (:constant-flag t
                :default-value (/ 180.0 float-pi))
                nil [1406 1496])
            ("degrees-to-radians" function (:arguments ("x")) nil [1567 1672])
            ("radians-to-degrees" function (:arguments ("x")) nil [1673 1778])
            ("lisp-float-type" package nil nil [1780 1806]))          
      :file "float-sup.el"
      :pointmax 1835
      :fsize 1834
      :lastmodtime '(23525 29542 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "easymenu.el"
      :fsize 28289
      :lastmodtime '(23525 29540 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1632 1649])
            ("find-function" customgroup (:user-visible-flag t) nil [1673 1807])
            ("find-function-space-re" variable
               (:constant-flag t
                :default-value "\\(?:\\s-\\|
\\|;.*
\\)+")
                nil [1809 1871])
            ("find-function-regexp" variable (:default-value (concat "^\\s-*(\\(def\\(ine-skeleton\\|ine-generic-mode\\|ine-derived-mode\\|ine\\(?:-global\\)?-minor-mode\\|ine-compilation-mode\\|un-cvs-mode\\|foo\\|\\(?:[^icfgv]\\|g[^r]\\)\\(\\w\\|\\s_\\)+\\*?\\)\\|easy-mmode-define-[a-z-]+\\|easy-menu-define\\|menu-bar-make-toggle\\)" find-function-space-re "\\('\\|(quote \\)?%s\\(\\s-\\|$\\|[()]\\)")) nil [1873 2801])
            ("find-variable-regexp" variable (:default-value (concat "^\\s-*(\\(def[^fumag]\\(\\w\\|\\s_\\)+\\*?\\|easy-mmode-def\\(map\\|syntax\\)\\|easy-menu-define\\)" find-function-space-re "%s\\(\\s-\\|$\\)")) nil [2803 3374])
            ("find-face-regexp" variable (:default-value (concat "^\\s-*(defface" find-function-space-re "%s\\(\\s-\\|$\\)")) nil [3376 3739])
            ("find-feature-regexp" variable (:default-value (concat ";;; Code:")) nil [3741 4274])
            ("find-alias-regexp" variable (:default-value "(defalias +'%s") nil [4276 4543])
            ("find-function-regexp-alist" variable (:default-value (quote ((nil . find-function-regexp) (defvar . find-variable-regexp) (defface . find-face-regexp) (feature . find-feature-regexp) (defalias . find-alias-regexp)))) nil [4545 5127])
            ("put" code nil nil [5128 5185])
            ("find-function-source-path" variable nil nil [5187 5427])
            ("find-function-recenter-line" variable (:default-value 1) nil [5429 5750])
            ("find-function-after-hook" variable nil nil [5752 5950])
            ("find-library-suffixes" function nil nil [5968 6153])
            ("find-library--load-name" function (:arguments ("library")) nil [6155 6475])
            ("find-library-name" function (:arguments ("library")) nil [6477 7580])
            ("find-library--from-load-history" function (:arguments ("library")) nil [7582 8189])
            ("find-function-C-source-directory" variable (:default-value (let ((dir (expand-file-name "src" source-directory))) (if (file-accessible-directory-p dir) dir))) nil [8191 8483])
            ("declare-function" code nil nil [8485 8542])
            ("find-function-advised-original" function (:arguments ("func")) nil [8544 8990])
            ("find-function-C-source" function (:arguments ("fun-or-var" "file" "type")) nil [8992 10265])
            ("find-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [10282 10591])
            ("read-library-name" function nil nil [10593 11959])
            ("find-library-other-window" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [11976 12338])
            ("find-library-other-frame" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [12355 12713])
            ("find-function-search-for-symbol" function (:arguments ("symbol" "type" "library")) nil [12730 15837])
            ("find-function-library" function (:arguments ("function" "lisp-only" "verbose")) nil [15839 17659])
            ("find-function-noselect" function (:arguments ("function" "lisp-only")) nil [17676 18536])
            ("find-function-read" function (:arguments ("type")) nil [18538 19764])
            ("find-function-do-it" function (:arguments ("symbol" "type" "switch-fn")) nil [19766 20652])
            ("find-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [20669 21265])
            ("find-function-other-window" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [21282 21539])
            ("find-function-other-frame" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [21556 21810])
            ("find-variable-noselect" function (:arguments ("variable" "file")) nil [21827 22575])
            ("find-variable" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [22592 23198])
            ("find-variable-other-window" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [23215 23484])
            ("find-variable-other-frame" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [23501 23767])
            ("find-definition-noselect" function (:arguments ("symbol" "type" "file")) nil [23784 24590])
            ("find-face-definition" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [24741 25363])
            ("find-function-on-key-do-it" function (:arguments ("key" "find-fn")) nil [25365 26445])
            ("find-function-on-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [26462 26702])
            ("find-function-on-key-other-window" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [26719 26962])
            ("find-function-on-key-other-frame" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [26979 27219])
            ("find-function-at-point" function (:user-visible-flag t) nil [27236 27446])
            ("find-variable-at-point" function (:user-visible-flag t) nil [27463 27693])
            ("find-function-setup-keys" function nil nil [27710 28321])
            ("find-func" package nil nil [28323 28343]))          
      :file "find-func.el"
      :pointmax 28372
      :fsize 28371
      :lastmodtime '(23525 29542 0 0)
      :unmatched-syntax '((close-paren 1649 . 1650) (symbol 1614 . 1631) (open-paren 1613 . 1614)))
    (semanticdb-table "semanticdb-table"
      :file "syntax.el"
      :fsize 28594
      :lastmodtime '(23525 29544 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [1937 1956])
            ("cl-lib" include nil nil [1957 1974])
            ("pcase" include nil nil [1994 2010])
            ("edebug" customgroup (:user-visible-flag t) nil [2026 2106])
            ("edebug-setup-hook" variable nil nil [2109 2464])
            ("edebug-all-defs" variable nil nil [2686 3190])
            ("edebug-all-forms" variable nil nil [3412 3683])
            ("edebug-eval-macro-args" variable nil nil [3685 4132])
            ("edebug-max-depth" variable (:default-value 150) nil [4134 4659])
            ("edebug-save-windows" variable (:default-value t) nil [4661 5101])
            ("edebug-save-displayed-buffer-points" variable nil nil [5103 5662])
            ("edebug-initial-mode" variable (:default-value (quote step)) nil [5664 6129])
            ("edebug-trace" variable nil nil [6131 6491])
            ("edebug-test-coverage" variable nil nil [6493 6882])
            ("edebug-continue-kbd-macro" variable nil nil [6884 7074])
            ("edebug-print-length" variable (:default-value 50) nil [7077 7225])
            ("edebug-print-level" variable (:default-value 50) nil [7226 7372])
            ("edebug-print-circle" variable (:default-value t) nil [7373 7520])
            ("edebug-unwrap-results" variable nil nil [7522 7912])
            ("edebug-on-error" variable (:default-value t) nil [7914 8545])
            ("edebug-on-quit" variable (:default-value t) nil [8547 8668])
            ("edebug-global-break-condition" variable nil nil [8670 8879])
            ("edebug-sit-for-seconds" variable (:default-value 1) nil [8881 9027])
            ("edebug-sit-on-break" variable (:default-value t) nil [9029 9192])
            ("get-edebug-spec" function (:arguments ("symbol")) nil [9220 9606])
            ("edebug-basic-spec" function (:arguments ("spec")) nil [9623 10045])
            ("edebug-lambda-list-keywordp" function (:arguments ("object")) nil [10062 10280])
            ("edebug-last-sexp" function nil nil [10283 10538])
            ("edebug-window-list" function nil nil [10540 10762])
            ("edebug-two-window-p" function nil nil [10778 10938])
            ("edebug-sort-alist" function (:arguments ("alist" "function")) nil [10940 11189])
            ("edebug-save-restriction" function (:arguments ("body")) nil [11205 11841])
            ("edebug-trace-buffer" variable
               (:constant-flag t
                :default-value "*edebug-trace*")
                nil [11856 11948])
            ("edebug-pop-to-buffer" function (:arguments ("buffer" "window")) nil [11950 13271])
            ("edebug-get-displayed-buffer-points" function nil nil [13293 13578])
            ("edebug-set-buffer-points" function (:arguments ("buffer-points")) nil [13581 13891])
            ("edebug-current-windows" function (:arguments ("which-windows")) nil [13893 14409])
            ("edebug-set-windows" function (:arguments ("window-info")) nil [14411 15231])
            ("edebug--read" function (:arguments ("orig" "stream")) nil [15393 16342])
            ("edebug-result" variable nil nil [16344 16366])
            ("edebug-eval-defun" function
               (:user-visible-flag t
                :arguments ("edebug-it"))
                nil [16525 19039])
            ("defalias" code nil nil [19057 19109])
            ("edebug-eval-top-level-form" function (:user-visible-flag t) nil [19126 20257])
            ("edebug-read-top-level-form" function nil nil [20260 20511])
            ("defalias" code nil nil [20550 20596])
            ("edebug-all-defs" function (:user-visible-flag t) nil [20613 20828])
            ("edebug-all-forms" function (:user-visible-flag t) nil [20846 21053])
            ("edebug-install-read-eval-functions" function nil nil [21056 21233])
            ("edebug-uninstall-read-eval-functions" function nil nil [21235 21401])
            ("defvar-local" code nil nil [21541 22060])
            ("cl-defstruct" code nil nil [22062 22361])
            ("edebug-set-form-data-entry" function (:arguments ("entry" "name" "begin" "end")) nil [22363 22598])
            ("edebug-get-form-data-entry" function (:arguments ("pnt" "end-point")) nil [22600 23310])
            ("edebug-form-data-symbol" function nil nil [23421 23695])
            ("edebug-make-top-form-data-entry" function (:arguments ("new-entry")) nil [23697 23897])
            ("edebug-clear-form-data-entry" function (:arguments ("entry")) nil [23899 24410])
            ("edebug-syntax-error" function (:arguments ("args")) nil [24434 24557])
            ("edebug-read-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-char-table (quote syntax-table) (quote symbol))) (i 0)) (while (< i 33) (aset table i (quote space)) (setq i (1+ i))) (aset table 40 (quote lparen)) (aset table 41 (quote rparen)) (aset table 39 (quote quote)) (aset table 96 (quote backquote)) (aset table 44 (quote comma)) (aset table 34 (quote string)) (aset table 63 (quote char)) (aset table 91 (quote lbracket)) (aset table 93 (quote rbracket)) (aset table 46 (quote dot)) (aset table 35 (quote hash)) table))
                nil [24560 25340])
            ("edebug-next-token-class" function nil nil [25342 25872])
            ("edebug-skip-whitespace" function nil nil [25875 26141])
            ("edebug-read-sexp" function nil nil [26196 27118])
            ("edebug-offsets" variable nil nil [27467 27494])
            ("edebug-offsets-stack" variable nil nil [27607 27640])
            ("edebug-current-offset" variable nil nil [27641 27675])
            ("edebug-read-objects" variable nil nil [27907 27939])
            ("edebug-read-dotted-list" variable nil nil [28108 28144])
            ("edebug-initialize-offsets" function nil nil [28146 28256])
            ("edebug-store-before-offset" function (:arguments ("point")) nil [28258 28835])
            ("edebug-store-after-offset" function (:arguments ("point")) nil [28837 29769])
            ("edebug-ignore-offset" function nil nil [29771 29911])
            ("edebug-storing-offsets" function (:arguments ("point" "body")) nil [29913 30131])
            ("edebug-read-alist" variable
               (:constant-flag t
                :default-value (quote ((symbol . edebug-read-symbol) (lparen . edebug-read-list) (string . edebug-read-string) (quote . edebug-read-quote) (backquote . edebug-read-backquote) (comma . edebug-read-comma) (lbracket . edebug-read-vector) (hash . edebug-read-special))))
                nil [30231 30538])
            ("edebug-read-storing-offsets" function (:arguments ("stream")) nil [30540 30833])
            ("defalias" code nil nil [30835 30872])
            ("defalias" code nil nil [30873 30910])
            ("edebug-read-quote" function (:arguments ("stream")) nil [30912 31098])
            ("edebug-read-backquote" function (:arguments ("stream")) nil [31100 31284])
            ("edebug-read-comma" function (:arguments ("stream")) nil [31286 31855])
            ("edebug-read-special" function (:arguments ("stream")) nil [31857 33707])
            ("edebug-read-list" function (:arguments ("stream")) nil [33709 34391])
            ("edebug-read-vector" function (:arguments ("stream")) nil [34393 34682])
            ("edebug-dotted-spec" variable nil nil [34753 34848])
            ("edebug-new-cursor" function (:arguments ("expressions" "offsets")) nil [34850 35060])
            ("edebug-set-cursor" function (:arguments ("cursor" "expressions" "offsets")) nil [35062 35268])
            ("edebug-copy-cursor" function (:arguments ("cursor")) nil [35270 35396])
            ("edebug-cursor-expressions" function (:arguments ("cursor")) nil [35398 35458])
            ("edebug-cursor-offsets" function (:arguments ("cursor")) nil [35459 35515])
            ("edebug-empty-cursor" function (:arguments ("cursor")) nil [35517 35645])
            ("edebug-top-element" function (:arguments ("cursor")) nil [35647 35773])
            ("edebug-top-element-required" function (:arguments ("cursor" "error")) nil [35775 36125])
            ("edebug-top-offset" function (:arguments ("cursor")) nil [36127 36251])
            ("edebug-move-cursor" function (:arguments ("cursor")) nil [36253 36729])
            ("edebug-before-offset" function (:arguments ("cursor")) nil [36732 37060])
            ("edebug-after-offset" function (:arguments ("cursor")) nil [37062 37266])
            ("edebug-top-window-data" variable nil nil [38461 38492])
            ("edebug-&optional" variable nil nil [38494 38519])
            ("edebug-&rest" variable nil nil [38520 38541])
            ("edebug-gate" variable nil nil [38542 38566])
            ("edebug-def-name" variable nil nil [38605 38633])
            ("edebug-old-def-name" variable nil nil [38681 38713])
            ("edebug-error-point" variable nil nil [38757 38788])
            ("edebug-best-error" variable nil nil [38789 38819])
            ("edebug-read-and-maybe-wrap-form" function nil nil [38822 39797])
            ("edebug-read-and-maybe-wrap-form1" function nil nil [39800 42094])
            ("edebug-def-args" variable nil nil [42097 42121])
            ("edebug-def-interactive" variable nil nil [42147 42178])
            ("edebug-inside-func" variable nil nil [42218 42245])
            ("edebug-interactive-p-name" function nil nil [42355 42564])
            ("edebug-wrap-def-body" function (:arguments ("forms")) nil [42567 42818])
            ("edebug-make-enter-wrapper" function (:arguments ("forms")) nil [42821 43549])
            ("edebug-form-begin-marker" variable nil nil [43552 43585])
            ("edebug-offset-index" variable nil nil [43625 43653])
            ("edebug-offset-list" variable nil nil [43689 43716])
            ("edebug-inc-offset" function (:arguments ("offset")) nil [43750 44073])
            ("edebug-make-before-and-after-form" function (:arguments ("before-index" "form" "after-index")) nil [44076 44445])
            ("edebug-make-after-form" function (:arguments ("form" "after-index")) nil [44447 44596])
            ("edebug-unwrap" function (:arguments ("sexp")) nil [44599 45099])
            ("edebug-unwrap*" function (:arguments ("sexp")) nil [45101 45391])
            ("edebug-defining-form" function (:arguments ("cursor" "form-begin" "form-end" "speclist")) nil [45394 45850])
            ("edebug-make-form-wrapper" function (:arguments ("cursor" "form-begin" "form-end" "speclist")) nil [45852 49169])
            ("edebug-clear-frequency-count" function (:arguments ("name")) nil [49172 49420])
            ("edebug-clear-coverage" function (:arguments ("name")) nil [49423 49657])
            ("edebug-form" function (:arguments ("cursor")) nil [49660 51162])
            ("edebug-forms" function (:arguments ("cursor")) nil [51165 51234])
            ("edebug-sexps" function (:arguments ("cursor")) nil [51235 51304])
            ("edebug-list-form-args" function (:arguments ("head" "cursor")) nil [51306 52119])
            ("edebug-list-form" function (:arguments ("cursor")) nil [52122 53692])
            ("edebug-matching-depth" variable nil nil [53718 53750])
            ("edebug-no-match" function (:arguments ("cursor" "args")) nil [53975 54479])
            ("edebug-match" function (:arguments ("cursor" "specs")) nil [54482 54802])
            ("edebug-match-one-spec" function (:arguments ("cursor" "spec")) nil [54805 55131])
            ("edebug-match-specs" function (:arguments ("cursor" "specs" "remainder-handler")) nil [55134 57643])
            ("dolist" code nil nil [57926 58750])
            ("edebug-match-symbol" function (:arguments ("cursor" "symbol")) nil [58752 59642])
            ("edebug-match-sexp" function (:arguments ("cursor")) nil [59645 59780])
            ("edebug-match-form" function (:arguments ("cursor")) nil [59782 59846])
            ("defalias" code nil nil [59848 59897])
            ("edebug-match-body" function (:arguments ("cursor")) nil [60003 60062])
            ("edebug-match-&optional" function (:arguments ("cursor" "specs")) nil [60064 60218])
            ("edebug-&optional-wrapper" function (:arguments ("cursor" "specs" "remainder-handler")) nil [60220 60748])
            ("edebug-&rest-wrapper" function (:arguments ("cursor" "specs" "remainder-handler")) nil [60751 60987])
            ("edebug-match-&rest" function (:arguments ("cursor" "specs")) nil [60989 61221])
            ("edebug-match-&or" function (:arguments ("cursor" "specs")) nil [61224 62098])
            ("edebug-match-&not" function (:arguments ("cursor" "specs")) nil [62101 62463])
            ("def-edebug-spec" code nil nil [62488 62528])
            ("edebug-match-&key" function (:arguments ("cursor" "specs")) nil [62530 62948])
            ("edebug-match-gate" function (:arguments ("_cursor")) nil [62951 63079])
            ("edebug-match-list" function (:arguments ("cursor" "specs")) nil [63082 64669])
            ("edebug-match-sublist" function (:arguments ("cursor" "specs")) nil [64672 65206])
            ("edebug-match-string" function (:arguments ("cursor" "spec")) nil [65209 65563])
            ("edebug-match-nil" function (:arguments ("cursor")) nil [65565 65751])
            ("edebug-match-function" function (:arguments ("_cursor")) nil [65754 65858])
            ("edebug-match-&define" function (:arguments ("cursor" "specs")) nil [65860 66387])
            ("edebug-match-lambda-expr" function (:arguments ("cursor")) nil [66389 67372])
            ("edebug-match-name" function (:arguments ("cursor")) nil [67375 67909])
            ("edebug-match-colon-name" function (:arguments ("_cursor" "spec")) nil [67911 68172])
            ("edebug-match-cl-generic-method-args" function (:arguments ("cursor")) nil [68174 68558])
            ("edebug-match-arg" function (:arguments ("cursor")) nil [68560 68980])
            ("edebug-match-def-form" function (:arguments ("cursor")) nil [68982 69364])
            ("edebug-match-def-body" function (:arguments ("cursor")) nil [69366 69858])
            ("edebug-spec-p" function (:arguments ("object")) nil [69997 70166])
            ("def-edebug-spec" code nil nil [70168 70339])
            ("def-edebug-spec" code nil nil [70341 70480])
            ("def-edebug-spec" code nil nil [70482 70852])
            ("def-edebug-spec" code nil nil [70968 70996])
            ("def-edebug-spec" code nil nil [71030 71063])
            ("def-edebug-spec" code nil nil [71064 71121])
            ("def-edebug-spec" code nil nil [71123 71289])
            ("def-edebug-spec" code nil nil [71290 71503])
            ("def-edebug-spec" code nil nil [71505 71542])
            ("def-edebug-spec" code nil nil [71578 71702])
            ("def-edebug-spec" code nil nil [71704 71814])
            ("def-edebug-spec" code nil nil [71816 71880])
            ("def-edebug-spec" code nil nil [72022 72234])
            ("def-edebug-spec" code nil nil [72329 72381])
            ("def-edebug-spec" code nil nil [72452 72515])
            ("def-edebug-spec" code nil nil [72824 72902])
            ("def-edebug-spec" code nil nil [72904 72930])
            ("def-edebug-spec" code nil nil [72932 72975])
            ("def-edebug-spec" code nil nil [72976 73011])
            ("def-edebug-spec" code nil nil [73013 73056])
            ("def-edebug-spec" code nil nil [73058 73156])
            ("def-edebug-spec" code nil nil [73159 73196])
            ("def-edebug-spec" code nil nil [73282 73994])
            ("defalias" code nil nil [74618 74643])
            ("def-edebug-spec" code nil nil [74681 74719])
            ("def-edebug-spec" code nil nil [74796 74851])
            ("def-edebug-spec" code nil nil [74852 74958])
            ("def-edebug-spec" code nil nil [74983 75023])
            ("def-edebug-spec" code nil nil [75024 75063])
            ("edebug-active" variable nil nil [75109 75135])
            ("edebug-stack" variable nil nil [75171 75196])
            ("edebug-stack-depth" variable (:default-value -1) nil [75284 75314])
            ("edebug-offset-indices" variable nil nil [75352 75386])
            ("edebug-entered" variable nil nil [75538 75690])
            ("edebug-debugger" variable
               (:constant-flag t
                :default-value (quote edebug))
                nil [75720 75880])
            ("edebug-function" variable nil nil [75951 75975])
            ("edebug-data" variable nil nil [76021 76041])
            ("edebug-def-mark" variable nil nil [76077 76101])
            ("edebug-freq-count" variable nil nil [76132 76158])
            ("edebug-coverage" variable nil nil [76193 76217])
            ("edebug-buffer" variable nil nil [76274 76296])
            ("edebug-execution-mode" variable (:default-value (quote step)) nil [76333 76369])
            ("edebug-next-execution-mode" variable nil nil [76405 76444])
            ("edebug-outside-debug-on-error" variable nil nil [76482 76520])
            ("edebug-outside-debug-on-quit" variable nil nil [76559 76596])
            ("edebug-signal" function (:arguments ("signal-name" "signal-data")) nil [76657 77730])
            ("edebug-enter" function (:arguments ("function" "args" "body")) nil [77753 80259])
            ("edebug-var-status" function (:arguments ("var")) nil [80261 80733])
            ("edebug-restore-status" function (:arguments ("var" "status")) nil [80735 81140])
            ("edebug--enter-trace" function (:arguments ("function" "args" "body")) nil [81142 81470])
            ("def-edebug-spec" code nil nil [81472 81516])
            ("edebug-tracing" function (:arguments ("msg" "body")) nil [81518 81900])
            ("edebug-print-trace-before" function (:arguments ("msg")) nil [81902 82140])
            ("edebug-print-trace-after" function (:arguments ("msg")) nil [82142 82378])
            ("edebug-slow-before" function (:arguments ("before-index")) nil [82382 82925])
            ("edebug-fast-before" function (:arguments ("_before-index")) nil [82927 82989])
            ("edebug-slow-after" function (:arguments ("_before-index" "after-index" "value")) nil [82991 83650])
            ("edebug-fast-after" function (:arguments ("_before-index" "_after-index" "value")) nil [83652 83758])
            ("edebug-run-slow" function nil nil [83760 83880])
            ("edebug-run-fast" function nil nil [83908 84028])
            ("edebug-run-slow" code nil nil [84030 84047])
            ("edebug--update-coverage" function (:arguments ("after-index" "value")) nil [84050 84410])
            ("edebug-breakpoints" variable nil nil [84456 84483])
            ("edebug-break-data" variable nil nil [84484 84510])
            ("edebug-break" variable nil nil [84546 84567])
            ("edebug-global-break" variable nil nil [84596 84624])
            ("edebug-break-condition" variable nil nil [84660 84691])
            ("edebug-break-result" variable nil nil [84734 84766])
            ("edebug-global-break-result" variable nil nil [84767 84806])
            ("edebug-debugger" function (:arguments ("offset-index" "arg-mode" "value")) nil [84809 86393])
            ("edebug-point" variable nil nil [86765 86786])
            ("edebug-outside-buffer" variable nil nil [86816 86846])
            ("edebug-outside-point" variable nil nil [86886 86915])
            ("edebug-outside-mark" variable nil nil [86946 86974])
            ("edebug-window-data" variable nil nil [87004 87031])
            ("edebug-outside-windows" variable nil nil [87080 87111])
            ("edebug-eval-buffer" variable nil nil [87143 87170])
            ("edebug-outside-d-c-i-n-s-w" variable nil nil [87198 87233])
            ("edebug-eval-list" variable nil nil [87284 87313])
            ("edebug-previous-result" variable nil nil [87351 87386])
            ("defalias" code nil nil [87462 87505])
            ("edebug--display" function (:arguments ("value" "offset-index" "arg-mode")) nil [87507 87784])
            ("edebug--display-1" function (:arguments ("value" "offset-index" "arg-mode")) nil [87786 98237])
            ("edebug-number-of-recursions" variable nil nil [98240 98278])
            ("edebug-recursion-depth" variable nil nil [98361 98394])
            ("edebug-outside-match-data" variable nil nil [98485 98519])
            ("edebug-backtrace-buffer" variable nil nil [98551 98583])
            ("edebug-inside-windows" variable nil nil [98619 98649])
            ("edebug-interactive-p" variable nil nil [98650 98679])
            ("edebug--recursive-edit" function (:arguments ("arg-mode")) nil [98681 101803])
            ("edebug-arrow-alist" variable
               (:constant-flag t
                :default-value (quote ((Continue-fast . "=") (Trace-fast . "-") (continue . ">") (trace . "->") (step . "=>") (next . "=>") (go . "<>") (Go-nonstop . ".."))))
                nil [101837 102090])
            ("edebug-overlay-arrow" function nil nil [102092 102522])
            ("edebug-toggle-save-all-windows" function (:user-visible-flag t) nil [102525 103056])
            ("edebug-changing-windows" function (:arguments ("body")) nil [103058 103506])
            ("edebug-toggle-save-selected-window" function (:user-visible-flag t) nil [103508 104516])
            ("edebug-toggle-save-windows" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [104518 104802])
            ("edebug-where" function (:user-visible-flag t) nil [104804 105229])
            ("edebug-view-outside" function (:user-visible-flag t) nil [105231 105710])
            ("edebug-bounce-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [105713 106486])
            ("edebug-display-buffer-list" variable nil nil [106635 106738])
            ("edebug-display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [106741 107168])
            ("edebug-find-stop-point" function nil nil [107204 108358])
            ("edebug-next-breakpoint" function (:user-visible-flag t) nil [108361 109581])
            ("edebug-modify-breakpoint" function (:arguments ("flag" "condition" "temporary")) nil [109584 111014])
            ("edebug-set-breakpoint" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [111016 111204])
            ("edebug-unset-breakpoint" function (:user-visible-flag t) nil [111206 111331])
            ("edebug-set-global-break-condition" function
               (:user-visible-flag t
                :arguments ("expression"))
                nil [111334 111831])
            ("edebug-set-mode" function (:arguments ("mode" "shortmsg" "msg")) nil [111864 112274])
            ("defalias" code nil nil [112277 112331])
            ("edebug-step-mode" function (:user-visible-flag t) nil [112333 112476])
            ("edebug-next-mode" function (:user-visible-flag t) nil [112478 112626])
            ("edebug-go-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112628 112875])
            ("edebug-Go-nonstop-mode" function (:user-visible-flag t) nil [112877 113111])
            ("edebug-trace-mode" function (:user-visible-flag t) nil [113114 113308])
            ("edebug-Trace-fast-mode" function (:user-visible-flag t) nil [113310 113544])
            ("edebug-continue-mode" function (:user-visible-flag t) nil [113546 113760])
            ("edebug-Continue-fast-mode" function (:user-visible-flag t) nil [113762 114013])
            ("edebug-goto-here" function (:user-visible-flag t) nil [114146 114281])
            ("edebug-stop" function (:user-visible-flag t) nil [114284 114429])
            ("edebug-forward" function (:user-visible-flag t) nil [114433 114637])
            ("edebug-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114640 115030])
            ("edebug-step-out" function (:user-visible-flag t) nil [115032 115748])
            ("edebug-instrument-function" function (:arguments ("func")) nil [115750 117357])
            ("edebug-instrument-callee" function (:user-visible-flag t) nil [117359 118158])
            ("edebug-step-in" function (:user-visible-flag t) nil [118161 118589])
            ("edebug-on-entry" function
               (:user-visible-flag t
                :arguments ("function" "flag"))
                nil [118591 118949])
            ("cancel-edebug-on-entry" function (:arguments ("function")) nil [118951 119070])
            ("advice-add" code nil nil [119074 119134])
            ("edebug--debug-on-entry" function (:arguments ("orig" "function")) nil [119202 119474])
            ("edebug-top-level-nonstop" function (:user-visible-flag t) nil [119477 119710])
            ("edebug-initial-mode-alist" variable
               (:constant-flag t
                :default-value (quote ((edebug-step-mode . step) (edebug-next-mode . next) (edebug-trace-mode . trace) (edebug-Trace-fast-mode . Trace-fast) (edebug-go-mode . go) (edebug-continue-mode . continue) (edebug-Continue-fast-mode . Continue-fast) (edebug-Go-nonstop-mode . Go-nonstop))))
                nil [119844 120231])
            ("edebug-mode-map" variable nil nil [120233 120257])
            ("edebug-set-initial-mode" function (:user-visible-flag t) nil [120291 121027])
            ("edebug-outside-excursion" function (:arguments ("body")) nil [121060 122902])
            ("edebug-eval" function (:arguments ("expr")) nil [122904 122970])
            ("edebug-safe-eval" function (:arguments ("expr")) nil [122972 123273])
            ("edebug-report-error" function (:arguments ("value")) nil [123290 123790])
            ("print-readably" variable nil nil [123792 123815])
            ("edebug-safe-prin1-to-string" function (:arguments ("value")) nil [123950 124265])
            ("edebug-compute-previous-result" function (:arguments ("previous-value")) nil [124267 124564])
            ("edebug-previous-result" function (:user-visible-flag t) nil [124566 124686])
            ("defalias" code nil nil [124714 124769])
            ("defalias" code nil nil [124770 124812])
            ("defalias" code nil nil [124813 124849])
            ("edebug-eval-expression" function
               (:user-visible-flag t
                :arguments ("expr"))
                nil [124851 125339])
            ("edebug-eval-last-sexp" function (:user-visible-flag t) nil [125341 125521])
            ("edebug-eval-print-last-sexp" function (:user-visible-flag t) nil [125523 125980])
            ("edebug-inhibit-emacs-lisp-mode-bindings" variable nil nil [126005 126222])
            ("define-obsolete-variable-alias" code nil nil [126224 126335])
            ("unless" code nil nil [126393 126822])
            ("edebug-mode-map" variable (:default-value (let ((map (copy-keymap emacs-lisp-mode-map))) (define-key map " " (quote edebug-step-mode)) (define-key map "n" (quote edebug-next-mode)) (define-key map "g" (quote edebug-go-mode)) (define-key map "G" (quote edebug-Go-nonstop-mode)) (define-key map "t" (quote edebug-trace-mode)) (define-key map "T" (quote edebug-Trace-fast-mode)) (define-key map "c" (quote edebug-continue-mode)) (define-key map "C" (quote edebug-Continue-fast-mode)) (define-key map "f" (quote edebug-forward-sexp)) (define-key map "h" (quote edebug-goto-here)) (define-key map "I" (quote edebug-instrument-callee)) (define-key map "i" (quote edebug-step-in)) (define-key map "o" (quote edebug-step-out)) (define-key map "q" (quote top-level)) (define-key map "Q" (quote edebug-top-level-nonstop)) (define-key map "a" (quote abort-recursive-edit)) (define-key map "S" (quote edebug-stop)) (define-key map "b" (quote edebug-set-breakpoint)) (define-key map "u" (quote edebug-unset-breakpoint)) (define-key map "B" (quote edebug-next-breakpoint)) (define-key map "x" (quote edebug-set-conditional-breakpoint)) (define-key map "X" (quote edebug-set-global-break-condition)) (define-key map "r" (quote edebug-previous-result)) (define-key map "e" (quote edebug-eval-expression)) (define-key map "" (quote edebug-eval-last-sexp)) (define-key map "E" (quote edebug-visit-eval-list)) (define-key map "w" (quote edebug-where)) (define-key map "v" (quote edebug-view-outside)) (define-key map "p" (quote edebug-bounce-point)) (define-key map "P" (quote edebug-view-outside)) (define-key map "W" (quote edebug-toggle-save-windows)) (define-key map "?" (quote edebug-help)) (define-key map "d" (quote edebug-backtrace)) (define-key map "-" (quote negative-argument)) (define-key map "=" (quote edebug-temp-display-freq-count)) (define-key map "" (quote edebug-step-mode)) (define-key map "" (quote edebug-next-mode)) (define-key map "" (quote edebug-go-mode)) (define-key map " " (quote edebug-set-breakpoint)) (define-key map "" (quote edebug-unset-breakpoint)) (define-key map "" (lambda nil (interactive) (edebug-set-breakpoint t))) (define-key map "" (quote edebug-where)) map)) nil [126824 129190])
            ("global-edebug-prefix" variable (:default-value "X") nil [129331 129437])
            ("global-edebug-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote edebug-step-mode)) (define-key map "g" (quote edebug-go-mode)) (define-key map "G" (quote edebug-Go-nonstop-mode)) (define-key map "t" (quote edebug-trace-mode)) (define-key map "T" (quote edebug-Trace-fast-mode)) (define-key map "c" (quote edebug-continue-mode)) (define-key map "C" (quote edebug-Continue-fast-mode)) (define-key map "b" (quote edebug-set-breakpoint)) (define-key map "u" (quote edebug-unset-breakpoint)) (define-key map "x" (quote edebug-set-conditional-breakpoint)) (define-key map "X" (quote edebug-set-global-break-condition)) (define-key map "w" (quote edebug-where)) (define-key map "W" (quote edebug-toggle-save-windows)) (define-key map "q" (quote top-level)) (define-key map "Q" (quote edebug-top-level-nonstop)) (define-key map "a" (quote abort-recursive-edit)) (define-key map "=" (quote edebug-display-freq-count)) map)) nil [129439 130464])
            ("global-unset-key" code nil nil [130466 130505])
            ("global-set-key" code nil nil [130506 130561])
            ("edebug-help" function (:user-visible-flag t) nil [130564 130665])
            ("edebug--mode-saved-vars" variable nil nil [130667 130703])
            ("define-minor-mode" code nil nil [130705 132637])
            ("edebug-kill-buffer" function nil nil [132639 132787])
            ("edebug-eval-result-list" function nil nil [132890 133169])
            ("edebug-eval-display-list" function (:arguments ("eval-result-list")) nil [133171 133638])
            ("edebug-create-eval-buffer" function nil nil [133640 133842])
            ("edebug-eval-display" function (:arguments ("eval-result-list")) nil [133964 134233])
            ("edebug-eval-redisplay" function nil nil [134235 134491])
            ("edebug-visit-eval-list" function (:user-visible-flag t) nil [134493 134667])
            ("edebug-update-eval-list" function (:user-visible-flag t) nil [134670 135363])
            ("edebug-delete-eval-item" function (:user-visible-flag t) nil [135366 135705])
            ("edebug-eval-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map lisp-interaction-mode-map) (define-key map "" (quote edebug-where)) (define-key map "" (quote edebug-delete-eval-item)) (define-key map "" (quote edebug-update-eval-list)) (define-key map "" (quote edebug-eval-last-sexp)) (define-key map "
" (quote edebug-eval-print-last-sexp)) map)) nil [135709 136178])
            ("put" code nil nil [136180 136224])
            ("define-derived-mode" code nil nil [136226 136743])
            ("edebug" function (:arguments ("arg-mode" "args")) nil [137072 138068])
            ("edebug-backtrace" function (:user-visible-flag t) nil [138071 139427])
            ("edebug-trace-display" function (:arguments ("buf-name" "fmt" "args")) nil [139450 140533])
            ("edebug-trace" function (:arguments ("fmt" "args")) nil [140536 140711])
            ("edebug-display-freq-count" function (:user-visible-flag t) nil [140892 143285])
            ("edebug-temp-display-freq-count" function (:user-visible-flag t) nil [143426 143906])
            ("edebug-toggle" function (:arguments ("variable")) nil [143921 144054])
            ("easymenu" include nil nil [144173 144192])
            ("edebug-mode-menus" variable
               (:constant-flag t
                :default-value (quote ("Edebug" ["Stop" edebug-stop t] ["Step" edebug-step-mode t] ["Next" edebug-next-mode t] ["Trace" edebug-trace-mode t] ["Trace Fast" edebug-Trace-fast-mode t] ["Continue" edebug-continue-mode t] ["Continue Fast" edebug-Continue-fast-mode t] ["Go" edebug-go-mode t] ["Go Nonstop" edebug-Go-nonstop-mode t] "----" ["Help" edebug-help t] ["Abort" abort-recursive-edit t] ["Quit to Top Level" top-level t] ["Quit Nonstop" edebug-top-level-nonstop t] "----" ("Jumps" ["Forward Sexp" edebug-forward-sexp t] ["Step In" edebug-step-in t] ["Step Out" edebug-step-out t] ["Goto Here" edebug-goto-here t]) ("Breaks" ["Set Breakpoint" edebug-set-breakpoint t] ["Unset Breakpoint" edebug-unset-breakpoint t] ["Set Conditional Breakpoint" edebug-set-conditional-breakpoint t] ["Set Global Break Condition" edebug-set-global-break-condition t] ["Show Next Breakpoint" edebug-next-breakpoint t]) ("Views" ["Where am I?" edebug-where t] ["Bounce to Current Point" edebug-bounce-point t] ["View Outside Windows" edebug-view-outside t] ["Previous Result" edebug-previous-result t] ["Show Backtrace" edebug-backtrace t] ["Display Freq Count" edebug-display-freq-count t]) ("Eval" ["Expression" edebug-eval-expression t] ["Last Sexp" edebug-eval-last-sexp t] ["Visit Eval List" edebug-visit-eval-list t]) ("Options" ["Edebug All Defs" edebug-all-defs :style toggle :selected edebug-all-defs] ["Edebug All Forms" edebug-all-forms :style toggle :selected edebug-all-forms] "----" ["Tracing" (edebug-toggle (quote edebug-trace)) :style toggle :selected edebug-trace] ["Test Coverage" (edebug-toggle (quote edebug-test-coverage)) :style toggle :selected edebug-test-coverage] ["Save Windows" edebug-toggle-save-windows :style toggle :selected edebug-save-windows] ["Save Point" (edebug-toggle (quote edebug-save-displayed-buffer-points)) :style toggle :selected edebug-save-displayed-buffer-points]))))
                nil [144194 146375])
            ("defalias" code nil nil [146412 146459])
            ("edebug-mark" function nil nil [146461 146494])
            ("edebug-set-conditional-breakpoint" function
               (:user-visible-flag t
                :arguments ("arg" "condition"))
                nil [146496 147589])
            ("easy-menu-define" code nil nil [147591 147670])
            ("edebug--require-cl-read" function nil nil [147781 147843])
            ("if" code nil nil [147845 148068])
            ("add-hook" code nil nil [148324 148414])
            ("edebug--called-interactively-skip" function (:arguments ("i" "frame1" "frame2")) nil [148415 148784])
            ("edebug-install-read-eval-functions" code nil nil [148938 148974])
            ("edebug-unload-function" function nil nil [148976 149532])
            ("edebug" package nil nil [149534 149551]))          
      :file "edebug.el"
      :pointmax 149576
      :fsize 149575
      :lastmodtime '(23525 29540 0 0)
      :unmatched-syntax '((punctuation 119201 . 119202) (punctuation 119073 . 119074) (punctuation 114432 . 114433) (punctuation 106740 . 106741) (punctuation 106634 . 106635) (punctuation 11204 . 11205) (punctuation 10777 . 10778) (close-paren 2010 . 2011) (symbol 1976 . 1993) (open-paren 1975 . 1976)))
    (semanticdb-table "semanticdb-table"
      :file "ring.el"
      :fsize 8343
      :lastmodtime '(23525 29543 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("trace" customgroup (:user-visible-flag t) nil [4199 4300])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [4317 4426])
            ("trace-level" variable nil nil [4476 4498])
            ("trace-advice-name" variable (:default-value (quote trace-function\ )) nil [4555 4599])
            ("trace-separator" variable (:default-value (format "%s
" (make-string 70 61))) nil [4665 4725])
            ("inhibit-trace" variable nil nil [4727 4807])
            ("trace-values" function (:arguments ("values")) nil [4824 5156])
            ("trace-entry-message" function (:arguments ("function" "level" "args" "context")) nil [5158 5817])
            ("trace-exit-message" function (:arguments ("function" "level" "value" "context")) nil [5819 6387])
            ("trace--timer" variable nil nil [6389 6414])
            ("trace--display-buffer" function (:arguments ("buf")) nil [6416 6742])
            ("trace-make-advice" function (:arguments ("function" "buffer" "background" "context")) nil [6745 8381])
            ("trace-function-internal" function (:arguments ("function" "buffer" "background" "context")) nil [8383 8688])
            ("trace-is-traced" function (:arguments ("function")) nil [8690 8771])
            ("trace--read-args" function (:arguments ("prompt")) nil [8773 10056])
            ("trace-function-foreground" function
               (:user-visible-flag t
                :arguments ("function" "buffer" "context"))
                nil [10073 11044])
            ("trace-function-background" function
               (:user-visible-flag t
                :arguments ("function" "buffer" "context"))
                nil [11061 11420])
            ("defalias" code nil nil [11437 11490])
            ("untrace-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [11492 11955])
            ("untrace-all" function (:user-visible-flag t) nil [11957 12072])
            ("trace" package nil nil [12074 12090]))          
      :file "trace.el"
      :pointmax 12115
      :fsize 12114
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tq-queue" function (:arguments ("tq")) nil [2131 2175])
            ("tq-process" function (:arguments ("tq")) nil [2176 2226])
            ("tq-buffer" function (:arguments ("tq")) nil [2227 2277])
            ("tq-queue-head-question" function (:arguments ("tq")) nil [2426 2487])
            ("tq-queue-head-regexp" function (:arguments ("tq")) nil [2573 2640])
            ("tq-queue-head-closure" function (:arguments ("tq")) nil [2693 2766])
            ("tq-queue-head-fn" function (:arguments ("tq")) nil [2846 2919])
            ("tq-queue-empty" function (:arguments ("tq")) nil [2957 3012])
            ("tq-create" function (:arguments ("process")) nil [3053 3580])
            ("tq-queue-add" function (:arguments ("tq" "question" "re" "closure" "fn")) nil [3582 3733])
            ("tq-queue-pop" function (:arguments ("tq")) nil [3735 3947])
            ("tq-enqueue" function (:arguments ("tq" "question" "regexp" "closure" "fn" "delay-question")) nil [3949 4796])
            ("tq-close" function (:arguments ("tq")) nil [4798 4946])
            ("tq-filter" function (:arguments ("tq" "string")) nil [4948 5211])
            ("tq-process-buffer" function (:arguments ("tq")) nil [5213 6154])
            ("tq" package nil nil [6156 6169]))          
      :file "tq.el"
      :pointmax 6191
      :fsize 6190
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("edebug" include nil nil [3214 3231])
            ("testcover" package nil nil [3232 3252])
            ("testcover" customgroup (:user-visible-flag t) nil [3429 3535])
            ("testcover-constants" variable (:default-value (quote (nil t emacs-build-time emacs-version emacs-major-version emacs-minor-version))) nil [3537 3812])
            ("testcover-1value-functions" variable (:default-value (quote (backward-char barf-if-buffer-read-only beginning-of-line buffer-disable-undo buffer-enable-undo current-global-map deactivate-mark delete-backward-char delete-char delete-region ding forward-char function* insert insert-and-inherit kill-all-local-variables kill-line kill-paragraph kill-region kill-sexp lambda minibuffer-complete-and-exit narrow-to-region next-line push-mark put-text-property run-hooks set-match-data signal substitute-key-definition suppress-keymap undo use-local-map while widen yank))) nil [3814 4751])
            ("testcover-noreturn-functions" variable (:default-value (quote (error noreturn throw signal))) nil [4753 5000])
            ("testcover-compose-functions" variable (:default-value (quote (+ - * / = append length list make-keymap make-sparse-keymap mapcar message propertize replace-regexp-in-string run-with-idle-timer set-buffer-modified-p))) nil [5002 5517])
            ("testcover-progn-functions" variable (:default-value (quote (define-key fset function goto-char mapc overlay-put progn save-current-buffer save-excursion save-match-data save-restriction save-selected-window save-window-excursion set set-default set-marker-insertion-type setq setq-default with-current-buffer with-output-to-temp-buffer with-syntax-table with-temp-buffer with-temp-file with-temp-message with-timeout))) nil [5519 6213])
            ("testcover-prog1-functions" variable (:default-value (quote (prog1 unwind-protect))) nil [6215 6520])
            ("testcover-potentially-1value-functions" variable (:default-value (quote (add-hook and beep or remove-hook unless when))) nil [6522 6787])
            ("testcover-nohits" variable
               (:default-value (quote ((t (:background "DeepPink2"))))
                :type "face")
                nil [6789 6927])
            ("testcover-1value" variable
               (:default-value (quote ((t (:background "Wheat2"))))
                :type "face")
                nil [6929 7083])
            ("testcover-module-constants" variable nil nil [7261 7384])
            ("testcover-module-1value-functions" variable nil nil [7386 7566])
            ("testcover-module-potentially-1value-functions" variable nil nil [7568 7759])
            ("testcover-vector" variable nil nil [7761 7853])
            ("testcover-start" function
               (:user-visible-flag t
                :arguments ("filename" "byte-compile"))
                nil [8065 8932])
            ("testcover-this-defun" function (:user-visible-flag t) nil [8949 9167])
            ("testcover--read" function (:arguments ("orig" "stream")) nil [9169 9555])
            ("testcover-reinstrument" function (:arguments ("form")) nil [9557 16568])
            ("testcover-reinstrument-list" function (:arguments ("list")) nil [16570 16996])
            ("testcover-reinstrument-compose" function (:arguments ("list" "fun")) nil [16998 17586])
            ("testcover-end" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [17588 17798])
            ("testcover-enter" function (:arguments ("testcover-sym" "testcover-fun")) nil [17985 18315])
            ("testcover-after" function (:arguments ("idx" "val")) nil [18317 19138])
            ("testcover-1value" function (:arguments ("idx" "val")) nil [19140 19810])
            ("testcover-mark" function (:arguments ("def")) nil [20032 21526])
            ("testcover-mark-all" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [21528 21891])
            ("testcover-unmark-all" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [21893 22141])
            ("testcover-next-mark" function (:user-visible-flag t) nil [22176 22349]))          
      :file "testcover.el"
      :pointmax 22378
      :fsize 22377
      :lastmodtime '(23525 29544 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
