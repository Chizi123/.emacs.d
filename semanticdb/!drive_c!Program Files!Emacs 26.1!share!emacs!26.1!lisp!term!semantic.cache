;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2247 2264])
            ("frame" include nil nil [2266 2282])
            ("mouse" include nil nil [2283 2299])
            ("scroll-bar" include nil nil [2300 2321])
            ("faces" include nil nil [2322 2338])
            ("select" include nil nil [2339 2356])
            ("menu-bar" include nil nil [2357 2376])
            ("dnd" include nil nil [2377 2391])
            ("w32-vars" include nil nil [2392 2411])
            ("define-obsolete-function-alias" code nil nil [2527 2598])
            ("declare-function" code nil nil [2599 2700])
            ("define-obsolete-function-alias" code nil nil [2701 2772])
            ("w32-color-map" variable nil nil [2774 2796])
            ("make-obsolete" code nil nil [2820 2869])
            ("declare-function" code nil nil [2871 2921])
            ("declare-function" code nil nil [2922 2968])
            ("declare-function" code nil nil [2970 3069])
            ("if" code nil nil [3144 3194])
            ("w32-handle-dropped-file" function (:arguments ("window" "file-name")) nil [3482 4325])
            ("w32-drag-n-drop" function
               (:user-visible-flag t
                :arguments ("event" "new-frame"))
                nil [4327 5107])
            ("w32-drag-n-drop-other-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [5109 5370])
            ("global-set-key" code nil nil [5403 5450])
            ("global-set-key" code nil nil [5451 5512])
            ("global-set-key" code nil nil [5713 5755])
            ("x-resource-name" variable nil nil [5757 5781])
            ("w32-menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [5903 6633])
            ("w32-standard-fontset-spec" variable (:default-value "-*-Courier New-normal-r-*-*-13-*-*-*-c-*-fontset-standard") nil [6746 7121])
            ("w32-win-suspend-error" function nil nil [7123 7269])
            ("dynamic-library-alist" variable nil nil [7271 7301])
            ("libpng-version" variable nil nil [7302 7325])
            ("libgif-version" variable nil nil [7370 7393])
            ("libjpeg-version" variable nil nil [7394 7418])
            ("libgnutls-version" variable nil nil [7420 7446])
            ("setq" code nil nil [7523 10375])
            ("w32-initialized" variable nil nil [10399 10486])
            ("declare-function" code nil nil [10488 10597])
            ("declare-function" code nil nil [10598 10652])
            ("declare-function" code nil nil [10653 10779])
            ("declare-function" code nil nil [10780 10842])
            ("declare-function" code nil nil [10843 10951])
            ("declare-function" code nil nil [10952 11004])
            ("declare-function" code nil nil [11005 11059])
            ("x-command-line-resources" variable nil nil [11060 11093])
            ("cl-defmethod" code nil nil [11095 14655])
            ("add-to-list" code nil nil [14657 14713])
            ("cl-defmethod" code nil nil [14714 14808])
            ("cl-defmethod" code nil nil [14810 14923])
            ("declare-function" code nil nil [14942 15028])
            ("declare-function" code nil nil [15029 15084])
            ("declare-function" code nil nil [15085 15140])
            ("w32--set-selection" function (:arguments ("type" "value")) nil [15185 15380])
            ("w32--get-selection" function (:arguments ("type" "data-type")) nil [15382 15833])
            ("w32--selection-owner-p" function (:arguments ("selection")) nil [15835 15978])
            ("cl-defmethod" code nil nil [15980 16137])
            ("cl-defmethod" code nil nil [16139 16304])
            ("cl-defmethod" code nil nil [16306 16473])
            ("cl-defmethod" code nil nil [16475 16644])
            ("when" code nil nil [16646 17557])
            ("global-set-key" code nil nil [17712 17746])
            ("global-set-key" code nil nil [17747 17781])
            ("declare-function" code nil nil [17783 17850])
            ("w32-version" function nil nil [17852 18036])
            ("w32-using-nt" function nil nil [18038 18195])
            ("w32-win" package nil nil [18197 18215])
            ("term/w32-win" package nil nil [18216 18239]))          
      :file "w32-win.el"
      :pointmax 18266
      :fsize 18265
      :lastmodtime '(23525 29606 0 0)
      :unmatched-syntax '((close-paren 2264 . 2265) (symbol 2229 . 2246) (open-paren 2228 . 2229)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("x-alternatives-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [M-backspace] [134217855]) (define-key map [M-delete] [134217855]) (define-key map [M-tab] [134217737]) (define-key map [M-linefeed] [134217738]) (define-key map [M-clear] [134217740]) (define-key map [M-return] [134217741]) (define-key map [M-escape] [134217755]) (unless (featurep (quote ns)) (define-key map [iso-lefttab] [backtab]) (define-key map [S-iso-lefttab] [backtab])) (and (or (eq system-type (quote windows-nt)) (featurep (quote ns))) (define-key map [S-tab] [backtab])) map)) nil [911 1641])
            ("x-setup-function-keys" function (:arguments ("frame")) nil [1643 3196])
            ("x-invocation-args" variable nil nil [3198 3224])
            ("x-command-line-resources" variable nil nil [3226 3263])
            ("x-handle-switch" function (:arguments ("switch" "numeric")) nil [3331 3662])
            ("x-handle-numeric-switch" function (:arguments ("switch")) nil [3712 3781])
            ("x-handle-initial-switch" function (:arguments ("switch")) nil [3834 4083])
            ("x-handle-iconic" function (:arguments ("_switch")) nil [4134 4245])
            ("x-handle-xrm-switch" function (:arguments ("switch")) nil [4274 4589])
            ("declare-function" code nil nil [4591 4645])
            ("x-handle-geometry" function (:arguments ("_switch")) nil [4677 5396])
            ("x-resource-name" variable nil nil [5398 5422])
            ("x-handle-name-switch" function (:arguments ("switch")) nil [5557 5836])
            ("x-display-name" variable nil nil [5838 6020])
            ("x-handle-display" function (:arguments ("_switch")) nil [6022 6454])
            ("x-handle-args" function (:arguments ("args")) nil [6456 8525])
            ("declare-function" code nil nil [9048 9109])
            ("x-colors" variable (:default-value (if (featurep (quote ns)) (ns-list-colors) (purecopy (quote ("gray100" "grey100" "gray99" "grey99" "gray98" "grey98" "gray97" "grey97" "gray96" "grey96" "gray95" "grey95" "gray94" "grey94" "gray93" "grey93" "gray92" "grey92" "gray91" "grey91" "gray90" "grey90" "gray89" "grey89" "gray88" "grey88" "gray87" "grey87" "gray86" "grey86" "gray85" "grey85" "gray84" "grey84" "gray83" "grey83" "gray82" "grey82" "gray81" "grey81" "gray80" "grey80" "gray79" "grey79" "gray78" "grey78" "gray77" "grey77" "gray76" "grey76" "gray75" "grey75" "gray74" "grey74" "gray73" "grey73" "gray72" "grey72" "gray71" "grey71" "gray70" "grey70" "gray69" "grey69" "gray68" "grey68" "gray67" "grey67" "gray66" "grey66" "gray65" "grey65" "gray64" "grey64" "gray63" "grey63" "gray62" "grey62" "gray61" "grey61" "gray60" "grey60" "gray59" "grey59" "gray58" "grey58" "gray57" "grey57" "gray56" "grey56" "gray55" "grey55" "gray54" "grey54" "gray53" "grey53" "gray52" "grey52" "gray51" "grey51" "gray50" "grey50" "gray49" "grey49" "gray48" "grey48" "gray47" "grey47" "gray46" "grey46" "gray45" "grey45" "gray44" "grey44" "gray43" "grey43" "gray42" "grey42" "gray41" "grey41" "gray40" "grey40" "gray39" "grey39" "gray38" "grey38" "gray37" "grey37" "gray36" "grey36" "gray35" "grey35" "gray34" "grey34" "gray33" "grey33" "gray32" "grey32" "gray31" "grey31" "gray30" "grey30" "gray29" "grey29" "gray28" "grey28" "gray27" "grey27" "gray26" "grey26" "gray25" "grey25" "gray24" "grey24" "gray23" "grey23" "gray22" "grey22" "gray21" "grey21" "gray20" "grey20" "gray19" "grey19" "gray18" "grey18" "gray17" "grey17" "gray16" "grey16" "gray15" "grey15" "gray14" "grey14" "gray13" "grey13" "gray12" "grey12" "gray11" "grey11" "gray10" "grey10" "gray9" "grey9" "gray8" "grey8" "gray7" "grey7" "gray6" "grey6" "gray5" "grey5" "gray4" "grey4" "gray3" "grey3" "gray2" "grey2" "gray1" "grey1" "gray0" "grey0" "LightPink1" "LightPink2" "LightPink3" "LightPink4" "pink1" "pink2" "pink3" "pink4" "PaleVioletRed1" "PaleVioletRed2" "PaleVioletRed3" "PaleVioletRed4" "LavenderBlush1" "LavenderBlush2" "LavenderBlush3" "LavenderBlush4" "VioletRed1" "VioletRed2" "VioletRed3" "VioletRed4" "HotPink1" "HotPink2" "HotPink3" "HotPink4" "DeepPink1" "DeepPink2" "DeepPink3" "DeepPink4" "maroon1" "maroon2" "maroon3" "maroon4" "orchid1" "orchid2" "orchid3" "orchid4" "plum1" "plum2" "plum3" "plum4" "thistle1" "thistle2" "thistle3" "thistle4" "MediumOrchid1" "MediumOrchid2" "MediumOrchid3" "MediumOrchid4" "DarkOrchid1" "DarkOrchid2" "DarkOrchid3" "DarkOrchid4" "purple1" "purple2" "purple3" "purple4" "MediumPurple1" "MediumPurple2" "MediumPurple3" "MediumPurple4" "SlateBlue1" "SlateBlue2" "SlateBlue3" "SlateBlue4" "RoyalBlue1" "RoyalBlue2" "RoyalBlue3" "RoyalBlue4" "LightSteelBlue1" "LightSteelBlue2" "LightSteelBlue3" "LightSteelBlue4" "SlateGray1" "SlateGray2" "SlateGray3" "SlateGray4" "DodgerBlue1" "DodgerBlue2" "DodgerBlue3" "DodgerBlue4" "SteelBlue1" "SteelBlue2" "SteelBlue3" "SteelBlue4" "SkyBlue1" "SkyBlue2" "SkyBlue3" "SkyBlue4" "LightSkyBlue1" "LightSkyBlue2" "LightSkyBlue3" "LightSkyBlue4" "LightBlue1" "LightBlue2" "LightBlue3" "LightBlue4" "CadetBlue1" "CadetBlue2" "CadetBlue3" "CadetBlue4" "azure1" "azure2" "azure3" "azure4" "LightCyan1" "LightCyan2" "LightCyan3" "LightCyan4" "PaleTurquoise1" "PaleTurquoise2" "PaleTurquoise3" "PaleTurquoise4" "DarkSlateGray1" "DarkSlateGray2" "DarkSlateGray3" "DarkSlateGray4" "aquamarine1" "aquamarine2" "aquamarine3" "aquamarine4" "SeaGreen1" "SeaGreen2" "SeaGreen3" "SeaGreen4" "honeydew1" "honeydew2" "honeydew3" "honeydew4" "DarkSeaGreen1" "DarkSeaGreen2" "DarkSeaGreen3" "DarkSeaGreen4" "PaleGreen1" "PaleGreen2" "PaleGreen3" "PaleGreen4" "DarkOliveGreen1" "DarkOliveGreen2" "DarkOliveGreen3" "DarkOliveGreen4" "OliveDrab1" "OliveDrab2" "OliveDrab3" "OliveDrab4" "ivory1" "ivory2" "ivory3" "ivory4" "LightYellow1" "LightYellow2" "LightYellow3" "LightYellow4" "khaki1" "khaki2" "khaki3" "khaki4" "LemonChiffon1" "LemonChiffon2" "LemonChiffon3" "LemonChiffon4" "LightGoldenrod1" "LightGoldenrod2" "LightGoldenrod3" "LightGoldenrod4" "cornsilk1" "cornsilk2" "cornsilk3" "cornsilk4" "goldenrod1" "goldenrod2" "goldenrod3" "goldenrod4" "DarkGoldenrod1" "DarkGoldenrod2" "DarkGoldenrod3" "DarkGoldenrod4" "wheat1" "wheat2" "wheat3" "wheat4" "NavajoWhite1" "NavajoWhite2" "NavajoWhite3" "NavajoWhite4" "burlywood1" "burlywood2" "burlywood3" "burlywood4" "AntiqueWhite1" "AntiqueWhite2" "AntiqueWhite3" "AntiqueWhite4" "bisque1" "bisque2" "bisque3" "bisque4" "tan1" "tan2" "tan3" "tan4" "PeachPuff1" "PeachPuff2" "PeachPuff3" "PeachPuff4" "seashell1" "seashell2" "seashell3" "seashell4" "chocolate1" "chocolate2" "chocolate3" "chocolate4" "sienna1" "sienna2" "sienna3" "sienna4" "LightSalmon1" "LightSalmon2" "LightSalmon3" "LightSalmon4" "salmon1" "salmon2" "salmon3" "salmon4" "coral1" "coral2" "coral3" "coral4" "tomato1" "tomato2" "tomato3" "tomato4" "MistyRose1" "MistyRose2" "MistyRose3" "MistyRose4" "snow1" "snow2" "snow3" "snow4" "RosyBrown1" "RosyBrown2" "RosyBrown3" "RosyBrown4" "IndianRed1" "IndianRed2" "IndianRed3" "IndianRed4" "firebrick1" "firebrick2" "firebrick3" "firebrick4" "brown1" "brown2" "brown3" "brown4" "magenta1" "magenta2" "magenta3" "magenta4" "blue1" "blue2" "blue3" "blue4" "DeepSkyBlue1" "DeepSkyBlue2" "DeepSkyBlue3" "DeepSkyBlue4" "turquoise1" "turquoise2" "turquoise3" "turquoise4" "cyan1" "cyan2" "cyan3" "cyan4" "SpringGreen1" "SpringGreen2" "SpringGreen3" "SpringGreen4" "green1" "green2" "green3" "green4" "chartreuse1" "chartreuse2" "chartreuse3" "chartreuse4" "yellow1" "yellow2" "yellow3" "yellow4" "gold1" "gold2" "gold3" "gold4" "orange1" "orange2" "orange3" "orange4" "DarkOrange1" "DarkOrange2" "DarkOrange3" "DarkOrange4" "OrangeRed1" "OrangeRed2" "OrangeRed3" "OrangeRed4" "red1" "red2" "red3" "red4" "lavender blush" "LavenderBlush" "ghost white" "GhostWhite" "lavender" "alice blue" "AliceBlue" "azure" "light cyan" "LightCyan" "mint cream" "MintCream" "honeydew" "ivory" "light goldenrod yellow" "LightGoldenrodYellow" "light yellow" "LightYellow" "beige" "floral white" "FloralWhite" "old lace" "OldLace" "blanched almond" "BlanchedAlmond" "moccasin" "papaya whip" "PapayaWhip" "bisque" "antique white" "AntiqueWhite" "linen" "peach puff" "PeachPuff" "seashell" "misty rose" "MistyRose" "snow" "light pink" "LightPink" "pink" "hot pink" "HotPink" "deep pink" "DeepPink" "maroon" "pale violet red" "PaleVioletRed" "violet red" "VioletRed" "medium violet red" "MediumVioletRed" "violet" "plum" "thistle" "orchid" "medium orchid" "MediumOrchid" "dark orchid" "DarkOrchid" "purple" "blue violet" "BlueViolet" "medium purple" "MediumPurple" "light slate blue" "LightSlateBlue" "medium slate blue" "MediumSlateBlue" "slate blue" "SlateBlue" "dark slate blue" "DarkSlateBlue" "midnight blue" "MidnightBlue" "navy" "navy blue" "NavyBlue" "dark blue" "DarkBlue" "light steel blue" "LightSteelBlue" "cornflower blue" "CornflowerBlue" "dodger blue" "DodgerBlue" "royal blue" "RoyalBlue" "light slate gray" "light slate grey" "LightSlateGray" "LightSlateGrey" "slate gray" "slate grey" "SlateGray" "SlateGrey" "dark slate gray" "dark slate grey" "DarkSlateGray" "DarkSlateGrey" "steel blue" "SteelBlue" "cadet blue" "CadetBlue" "light sky blue" "LightSkyBlue" "sky blue" "SkyBlue" "light blue" "LightBlue" "powder blue" "PowderBlue" "pale turquoise" "PaleTurquoise" "turquoise" "medium turquoise" "MediumTurquoise" "dark turquoise" "DarkTurquoise" "dark cyan" "DarkCyan" "aquamarine" "medium aquamarine" "MediumAquamarine" "light sea green" "LightSeaGreen" "medium sea green" "MediumSeaGreen" "sea green" "SeaGreen" "dark sea green" "DarkSeaGreen" "pale green" "PaleGreen" "lime green" "LimeGreen" "dark green" "DarkGreen" "forest green" "ForestGreen" "light green" "LightGreen" "green yellow" "GreenYellow" "yellow green" "YellowGreen" "olive drab" "OliveDrab" "dark olive green" "DarkOliveGreen" "lemon chiffon" "LemonChiffon" "khaki" "dark khaki" "DarkKhaki" "cornsilk" "pale goldenrod" "PaleGoldenrod" "light goldenrod" "LightGoldenrod" "goldenrod" "dark goldenrod" "DarkGoldenrod" "wheat" "navajo white" "NavajoWhite" "tan" "burlywood" "sandy brown" "SandyBrown" "peru" "chocolate" "saddle brown" "SaddleBrown" "sienna" "rosy brown" "RosyBrown" "dark salmon" "DarkSalmon" "coral" "tomato" "light salmon" "LightSalmon" "salmon" "light coral" "LightCoral" "indian red" "IndianRed" "firebrick" "brown" "dark red" "DarkRed" "magenta" "dark magenta" "DarkMagenta" "dark violet" "DarkViolet" "medium blue" "MediumBlue" "blue" "deep sky blue" "DeepSkyBlue" "cyan" "medium spring green" "MediumSpringGreen" "spring green" "SpringGreen" "green" "lawn green" "LawnGreen" "chartreuse" "yellow" "gold" "orange" "dark orange" "DarkOrange" "orange red" "OrangeRed" "red" "white" "white smoke" "WhiteSmoke" "gainsboro" "light gray" "light grey" "LightGray" "LightGrey" "gray" "grey" "dark gray" "dark grey" "DarkGray" "DarkGrey" "dim gray" "dim grey" "DimGray" "DimGrey" "black"))))) nil [9111 19362])
            ("w32-color-map" variable nil nil [19364 19386])
            ("xw-defined-colors" function (:arguments ("frame")) nil [19388 19858])
            ("term/common-win" package nil nil [19860 19886]))          
      :file "common-win.el"
      :pointmax 19916
      :fsize 19915
      :lastmodtime '(23525 29604 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!Emacs 26.1!share!emacs!26.1!lisp!term!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
